Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-59 -59 -8 -59] -59] [[-53 -53 -12 -53] -53] [[70 -37 -37 -37] -37] [[3 3 45 3] 3] [[38 38 38 58] 38] [[-92 -92 -46 -92] -92] [[-3 18 18 18] -3] [[32 -67 -67 -67] -67] [[46 46 46 24] 24] [[50 -47 -47 -47] -47] [(-31 -31 -31 -31) -31] [(34 34 34 34) 34] [(62 62 62 62) 62] [(-78 -78 -78 -78) -78] [(98 98 98 98) 98] [(90 87 57 8) 8] [(64 83 21 32) 21] [(0 33 13 65) 0] [(53 52 91 60) 52] [(51 45 49 21) 21] [(10 7 99 81) 7] [(89 54 41 40) 40] [(36 10 40 52) 10] [(65 88 40 29) 29] [(93 34 23 18) 18] [(3 96 96 59) 3] [(72 69 82 62) 62] [(52 36 47 34) 34] [(71 76 60 17) 17] [(77 3 64 60) 3] [(47 0 76 12) 0] [(28 58 65 48) 28] [(100 30 75 21) 21] [(91 71 7 56) 7] [(62 45 56 83) 45] [(-70 20 46 49) -70] [(-95 -1 3 -70) -95] [(-40 -5 -89 61) -89] [(23 34 59 60) 23] [(-29 44 -7 1) -29] [(-57 29 19 -21) -57] [(78 -30 78 -78) -78] [(80 -71 59 78) -71] [(78 91 -40 23) -40] [(-2 62 75 -97) -97] [(-10 -63 -28 -45) -63] [(-75 -83 -82 -23) -83] [(-92 98 96 49) -92] [(-40 1 -67 -51) -67] [(-33 62 5 -63) -63] [(31 39 -17 44) -17] [(40 79 -70 -100) -100] [(10 -94 36 -52) -94] [(-83 -12 43 100) -83] [(-92 -56 88 -60) -92] [(44 -99 77 4) -99] [(52 -47 -22 44) -47] [(-3 -33 79 98) -33] [(81 -16 81 89) -16] [(86 31 -86 100) -86] [(-11 9 -89 -93) -93] [(45 -4 -28 -79) -79] [(-28 82 80 8) -28] [(-38 -27 -59 25) -59] [(18 -68 59 -41) -68] [(26 22 26 74) 22] [(11 -61 -10 -66) -66] [(-98 -46 45 -79) -98] [(75 2 51 -44) -44] [(-44 28 -50 -25) -50] [(-29 -46 -86 -22) -86] [(-39 38 -40 -34) -40] [(-48 59 -71 -11) -71] [(-40 -69 25 37) -69] [(-63 -75 -58 -12) -75] [(64 80 75 93) 64] [(-14 43 -10 -10) -14] [(54 -7 -29 -82) -82] [(44 -1 -91 43) -91] [(-40 -43 52 -2) -43] [(92 -59 99 47) -59] [(84 -24 69 -44) -44] [(30 52 11 -23) -23] [(60 -2 70 -40) -40] [(50 -61 -7 57) -61] [(-55 -59 -32 55) -59] [(9 49 -63 -28) -63] [(-62 72 69 -10) -62] [(42 -24 -65 100) -65] [(-70 96 100 83) -70] [(10 88 5 -4) -4] [(-34 -24 -81 20) -81] [(-19 20 -7 -65) -65] [(-1 -8 -3 -48) -48] [(-99 -99 -31 -31) -99])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-59 -59 -8 -59] -59]
Train Case:   6 | Input/Output: [[-53 -53 -12 -53] -53]
Train Case:   7 | Input/Output: [[70 -37 -37 -37] -37]
Train Case:   8 | Input/Output: [[3 3 45 3] 3]
Train Case:   9 | Input/Output: [[38 38 38 58] 38]
Train Case:  10 | Input/Output: [[-92 -92 -46 -92] -92]
Train Case:  11 | Input/Output: [[-3 18 18 18] -3]
Train Case:  12 | Input/Output: [[32 -67 -67 -67] -67]
Train Case:  13 | Input/Output: [[46 46 46 24] 24]
Train Case:  14 | Input/Output: [[50 -47 -47 -47] -47]
Train Case:  15 | Input/Output: [(-31 -31 -31 -31) -31]
Train Case:  16 | Input/Output: [(34 34 34 34) 34]
Train Case:  17 | Input/Output: [(62 62 62 62) 62]
Train Case:  18 | Input/Output: [(-78 -78 -78 -78) -78]
Train Case:  19 | Input/Output: [(98 98 98 98) 98]
Train Case:  20 | Input/Output: [(90 87 57 8) 8]
Train Case:  21 | Input/Output: [(64 83 21 32) 21]
Train Case:  22 | Input/Output: [(0 33 13 65) 0]
Train Case:  23 | Input/Output: [(53 52 91 60) 52]
Train Case:  24 | Input/Output: [(51 45 49 21) 21]
Train Case:  25 | Input/Output: [(10 7 99 81) 7]
Train Case:  26 | Input/Output: [(89 54 41 40) 40]
Train Case:  27 | Input/Output: [(36 10 40 52) 10]
Train Case:  28 | Input/Output: [(65 88 40 29) 29]
Train Case:  29 | Input/Output: [(93 34 23 18) 18]
Train Case:  30 | Input/Output: [(3 96 96 59) 3]
Train Case:  31 | Input/Output: [(72 69 82 62) 62]
Train Case:  32 | Input/Output: [(52 36 47 34) 34]
Train Case:  33 | Input/Output: [(71 76 60 17) 17]
Train Case:  34 | Input/Output: [(77 3 64 60) 3]
Train Case:  35 | Input/Output: [(47 0 76 12) 0]
Train Case:  36 | Input/Output: [(28 58 65 48) 28]
Train Case:  37 | Input/Output: [(100 30 75 21) 21]
Train Case:  38 | Input/Output: [(91 71 7 56) 7]
Train Case:  39 | Input/Output: [(62 45 56 83) 45]
Train Case:  40 | Input/Output: [(-70 20 46 49) -70]
Train Case:  41 | Input/Output: [(-95 -1 3 -70) -95]
Train Case:  42 | Input/Output: [(-40 -5 -89 61) -89]
Train Case:  43 | Input/Output: [(23 34 59 60) 23]
Train Case:  44 | Input/Output: [(-29 44 -7 1) -29]
Train Case:  45 | Input/Output: [(-57 29 19 -21) -57]
Train Case:  46 | Input/Output: [(78 -30 78 -78) -78]
Train Case:  47 | Input/Output: [(80 -71 59 78) -71]
Train Case:  48 | Input/Output: [(78 91 -40 23) -40]
Train Case:  49 | Input/Output: [(-2 62 75 -97) -97]
Train Case:  50 | Input/Output: [(-10 -63 -28 -45) -63]
Train Case:  51 | Input/Output: [(-75 -83 -82 -23) -83]
Train Case:  52 | Input/Output: [(-92 98 96 49) -92]
Train Case:  53 | Input/Output: [(-40 1 -67 -51) -67]
Train Case:  54 | Input/Output: [(-33 62 5 -63) -63]
Train Case:  55 | Input/Output: [(31 39 -17 44) -17]
Train Case:  56 | Input/Output: [(40 79 -70 -100) -100]
Train Case:  57 | Input/Output: [(10 -94 36 -52) -94]
Train Case:  58 | Input/Output: [(-83 -12 43 100) -83]
Train Case:  59 | Input/Output: [(-92 -56 88 -60) -92]
Train Case:  60 | Input/Output: [(44 -99 77 4) -99]
Train Case:  61 | Input/Output: [(52 -47 -22 44) -47]
Train Case:  62 | Input/Output: [(-3 -33 79 98) -33]
Train Case:  63 | Input/Output: [(81 -16 81 89) -16]
Train Case:  64 | Input/Output: [(86 31 -86 100) -86]
Train Case:  65 | Input/Output: [(-11 9 -89 -93) -93]
Train Case:  66 | Input/Output: [(45 -4 -28 -79) -79]
Train Case:  67 | Input/Output: [(-28 82 80 8) -28]
Train Case:  68 | Input/Output: [(-38 -27 -59 25) -59]
Train Case:  69 | Input/Output: [(18 -68 59 -41) -68]
Train Case:  70 | Input/Output: [(26 22 26 74) 22]
Train Case:  71 | Input/Output: [(11 -61 -10 -66) -66]
Train Case:  72 | Input/Output: [(-98 -46 45 -79) -98]
Train Case:  73 | Input/Output: [(75 2 51 -44) -44]
Train Case:  74 | Input/Output: [(-44 28 -50 -25) -50]
Train Case:  75 | Input/Output: [(-29 -46 -86 -22) -86]
Train Case:  76 | Input/Output: [(-39 38 -40 -34) -40]
Train Case:  77 | Input/Output: [(-48 59 -71 -11) -71]
Train Case:  78 | Input/Output: [(-40 -69 25 37) -69]
Train Case:  79 | Input/Output: [(-63 -75 -58 -12) -75]
Train Case:  80 | Input/Output: [(64 80 75 93) 64]
Train Case:  81 | Input/Output: [(-14 43 -10 -10) -14]
Train Case:  82 | Input/Output: [(54 -7 -29 -82) -82]
Train Case:  83 | Input/Output: [(44 -1 -91 43) -91]
Train Case:  84 | Input/Output: [(-40 -43 52 -2) -43]
Train Case:  85 | Input/Output: [(92 -59 99 47) -59]
Train Case:  86 | Input/Output: [(84 -24 69 -44) -44]
Train Case:  87 | Input/Output: [(30 52 11 -23) -23]
Train Case:  88 | Input/Output: [(60 -2 70 -40) -40]
Train Case:  89 | Input/Output: [(50 -61 -7 57) -61]
Train Case:  90 | Input/Output: [(-55 -59 -32 55) -59]
Train Case:  91 | Input/Output: [(9 49 -63 -28) -63]
Train Case:  92 | Input/Output: [(-62 72 69 -10) -62]
Train Case:  93 | Input/Output: [(42 -24 -65 100) -65]
Train Case:  94 | Input/Output: [(-70 96 100 83) -70]
Train Case:  95 | Input/Output: [(10 88 5 -4) -4]
Train Case:  96 | Input/Output: [(-34 -24 -81 20) -81]
Train Case:  97 | Input/Output: [(-19 20 -7 -65) -65]
Train Case:  98 | Input/Output: [(-1 -8 -3 -48) -48]
Train Case:  99 | Input/Output: [(-99 -99 -31 -31) -99]
Test Case:   0 | Input/Output: [[72 72 72 33] 33]
Test Case:   1 | Input/Output: [[14 14 68 14] 14]
Test Case:   2 | Input/Output: [[-21 -94 -94 -94] -94]
Test Case:   3 | Input/Output: [[50 1 1 1] 1]
Test Case:   4 | Input/Output: [[64 58 58 58] 58]
Test Case:   5 | Input/Output: [[62 1 1 1] 1]
Test Case:   6 | Input/Output: [[-73 -73 -73 -98] -98]
Test Case:   7 | Input/Output: [[-10 -12 -10 -10] -12]
Test Case:   8 | Input/Output: [[-62 -62 -53 -62] -62]
Test Case:   9 | Input/Output: [[29 44 44 44] 29]
Test Case:  10 | Input/Output: [[-78 -30 -78 -78] -78]
Test Case:  11 | Input/Output: [[-63 14 -63 -63] -63]
Test Case:  12 | Input/Output: [[45 45 45 -7] -7]
Test Case:  13 | Input/Output: [[-7 0 0 0] -7]
Test Case:  14 | Input/Output: [[-48 -23 -48 -48] -48]
Test Case:  15 | Input/Output: [[-47 0 -47 -47] -47]
Test Case:  16 | Input/Output: [[64 56 64 64] 56]
Test Case:  17 | Input/Output: [[-62 6 -62 -62] -62]
Test Case:  18 | Input/Output: [[1 1 1 8] 1]
Test Case:  19 | Input/Output: [[-88 8 8 8] -88]
Test Case:  20 | Input/Output: [[95 95 -93 95] -93]
Test Case:  21 | Input/Output: [[-70 -49 -49 -49] -70]
Test Case:  22 | Input/Output: [[79 79 79 -72] -72]
Test Case:  23 | Input/Output: [[18 -29 -29 -29] -29]
Test Case:  24 | Input/Output: [[15 15 55 15] 15]
Test Case:  25 | Input/Output: [[-15 -94 -15 -15] -94]
Test Case:  26 | Input/Output: [[-6 -6 88 -6] -6]
Test Case:  27 | Input/Output: [[45 45 45 -95] -95]
Test Case:  28 | Input/Output: [[31 31 20 31] 20]
Test Case:  29 | Input/Output: [[70 70 49 70] 49]
Test Case:  30 | Input/Output: [[27 31 27 27] 27]
Test Case:  31 | Input/Output: [[0 98 0 0] 0]
Test Case:  32 | Input/Output: [[68 68 -52 68] -52]
Test Case:  33 | Input/Output: [[89 31 89 89] 31]
Test Case:  34 | Input/Output: [[46 -17 46 46] -17]
Test Case:  35 | Input/Output: [[89 89 45 89] 45]
Test Case:  36 | Input/Output: [[91 -19 -19 -19] -19]
Test Case:  37 | Input/Output: [[8 -11 8 8] -11]
Test Case:  38 | Input/Output: [[57 -79 -79 -79] -79]
Test Case:  39 | Input/Output: [[-76 77 -76 -76] -76]
Test Case:  40 | Input/Output: [[-44 -44 -92 -44] -92]
Test Case:  41 | Input/Output: [[18 65 65 65] 18]
Test Case:  42 | Input/Output: [[-16 -16 -84 -16] -84]
Test Case:  43 | Input/Output: [[-72 -54 -72 -72] -72]
Test Case:  44 | Input/Output: [[-55 -55 -55 60] -55]
Test Case:  45 | Input/Output: [[34 -72 34 34] -72]
Test Case:  46 | Input/Output: [[-85 -85 -85 38] -85]
Test Case:  47 | Input/Output: [[19 70 19 19] 19]
Test Case:  48 | Input/Output: [[64 64 10 64] 10]
Test Case:  49 | Input/Output: [[67 -77 -77 -77] -77]
Test Case:  50 | Input/Output: [[93 37 37 37] 37]
Test Case:  51 | Input/Output: [[-58 -58 38 -58] -58]
Test Case:  52 | Input/Output: [[-65 -4 -65 -65] -65]
Test Case:  53 | Input/Output: [[-78 54 -78 -78] -78]
Test Case:  54 | Input/Output: [[-81 87 87 87] -81]
Test Case:  55 | Input/Output: [[79 79 -46 79] -46]
Test Case:  56 | Input/Output: [[0 0 0 1] 0]
Test Case:  57 | Input/Output: [[13 13 -5 13] -5]
Test Case:  58 | Input/Output: [[-66 -66 -66 -100] -100]
Test Case:  59 | Input/Output: [[-61 -61 46 -61] -61]
Test Case:  60 | Input/Output: [[-74 -74 93 -74] -74]
Test Case:  61 | Input/Output: [[-30 -77 -77 -77] -77]
Test Case:  62 | Input/Output: [[12 12 12 97] 12]
Test Case:  63 | Input/Output: [[-2 32 -2 -2] -2]
Test Case:  64 | Input/Output: [[-27 -65 -27 -27] -65]
Test Case:  65 | Input/Output: [[62 62 27 62] 27]
Test Case:  66 | Input/Output: [[16 27 16 16] 16]
Test Case:  67 | Input/Output: [[-51 -51 53 -51] -51]
Test Case:  68 | Input/Output: [[37 37 91 37] 37]
Test Case:  69 | Input/Output: [[-16 -40 -16 -16] -40]
Test Case:  70 | Input/Output: [[71 71 71 54] 54]
Test Case:  71 | Input/Output: [[-44 30 -44 -44] -44]
Test Case:  72 | Input/Output: [[10 10 10 66] 10]
Test Case:  73 | Input/Output: [[61 -51 61 61] -51]
Test Case:  74 | Input/Output: [[-97 -97 -67 -97] -97]
Test Case:  75 | Input/Output: [[-72 -54 -72 -72] -72]
Test Case:  76 | Input/Output: [[23 23 73 23] 23]
Test Case:  77 | Input/Output: [[41 41 71 41] 41]
Test Case:  78 | Input/Output: [[88 88 8 88] 8]
Test Case:  79 | Input/Output: [[-66 -66 -66 26] -66]
Test Case:  80 | Input/Output: [[92 -8 92 92] -8]
Test Case:  81 | Input/Output: [[-91 -91 -91 11] -91]
Test Case:  82 | Input/Output: [[-65 26 26 26] -65]
Test Case:  83 | Input/Output: [[-96 48 -96 -96] -96]
Test Case:  84 | Input/Output: [[51 51 51 -21] -21]
Test Case:  85 | Input/Output: [[-41 -41 -83 -41] -83]
Test Case:  86 | Input/Output: [[-2 -2 -2 7] -2]
Test Case:  87 | Input/Output: [[-72 34 34 34] -72]
Test Case:  88 | Input/Output: [[-64 -98 -64 -64] -98]
Test Case:  89 | Input/Output: [[63 39 63 63] 39]
Test Case:  90 | Input/Output: [[4 4 17 4] 4]
Test Case:  91 | Input/Output: [[96 -52 96 96] -52]
Test Case:  92 | Input/Output: [[7 -35 -35 -35] -35]
Test Case:  93 | Input/Output: [[90 90 90 -49] -49]
Test Case:  94 | Input/Output: [[-56 -56 -56 -85] -85]
Test Case:  95 | Input/Output: [[94 94 94 12] 12]
Test Case:  96 | Input/Output: [[-79 -79 -79 25] -79]
Test Case:  97 | Input/Output: [[75 -4 -4 -4] -4]
Test Case:  98 | Input/Output: [[1 -31 -31 -31] -31]
Test Case:  99 | Input/Output: [[77 22 22 22] 22]
Test Case: 100 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 101 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 102 | Input/Output: [(14 14 14 14) 14]
Test Case: 103 | Input/Output: [(80 80 80 80) 80]
Test Case: 104 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 105 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 106 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 107 | Input/Output: [(95 95 95 95) 95]
Test Case: 108 | Input/Output: [(94 94 94 94) 94]
Test Case: 109 | Input/Output: [(9 9 9 9) 9]
Test Case: 110 | Input/Output: [(97 97 97 97) 97]
Test Case: 111 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 112 | Input/Output: [(91 91 91 91) 91]
Test Case: 113 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 114 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 115 | Input/Output: [(34 34 34 34) 34]
Test Case: 116 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 117 | Input/Output: [(15 15 15 15) 15]
Test Case: 118 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 119 | Input/Output: [(81 81 81 81) 81]
Test Case: 120 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 121 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 122 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 123 | Input/Output: [(25 25 25 25) 25]
Test Case: 124 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 125 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 126 | Input/Output: [(16 16 16 16) 16]
Test Case: 127 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 128 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 129 | Input/Output: [(84 84 84 84) 84]
Test Case: 130 | Input/Output: [(48 48 48 48) 48]
Test Case: 131 | Input/Output: [(33 33 33 33) 33]
Test Case: 132 | Input/Output: [(54 54 54 54) 54]
Test Case: 133 | Input/Output: [(16 16 16 16) 16]
Test Case: 134 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 135 | Input/Output: [(6 6 6 6) 6]
Test Case: 136 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 137 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 138 | Input/Output: [(79 79 79 79) 79]
Test Case: 139 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 140 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 141 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 142 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 143 | Input/Output: [(32 32 32 32) 32]
Test Case: 144 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 145 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 146 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 147 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 148 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 149 | Input/Output: [(46 46 46 46) 46]
Test Case: 150 | Input/Output: [(72 72 72 72) 72]
Test Case: 151 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 152 | Input/Output: [(49 49 49 49) 49]
Test Case: 153 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 154 | Input/Output: [(6 6 6 6) 6]
Test Case: 155 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 156 | Input/Output: [(66 66 66 66) 66]
Test Case: 157 | Input/Output: [(70 70 70 70) 70]
Test Case: 158 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 159 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 160 | Input/Output: [(27 27 27 27) 27]
Test Case: 161 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 162 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 163 | Input/Output: [(87 87 87 87) 87]
Test Case: 164 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 165 | Input/Output: [(46 46 46 46) 46]
Test Case: 166 | Input/Output: [(98 98 98 98) 98]
Test Case: 167 | Input/Output: [(91 91 91 91) 91]
Test Case: 168 | Input/Output: [(55 55 55 55) 55]
Test Case: 169 | Input/Output: [(90 90 90 90) 90]
Test Case: 170 | Input/Output: [(44 44 44 44) 44]
Test Case: 171 | Input/Output: [(3 3 3 3) 3]
Test Case: 172 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 173 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 174 | Input/Output: [(45 45 45 45) 45]
Test Case: 175 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 176 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 177 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 178 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 179 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 180 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 181 | Input/Output: [(28 28 28 28) 28]
Test Case: 182 | Input/Output: [(65 65 65 65) 65]
Test Case: 183 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 184 | Input/Output: [(27 27 27 27) 27]
Test Case: 185 | Input/Output: [(21 21 21 21) 21]
Test Case: 186 | Input/Output: [(24 24 24 24) 24]
Test Case: 187 | Input/Output: [(3 3 3 3) 3]
Test Case: 188 | Input/Output: [(30 30 30 30) 30]
Test Case: 189 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 190 | Input/Output: [(76 76 76 76) 76]
Test Case: 191 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 192 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 193 | Input/Output: [(67 67 67 67) 67]
Test Case: 194 | Input/Output: [(73 73 73 73) 73]
Test Case: 195 | Input/Output: [(16 16 16 16) 16]
Test Case: 196 | Input/Output: [(76 76 76 76) 76]
Test Case: 197 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 198 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 199 | Input/Output: [(52 52 52 52) 52]
Test Case: 200 | Input/Output: [(87 17 64 70) 17]
Test Case: 201 | Input/Output: [(99 5 48 55) 5]
Test Case: 202 | Input/Output: [(72 41 33 76) 33]
Test Case: 203 | Input/Output: [(27 91 52 77) 27]
Test Case: 204 | Input/Output: [(18 28 62 15) 15]
Test Case: 205 | Input/Output: [(28 78 62 20) 20]
Test Case: 206 | Input/Output: [(82 36 61 6) 6]
Test Case: 207 | Input/Output: [(78 70 63 30) 30]
Test Case: 208 | Input/Output: [(74 11 35 99) 11]
Test Case: 209 | Input/Output: [(16 72 56 99) 16]
Test Case: 210 | Input/Output: [(30 45 11 97) 11]
Test Case: 211 | Input/Output: [(56 91 82 2) 2]
Test Case: 212 | Input/Output: [(40 75 87 34) 34]
Test Case: 213 | Input/Output: [(76 53 93 58) 53]
Test Case: 214 | Input/Output: [(85 86 49 12) 12]
Test Case: 215 | Input/Output: [(42 96 51 17) 17]
Test Case: 216 | Input/Output: [(59 81 22 10) 10]
Test Case: 217 | Input/Output: [(21 65 99 85) 21]
Test Case: 218 | Input/Output: [(50 70 53 11) 11]
Test Case: 219 | Input/Output: [(77 48 8 44) 8]
Test Case: 220 | Input/Output: [(47 24 55 71) 24]
Test Case: 221 | Input/Output: [(16 49 25 73) 16]
Test Case: 222 | Input/Output: [(21 9 80 86) 9]
Test Case: 223 | Input/Output: [(94 22 2 30) 2]
Test Case: 224 | Input/Output: [(69 96 88 33) 33]
Test Case: 225 | Input/Output: [(58 82 46 67) 46]
Test Case: 226 | Input/Output: [(82 57 19 24) 19]
Test Case: 227 | Input/Output: [(78 19 84 66) 19]
Test Case: 228 | Input/Output: [(51 69 1 58) 1]
Test Case: 229 | Input/Output: [(29 96 56 48) 29]
Test Case: 230 | Input/Output: [(19 63 30 13) 13]
Test Case: 231 | Input/Output: [(83 74 35 99) 35]
Test Case: 232 | Input/Output: [(90 17 60 54) 17]
Test Case: 233 | Input/Output: [(29 16 4 20) 4]
Test Case: 234 | Input/Output: [(29 27 48 68) 27]
Test Case: 235 | Input/Output: [(77 70 90 84) 70]
Test Case: 236 | Input/Output: [(92 62 87 87) 62]
Test Case: 237 | Input/Output: [(91 45 14 76) 14]
Test Case: 238 | Input/Output: [(59 45 87 29) 29]
Test Case: 239 | Input/Output: [(60 46 71 91) 46]
Test Case: 240 | Input/Output: [(17 54 23 51) 17]
Test Case: 241 | Input/Output: [(77 82 11 49) 11]
Test Case: 242 | Input/Output: [(43 24 28 13) 13]
Test Case: 243 | Input/Output: [(10 45 26 81) 10]
Test Case: 244 | Input/Output: [(15 78 55 8) 8]
Test Case: 245 | Input/Output: [(48 85 9 59) 9]
Test Case: 246 | Input/Output: [(40 68 65 78) 40]
Test Case: 247 | Input/Output: [(29 79 63 10) 10]
Test Case: 248 | Input/Output: [(78 22 66 27) 22]
Test Case: 249 | Input/Output: [(74 95 76 90) 74]
Test Case: 250 | Input/Output: [(70 36 19 11) 11]
Test Case: 251 | Input/Output: [(57 21 88 80) 21]
Test Case: 252 | Input/Output: [(9 40 50 78) 9]
Test Case: 253 | Input/Output: [(44 41 26 34) 26]
Test Case: 254 | Input/Output: [(59 21 89 84) 21]
Test Case: 255 | Input/Output: [(17 56 14 71) 14]
Test Case: 256 | Input/Output: [(35 42 98 79) 35]
Test Case: 257 | Input/Output: [(81 87 38 90) 38]
Test Case: 258 | Input/Output: [(85 37 17 11) 11]
Test Case: 259 | Input/Output: [(87 31 27 64) 27]
Test Case: 260 | Input/Output: [(82 26 13 97) 13]
Test Case: 261 | Input/Output: [(99 61 97 86) 61]
Test Case: 262 | Input/Output: [(60 75 54 66) 54]
Test Case: 263 | Input/Output: [(6 58 51 75) 6]
Test Case: 264 | Input/Output: [(60 48 49 29) 29]
Test Case: 265 | Input/Output: [(96 50 22 41) 22]
Test Case: 266 | Input/Output: [(58 48 55 42) 42]
Test Case: 267 | Input/Output: [(64 80 1 38) 1]
Test Case: 268 | Input/Output: [(78 86 35 22) 22]
Test Case: 269 | Input/Output: [(84 78 13 6) 6]
Test Case: 270 | Input/Output: [(17 35 20 11) 11]
Test Case: 271 | Input/Output: [(13 99 90 10) 10]
Test Case: 272 | Input/Output: [(1 57 98 65) 1]
Test Case: 273 | Input/Output: [(28 68 96 63) 28]
Test Case: 274 | Input/Output: [(94 55 46 14) 14]
Test Case: 275 | Input/Output: [(50 65 72 11) 11]
Test Case: 276 | Input/Output: [(71 50 82 73) 50]
Test Case: 277 | Input/Output: [(45 29 5 64) 5]
Test Case: 278 | Input/Output: [(92 42 17 55) 17]
Test Case: 279 | Input/Output: [(16 68 60 63) 16]
Test Case: 280 | Input/Output: [(48 72 85 86) 48]
Test Case: 281 | Input/Output: [(12 92 88 69) 12]
Test Case: 282 | Input/Output: [(60 92 38 50) 38]
Test Case: 283 | Input/Output: [(97 80 74 92) 74]
Test Case: 284 | Input/Output: [(78 12 48 73) 12]
Test Case: 285 | Input/Output: [(81 24 42 71) 24]
Test Case: 286 | Input/Output: [(44 100 14 57) 14]
Test Case: 287 | Input/Output: [(11 27 94 80) 11]
Test Case: 288 | Input/Output: [(60 14 88 73) 14]
Test Case: 289 | Input/Output: [(19 54 94 1) 1]
Test Case: 290 | Input/Output: [(7 25 53 16) 7]
Test Case: 291 | Input/Output: [(2 88 58 15) 2]
Test Case: 292 | Input/Output: [(31 1 29 46) 1]
Test Case: 293 | Input/Output: [(34 79 90 64) 34]
Test Case: 294 | Input/Output: [(63 15 92 62) 15]
Test Case: 295 | Input/Output: [(61 57 43 67) 43]
Test Case: 296 | Input/Output: [(85 65 0 4) 0]
Test Case: 297 | Input/Output: [(35 67 39 65) 35]
Test Case: 298 | Input/Output: [(17 11 25 98) 11]
Test Case: 299 | Input/Output: [(100 11 15 91) 11]
Test Case: 300 | Input/Output: [(17 4 1 2) 1]
Test Case: 301 | Input/Output: [(87 41 42 70) 41]
Test Case: 302 | Input/Output: [(50 60 37 57) 37]
Test Case: 303 | Input/Output: [(44 72 33 61) 33]
Test Case: 304 | Input/Output: [(92 78 34 64) 34]
Test Case: 305 | Input/Output: [(42 32 100 44) 32]
Test Case: 306 | Input/Output: [(83 66 85 5) 5]
Test Case: 307 | Input/Output: [(34 61 37 81) 34]
Test Case: 308 | Input/Output: [(88 99 3 69) 3]
Test Case: 309 | Input/Output: [(58 93 36 99) 36]
Test Case: 310 | Input/Output: [(79 90 89 95) 79]
Test Case: 311 | Input/Output: [(80 56 5 62) 5]
Test Case: 312 | Input/Output: [(0 37 93 37) 0]
Test Case: 313 | Input/Output: [(21 91 9 96) 9]
Test Case: 314 | Input/Output: [(44 5 85 12) 5]
Test Case: 315 | Input/Output: [(42 90 23 45) 23]
Test Case: 316 | Input/Output: [(45 40 51 36) 36]
Test Case: 317 | Input/Output: [(98 0 0 46) 0]
Test Case: 318 | Input/Output: [(1 82 40 50) 1]
Test Case: 319 | Input/Output: [(64 10 72 26) 10]
Test Case: 320 | Input/Output: [(0 11 48 54) 0]
Test Case: 321 | Input/Output: [(52 44 52 88) 44]
Test Case: 322 | Input/Output: [(22 95 100 74) 22]
Test Case: 323 | Input/Output: [(33 76 39 47) 33]
Test Case: 324 | Input/Output: [(24 75 18 75) 18]
Test Case: 325 | Input/Output: [(46 7 63 76) 7]
Test Case: 326 | Input/Output: [(75 35 37 54) 35]
Test Case: 327 | Input/Output: [(56 84 7 59) 7]
Test Case: 328 | Input/Output: [(6 8 54 60) 6]
Test Case: 329 | Input/Output: [(62 85 51 84) 51]
Test Case: 330 | Input/Output: [(83 36 95 25) 25]
Test Case: 331 | Input/Output: [(79 99 7 79) 7]
Test Case: 332 | Input/Output: [(28 54 64 11) 11]
Test Case: 333 | Input/Output: [(78 14 29 88) 14]
Test Case: 334 | Input/Output: [(97 11 71 60) 11]
Test Case: 335 | Input/Output: [(48 0 5 21) 0]
Test Case: 336 | Input/Output: [(85 48 17 0) 0]
Test Case: 337 | Input/Output: [(78 81 45 32) 32]
Test Case: 338 | Input/Output: [(23 51 59 85) 23]
Test Case: 339 | Input/Output: [(80 82 9 34) 9]
Test Case: 340 | Input/Output: [(94 72 47 92) 47]
Test Case: 341 | Input/Output: [(74 71 2 93) 2]
Test Case: 342 | Input/Output: [(60 75 7 10) 7]
Test Case: 343 | Input/Output: [(42 35 6 66) 6]
Test Case: 344 | Input/Output: [(1 54 3 12) 1]
Test Case: 345 | Input/Output: [(80 3 81 17) 3]
Test Case: 346 | Input/Output: [(8 51 76 67) 8]
Test Case: 347 | Input/Output: [(73 52 47 41) 41]
Test Case: 348 | Input/Output: [(91 51 93 53) 51]
Test Case: 349 | Input/Output: [(73 20 84 50) 20]
Test Case: 350 | Input/Output: [(90 48 29 23) 23]
Test Case: 351 | Input/Output: [(16 56 63 38) 16]
Test Case: 352 | Input/Output: [(3 97 51 34) 3]
Test Case: 353 | Input/Output: [(64 10 0 68) 0]
Test Case: 354 | Input/Output: [(3 25 32 57) 3]
Test Case: 355 | Input/Output: [(3 24 53 34) 3]
Test Case: 356 | Input/Output: [(65 43 6 55) 6]
Test Case: 357 | Input/Output: [(6 29 63 6) 6]
Test Case: 358 | Input/Output: [(53 72 62 24) 24]
Test Case: 359 | Input/Output: [(75 27 43 18) 18]
Test Case: 360 | Input/Output: [(89 8 31 64) 8]
Test Case: 361 | Input/Output: [(6 4 7 100) 4]
Test Case: 362 | Input/Output: [(63 30 43 85) 30]
Test Case: 363 | Input/Output: [(51 79 37 52) 37]
Test Case: 364 | Input/Output: [(34 47 2 12) 2]
Test Case: 365 | Input/Output: [(1 11 84 29) 1]
Test Case: 366 | Input/Output: [(77 12 87 84) 12]
Test Case: 367 | Input/Output: [(33 87 23 63) 23]
Test Case: 368 | Input/Output: [(64 21 98 76) 21]
Test Case: 369 | Input/Output: [(51 62 62 100) 51]
Test Case: 370 | Input/Output: [(2 34 86 48) 2]
Test Case: 371 | Input/Output: [(100 19 79 59) 19]
Test Case: 372 | Input/Output: [(17 96 70 78) 17]
Test Case: 373 | Input/Output: [(82 47 43 96) 43]
Test Case: 374 | Input/Output: [(72 16 66 84) 16]
Test Case: 375 | Input/Output: [(25 88 100 9) 9]
Test Case: 376 | Input/Output: [(47 2 6 19) 2]
Test Case: 377 | Input/Output: [(52 16 43 54) 16]
Test Case: 378 | Input/Output: [(42 87 31 60) 31]
Test Case: 379 | Input/Output: [(49 57 45 93) 45]
Test Case: 380 | Input/Output: [(25 66 100 71) 25]
Test Case: 381 | Input/Output: [(93 58 10 30) 10]
Test Case: 382 | Input/Output: [(24 4 51 50) 4]
Test Case: 383 | Input/Output: [(32 98 68 21) 21]
Test Case: 384 | Input/Output: [(6 91 52 20) 6]
Test Case: 385 | Input/Output: [(11 10 12 13) 10]
Test Case: 386 | Input/Output: [(11 46 38 10) 10]
Test Case: 387 | Input/Output: [(87 21 71 90) 21]
Test Case: 388 | Input/Output: [(57 13 51 72) 13]
Test Case: 389 | Input/Output: [(27 55 24 35) 24]
Test Case: 390 | Input/Output: [(49 99 81 66) 49]
Test Case: 391 | Input/Output: [(5 80 95 82) 5]
Test Case: 392 | Input/Output: [(33 64 85 87) 33]
Test Case: 393 | Input/Output: [(29 84 56 98) 29]
Test Case: 394 | Input/Output: [(13 41 13 53) 13]
Test Case: 395 | Input/Output: [(97 80 54 85) 54]
Test Case: 396 | Input/Output: [(95 64 43 68) 43]
Test Case: 397 | Input/Output: [(77 45 12 3) 3]
Test Case: 398 | Input/Output: [(71 71 19 63) 19]
Test Case: 399 | Input/Output: [(95 6 34 7) 6]
Test Case: 400 | Input/Output: [(-23 82 -17 84) -23]
Test Case: 401 | Input/Output: [(-68 5 21 84) -68]
Test Case: 402 | Input/Output: [(-36 -58 -7 97) -58]
Test Case: 403 | Input/Output: [(-55 66 25 76) -55]
Test Case: 404 | Input/Output: [(-42 36 -54 8) -54]
Test Case: 405 | Input/Output: [(45 13 36 -5) -5]
Test Case: 406 | Input/Output: [(-84 -21 25 21) -84]
Test Case: 407 | Input/Output: [(-63 -28 99 -65) -65]
Test Case: 408 | Input/Output: [(-61 -55 72 -60) -61]
Test Case: 409 | Input/Output: [(-52 65 72 -20) -52]
Test Case: 410 | Input/Output: [(-56 -31 41 -77) -77]
Test Case: 411 | Input/Output: [(77 49 46 93) 46]
Test Case: 412 | Input/Output: [(56 -100 3 3) -100]
Test Case: 413 | Input/Output: [(-27 90 -41 87) -41]
Test Case: 414 | Input/Output: [(58 -6 -28 -98) -98]
Test Case: 415 | Input/Output: [(100 96 45 56) 45]
Test Case: 416 | Input/Output: [(-28 33 -22 -75) -75]
Test Case: 417 | Input/Output: [(-80 -22 52 53) -80]
Test Case: 418 | Input/Output: [(-48 12 -11 82) -48]
Test Case: 419 | Input/Output: [(91 -48 91 -10) -48]
Test Case: 420 | Input/Output: [(-1 90 63 24) -1]
Test Case: 421 | Input/Output: [(99 -26 -18 -75) -75]
Test Case: 422 | Input/Output: [(18 64 -1 65) -1]
Test Case: 423 | Input/Output: [(66 -51 30 2) -51]
Test Case: 424 | Input/Output: [(41 -36 -92 2) -92]
Test Case: 425 | Input/Output: [(-35 -100 9 84) -100]
Test Case: 426 | Input/Output: [(68 -16 77 88) -16]
Test Case: 427 | Input/Output: [(57 -75 43 -62) -75]
Test Case: 428 | Input/Output: [(-6 -40 98 -4) -40]
Test Case: 429 | Input/Output: [(-72 -62 25 77) -72]
Test Case: 430 | Input/Output: [(49 85 -59 -28) -59]
Test Case: 431 | Input/Output: [(96 17 -15 53) -15]
Test Case: 432 | Input/Output: [(95 -98 -45 91) -98]
Test Case: 433 | Input/Output: [(-23 -97 -32 45) -97]
Test Case: 434 | Input/Output: [(94 -1 41 35) -1]
Test Case: 435 | Input/Output: [(-3 -4 39 -61) -61]
Test Case: 436 | Input/Output: [(-26 17 43 -54) -54]
Test Case: 437 | Input/Output: [(-43 -48 44 -26) -48]
Test Case: 438 | Input/Output: [(-73 -10 33 94) -73]
Test Case: 439 | Input/Output: [(22 -12 -67 -38) -67]
Test Case: 440 | Input/Output: [(-32 -60 -74 42) -74]
Test Case: 441 | Input/Output: [(-40 -82 13 17) -82]
Test Case: 442 | Input/Output: [(15 6 68 -69) -69]
Test Case: 443 | Input/Output: [(6 -7 -100 -22) -100]
Test Case: 444 | Input/Output: [(24 71 -63 36) -63]
Test Case: 445 | Input/Output: [(-26 77 68 -47) -47]
Test Case: 446 | Input/Output: [(85 -83 2 45) -83]
Test Case: 447 | Input/Output: [(93 12 61 30) 12]
Test Case: 448 | Input/Output: [(-21 -65 39 17) -65]
Test Case: 449 | Input/Output: [(-52 -95 -96 24) -96]
Test Case: 450 | Input/Output: [(72 -27 -96 38) -96]
Test Case: 451 | Input/Output: [(-37 -94 36 -27) -94]
Test Case: 452 | Input/Output: [(72 -64 -68 -42) -68]
Test Case: 453 | Input/Output: [(42 -66 -4 -88) -88]
Test Case: 454 | Input/Output: [(61 64 -60 88) -60]
Test Case: 455 | Input/Output: [(-96 59 -58 51) -96]
Test Case: 456 | Input/Output: [(-93 48 23 16) -93]
Test Case: 457 | Input/Output: [(24 -23 -37 -50) -50]
Test Case: 458 | Input/Output: [(-99 -100 20 -43) -100]
Test Case: 459 | Input/Output: [(28 16 70 83) 16]
Test Case: 460 | Input/Output: [(2 -40 -97 43) -97]
Test Case: 461 | Input/Output: [(99 -65 63 62) -65]
Test Case: 462 | Input/Output: [(86 67 37 -60) -60]
Test Case: 463 | Input/Output: [(33 74 35 55) 33]
Test Case: 464 | Input/Output: [(-98 57 -95 -38) -98]
Test Case: 465 | Input/Output: [(0 80 0 -93) -93]
Test Case: 466 | Input/Output: [(24 -46 -13 -37) -46]
Test Case: 467 | Input/Output: [(9 49 41 5) 5]
Test Case: 468 | Input/Output: [(-10 -97 26 -43) -97]
Test Case: 469 | Input/Output: [(96 -72 78 42) -72]
Test Case: 470 | Input/Output: [(-37 5 16 -39) -39]
Test Case: 471 | Input/Output: [(-43 48 67 -9) -43]
Test Case: 472 | Input/Output: [(26 -40 -2 -49) -49]
Test Case: 473 | Input/Output: [(-50 98 -47 63) -50]
Test Case: 474 | Input/Output: [(-46 99 -16 1) -46]
Test Case: 475 | Input/Output: [(87 -80 -81 2) -81]
Test Case: 476 | Input/Output: [(-29 -31 15 -39) -39]
Test Case: 477 | Input/Output: [(77 8 -69 -86) -86]
Test Case: 478 | Input/Output: [(16 -78 65 27) -78]
Test Case: 479 | Input/Output: [(-62 37 7 -10) -62]
Test Case: 480 | Input/Output: [(80 -51 90 -14) -51]
Test Case: 481 | Input/Output: [(96 8 -60 53) -60]
Test Case: 482 | Input/Output: [(58 79 -25 87) -25]
Test Case: 483 | Input/Output: [(-58 -42 -67 -6) -67]
Test Case: 484 | Input/Output: [(72 46 25 -61) -61]
Test Case: 485 | Input/Output: [(-17 26 -39 -91) -91]
Test Case: 486 | Input/Output: [(46 21 5 -12) -12]
Test Case: 487 | Input/Output: [(73 -53 13 20) -53]
Test Case: 488 | Input/Output: [(81 -73 27 89) -73]
Test Case: 489 | Input/Output: [(-14 -75 91 -64) -75]
Test Case: 490 | Input/Output: [(20 -86 -65 2) -86]
Test Case: 491 | Input/Output: [(-89 84 8 -4) -89]
Test Case: 492 | Input/Output: [(-42 -33 -87 13) -87]
Test Case: 493 | Input/Output: [(-6 95 -71 -96) -96]
Test Case: 494 | Input/Output: [(-85 -84 -51 85) -85]
Test Case: 495 | Input/Output: [(99 -36 75 15) -36]
Test Case: 496 | Input/Output: [(-88 26 55 -41) -88]
Test Case: 497 | Input/Output: [(64 31 61 84) 31]
Test Case: 498 | Input/Output: [(18 -60 26 77) -60]
Test Case: 499 | Input/Output: [(-10 23 71 47) -10]
Test Case: 500 | Input/Output: [(-100 68 -13 -33) -100]
Test Case: 501 | Input/Output: [(33 -34 2 90) -34]
Test Case: 502 | Input/Output: [(-44 88 -76 -76) -76]
Test Case: 503 | Input/Output: [(-25 4 -23 37) -25]
Test Case: 504 | Input/Output: [(94 -71 84 -20) -71]
Test Case: 505 | Input/Output: [(16 -14 -94 100) -94]
Test Case: 506 | Input/Output: [(35 49 -39 -80) -80]
Test Case: 507 | Input/Output: [(-24 74 74 -56) -56]
Test Case: 508 | Input/Output: [(52 -54 74 28) -54]
Test Case: 509 | Input/Output: [(-15 6 -93 48) -93]
Test Case: 510 | Input/Output: [(-58 46 67 -65) -65]
Test Case: 511 | Input/Output: [(31 -45 -54 -56) -56]
Test Case: 512 | Input/Output: [(12 -51 -82 -21) -82]
Test Case: 513 | Input/Output: [(98 22 -39 15) -39]
Test Case: 514 | Input/Output: [(13 -18 59 50) -18]
Test Case: 515 | Input/Output: [(32 15 -12 -16) -16]
Test Case: 516 | Input/Output: [(93 -100 -13 43) -100]
Test Case: 517 | Input/Output: [(95 -89 -18 27) -89]
Test Case: 518 | Input/Output: [(-31 -93 64 52) -93]
Test Case: 519 | Input/Output: [(-6 85 -26 -84) -84]
Test Case: 520 | Input/Output: [(4 79 -90 86) -90]
Test Case: 521 | Input/Output: [(97 93 -80 -67) -80]
Test Case: 522 | Input/Output: [(-71 -55 25 26) -71]
Test Case: 523 | Input/Output: [(-94 73 -53 -13) -94]
Test Case: 524 | Input/Output: [(-60 16 20 -22) -60]
Test Case: 525 | Input/Output: [(14 48 -97 3) -97]
Test Case: 526 | Input/Output: [(98 -12 -72 -82) -82]
Test Case: 527 | Input/Output: [(-15 -76 -34 9) -76]
Test Case: 528 | Input/Output: [(-55 -81 -99 17) -99]
Test Case: 529 | Input/Output: [(30 -84 61 72) -84]
Test Case: 530 | Input/Output: [(-40 -63 47 89) -63]
Test Case: 531 | Input/Output: [(8 63 -15 -8) -15]
Test Case: 532 | Input/Output: [(-34 73 50 22) -34]
Test Case: 533 | Input/Output: [(-57 66 -44 -68) -68]
Test Case: 534 | Input/Output: [(-88 -87 -46 -14) -88]
Test Case: 535 | Input/Output: [(-58 -41 94 100) -58]
Test Case: 536 | Input/Output: [(3 -66 100 -11) -66]
Test Case: 537 | Input/Output: [(89 -44 -40 -47) -47]
Test Case: 538 | Input/Output: [(-80 28 20 -91) -91]
Test Case: 539 | Input/Output: [(21 95 58 99) 21]
Test Case: 540 | Input/Output: [(39 -58 -29 52) -58]
Test Case: 541 | Input/Output: [(-44 -93 -55 -54) -93]
Test Case: 542 | Input/Output: [(-97 91 0 -78) -97]
Test Case: 543 | Input/Output: [(-33 -94 16 14) -94]
Test Case: 544 | Input/Output: [(71 24 61 98) 24]
Test Case: 545 | Input/Output: [(-96 8 -27 -34) -96]
Test Case: 546 | Input/Output: [(-53 -33 -82 -71) -82]
Test Case: 547 | Input/Output: [(-85 45 -64 15) -85]
Test Case: 548 | Input/Output: [(-57 0 -100 -96) -100]
Test Case: 549 | Input/Output: [(-91 -56 22 -37) -91]
Test Case: 550 | Input/Output: [(64 48 -42 0) -42]
Test Case: 551 | Input/Output: [(53 -27 -72 -52) -72]
Test Case: 552 | Input/Output: [(-67 -45 -87 100) -87]
Test Case: 553 | Input/Output: [(-16 -9 -98 33) -98]
Test Case: 554 | Input/Output: [(-42 -59 -82 32) -82]
Test Case: 555 | Input/Output: [(75 85 10 -52) -52]
Test Case: 556 | Input/Output: [(77 61 79 -83) -83]
Test Case: 557 | Input/Output: [(31 75 92 8) 8]
Test Case: 558 | Input/Output: [(73 38 -58 -85) -85]
Test Case: 559 | Input/Output: [(-30 23 80 -96) -96]
Test Case: 560 | Input/Output: [(-65 60 -96 52) -96]
Test Case: 561 | Input/Output: [(-17 -2 -37 -14) -37]
Test Case: 562 | Input/Output: [(-22 47 96 -53) -53]
Test Case: 563 | Input/Output: [(-81 65 26 -5) -81]
Test Case: 564 | Input/Output: [(-51 25 86 16) -51]
Test Case: 565 | Input/Output: [(-46 0 0 -8) -46]
Test Case: 566 | Input/Output: [(96 16 -41 66) -41]
Test Case: 567 | Input/Output: [(67 76 -44 -18) -44]
Test Case: 568 | Input/Output: [(35 -20 38 84) -20]
Test Case: 569 | Input/Output: [(-31 -26 80 47) -31]
Test Case: 570 | Input/Output: [(-91 59 -60 35) -91]
Test Case: 571 | Input/Output: [(11 15 -4 -56) -56]
Test Case: 572 | Input/Output: [(-59 41 35 62) -59]
Test Case: 573 | Input/Output: [(51 -67 -38 -25) -67]
Test Case: 574 | Input/Output: [(66 30 82 48) 30]
Test Case: 575 | Input/Output: [(87 16 -19 -92) -92]
Test Case: 576 | Input/Output: [(22 93 -61 -96) -96]
Test Case: 577 | Input/Output: [(87 14 6 -27) -27]
Test Case: 578 | Input/Output: [(-81 99 -21 -82) -82]
Test Case: 579 | Input/Output: [(46 74 3 33) 3]
Test Case: 580 | Input/Output: [(91 37 -19 -11) -19]
Test Case: 581 | Input/Output: [(74 -96 -82 25) -96]
Test Case: 582 | Input/Output: [(61 38 47 -99) -99]
Test Case: 583 | Input/Output: [(25 27 42 -88) -88]
Test Case: 584 | Input/Output: [(-13 99 6 61) -13]
Test Case: 585 | Input/Output: [(64 95 -31 -67) -67]
Test Case: 586 | Input/Output: [(-95 0 -70 77) -95]
Test Case: 587 | Input/Output: [(-15 -97 -42 -71) -97]
Test Case: 588 | Input/Output: [(-65 -80 -25 61) -80]
Test Case: 589 | Input/Output: [(-37 39 -33 -73) -73]
Test Case: 590 | Input/Output: [(78 -1 -22 11) -22]
Test Case: 591 | Input/Output: [(-49 4 39 -51) -51]
Test Case: 592 | Input/Output: [(80 27 -55 33) -55]
Test Case: 593 | Input/Output: [(-57 -39 -35 37) -57]
Test Case: 594 | Input/Output: [(-71 81 46 41) -71]
Test Case: 595 | Input/Output: [(-12 -76 -52 -35) -76]
Test Case: 596 | Input/Output: [(-32 40 -55 -74) -74]
Test Case: 597 | Input/Output: [(-28 8 66 -45) -45]
Test Case: 598 | Input/Output: [(-64 -87 82 56) -87]
Test Case: 599 | Input/Output: [(60 -16 -90 25) -90]
Test Case: 600 | Input/Output: [(75 22 57 68) 22]
Test Case: 601 | Input/Output: [(-48 78 0 38) -48]
Test Case: 602 | Input/Output: [(-11 0 94 -27) -27]
Test Case: 603 | Input/Output: [(-48 -69 -52 -60) -69]
Test Case: 604 | Input/Output: [(-22 -35 -9 -9) -35]
Test Case: 605 | Input/Output: [(-48 -4 28 -56) -56]
Test Case: 606 | Input/Output: [(-49 33 -45 -4) -49]
Test Case: 607 | Input/Output: [(25 -80 2 37) -80]
Test Case: 608 | Input/Output: [(-8 -70 65 -54) -70]
Test Case: 609 | Input/Output: [(-12 21 -46 -75) -75]
Test Case: 610 | Input/Output: [(32 -90 -34 38) -90]
Test Case: 611 | Input/Output: [(67 -11 21 -16) -16]
Test Case: 612 | Input/Output: [(10 -19 35 70) -19]
Test Case: 613 | Input/Output: [(80 99 -53 31) -53]
Test Case: 614 | Input/Output: [(-42 81 -37 -65) -65]
Test Case: 615 | Input/Output: [(-20 96 -12 92) -20]
Test Case: 616 | Input/Output: [(49 74 100 18) 18]
Test Case: 617 | Input/Output: [(57 -6 0 74) -6]
Test Case: 618 | Input/Output: [(30 -48 -79 7) -79]
Test Case: 619 | Input/Output: [(-6 100 59 -95) -95]
Test Case: 620 | Input/Output: [(74 20 86 -27) -27]
Test Case: 621 | Input/Output: [(-13 -22 -25 83) -25]
Test Case: 622 | Input/Output: [(-56 -94 -18 42) -94]
Test Case: 623 | Input/Output: [(-28 -90 74 81) -90]
Test Case: 624 | Input/Output: [(88 21 97 4) 4]
Test Case: 625 | Input/Output: [(-91 43 33 9) -91]
Test Case: 626 | Input/Output: [(94 42 -93 -20) -93]
Test Case: 627 | Input/Output: [(-73 -63 91 67) -73]
Test Case: 628 | Input/Output: [(-73 74 34 -67) -73]
Test Case: 629 | Input/Output: [(-95 -97 -77 -39) -97]
Test Case: 630 | Input/Output: [(54 -91 -26 75) -91]
Test Case: 631 | Input/Output: [(7 72 46 42) 7]
Test Case: 632 | Input/Output: [(-9 -84 16 -16) -84]
Test Case: 633 | Input/Output: [(71 -6 76 72) -6]
Test Case: 634 | Input/Output: [(-8 6 42 -70) -70]
Test Case: 635 | Input/Output: [(-49 -66 77 65) -66]
Test Case: 636 | Input/Output: [(85 28 93 6) 6]
Test Case: 637 | Input/Output: [(-11 -61 84 -66) -66]
Test Case: 638 | Input/Output: [(-14 -94 -99 -76) -99]
Test Case: 639 | Input/Output: [(1 53 -10 -22) -22]
Test Case: 640 | Input/Output: [(-86 -39 47 -76) -86]
Test Case: 641 | Input/Output: [(-82 58 -35 38) -82]
Test Case: 642 | Input/Output: [(-46 -32 41 -82) -82]
Test Case: 643 | Input/Output: [(-66 27 74 -39) -66]
Test Case: 644 | Input/Output: [(48 -74 -90 85) -90]
Test Case: 645 | Input/Output: [(92 50 72 54) 50]
Test Case: 646 | Input/Output: [(1 -12 -83 27) -83]
Test Case: 647 | Input/Output: [(78 -21 -78 -62) -78]
Test Case: 648 | Input/Output: [(-89 48 -38 56) -89]
Test Case: 649 | Input/Output: [(69 19 -13 30) -13]
Test Case: 650 | Input/Output: [(64 73 -96 46) -96]
Test Case: 651 | Input/Output: [(67 -77 -81 6) -81]
Test Case: 652 | Input/Output: [(78 73 7 71) 7]
Test Case: 653 | Input/Output: [(-85 27 41 -76) -85]
Test Case: 654 | Input/Output: [(75 -7 50 25) -7]
Test Case: 655 | Input/Output: [(-38 -40 -50 -24) -50]
Test Case: 656 | Input/Output: [(74 -4 42 15) -4]
Test Case: 657 | Input/Output: [(6 51 -14 -41) -41]
Test Case: 658 | Input/Output: [(-28 85 -13 -14) -28]
Test Case: 659 | Input/Output: [(30 91 -17 -17) -17]
Test Case: 660 | Input/Output: [(-65 -20 86 8) -65]
Test Case: 661 | Input/Output: [(96 -20 4 18) -20]
Test Case: 662 | Input/Output: [(16 44 93 73) 16]
Test Case: 663 | Input/Output: [(-93 -16 61 70) -93]
Test Case: 664 | Input/Output: [(27 -25 87 -87) -87]
Test Case: 665 | Input/Output: [(-34 -4 -87 35) -87]
Test Case: 666 | Input/Output: [(-86 -66 87 50) -86]
Test Case: 667 | Input/Output: [(-19 -28 59 73) -28]
Test Case: 668 | Input/Output: [(-74 18 -16 -97) -97]
Test Case: 669 | Input/Output: [(43 89 12 44) 12]
Test Case: 670 | Input/Output: [(-67 24 52 18) -67]
Test Case: 671 | Input/Output: [(39 -19 -66 75) -66]
Test Case: 672 | Input/Output: [(21 64 -93 7) -93]
Test Case: 673 | Input/Output: [(-89 -72 -24 33) -89]
Test Case: 674 | Input/Output: [(-70 -67 -19 39) -70]
Test Case: 675 | Input/Output: [(73 -34 59 28) -34]
Test Case: 676 | Input/Output: [(95 -25 -78 36) -78]
Test Case: 677 | Input/Output: [(83 93 49 -55) -55]
Test Case: 678 | Input/Output: [(42 -13 96 -95) -95]
Test Case: 679 | Input/Output: [(-37 -100 -80 -3) -100]
Test Case: 680 | Input/Output: [(-7 -42 95 -67) -67]
Test Case: 681 | Input/Output: [(80 60 -73 -9) -73]
Test Case: 682 | Input/Output: [(13 98 49 -94) -94]
Test Case: 683 | Input/Output: [(4 33 90 93) 4]
Test Case: 684 | Input/Output: [(84 87 35 4) 4]
Test Case: 685 | Input/Output: [(89 73 -68 -20) -68]
Test Case: 686 | Input/Output: [(-70 -99 39 -77) -99]
Test Case: 687 | Input/Output: [(74 -60 -40 19) -60]
Test Case: 688 | Input/Output: [(-76 -14 62 -78) -78]
Test Case: 689 | Input/Output: [(89 -61 -11 -82) -82]
Test Case: 690 | Input/Output: [(51 -82 -61 71) -82]
Test Case: 691 | Input/Output: [(77 -72 -53 36) -72]
Test Case: 692 | Input/Output: [(92 -92 72 49) -92]
Test Case: 693 | Input/Output: [(81 78 82 76) 76]
Test Case: 694 | Input/Output: [(56 10 -57 -23) -57]
Test Case: 695 | Input/Output: [(46 5 -24 97) -24]
Test Case: 696 | Input/Output: [(40 -65 -18 -69) -69]
Test Case: 697 | Input/Output: [(-19 -24 32 4) -24]
Test Case: 698 | Input/Output: [(-63 95 -1 17) -63]
Test Case: 699 | Input/Output: [(19 -80 -46 -55) -80]
Test Case: 700 | Input/Output: [(53 -59 -15 84) -59]
Test Case: 701 | Input/Output: [(9 9 25 20) 9]
Test Case: 702 | Input/Output: [(-81 -27 68 -21) -81]
Test Case: 703 | Input/Output: [(64 -59 32 53) -59]
Test Case: 704 | Input/Output: [(76 93 85 -53) -53]
Test Case: 705 | Input/Output: [(-88 -26 39 85) -88]
Test Case: 706 | Input/Output: [(90 31 24 -15) -15]
Test Case: 707 | Input/Output: [(-44 -79 -97 69) -97]
Test Case: 708 | Input/Output: [(85 15 -65 -49) -65]
Test Case: 709 | Input/Output: [(-27 -19 35 45) -27]
Test Case: 710 | Input/Output: [(-17 63 -88 -50) -88]
Test Case: 711 | Input/Output: [(-54 -39 12 79) -54]
Test Case: 712 | Input/Output: [(60 69 84 33) 33]
Test Case: 713 | Input/Output: [(6 -66 60 -10) -66]
Test Case: 714 | Input/Output: [(53 -99 20 51) -99]
Test Case: 715 | Input/Output: [(-53 -41 57 62) -53]
Test Case: 716 | Input/Output: [(27 -58 6 -31) -58]
Test Case: 717 | Input/Output: [(-41 -99 -60 -52) -99]
Test Case: 718 | Input/Output: [(-72 10 -64 -47) -72]
Test Case: 719 | Input/Output: [(-4 -100 -49 -42) -100]
Test Case: 720 | Input/Output: [(6 -32 76 -35) -35]
Test Case: 721 | Input/Output: [(-49 26 13 17) -49]
Test Case: 722 | Input/Output: [(97 25 5 34) 5]
Test Case: 723 | Input/Output: [(84 27 75 6) 6]
Test Case: 724 | Input/Output: [(22 -30 -44 92) -44]
Test Case: 725 | Input/Output: [(-49 39 92 54) -49]
Test Case: 726 | Input/Output: [(-74 -66 68 -41) -74]
Test Case: 727 | Input/Output: [(-52 -86 -28 -23) -86]
Test Case: 728 | Input/Output: [(69 16 33 51) 16]
Test Case: 729 | Input/Output: [(52 -32 78 7) -32]
Test Case: 730 | Input/Output: [(-62 -37 -50 -87) -87]
Test Case: 731 | Input/Output: [(-4 -43 -3 -67) -67]
Test Case: 732 | Input/Output: [(-96 7 -74 23) -96]
Test Case: 733 | Input/Output: [(-31 -8 35 84) -31]
Test Case: 734 | Input/Output: [(-23 23 -10 90) -23]
Test Case: 735 | Input/Output: [(59 7 -58 70) -58]
Test Case: 736 | Input/Output: [(-35 37 -63 -11) -63]
Test Case: 737 | Input/Output: [(-11 -4 -96 -78) -96]
Test Case: 738 | Input/Output: [(77 12 21 86) 12]
Test Case: 739 | Input/Output: [(-73 38 -24 84) -73]
Test Case: 740 | Input/Output: [(-10 93 96 -18) -18]
Test Case: 741 | Input/Output: [(-92 -41 96 -38) -92]
Test Case: 742 | Input/Output: [(44 -83 90 -79) -83]
Test Case: 743 | Input/Output: [(94 -75 -87 70) -87]
Test Case: 744 | Input/Output: [(-46 59 50 -33) -46]
Test Case: 745 | Input/Output: [(-30 -70 58 47) -70]
Test Case: 746 | Input/Output: [(-97 -20 70 -8) -97]
Test Case: 747 | Input/Output: [(-82 -34 -90 87) -90]
Test Case: 748 | Input/Output: [(-53 -28 -96 16) -96]
Test Case: 749 | Input/Output: [(-72 84 64 94) -72]
Test Case: 750 | Input/Output: [(90 -72 11 -68) -72]
Test Case: 751 | Input/Output: [(-98 -64 73 25) -98]
Test Case: 752 | Input/Output: [(88 -9 -86 71) -86]
Test Case: 753 | Input/Output: [(86 -59 -8 83) -59]
Test Case: 754 | Input/Output: [(18 71 -20 -74) -74]
Test Case: 755 | Input/Output: [(-100 54 -29 44) -100]
Test Case: 756 | Input/Output: [(15 -80 87 -28) -80]
Test Case: 757 | Input/Output: [(-43 78 -33 -63) -63]
Test Case: 758 | Input/Output: [(-75 82 -36 -68) -75]
Test Case: 759 | Input/Output: [(-64 20 29 -29) -64]
Test Case: 760 | Input/Output: [(29 64 48 72) 29]
Test Case: 761 | Input/Output: [(-11 3 5 -79) -79]
Test Case: 762 | Input/Output: [(34 23 -41 -47) -47]
Test Case: 763 | Input/Output: [(72 58 -88 51) -88]
Test Case: 764 | Input/Output: [(39 80 -98 8) -98]
Test Case: 765 | Input/Output: [(-4 99 -29 89) -29]
Test Case: 766 | Input/Output: [(-18 48 69 -28) -28]
Test Case: 767 | Input/Output: [(-67 76 48 72) -67]
Test Case: 768 | Input/Output: [(92 3 18 -9) -9]
Test Case: 769 | Input/Output: [(98 33 58 34) 33]
Test Case: 770 | Input/Output: [(-12 14 -15 87) -15]
Test Case: 771 | Input/Output: [(64 -61 -14 -16) -61]
Test Case: 772 | Input/Output: [(-72 53 9 -72) -72]
Test Case: 773 | Input/Output: [(-37 11 94 24) -37]
Test Case: 774 | Input/Output: [(-66 3 -88 -62) -88]
Test Case: 775 | Input/Output: [(-97 -61 11 -19) -97]
Test Case: 776 | Input/Output: [(-29 -67 86 33) -67]
Test Case: 777 | Input/Output: [(86 -25 -51 -22) -51]
Test Case: 778 | Input/Output: [(-33 -47 44 18) -47]
Test Case: 779 | Input/Output: [(15 -10 -75 -33) -75]
Test Case: 780 | Input/Output: [(15 -17 27 57) -17]
Test Case: 781 | Input/Output: [(-10 -83 89 -21) -83]
Test Case: 782 | Input/Output: [(-65 -28 -86 -14) -86]
Test Case: 783 | Input/Output: [(5 17 21 -5) -5]
Test Case: 784 | Input/Output: [(4 -79 -8 -68) -79]
Test Case: 785 | Input/Output: [(-97 74 -69 57) -97]
Test Case: 786 | Input/Output: [(46 41 98 -41) -41]
Test Case: 787 | Input/Output: [(28 -14 -62 -59) -62]
Test Case: 788 | Input/Output: [(20 -65 95 36) -65]
Test Case: 789 | Input/Output: [(60 -89 84 -13) -89]
Test Case: 790 | Input/Output: [(47 63 44 -48) -48]
Test Case: 791 | Input/Output: [(-15 -98 -42 42) -98]
Test Case: 792 | Input/Output: [(-9 -1 -67 -69) -69]
Test Case: 793 | Input/Output: [(80 34 43 15) 15]
Test Case: 794 | Input/Output: [(84 -53 20 86) -53]
Test Case: 795 | Input/Output: [(67 -48 -34 -4) -48]
Test Case: 796 | Input/Output: [(61 -63 97 -95) -95]
Test Case: 797 | Input/Output: [(-35 54 -78 89) -78]
Test Case: 798 | Input/Output: [(-11 -84 72 58) -84]
Test Case: 799 | Input/Output: [(-25 -92 70 47) -92]
Test Case: 800 | Input/Output: [(-74 -71 -31 -73) -74]
Test Case: 801 | Input/Output: [(-53 -73 60 62) -73]
Test Case: 802 | Input/Output: [(15 2 47 65) 2]
Test Case: 803 | Input/Output: [(64 9 -22 -18) -22]
Test Case: 804 | Input/Output: [(2 -51 -23 -61) -61]
Test Case: 805 | Input/Output: [(32 3 -99 0) -99]
Test Case: 806 | Input/Output: [(-11 13 -57 -14) -57]
Test Case: 807 | Input/Output: [(37 -39 -34 -10) -39]
Test Case: 808 | Input/Output: [(17 -28 1 92) -28]
Test Case: 809 | Input/Output: [(45 33 -31 -19) -31]
Test Case: 810 | Input/Output: [(-49 37 -90 -71) -90]
Test Case: 811 | Input/Output: [(-12 -26 36 -73) -73]
Test Case: 812 | Input/Output: [(41 -31 99 97) -31]
Test Case: 813 | Input/Output: [(-52 30 -83 -13) -83]
Test Case: 814 | Input/Output: [(9 -50 -61 -8) -61]
Test Case: 815 | Input/Output: [(52 72 95 -35) -35]
Test Case: 816 | Input/Output: [(89 -71 28 -24) -71]
Test Case: 817 | Input/Output: [(-11 38 -2 61) -11]
Test Case: 818 | Input/Output: [(91 59 -38 -29) -38]
Test Case: 819 | Input/Output: [(77 -14 -46 -77) -77]
Test Case: 820 | Input/Output: [(-45 82 -47 37) -47]
Test Case: 821 | Input/Output: [(52 -3 11 -29) -29]
Test Case: 822 | Input/Output: [(-47 3 20 71) -47]
Test Case: 823 | Input/Output: [(-64 26 91 -53) -64]
Test Case: 824 | Input/Output: [(-9 30 -13 0) -13]
Test Case: 825 | Input/Output: [(-52 -25 92 -37) -52]
Test Case: 826 | Input/Output: [(62 62 76 -74) -74]
Test Case: 827 | Input/Output: [(34 5 -85 -54) -85]
Test Case: 828 | Input/Output: [(74 39 -30 -86) -86]
Test Case: 829 | Input/Output: [(-96 18 -97 -99) -99]
Test Case: 830 | Input/Output: [(-83 -28 44 23) -83]
Test Case: 831 | Input/Output: [(-94 52 -83 -81) -94]
Test Case: 832 | Input/Output: [(44 8 -14 16) -14]
Test Case: 833 | Input/Output: [(-21 -90 68 -15) -90]
Test Case: 834 | Input/Output: [(-1 92 -99 60) -99]
Test Case: 835 | Input/Output: [(-96 40 -66 -100) -100]
Test Case: 836 | Input/Output: [(3 -65 -90 12) -90]
Test Case: 837 | Input/Output: [(-20 78 38 -51) -51]
Test Case: 838 | Input/Output: [(48 -78 83 -12) -78]
Test Case: 839 | Input/Output: [(-26 -90 73 -70) -90]
Test Case: 840 | Input/Output: [(20 31 8 85) 8]
Test Case: 841 | Input/Output: [(-36 5 -8 -25) -36]
Test Case: 842 | Input/Output: [(72 -35 90 -25) -35]
Test Case: 843 | Input/Output: [(83 38 3 -8) -8]
Test Case: 844 | Input/Output: [(18 -10 -84 64) -84]
Test Case: 845 | Input/Output: [(53 -37 -57 -50) -57]
Test Case: 846 | Input/Output: [(79 -45 51 -26) -45]
Test Case: 847 | Input/Output: [(-93 36 -82 -68) -93]
Test Case: 848 | Input/Output: [(-50 -3 -76 14) -76]
Test Case: 849 | Input/Output: [(-20 76 -55 58) -55]
Test Case: 850 | Input/Output: [(-8 29 -44 0) -44]
Test Case: 851 | Input/Output: [(81 71 -78 7) -78]
Test Case: 852 | Input/Output: [(-72 -60 -72 -77) -77]
Test Case: 853 | Input/Output: [(76 -7 19 -61) -61]
Test Case: 854 | Input/Output: [(-70 98 97 88) -70]
Test Case: 855 | Input/Output: [(34 -47 -67 -18) -67]
Test Case: 856 | Input/Output: [(-74 -82 -74 -89) -89]
Test Case: 857 | Input/Output: [(96 2 20 39) 2]
Test Case: 858 | Input/Output: [(-83 -15 25 65) -83]
Test Case: 859 | Input/Output: [(99 90 -82 2) -82]
Test Case: 860 | Input/Output: [(-17 99 86 4) -17]
Test Case: 861 | Input/Output: [(14 -2 -72 -24) -72]
Test Case: 862 | Input/Output: [(-57 -100 42 -45) -100]
Test Case: 863 | Input/Output: [(-95 -22 -97 -82) -97]
Test Case: 864 | Input/Output: [(41 -29 76 -97) -97]
Test Case: 865 | Input/Output: [(-91 -53 64 -93) -93]
Test Case: 866 | Input/Output: [(93 63 -45 -46) -46]
Test Case: 867 | Input/Output: [(-44 -100 38 -91) -100]
Test Case: 868 | Input/Output: [(26 21 86 -97) -97]
Test Case: 869 | Input/Output: [(-54 -50 61 51) -54]
Test Case: 870 | Input/Output: [(-4 -71 -60 18) -71]
Test Case: 871 | Input/Output: [(-12 -91 25 92) -91]
Test Case: 872 | Input/Output: [(42 29 -26 -91) -91]
Test Case: 873 | Input/Output: [(-29 -63 93 11) -63]
Test Case: 874 | Input/Output: [(32 16 -5 -41) -41]
Test Case: 875 | Input/Output: [(-17 81 83 28) -17]
Test Case: 876 | Input/Output: [(28 -36 61 -32) -36]
Test Case: 877 | Input/Output: [(-2 90 45 -55) -55]
Test Case: 878 | Input/Output: [(58 12 83 -26) -26]
Test Case: 879 | Input/Output: [(11 -69 14 -77) -77]
Test Case: 880 | Input/Output: [(58 90 -37 59) -37]
Test Case: 881 | Input/Output: [(29 -31 41 -85) -85]
Test Case: 882 | Input/Output: [(19 32 -40 85) -40]
Test Case: 883 | Input/Output: [(-94 56 -82 -99) -99]
Test Case: 884 | Input/Output: [(28 93 -50 69) -50]
Test Case: 885 | Input/Output: [(-34 32 -16 93) -34]
Test Case: 886 | Input/Output: [(-17 -15 -8 97) -17]
Test Case: 887 | Input/Output: [(-92 -57 -86 -35) -92]
Test Case: 888 | Input/Output: [(-34 92 37 41) -34]
Test Case: 889 | Input/Output: [(79 37 -25 68) -25]
Test Case: 890 | Input/Output: [(-90 57 65 84) -90]
Test Case: 891 | Input/Output: [(56 -12 -56 80) -56]
Test Case: 892 | Input/Output: [(74 -63 73 -15) -63]
Test Case: 893 | Input/Output: [(45 -79 14 -77) -79]
Test Case: 894 | Input/Output: [(-86 -86 -38 85) -86]
Test Case: 895 | Input/Output: [(-2 -39 -92 -88) -92]
Test Case: 896 | Input/Output: [(-26 61 -80 80) -80]
Test Case: 897 | Input/Output: [(81 -74 90 31) -74]
Test Case: 898 | Input/Output: [(63 54 -57 -4) -57]
Test Case: 899 | Input/Output: [(59 -20 -95 -1) -95]
Test Case: 900 | Input/Output: [(-40 -95 -74 97) -95]
Test Case: 901 | Input/Output: [(87 72 -38 -76) -76]
Test Case: 902 | Input/Output: [(1 95 -67 -57) -67]
Test Case: 903 | Input/Output: [(-35 -79 -20 10) -79]
Test Case: 904 | Input/Output: [(-32 -78 60 -20) -78]
Test Case: 905 | Input/Output: [(12 100 26 52) 12]
Test Case: 906 | Input/Output: [(65 68 -36 74) -36]
Test Case: 907 | Input/Output: [(-29 46 6 -35) -35]
Test Case: 908 | Input/Output: [(23 -92 -78 98) -92]
Test Case: 909 | Input/Output: [(4 33 -77 -4) -77]
Test Case: 910 | Input/Output: [(-96 27 -19 -13) -96]
Test Case: 911 | Input/Output: [(-79 51 1 43) -79]
Test Case: 912 | Input/Output: [(86 77 2 81) 2]
Test Case: 913 | Input/Output: [(-70 -61 -92 -18) -92]
Test Case: 914 | Input/Output: [(-31 -91 42 68) -91]
Test Case: 915 | Input/Output: [(-44 -100 -52 -53) -100]
Test Case: 916 | Input/Output: [(-98 22 -68 -30) -98]
Test Case: 917 | Input/Output: [(-66 69 75 -91) -91]
Test Case: 918 | Input/Output: [(-23 62 -40 -4) -40]
Test Case: 919 | Input/Output: [(-16 -44 4 14) -44]
Test Case: 920 | Input/Output: [(-4 25 -82 55) -82]
Test Case: 921 | Input/Output: [(-90 -84 9 -55) -90]
Test Case: 922 | Input/Output: [(-79 -59 -26 60) -79]
Test Case: 923 | Input/Output: [(-95 63 15 11) -95]
Test Case: 924 | Input/Output: [(-26 48 31 58) -26]
Test Case: 925 | Input/Output: [(16 35 19 -92) -92]
Test Case: 926 | Input/Output: [(28 -51 9 31) -51]
Test Case: 927 | Input/Output: [(-60 -65 95 62) -65]
Test Case: 928 | Input/Output: [(61 54 63 -33) -33]
Test Case: 929 | Input/Output: [(-86 -54 -100 40) -100]
Test Case: 930 | Input/Output: [(-48 52 16 -77) -77]
Test Case: 931 | Input/Output: [(82 -27 58 -11) -27]
Test Case: 932 | Input/Output: [(1 -46 37 27) -46]
Test Case: 933 | Input/Output: [(84 -80 91 100) -80]
Test Case: 934 | Input/Output: [(-76 14 -91 -35) -91]
Test Case: 935 | Input/Output: [(96 -56 -8 76) -56]
Test Case: 936 | Input/Output: [(66 81 -52 -99) -99]
Test Case: 937 | Input/Output: [(5 67 26 63) 5]
Test Case: 938 | Input/Output: [(64 -32 -73 -25) -73]
Test Case: 939 | Input/Output: [(-2 97 86 94) -2]
Test Case: 940 | Input/Output: [(60 -34 -58 -74) -74]
Test Case: 941 | Input/Output: [(-21 -81 43 -54) -81]
Test Case: 942 | Input/Output: [(-8 61 59 73) -8]
Test Case: 943 | Input/Output: [(-80 -88 -89 -54) -89]
Test Case: 944 | Input/Output: [(40 69 94 95) 40]
Test Case: 945 | Input/Output: [(-78 56 65 30) -78]
Test Case: 946 | Input/Output: [(33 -13 30 -99) -99]
Test Case: 947 | Input/Output: [(79 -14 48 -87) -87]
Test Case: 948 | Input/Output: [(64 39 54 17) 17]
Test Case: 949 | Input/Output: [(-9 -81 93 -36) -81]
Test Case: 950 | Input/Output: [(40 -67 -67 37) -67]
Test Case: 951 | Input/Output: [(-76 75 -68 64) -76]
Test Case: 952 | Input/Output: [(-18 -87 89 -19) -87]
Test Case: 953 | Input/Output: [(39 -41 38 -79) -79]
Test Case: 954 | Input/Output: [(-58 12 76 -41) -58]
Test Case: 955 | Input/Output: [(9 -14 73 -3) -14]
Test Case: 956 | Input/Output: [(-67 -45 -34 95) -67]
Test Case: 957 | Input/Output: [(90 29 -54 -82) -82]
Test Case: 958 | Input/Output: [(80 96 -38 38) -38]
Test Case: 959 | Input/Output: [(5 -62 70 -80) -80]
Test Case: 960 | Input/Output: [(-24 94 98 -26) -26]
Test Case: 961 | Input/Output: [(37 66 69 -33) -33]
Test Case: 962 | Input/Output: [(70 40 -77 93) -77]
Test Case: 963 | Input/Output: [(17 93 77 49) 17]
Test Case: 964 | Input/Output: [(-74 -90 56 21) -90]
Test Case: 965 | Input/Output: [(-4 -69 -46 -45) -69]
Test Case: 966 | Input/Output: [(54 -4 -50 -3) -50]
Test Case: 967 | Input/Output: [(6 -20 58 -28) -28]
Test Case: 968 | Input/Output: [(72 -91 43 42) -91]
Test Case: 969 | Input/Output: [(-69 -58 83 -56) -69]
Test Case: 970 | Input/Output: [(23 51 -25 3) -25]
Test Case: 971 | Input/Output: [(-57 -29 -50 17) -57]
Test Case: 972 | Input/Output: [(-49 -32 26 20) -49]
Test Case: 973 | Input/Output: [(76 -6 -95 -28) -95]
Test Case: 974 | Input/Output: [(85 82 43 51) 43]
Test Case: 975 | Input/Output: [(60 14 78 75) 14]
Test Case: 976 | Input/Output: [(91 10 -24 81) -24]
Test Case: 977 | Input/Output: [(-65 -76 -68 78) -76]
Test Case: 978 | Input/Output: [(-97 51 -32 -15) -97]
Test Case: 979 | Input/Output: [(6 -66 -47 18) -66]
Test Case: 980 | Input/Output: [(-67 -99 -6 -74) -99]
Test Case: 981 | Input/Output: [(-80 65 -18 69) -80]
Test Case: 982 | Input/Output: [(11 -100 -47 22) -100]
Test Case: 983 | Input/Output: [(19 65 65 -18) -18]
Test Case: 984 | Input/Output: [(-100 100 -69 -88) -100]
Test Case: 985 | Input/Output: [(-34 -72 24 -52) -72]
Test Case: 986 | Input/Output: [(-18 -80 -12 12) -80]
Test Case: 987 | Input/Output: [(44 45 -1 43) -1]
Test Case: 988 | Input/Output: [(57 57 31 81) 31]
Test Case: 989 | Input/Output: [(50 70 100 -5) -5]
Test Case: 990 | Input/Output: [(-65 98 -14 75) -65]
Test Case: 991 | Input/Output: [(3 19 55 -56) -56]
Test Case: 992 | Input/Output: [(-84 96 -82 37) -84]
Test Case: 993 | Input/Output: [(24 25 33 94) 24]
Test Case: 994 | Input/Output: [(-98 -91 -99 -29) -99]
Test Case: 995 | Input/Output: [(67 82 -73 -62) -73]
Test Case: 996 | Input/Output: [(20 54 75 9) 9]
Test Case: 997 | Input/Output: [(54 93 -10 16) -10]
Test Case: 998 | Input/Output: [(83 11 -77 6) -77]
Test Case: 999 | Input/Output: [(-34 86 85 19) -34]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -9 -46 -79 -29 -33 -102 97 -112 48 -32 -3 -66 -59 31 31 -66
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-59 -59 -8 -59] -59] [[-53 -53 -12 -53] -53] [[70 -37 -37 -37] -37] [[3 3 45 3] 3] [[38 38 38 58] 38] [[-92 -92 -46 -92] -92] [[-3 18 18 18] -3] [[32 -67 -67 -67] -67] [[46 46 46 24] 24] [[50 -47 -47 -47] -47] [(-31 -31 -31 -31) -31] [(34 34 34 34) 34] [(62 62 62 62) 62] [(-78 -78 -78 -78) -78] [(98 98 98 98) 98] [(90 87 57 8) 8] [(64 83 21 32) 21] [(0 33 13 65) 0] [(53 52 91 60) 52] [(51 45 49 21) 21] [(10 7 99 81) 7] [(89 54 41 40) 40] [(36 10 40 52) 10] [(65 88 40 29) 29] [(93 34 23 18) 18] [(3 96 96 59) 3] [(72 69 82 62) 62] [(52 36 47 34) 34] [(71 76 60 17) 17] [(77 3 64 60) 3] [(47 0 76 12) 0] [(28 58 65 48) 28] [(100 30 75 21) 21] [(91 71 7 56) 7] [(62 45 56 83) 45] [(-70 20 46 49) -70] [(-95 -1 3 -70) -95] [(-40 -5 -89 61) -89] [(23 34 59 60) 23] [(-29 44 -7 1) -29] [(-57 29 19 -21) -57] [(78 -30 78 -78) -78] [(80 -71 59 78) -71] [(78 91 -40 23) -40] [(-2 62 75 -97) -97] [(-10 -63 -28 -45) -63] [(-75 -83 -82 -23) -83] [(-92 98 96 49) -92] [(-40 1 -67 -51) -67] [(-33 62 5 -63) -63] [(31 39 -17 44) -17] [(40 79 -70 -100) -100] [(10 -94 36 -52) -94] [(-83 -12 43 100) -83] [(-92 -56 88 -60) -92] [(44 -99 77 4) -99] [(52 -47 -22 44) -47] [(-3 -33 79 98) -33] [(81 -16 81 89) -16] [(86 31 -86 100) -86] [(-11 9 -89 -93) -93] [(45 -4 -28 -79) -79] [(-28 82 80 8) -28] [(-38 -27 -59 25) -59] [(18 -68 59 -41) -68] [(26 22 26 74) 22] [(11 -61 -10 -66) -66] [(-98 -46 45 -79) -98] [(75 2 51 -44) -44] [(-44 28 -50 -25) -50] [(-29 -46 -86 -22) -86] [(-39 38 -40 -34) -40] [(-48 59 -71 -11) -71] [(-40 -69 25 37) -69] [(-63 -75 -58 -12) -75] [(64 80 75 93) 64] [(-14 43 -10 -10) -14] [(54 -7 -29 -82) -82] [(44 -1 -91 43) -91] [(-40 -43 52 -2) -43] [(92 -59 99 47) -59] [(84 -24 69 -44) -44] [(30 52 11 -23) -23] [(60 -2 70 -40) -40] [(50 -61 -7 57) -61] [(-55 -59 -32 55) -59] [(9 49 -63 -28) -63] [(-62 72 69 -10) -62] [(42 -24 -65 100) -65] [(-70 96 100 83) -70] [(10 88 5 -4) -4] [(-34 -24 -81 20) -81] [(-19 20 -7 -65) -65] [(-1 -8 -3 -48) -48] [(-99 -99 -31 -31) -99])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: 61                 
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: 1                  
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 78                 
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 100                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: 44                 
Correct output: -33                 | Program output: 98                 
Correct output: -16                 | Program output: 89                 
Correct output: -86                 | Program output: 100                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: 25                 
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: 37                 
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 43                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: 57                 
Correct output: -59                 | Program output: 55                 
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: 100                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: 20                 
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_empty} {:close 0, :instruction tagged_11} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_243} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_swap exec_do*times (boolean_or exec_do*while () integer_dup_times print_boolean exec_do*range () integer_eq) integer_max in4 print_integer boolean_yank boolean_eq print_boolean boolean_yank exec_do*range (integer_yankdup) boolean_not boolean_empty tagged_11 exec_rot (boolean_or integer_dup boolean_flush tagged_243) (boolean_invert_second_then_and) ())
Lexicase best errors: [1 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_empty} {:close 0, :instruction tagged_11} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_243} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_swap exec_do*times (boolean_or exec_do*while () integer_dup_times print_boolean exec_do*range () integer_eq) integer_max in4 print_integer boolean_yank boolean_eq print_boolean boolean_yank exec_do*range (integer_yankdup) boolean_not boolean_empty tagged_11 exec_rot (boolean_or integer_dup boolean_flush tagged_243) (boolean_invert_second_then_and) ())
Zero cases best errors: [1 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 7 3 3 14 4 4 6 5 4)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (4 7 3 3 14 4 4 6 5 4)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (integer_fromboolean integer_lte boolean_invert_second_then_and boolean_dup_times exec_y_when_autoconstructing (boolean_rot) integer_lt boolean_invert_first_then_and integer_dup exec_yank integer_shove exec_empty integer_fromboolean boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Errors: [1 1 0 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 26
Size: 33
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 9.946
Median total errors in population: 10
Error averages by case: (0.996 0.993 0.997 0.997 0.986 0.996 0.996 0.994 0.995 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.417
Average program size in population (points): 69.42
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 464797
--- Timings ---
Current time: 1559582738485 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.6%
Reproduction:         0.8 seconds, 32.7%
Fitness Testing:      1.5 seconds, 62.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: 61                 
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: 1                  
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 78                 
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 100                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: 44                 
Correct output: -33                 | Program output: 98                 
Correct output: -16                 | Program output: 89                 
Correct output: -86                 | Program output: 100                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: 25                 
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: 37                 
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 43                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: 57                 
Correct output: -59                 | Program output: 55                 
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: 100                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: 20                 
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_484} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (integer_dup_items integer_max in3 boolean_swap boolean_not boolean_eq tag_exec_484 (integer_lte) exec_y_when_autoconstructing (integer_shove exec_empty) integer_fromboolean boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Lexicase best errors: [0 0 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_484} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (integer_dup_items integer_max in3 boolean_swap boolean_not boolean_eq tag_exec_484 (integer_lte) exec_y_when_autoconstructing (integer_shove exec_empty) integer_fromboolean boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Zero cases best errors: [0 0 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (614 415 788 207 1000 788 412 246 415 1000)
Population mean number of elite cases: 5.89
Count of perfect (error zero) individuals by case: (614 415 788 207 0 788 412 246 415 0)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_boolean_265} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup})
Best program: (exec_while () exec_yankdup tag_boolean_265 in4 integer_lt exec_s_when_autoconstructing (boolean_stackdepth integer_sub boolean_yank integer_eq integer_yank print_integer) (in2) (boolean_pop) integer_shove boolean_yankdup integer_yankdup exec_dup_items integer_flush exec_dup_times (boolean_shove exec_eq) in2 exec_do*range () exec_dup_items exec_while () integer_dup_items exec_k (exec_dup ()) ())
Errors: [0 0 0 1 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 29
Size: 40
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 6.115
Median total errors in population: 6
Error averages by case: (0.386 0.585 0.212 0.793 1.0 0.212 0.588 0.754 0.585 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 39.376
Average program size in population (points): 52.382
Average percent parens in population: 0.247
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.498
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 934840
--- Timings ---
Current time: 1559582740970 milliseconds
Total Time:           5.0 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         2.3 seconds, 46.3%
Fitness Testing:      2.1 seconds, 41.1%
Report:               0.5 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 57                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 13                 
Correct output: 52                  | Program output: 91                 
Correct output: 21                  | Program output: 49                 
Correct output: 7                   | Program output: 99                 
Correct output: 40                  | Program output: 41                 
Correct output: 10                  | Program output: 40                 
Correct output: 29                  | Program output: 40                 
Correct output: 18                  | Program output: 23                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 82                 
Correct output: 34                  | Program output: 47                 
Correct output: 17                  | Program output: 60                 
Correct output: 3                   | Program output: 64                 
Correct output: 0                   | Program output: 76                 
Correct output: 28                  | Program output: 65                 
Correct output: 21                  | Program output: 75                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 56                 
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 59                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 59                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 96                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 43                 
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 77                 
Correct output: -47                 | Program output: -22                
Correct output: -33                 | Program output: 79                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 80                 
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: 25                 
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 75                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 99                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -7                 
Correct output: -59                 | Program output: -32                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: 100                
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (integer_fromboolean integer_lte boolean_invert_second_then_and boolean_dup_times exec_y_when_autoconstructing (boolean_rot) integer_lt boolean_invert_first_then_and integer_dup exec_yank integer_shove exec_empty integer_fromboolean boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Lexicase best errors: [1 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (integer_fromboolean integer_lte boolean_invert_second_then_and boolean_dup_times exec_y_when_autoconstructing (boolean_rot) integer_lt boolean_invert_first_then_and integer_dup exec_yank integer_shove exec_empty integer_fromboolean boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Zero cases best errors: [1 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 692 492 503 1 1 2 2 888 375)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (1 692 492 503 1 1 2 2 888 375)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_484} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (integer_dup_items integer_max in3 boolean_swap boolean_not boolean_eq tag_exec_484 (integer_lte) exec_y_when_autoconstructing (integer_shove exec_empty) integer_fromboolean boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Errors: [1 0 0 0 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 25
Size: 33
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 7.043
Median total errors in population: 7
Error averages by case: (0.999 0.308 0.508 0.497 0.999 0.999 0.998 0.998 0.112 0.625)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.524
Average program size in population (points): 38.509
Average percent parens in population: 0.230
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0355
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.43
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1382332
--- Timings ---
Current time: 1559582744140 milliseconds
Total Time:           8.0 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.4 seconds, 55.5%
Fitness Testing:      2.5 seconds, 31.7%
Report:               0.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 83                 
Correct output: 0                   | Program output: 33                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 88                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -1                 
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: 44                 
Correct output: -57                 | Program output: 29                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 91                 
Correct output: -97                 | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: 98                 
Correct output: -67                 | Program output: 1                  
Correct output: -63                 | Program output: 62                 
Correct output: -17                 | Program output: 39                 
Correct output: -100                | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: 9                  
Correct output: -79                 | Program output: -4                 
Correct output: -28                 | Program output: 82                 
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: 2                  
Correct output: -50                 | Program output: 28                 
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: 38                 
Correct output: -71                 | Program output: 59                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 80                 
Correct output: -14                 | Program output: 43                 
Correct output: -82                 | Program output: -7                 
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: 52                 
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: 49                 
Correct output: -62                 | Program output: 72                 
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: 88                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: 20                 
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_949} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction tagged_948} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_839} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (integer_yankdup exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div tagged_949 integer_inc exec_yank boolean_stackdepth integer_gte integer_dec in2) (tagged_948 integer_dup) boolean_invert_first_then_and integer_yank boolean_dup_times) in2 integer_fromboolean boolean_and boolean_invert_first_then_and tagged_839 print_integer exec_shove (exec_if (integer_lte boolean_eq boolean_dup) (boolean_invert_first_then_and print_integer integer_lt boolean_rot integer_gte))) ()))))
Lexicase best errors: [0 0 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_949} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction tagged_948} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_839} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (integer_yankdup exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div tagged_949 integer_inc exec_yank boolean_stackdepth integer_gte integer_dec in2) (tagged_948 integer_dup) boolean_invert_first_then_and integer_yank boolean_dup_times) in2 integer_fromboolean boolean_and boolean_invert_first_then_and tagged_839 print_integer exec_shove (exec_if (integer_lte boolean_eq boolean_dup) (boolean_invert_first_then_and print_integer integer_lt boolean_rot integer_gte))) ()))))
Zero cases best errors: [0 0 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 257 257 257 392 388 389 256 182 175)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (249 257 257 257 392 388 389 256 182 175)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_949} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction tagged_948} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_839} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (integer_yankdup exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div tagged_949 integer_inc exec_yank boolean_stackdepth integer_gte integer_dec in2) (tagged_948 integer_dup) boolean_invert_first_then_and integer_yank boolean_dup_times) in2 integer_fromboolean boolean_and boolean_invert_first_then_and tagged_839 print_integer exec_shove (exec_if (integer_lte boolean_eq boolean_dup) (boolean_invert_first_then_and print_integer integer_lt boolean_rot integer_gte))) ()))))
Errors: [0 0 0 0 1 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 46
Size: 63
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 7.198
Median total errors in population: 7
Error averages by case: (0.751 0.743 0.743 0.743 0.608 0.612 0.611 0.744 0.818 0.825)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.656
Average program size in population (points): 43.857
Average percent parens in population: 0.251
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.964
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.501
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1844988
--- Timings ---
Current time: 1559582747016 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.5 seconds, 59.0%
Fitness Testing:      3.0 seconds, 26.7%
Report:               1.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: 70                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: 32                 
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: 50                 
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 90                 
Correct output: 21                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 21                  | Program output: 51                 
Correct output: 7                   | Program output: 10                 
Correct output: 40                  | Program output: 89                 
Correct output: 10                  | Program output: 36                 
Correct output: 29                  | Program output: 65                 
Correct output: 18                  | Program output: 93                 
Correct output: 3                   | Program output: 3                  
Correct output: 62                  | Program output: 72                 
Correct output: 34                  | Program output: 52                 
Correct output: 17                  | Program output: 71                 
Correct output: 3                   | Program output: 77                 
Correct output: 0                   | Program output: 47                 
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 100                
Correct output: 7                   | Program output: 91                 
Correct output: 45                  | Program output: 62                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -40                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 78                 
Correct output: -71                 | Program output: 80                 
Correct output: -40                 | Program output: 78                 
Correct output: -97                 | Program output: -2                 
Correct output: -63                 | Program output: -10                
Correct output: -83                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -40                
Correct output: -63                 | Program output: -33                
Correct output: -17                 | Program output: 31                 
Correct output: -100                | Program output: 40                 
Correct output: -94                 | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 44                 
Correct output: -47                 | Program output: 52                 
Correct output: -33                 | Program output: -3                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: 86                 
Correct output: -93                 | Program output: -11                
Correct output: -79                 | Program output: 45                 
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -38                
Correct output: -68                 | Program output: 18                 
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: 75                 
Correct output: -50                 | Program output: -44                
Correct output: -86                 | Program output: -29                
Correct output: -40                 | Program output: -39                
Correct output: -71                 | Program output: -48                
Correct output: -69                 | Program output: -40                
Correct output: -75                 | Program output: -63                
Correct output: 64                  | Program output: 64                 
Correct output: -14                 | Program output: -14                
Correct output: -82                 | Program output: 54                 
Correct output: -91                 | Program output: 44                 
Correct output: -43                 | Program output: -40                
Correct output: -59                 | Program output: 92                 
Correct output: -44                 | Program output: 84                 
Correct output: -23                 | Program output: 30                 
Correct output: -40                 | Program output: 60                 
Correct output: -61                 | Program output: 50                 
Correct output: -59                 | Program output: -55                
Correct output: -63                 | Program output: 9                  
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: 42                 
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: 10                 
Correct output: -81                 | Program output: -34                
Correct output: -65                 | Program output: -19                
Correct output: -48                 | Program output: -1                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_empty} {:close 0, :instruction tagged_11} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_243} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_swap exec_do*times (boolean_or exec_do*while () integer_dup_times print_boolean exec_do*range () integer_eq) integer_max in1 print_integer boolean_yank boolean_eq print_boolean boolean_yank exec_do*range (integer_yankdup) exec_s (boolean_empty) () (tagged_11 exec_rot (boolean_or integer_dup boolean_flush tagged_243) (boolean_invert_second_then_and) ()))
Lexicase best errors: [0 0 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 37
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_empty} {:close 0, :instruction tagged_11} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_243} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_swap exec_do*times (boolean_or exec_do*while () integer_dup_times print_boolean exec_do*range () integer_eq) integer_max in1 print_integer boolean_yank boolean_eq print_boolean boolean_yank exec_do*range (integer_yankdup) exec_s (boolean_empty) () (tagged_11 exec_rot (boolean_or integer_dup boolean_flush tagged_243) (boolean_invert_second_then_and) ()))
Zero cases best errors: [0 0 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 37
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 76 460 25 842 25 383 76 804 77)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (76 76 460 25 842 25 383 76 804 77)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_empty} {:close 0, :instruction tagged_11} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_243} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_swap exec_do*times (boolean_or exec_do*while () integer_dup_times print_boolean exec_do*range () integer_eq) integer_max in1 print_integer boolean_yank boolean_eq print_boolean boolean_yank exec_do*range (integer_yankdup) boolean_not boolean_empty tagged_11 exec_rot (boolean_or integer_dup boolean_flush tagged_243) (boolean_invert_second_then_and) ())
Errors: [0 0 0 1 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 26
Size: 34
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.156
Median total errors in population: 8
Error averages by case: (0.924 0.924 0.54 0.975 0.158 0.975 0.617 0.924 0.196 0.923)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.368
Average program size in population (points): 47.902
Average percent parens in population: 0.258
Minimum age in population: 4.5
Maximum age in population: 7.875
Average age in population: 6.475125
Median age in population: 6.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2411823
--- Timings ---
Current time: 1559582749635 milliseconds
Total Time:          13.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.4 seconds, 60.8%
Fitness Testing:      3.5 seconds, 25.0%
Report:               1.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: 61                 
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: 1                  
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 78                 
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 100                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: 44                 
Correct output: -33                 | Program output: 98                 
Correct output: -16                 | Program output: 89                 
Correct output: -86                 | Program output: 100                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: 25                 
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: 37                 
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 43                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: 57                 
Correct output: -59                 | Program output: 55                 
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: 100                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: 20                 
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (integer_yankdup exec_k (exec_empty) (integer_fromboolean boolean_invert_second_then_and) exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank boolean_rot)) ())))))
Lexicase best errors: [0 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 37
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (integer_yankdup exec_k (exec_empty) (integer_fromboolean boolean_invert_second_then_and) exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank boolean_rot)) ())))))
Zero cases best errors: [0 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 37
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 905 91 203 203 905 613 204 296 1000)
Population mean number of elite cases: 4.62
Count of perfect (error zero) individuals by case: (204 905 91 203 203 905 613 204 296 0)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_484} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (integer_dup_items integer_max boolean_dup boolean_swap boolean_not boolean_eq tag_exec_484 (integer_lte) exec_y_when_autoconstructing (integer_shove exec_empty) integer_fromboolean boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Errors: [0 0 1 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 25
Size: 33
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.376
Median total errors in population: 7
Error averages by case: (0.796 0.095 0.909 0.797 0.797 0.095 0.387 0.796 0.704 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 28.508
Average program size in population (points): 38.53
Average percent parens in population: 0.256
Minimum age in population: 5.5
Maximum age in population: 9.6875
Average age in population: 8.0250625
Median age in population: 8.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 220
Genome diversity (% unique genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.421
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2727600
--- Timings ---
Current time: 1559582752108 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.3 seconds, 63.3%
Fitness Testing:      3.7 seconds, 23.0%
Report:               2.1 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 83                 
Correct output: 0                   | Program output: 33                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 88                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -1                 
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: 44                 
Correct output: -57                 | Program output: 29                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 91                 
Correct output: -97                 | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: 98                 
Correct output: -67                 | Program output: 1                  
Correct output: -63                 | Program output: 62                 
Correct output: -17                 | Program output: 39                 
Correct output: -100                | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: 9                  
Correct output: -79                 | Program output: -4                 
Correct output: -28                 | Program output: 82                 
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: 2                  
Correct output: -50                 | Program output: 28                 
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: 38                 
Correct output: -71                 | Program output: 59                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 80                 
Correct output: -14                 | Program output: 43                 
Correct output: -82                 | Program output: -7                 
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: 52                 
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: 49                 
Correct output: -62                 | Program output: 72                 
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: 88                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: 20                 
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_949} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction tagged_948} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_839} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (integer_yankdup exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_div tagged_949 integer_inc exec_yank boolean_not integer_gte integer_dec in2) (tagged_948 integer_dup) boolean_invert_first_then_and integer_yank boolean_dup_times) in2 integer_fromboolean boolean_and boolean_invert_first_then_and tagged_839 print_integer exec_shove (exec_if (integer_mult boolean_eq boolean_dup) (boolean_invert_first_then_and print_integer integer_lt boolean_rot integer_gte))) ()))))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 60
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_949} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction tagged_948} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_839} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (integer_yankdup exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_div tagged_949 integer_inc exec_yank boolean_not integer_gte integer_dec in2) (tagged_948 integer_dup) boolean_invert_first_then_and integer_yank boolean_dup_times) in2 integer_fromboolean boolean_and boolean_invert_first_then_and tagged_839 print_integer exec_shove (exec_if (integer_mult boolean_eq boolean_dup) (boolean_invert_first_then_and print_integer integer_lt boolean_rot integer_gte))) ()))))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 60
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 863 683 183 7 179 191 11 182 853)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (189 863 683 183 7 179 191 11 182 853)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_949} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction tagged_948} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_839} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (integer_swap integer_yankdup exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div tagged_949 integer_inc exec_yank boolean_not integer_gte integer_dec in2) (tagged_948 integer_dup) boolean_invert_first_then_and integer_yank boolean_dup_times) in2 integer_fromboolean boolean_and integer_yank tagged_839 print_integer exec_shove (exec_if (integer_mult boolean_eq boolean_dup) (boolean_invert_first_then_and print_integer integer_lt boolean_rot integer_gte))) ())))
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 46
Size: 62
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.659
Median total errors in population: 7
Error averages by case: (0.811 0.137 0.317 0.817 0.993 0.821 0.809 0.989 0.818 0.147)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.549
Average program size in population (points): 42.773
Average percent parens in population: 0.283
Minimum age in population: 6.5
Maximum age in population: 11.25
Average age in population: 9.5354375
Median age in population: 9.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3169225
--- Timings ---
Current time: 1559582754889 milliseconds
Total Time:          19.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.3 seconds, 64.9%
Fitness Testing:      4.1 seconds, 21.8%
Report:               2.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 83                 
Correct output: 0                   | Program output: 33                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 88                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -1                 
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: 44                 
Correct output: -57                 | Program output: 29                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 91                 
Correct output: -97                 | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: 98                 
Correct output: -67                 | Program output: 1                  
Correct output: -63                 | Program output: 62                 
Correct output: -17                 | Program output: 39                 
Correct output: -100                | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: 9                  
Correct output: -79                 | Program output: -4                 
Correct output: -28                 | Program output: 82                 
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: 2                  
Correct output: -50                 | Program output: 28                 
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: 38                 
Correct output: -71                 | Program output: 59                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 80                 
Correct output: -14                 | Program output: 43                 
Correct output: -82                 | Program output: -7                 
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: 52                 
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: 49                 
Correct output: -62                 | Program output: 72                 
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: 88                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: 20                 
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_484} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction tagged_948} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_839} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mod})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (integer_yankdup exec_k (tag_exec_484 (integer_lte) exec_when (boolean_dup_items integer_inc exec_yank boolean_not integer_gte integer_dec in2) tagged_948 integer_dup) (boolean_invert_first_then_and integer_yank integer_mod) in2 integer_fromboolean boolean_and boolean_invert_first_then_and tagged_839 print_integer exec_shove (exec_if (integer_mult boolean_eq boolean_dup) (boolean_invert_first_then_and print_integer integer_lt boolean_rot integer_mod))))))
Lexicase best errors: [0 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_484} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction tagged_948} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_839} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mod})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (integer_yankdup exec_k (tag_exec_484 (integer_lte) exec_when (boolean_dup_items integer_inc exec_yank boolean_not integer_gte integer_dec in2) tagged_948 integer_dup) (boolean_invert_first_then_and integer_yank integer_mod) in2 integer_fromboolean boolean_and boolean_invert_first_then_and tagged_839 print_integer exec_shove (exec_if (integer_mult boolean_eq boolean_dup) (boolean_invert_first_then_and print_integer integer_lt boolean_rot integer_mod))))))
Zero cases best errors: [0 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (846 8 108 730 52 108 833 587 9 586)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (846 8 108 730 52 108 833 587 9 586)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_484} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction tagged_948} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_839} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mod})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing () integer_yankdup exec_k (tag_exec_484 (integer_lte) exec_when (boolean_dup_items integer_inc exec_yank boolean_not integer_gte integer_dec in2) tagged_948 integer_dup) (boolean_invert_first_then_and integer_yank boolean_dup_times) in2 integer_fromboolean boolean_and boolean_invert_first_then_and tagged_839 print_integer exec_shove (exec_if (integer_mult boolean_eq boolean_dup) (boolean_invert_first_then_and print_integer integer_lt boolean_rot integer_mod)))))
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 53
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 6.133
Median total errors in population: 5
Error averages by case: (0.154 0.992 0.892 0.27 0.948 0.892 0.167 0.413 0.991 0.414)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.252
Average program size in population (points): 52.374
Average percent parens in population: 0.270
Minimum age in population: 9.8125
Maximum age in population: 12.625
Average age in population: 11.4683125
Median age in population: 11.578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3583945
--- Timings ---
Current time: 1559582757379 milliseconds
Total Time:          21.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.1 seconds, 65.6%
Fitness Testing:      4.5 seconds, 21.0%
Report:               2.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: 61                 
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: 1                  
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 78                 
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 100                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: 44                 
Correct output: -33                 | Program output: 98                 
Correct output: -16                 | Program output: 89                 
Correct output: -86                 | Program output: 100                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: 25                 
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: 37                 
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 43                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: 57                 
Correct output: -59                 | Program output: 55                 
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: 100                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: 20                 
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_484} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (boolean_eq tag_exec_484 (exec_do*range () integer_eq) integer_max integer_gte integer_shove exec_empty integer_fromboolean boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_484} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (boolean_eq tag_exec_484 (exec_do*range () integer_eq) integer_max integer_gte integer_shove exec_empty integer_fromboolean boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (549 554 864 249 549 309 249 549 554 309)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (549 554 864 249 549 309 249 549 554 309)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 15
Size: 23
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 5.265
Median total errors in population: 4
Error averages by case: (0.451 0.446 0.136 0.751 0.451 0.691 0.751 0.451 0.446 0.691)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.299
Average program size in population (points): 44.303
Average percent parens in population: 0.269
Minimum age in population: 11.25
Maximum age in population: 14.546875
Average age in population: 13.00546875
Median age in population: 13.0703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4058513
--- Timings ---
Current time: 1559582759842 milliseconds
Total Time:          24.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.9 seconds, 66.1%
Fitness Testing:      4.9 seconds, 20.5%
Report:               3.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: 61                 
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: 1                  
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 78                 
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 100                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: 44                 
Correct output: -33                 | Program output: 98                 
Correct output: -16                 | Program output: 89                 
Correct output: -86                 | Program output: 100                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: 25                 
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: 37                 
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 43                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: 57                 
Correct output: -59                 | Program output: 55                 
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: 100                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: 20                 
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_949} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div tagged_949 integer_inc exec_yank exec_empty) (integer_fromboolean boolean_invert_second_then_and) exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ()))))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.352
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_949} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div tagged_949 integer_inc exec_yank exec_empty) (integer_fromboolean boolean_invert_second_then_and) exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ()))))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.352
--- Lexicase Population Statistics ---
Count of elite individuals by case: (701 875 691 186 700 193 703 187 691 2)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (701 875 691 186 700 193 703 187 691 2)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_949} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div tagged_949 integer_inc exec_yank exec_empty) (integer_fromboolean boolean_invert_second_then_and) exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ()))))
Errors: [0 0 0 1 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 35
Size: 54
Percent parens: 0.352
--- Population Statistics ---
Average total errors in population: 5.071
Median total errors in population: 4
Error averages by case: (0.299 0.125 0.309 0.814 0.3 0.807 0.297 0.813 0.309 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.332
Average program size in population (points): 42.106
Average percent parens in population: 0.301
Minimum age in population: 12.3125
Maximum age in population: 16.09765625
Average age in population: 14.510484375
Median age in population: 14.583984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.525
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4421827
--- Timings ---
Current time: 1559582762565 milliseconds
Total Time:          26.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.9 seconds, 67.2%
Fitness Testing:      5.3 seconds, 19.7%
Report:               3.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 90                 
Correct output: 21                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 21                  | Program output: 51                 
Correct output: 7                   | Program output: 10                 
Correct output: 40                  | Program output: 89                 
Correct output: 10                  | Program output: 36                 
Correct output: 29                  | Program output: 65                 
Correct output: 18                  | Program output: 93                 
Correct output: 3                   | Program output: 3                  
Correct output: 62                  | Program output: 72                 
Correct output: 34                  | Program output: 52                 
Correct output: 17                  | Program output: 71                 
Correct output: 3                   | Program output: 77                 
Correct output: 0                   | Program output: 47                 
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 100                
Correct output: 7                   | Program output: 91                 
Correct output: 45                  | Program output: 62                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -40                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 80                 
Correct output: -40                 | Program output: 78                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 31                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 44                 
Correct output: -47                 | Program output: 52                 
Correct output: -33                 | Program output: -3                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: 86                 
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -38                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: -40                
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 64                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 44                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 92                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: 50                 
Correct output: -59                 | Program output: -55                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: 42                 
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_484} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (integer_dup_items integer_max integer_swap boolean_swap boolean_not boolean_eq tag_exec_484 (integer_lte) in1 exec_empty integer_fromboolean boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_484} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (integer_dup_items integer_max integer_swap boolean_swap boolean_not boolean_eq tag_exec_484 (integer_lte) in1 exec_empty integer_fromboolean boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 159 847 159 652 161 208 218 1000 368)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (158 159 847 159 652 161 208 218 0 368)
Population mean number of perfect (error zero) cases: 2.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_484} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (integer_dup_items integer_max in3 boolean_swap boolean_not boolean_eq in3 boolean_swap boolean_not boolean_eq tag_exec_484 (boolean_dup_items) integer_eq integer_max in1 integer_gte exec_empty integer_fromboolean boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (integer_fromboolean exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Errors: [0 0 0 0 0 0 1 1 1 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 38
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 7.07
Median total errors in population: 8
Error averages by case: (0.842 0.841 0.153 0.841 0.348 0.839 0.792 0.782 1.0 0.632)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 35.422
Average program size in population (points): 51.371
Average percent parens in population: 0.304
Minimum age in population: 13.3125
Maximum age in population: 17.724609375
Average age in population: 16.446087890625
Median age in population: 16.45703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 318
Genome diversity (% unique genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 318
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4970668
--- Timings ---
Current time: 1559582765494 milliseconds
Total Time:          29.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.7 seconds, 67.4%
Fitness Testing:      5.7 seconds, 19.5%
Report:               3.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 33                 
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 83                 
Correct output: 0                   | Program output: 33                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 88                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 76                 
Correct output: 3                   | Program output: 360                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: 44                 
Correct output: -57                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 91                 
Correct output: -97                 | Program output: 62                 
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 98                 
Correct output: -67                 | Program output: 1                  
Correct output: -63                 | Program output: 62                 
Correct output: -17                 | Program output: 39                 
Correct output: -100                | Program output: 79                 
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 82                 
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: 28                 
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: 38                 
Correct output: -71                 | Program output: 59                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 80                 
Correct output: -14                 | Program output: 43                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: 52                 
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: 49                 
Correct output: -62                 | Program output: 72                 
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: 88                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: 20                 
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ()))))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 52
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ()))))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 52
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (859 11 256 10 253 897 899 249 5 865)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (859 11 256 10 253 897 899 249 5 865)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ()))))
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 33
Size: 52
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 5.696
Median total errors in population: 6
Error averages by case: (0.141 0.989 0.744 0.99 0.747 0.103 0.101 0.751 0.995 0.135)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.599
Average program size in population (points): 40.558
Average percent parens in population: 0.257
Minimum age in population: 15.515625
Maximum age in population: 19.2041015625
Average age in population: 17.8308896484375
Median age in population: 18.033203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.414
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.376
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5664479
--- Timings ---
Current time: 1559582768395 milliseconds
Total Time:          32.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.7 seconds, 66.8%
Fitness Testing:      6.3 seconds, 19.5%
Report:               4.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 83                 
Correct output: 0                   | Program output: 33                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 88                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 76                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -1                 
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: 44                 
Correct output: -57                 | Program output: 29                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 91                 
Correct output: -97                 | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: 98                 
Correct output: -67                 | Program output: 1                  
Correct output: -63                 | Program output: 62                 
Correct output: -17                 | Program output: 39                 
Correct output: -100                | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: 9                  
Correct output: -79                 | Program output: -4                 
Correct output: -28                 | Program output: 82                 
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: 2                  
Correct output: -50                 | Program output: 28                 
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: 38                 
Correct output: -71                 | Program output: 59                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 80                 
Correct output: -14                 | Program output: 43                 
Correct output: -82                 | Program output: -7                 
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: 52                 
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: 49                 
Correct output: -62                 | Program output: 72                 
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: 88                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: 20                 
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup print_integer) exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))))
Lexicase best errors: [1 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.349
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup print_integer) exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))))
Zero cases best errors: [1 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.349
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 416 849 21 55 424 419 1000 423 1000)
Population mean number of elite cases: 5.61
Count of perfect (error zero) individuals by case: (0 416 849 21 55 424 419 0 423 0)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 boolean_pop exec_dup (exec_dup_items integer_yank print_integer) exec_dup_times (integer_mult boolean_yank) boolean_rot)) ()))))
Errors: [1 0 0 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 49
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 7.393
Median total errors in population: 9
Error averages by case: (1.0 0.584 0.151 0.979 0.945 0.576 0.581 1.0 0.577 1.0)
Error minima by case: (1 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 31.022
Average program size in population (points): 46.129
Average percent parens in population: 0.322
Minimum age in population: 17.9755859375
Maximum age in population: 21.15576171875
Average age in population: 19.87484716796875
Median age in population: 19.88671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 260
Genome diversity (% unique genomes):	 0.396
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 260
Syntactic diversity (% unique Push programs):	 0.391
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6233265
--- Timings ---
Current time: 1559582770970 milliseconds
Total Time:          35.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.4 seconds, 66.8%
Fitness Testing:      6.8 seconds, 19.5%
Report:               4.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 33                 
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 83                 
Correct output: 0                   | Program output: 33                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 88                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 76                 
Correct output: 3                   | Program output: 360                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: 44                 
Correct output: -57                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 91                 
Correct output: -97                 | Program output: 62                 
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 98                 
Correct output: -67                 | Program output: 1                  
Correct output: -63                 | Program output: 62                 
Correct output: -17                 | Program output: 39                 
Correct output: -100                | Program output: 79                 
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: 9                  
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 82                 
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: 28                 
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: 38                 
Correct output: -71                 | Program output: 59                 
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 80                 
Correct output: -14                 | Program output: 43                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: 52                 
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: 49                 
Correct output: -62                 | Program output: 72                 
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: 88                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: 20                 
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction 44} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup exec_pop (integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec 44) boolean_invert_second_then_and) (exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))) ()))) ()))))
Lexicase best errors: [1 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 64
Percent parens: 0.406
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction 44} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup exec_pop (integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec 44) boolean_invert_second_then_and) (exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))) ()))) ()))))
Zero cases best errors: [1 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 64
Percent parens: 0.406
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1 6 163 163 699 148 863 700 703)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (0 1 6 163 163 699 148 863 700 703)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot boolean_flush integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 boolean_yank exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ()))))
Errors: [1 1 1 0 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 52
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 6.554
Median total errors in population: 6
Error averages by case: (1.0 0.999 0.994 0.837 0.837 0.301 0.852 0.137 0.3 0.297)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.122
Average program size in population (points): 48.45
Average percent parens in population: 0.356
Minimum age in population: 19.6669921875
Maximum age in population: 23.0693359375
Average age in population: 21.40446752929688
Median age in population: 21.48291015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6619188
--- Timings ---
Current time: 1559582773607 milliseconds
Total Time:          37.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.3 seconds, 67.2%
Fitness Testing:      7.2 seconds, 19.1%
Report:               5.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -1                 
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: 1                  
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 100                
Correct output: -93                 | Program output: 9                  
Correct output: -79                 | Program output: -4                 
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -7                 
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) exec_dup (exec_s (integer_yank print_integer) (exec_k (integer_mult boolean_yank) (boolean_rot)) ()))
Lexicase best errors: [0 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) exec_dup (exec_s (integer_yank print_integer) (exec_k (integer_mult boolean_yank) (boolean_rot)) ()))
Zero cases best errors: [0 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 257 781 859 127 378 1000 260 362 257)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (257 257 781 859 127 378 0 260 362 257)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) exec_dup (exec_s (integer_yank print_integer) (exec_k (integer_mult boolean_yank) (boolean_rot)) ()))
Errors: [0 0 0 0 1 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 39
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.462
Median total errors in population: 7
Error averages by case: (0.743 0.743 0.219 0.141 0.873 0.622 1.0 0.74 0.638 0.743)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 34.507
Average program size in population (points): 52.843
Average percent parens in population: 0.345
Minimum age in population: 20.88671875
Maximum age in population: 24.73291015625
Average age in population: 22.88955944824219
Median age in population: 23.01605224609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.502
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7065553
--- Timings ---
Current time: 1559582776098 milliseconds
Total Time:          40.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.0 seconds, 67.1%
Fitness Testing:      7.6 seconds, 19.0%
Report:               5.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 453                
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 57                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 13                 
Correct output: 52                  | Program output: 91                 
Correct output: 21                  | Program output: 49                 
Correct output: 7                   | Program output: 99                 
Correct output: 40                  | Program output: 41                 
Correct output: 10                  | Program output: 40                 
Correct output: 29                  | Program output: 40                 
Correct output: 18                  | Program output: 23                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 82                 
Correct output: 34                  | Program output: 47                 
Correct output: 17                  | Program output: 60                 
Correct output: 3                   | Program output: 6460               
Correct output: 0                   | Program output: 76                 
Correct output: 28                  | Program output: 65                 
Correct output: 21                  | Program output: 75                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 56                 
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 59                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: 19                 
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 59                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: 75                 
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 96                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -70                
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 43                 
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 77                 
Correct output: -47                 | Program output: -22                
Correct output: -33                 | Program output: 79                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 80                 
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: 25                 
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 75                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 99                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: 11                 
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -7                 
Correct output: -59                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: 69                 
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: 100                
Correct output: -4                  | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) integer_dup_items integer_max) in3 boolean_swap exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot boolean_flush integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 boolean_yank exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))
Lexicase best errors: [1 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) integer_dup_items integer_max) in3 boolean_swap exec_swap () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot boolean_flush integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 boolean_yank exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))
Zero cases best errors: [1 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 561 94 94 94 94 1000 869 720 874)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (0 561 94 94 94 94 0 869 720 874)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) integer_dup_items integer_max) in3 boolean_swap boolean_not boolean_eq exec_swap () (exec_s_when_autoconstructing () (integer_swap integer_inc exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (in3) boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))) ()))
Errors: [1 1 0 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 64
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 6.6
Median total errors in population: 6
Error averages by case: (1.0 0.439 0.906 0.906 0.906 0.906 1.0 0.131 0.28 0.126)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 32.179
Average program size in population (points): 48.566
Average percent parens in population: 0.333
Minimum age in population: 22.107421875
Maximum age in population: 26.64886474609375
Average age in population: 24.53571051025391
Median age in population: 24.677978515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.497
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7492923
--- Timings ---
Current time: 1559582778778 milliseconds
Total Time:          42.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.7 seconds, 67.3%
Fitness Testing:      8.0 seconds, 18.8%
Report:               5.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -1                 
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: 1                  
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 100                
Correct output: -93                 | Program output: 9                  
Correct output: -79                 | Program output: -4                 
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -7                 
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) exec_dup (exec_s (integer_yank print_integer) (exec_k (integer_mult boolean_yank) (boolean_rot)) ()))
Lexicase best errors: [1 1 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) exec_dup (exec_s (integer_yank print_integer) (exec_k (integer_mult boolean_yank) (boolean_rot)) ()))
Zero cases best errors: [1 1 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (22 455 1000 285 327 1000 285 293 319 451)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (22 455 0 285 327 0 285 293 319 451)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) exec_dup (exec_s (integer_yank print_integer) (exec_k (integer_mult boolean_yank) (boolean_rot)) ()))
Errors: [1 1 1 0 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 28
Size: 39
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 7.563
Median total errors in population: 8
Error averages by case: (0.978 0.545 1.0 0.715 0.673 1.0 0.715 0.707 0.681 0.549)
Error minima by case: (0 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 38.4
Average program size in population (points): 57.079
Average percent parens in population: 0.325
Minimum age in population: 23.107421875
Maximum age in population: 28.00030517578125
Average age in population: 26.20524395751953
Median age in population: 26.32255554199219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8034343
--- Timings ---
Current time: 1559582781454 milliseconds
Total Time:          45.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.6 seconds, 67.2%
Fitness Testing:      8.5 seconds, 18.7%
Report:               6.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 588
Test mean error for best: 0.58800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 83                 
Correct output: 0                   | Program output: 33                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 88                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -1-70              
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: 44                 
Correct output: -57                 | Program output: 29                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 91                 
Correct output: -97                 | Program output: 62                 
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 98                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: 62                 
Correct output: -17                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 82                 
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: 2                  
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 80                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: 52                 
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: 72                 
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: 88                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger)) exec_k_when_autoconstructing () (integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in2) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) integer_mult) ()))) ()))
Lexicase best errors: [0 1 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 52
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger)) exec_k_when_autoconstructing () (integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in2) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) integer_mult) ()))) ()))
Zero cases best errors: [0 1 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 52
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 316 524 854 205 213 854 328 673 1000)
Population mean number of elite cases: 5.35
Count of perfect (error zero) individuals by case: (383 316 524 854 205 213 854 328 673 0)
Population mean number of perfect (error zero) cases: 4.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (integer_max exec_do*count (integer_lt boolean_frominteger) integer_dup_items integer_max in3 boolean_swap boolean_not boolean_eq exec_swap () (exec_s_when_autoconstructing () (integer_swap integer_inc exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (in3) (boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) boolean_invert_second_then_and exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ()))) ()))
Errors: [1 0 1 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 43
Size: 63
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 5.65
Median total errors in population: 5
Error averages by case: (0.617 0.684 0.476 0.146 0.795 0.787 0.146 0.672 0.327 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 35.431
Average program size in population (points): 53.317
Average percent parens in population: 0.329
Minimum age in population: 24.107421875
Maximum age in population: 29.54368591308594
Average age in population: 27.70061561584473
Median age in population: 27.75613403320312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.007
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8547218
--- Timings ---
Current time: 1559582784304 milliseconds
Total Time:          48.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.5 seconds, 67.3%
Fitness Testing:      9.0 seconds, 18.7%
Report:               6.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 57                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 13                 
Correct output: 52                  | Program output: 91                 
Correct output: 21                  | Program output: 49                 
Correct output: 7                   | Program output: 99                 
Correct output: 40                  | Program output: 41                 
Correct output: 10                  | Program output: 40                 
Correct output: 29                  | Program output: 40                 
Correct output: 18                  | Program output: 23                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 82                 
Correct output: 34                  | Program output: 47                 
Correct output: 17                  | Program output: 60                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 12                 
Correct output: 28                  | Program output: 65                 
Correct output: 21                  | Program output: 75                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 56                 
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: 61                 
Correct output: 23                  | Program output: 59                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: 19                 
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: 75                 
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 96                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -70                
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 100                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: 44                 
Correct output: -33                 | Program output: 98                 
Correct output: -16                 | Program output: 89                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -89                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 80                 
Correct output: -59                 | Program output: 25                 
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: 37                 
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 75                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 43                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: 11                 
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: 57                 
Correct output: -59                 | Program output: 55                 
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: 69                 
Correct output: -65                 | Program output: 100                
Correct output: -70                 | Program output: 100                
Correct output: -4                  | Program output: 5                  
Correct output: -81                 | Program output: 20                 
Correct output: -65                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger)) exec_k_when_autoconstructing () (integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (in3 boolean_swap boolean_not) (boolean_eq exec_swap () (exec_s_when_autoconstructing () (integer_swap integer_inc exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (integer_gte integer_dec in2) boolean_invert_second_then_and) exec_yankdup in4) (boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult integer_min) boolean_rot) ())))))) ()))
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 61
Percent parens: 0.393
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger)) exec_k_when_autoconstructing () (integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (in3 boolean_swap boolean_not) (boolean_eq exec_swap () (exec_s_when_autoconstructing () (integer_swap integer_inc exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (integer_gte integer_dec in2) boolean_invert_second_then_and) exec_yankdup in4) (boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult integer_min) boolean_rot) ())))))) ()))
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 61
Percent parens: 0.393
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 331 505 850 850 687 28 846 353 1000)
Population mean number of elite cases: 6.45
Count of perfect (error zero) individuals by case: (0 331 505 850 850 687 28 846 353 0)
Population mean number of perfect (error zero) cases: 4.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) boolean_invert_second_then_and integer_div exec_k (exec_y_when_autoconstructing (exec_swap (in3 boolean_swap boolean_not) (boolean_eq exec_swap () (exec_s_when_autoconstructing () (integer_swap integer_inc exec_k_when_autoconstructing (integer_mult) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap () (in3) boolean_dup integer_inc integer_gte boolean_empty boolean_rot integer_div integer_gte integer_dec in2) (boolean_invert_second_then_and) exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank)) ())))) ())))) ()))
Errors: [1 1 0 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 45
Size: 71
Percent parens: 0.366
--- Population Statistics ---
Average total errors in population: 5.55
Median total errors in population: 5
Error averages by case: (1.0 0.669 0.495 0.15 0.15 0.313 0.972 0.154 0.647 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 39.368
Average program size in population (points): 60.809
Average percent parens in population: 0.350
Minimum age in population: 25.107421875
Maximum age in population: 30.83678436279297
Average age in population: 29.11583497619629
Median age in population: 29.21870803833008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 9125905
--- Timings ---
Current time: 1559582787087 milliseconds
Total Time:          51.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.3 seconds, 67.1%
Fitness Testing:      9.5 seconds, 18.7%
Report:               7.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -1                 
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: 1                  
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: 1                  
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 100                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -4                 
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -7                 
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_202} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger)) exec_k_when_autoconstructing () (integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (tagged_202 integer_gte integer_dec in2) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (boolean_or integer_mult boolean_yank) (boolean_rot)))) ()))
Lexicase best errors: [0 1 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_202} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger)) exec_k_when_autoconstructing () (integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (tagged_202 integer_gte integer_dec in2) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (boolean_or integer_mult boolean_yank) (boolean_rot)))) ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (322 276 786 321 92 1000 1000 109 309 63)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (322 276 786 321 92 0 0 109 309 63)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () (integer_mult)) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec) (in2) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ()))
Errors: [0 1 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 52
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 7.722
Median total errors in population: 8
Error averages by case: (0.678 0.724 0.214 0.679 0.908 1.0 1.0 0.891 0.691 0.937)
Error minima by case: (0 0 0 0 0 1 1 0 0 0)
Average genome size in population (length): 41.924
Average program size in population (points): 65.409
Average percent parens in population: 0.356
Minimum age in population: 27.56924438476562
Maximum age in population: 32.49323272705078
Average age in population: 30.72049362182617
Median age in population: 30.82710266113281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.006
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 9754890
--- Timings ---
Current time: 1559582789925 milliseconds
Total Time:          53.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.1 seconds, 67.0%
Fitness Testing:     10.1 seconds, 18.7%
Report:               7.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -1                 
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: 1                  
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: 1                  
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 100                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -4                 
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -7                 
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger)) exec_k_when_autoconstructing () (integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in2) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult)) ()))) ()))
Lexicase best errors: [0 0 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.380
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger)) exec_k_when_autoconstructing () (integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in2) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult)) ()))) ()))
Zero cases best errors: [0 0 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.380
--- Lexicase Population Statistics ---
Count of elite individuals by case: (271 272 1000 13 1000 639 403 422 304 401)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (271 272 0 13 0 639 403 422 304 401)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count () integer_lt boolean_frominteger) exec_k_when_autoconstructing (integer_mult) () exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in2) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer integer_lt integer_mult boolean_yank) (boolean_rot) ()))) ()))
Errors: [0 0 1 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 33
Size: 51
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 7.275
Median total errors in population: 8
Error averages by case: (0.729 0.728 1.0 0.987 1.0 0.361 0.597 0.578 0.696 0.599)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 40.265
Average program size in population (points): 61.663
Average percent parens in population: 0.345
Minimum age in population: 28.56924438476562
Maximum age in population: 34.03522491455078
Average age in population: 32.21332778167725
Median age in population: 32.26846122741699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 10355950
--- Timings ---
Current time: 1559582792701 milliseconds
Total Time:          56.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.9 seconds, 66.9%
Fitness Testing:     10.6 seconds, 18.8%
Report:               8.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -1                 
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: 1                  
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: 1                  
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 100                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -4                 
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -7                 
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_do*times () exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () (integer_mult) boolean_dup_times in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in2) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) integer_pop) ()))) ())
Lexicase best errors: [0 0 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_do*times () exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () (integer_mult) boolean_dup_times in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in2) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) integer_pop) ()))) ())
Zero cases best errors: [0 0 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (670 841 1000 446 751 670 1000 80 751 1000)
Population mean number of elite cases: 7.21
Count of perfect (error zero) individuals by case: (670 841 0 446 751 670 0 80 751 0)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () (integer_mult)) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec) (in2) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ()))
Errors: [0 0 1 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 52
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 5.791
Median total errors in population: 5
Error averages by case: (0.33 0.159 1.0 0.554 0.249 0.33 1.0 0.92 0.249 1.0)
Error minima by case: (0 0 1 0 0 0 1 0 0 1)
Average genome size in population (length): 37.091
Average program size in population (points): 58.359
Average percent parens in population: 0.365
Minimum age in population: 30.69541168212891
Maximum age in population: 35.42952537536621
Average age in population: 33.80044404983521
Median age in population: 33.94801664352417
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 10828270
--- Timings ---
Current time: 1559582795357 milliseconds
Total Time:          59.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.7 seconds, 66.9%
Fitness Testing:     11.1 seconds, 18.7%
Report:               8.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -8                 
Correct output: -53                 | Program output: -12                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -46                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 78                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -28                
Correct output: -83                 | Program output: -82                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -70                
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 100                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: -22                
Correct output: -33                 | Program output: 98                 
Correct output: -16                 | Program output: 89                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -89                
Correct output: -79                 | Program output: -28                
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: -10                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: 37                 
Correct output: -75                 | Program output: -58                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -7                 
Correct output: -59                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -7                 
Correct output: -48                 | Program output: -3                 
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (integer_max exec_do*count (integer_lt) boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (in3 boolean_swap integer_yank) (boolean_eq in4) boolean_pop exec_dup (exec_s (boolean_frominteger print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ())
Lexicase best errors: [0 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (integer_max exec_do*count (integer_lt) boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (in3 boolean_swap integer_yank) (boolean_eq in4) boolean_pop exec_dup (exec_s (boolean_frominteger print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ())
Zero cases best errors: [0 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (739 21 561 1000 7 1 1000 564 1000 21)
Population mean number of elite cases: 4.91
Count of perfect (error zero) individuals by case: (739 21 561 0 7 1 0 564 0 21)
Population mean number of perfect (error zero) cases: 1.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (integer_max exec_do*count (integer_lt) boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (in3 boolean_swap integer_yank) (boolean_eq in4) boolean_pop exec_dup (exec_s (boolean_frominteger print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ())
Errors: [0 0 1 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 25
Size: 37
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 8.086
Median total errors in population: 8
Error averages by case: (0.261 0.979 0.439 1.0 0.993 0.999 1.0 0.436 1.0 0.979)
Error minima by case: (0 0 0 1 0 0 1 0 1 0)
Average genome size in population (length): 37.163
Average program size in population (points): 57.922
Average percent parens in population: 0.358
Minimum age in population: 32.31755447387695
Maximum age in population: 37.1478796005249
Average age in population: 34.84444724941254
Median age in population: 34.94158554077148
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 153
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 11311427
--- Timings ---
Current time: 1559582797965 milliseconds
Total Time:          62.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 66.9%
Fitness Testing:     11.6 seconds, 18.6%
Report:               8.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: 70                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: 32                 
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: 50                 
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 77                 
Correct output: 0                   | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -40                
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: 1                  
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: 78                 
Correct output: -71                 | Program output: 80                 
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -10                
Correct output: -83                 | Program output: -75                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -40                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 44                 
Correct output: -47                 | Program output: 52                 
Correct output: -33                 | Program output: -3                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: 100                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: 45                 
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: -38                
Correct output: -68                 | Program output: 18                 
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: 11                 
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -29                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: -40                
Correct output: -75                 | Program output: -63                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: 54                 
Correct output: -91                 | Program output: 44                 
Correct output: -43                 | Program output: -40                
Correct output: -59                 | Program output: 92                 
Correct output: -44                 | Program output: 84                 
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: 60                 
Correct output: -61                 | Program output: 50                 
Correct output: -59                 | Program output: -55                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: 42                 
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -1                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_swap (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () (integer_mult)) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ())))
Lexicase best errors: [0 0 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.377
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_swap (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () (integer_mult)) (exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ())))
Zero cases best errors: [0 0 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.377
--- Lexicase Population Statistics ---
Count of elite individuals by case: (791 377 10 790 24 8 28 799 463 143)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (791 377 10 790 24 8 28 799 463 143)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () (integer_mult)) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1) boolean_invert_second_then_and) (exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_yank integer_mult boolean_yank) (boolean_rot)))) ()))
Errors: [0 0 1 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 51
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.567
Median total errors in population: 6
Error averages by case: (0.209 0.623 0.99 0.21 0.976 0.992 0.972 0.201 0.537 0.857)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.682
Average program size in population (points): 43.83
Average percent parens in population: 0.342
Minimum age in population: 33.31755447387695
Maximum age in population: 38.50386452674866
Average age in population: 37.04180828428268
Median age in population: 36.96957111358643
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 355
Genome diversity (% unique genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 359
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.006
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 11712588
--- Timings ---
Current time: 1559582800524 milliseconds
Total Time:          64.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.3 seconds, 67.1%
Fitness Testing:     12.0 seconds, 18.5%
Report:               9.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -8                 
Correct output: -53                 | Program output: -12                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -46                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 57                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 13                 
Correct output: 52                  | Program output: 91                 
Correct output: 21                  | Program output: 49                 
Correct output: 7                   | Program output: 99                 
Correct output: 40                  | Program output: 41                 
Correct output: 10                  | Program output: 40                 
Correct output: 29                  | Program output: 40                 
Correct output: 18                  | Program output: 23                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 82                 
Correct output: 34                  | Program output: 47                 
Correct output: 17                  | Program output: 60                 
Correct output: 3                   | Program output: 64                 
Correct output: 0                   | Program output: 76                 
Correct output: 28                  | Program output: 65                 
Correct output: 21                  | Program output: 75                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 56                 
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 59                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: 19                 
Correct output: -78                 | Program output: 78                 
Correct output: -71                 | Program output: 59                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: 75                 
Correct output: -63                 | Program output: -28                
Correct output: -83                 | Program output: -82                
Correct output: -92                 | Program output: 96                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -70                
Correct output: -94                 | Program output: 36                 
Correct output: -83                 | Program output: 43                 
Correct output: -92                 | Program output: 88                 
Correct output: -99                 | Program output: 77                 
Correct output: -47                 | Program output: -22                
Correct output: -33                 | Program output: 79                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -89                
Correct output: -79                 | Program output: -28                
Correct output: -28                 | Program output: 80                 
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: 59                 
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: -10                
Correct output: -98                 | Program output: 45                 
Correct output: -44                 | Program output: 51                 
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: 25                 
Correct output: -75                 | Program output: -58                
Correct output: 64                  | Program output: 75                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: 52                 
Correct output: -59                 | Program output: 99                 
Correct output: -44                 | Program output: 69                 
Correct output: -23                 | Program output: 11                 
Correct output: -40                 | Program output: 70                 
Correct output: -61                 | Program output: -7                 
Correct output: -59                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: 69                 
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: 100                
Correct output: -4                  | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -7                 
Correct output: -48                 | Program output: -3                 
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times})
Lexicase best program: (integer_max exec_do*count (integer_lt) boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty integer_swap) (integer_div integer_gte integer_dec in2) boolean_invert_second_then_and) (exec_yankdup) in4) (boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times ()) ())))) ())
Lexicase best errors: [0 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.354
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times})
Zero cases best program: (integer_max exec_do*count (integer_lt) boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty integer_swap) (integer_div integer_gte integer_dec in2) boolean_invert_second_then_and) (exec_yankdup) in4) (boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times ()) ())))) ())
Zero cases best errors: [0 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.354
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 4 405 4 885 4 156 454 434 273)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (4 4 405 4 885 4 156 454 434 273)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () (integer_mult)) integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (in3 boolean_swap integer_yank) (boolean_eq exec_yankdup print_integer) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ())
Errors: [0 0 1 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 42
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 7.377
Median total errors in population: 7
Error averages by case: (0.996 0.996 0.595 0.996 0.115 0.996 0.844 0.546 0.566 0.727)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.013
Average program size in population (points): 50.704
Average percent parens in population: 0.367
Minimum age in population: 35.67796087265015
Maximum age in population: 40.26477432250977
Average age in population: 38.70215800523758
Median age in population: 38.7854368686676
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 12173760
--- Timings ---
Current time: 1559582803135 milliseconds
Total Time:          67.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.1 seconds, 67.2%
Fitness Testing:     12.4 seconds, 18.5%
Report:               9.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 83                 
Correct output: 0                   | Program output: 33                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 88                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: 44                 
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 91                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 98                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 82                 
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 80                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt) boolean_frominteger) exec_k_when_autoconstructing () () integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1) boolean_invert_second_then_and) (exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult) boolean_yank) (boolean_rot))))) ()))
Lexicase best errors: [0 1 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt) boolean_frominteger) exec_k_when_autoconstructing () () integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1) boolean_invert_second_then_and) (exec_yankdup in4 boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult) boolean_yank) (boolean_rot))))) ()))
Zero cases best errors: [0 1 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (856 222 67 481 376 67 192 195 484 18)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (856 222 67 481 376 67 192 195 484 18)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt exec_swap () () exec_k_when_autoconstructing () (integer_rot)) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_flush exec_noop) boolean_and) (in4 in4 boolean_pop exec_dup (exec_if (integer_yank print_integer) (exec_dup_times (integer_mult) integer_min) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult integer_min) boolean_rot) ()))))) ())))
Errors: [0 1 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 41
Size: 66
Percent parens: 0.379
--- Population Statistics ---
Average total errors in population: 7.042
Median total errors in population: 8
Error averages by case: (0.144 0.778 0.933 0.519 0.624 0.933 0.808 0.805 0.516 0.982)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.601
Average program size in population (points): 51.183
Average percent parens in population: 0.361
Minimum age in population: 37.28290367126465
Maximum age in population: 41.83282923698425
Average age in population: 40.02014535170794
Median age in population: 40.08114802837372
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.493
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.006
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 12757191
--- Timings ---
Current time: 1559582806066 milliseconds
Total Time:          69.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.9 seconds, 67.1%
Fitness Testing:     12.9 seconds, 18.5%
Report:               9.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 83                 
Correct output: 0                   | Program output: 33                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 88                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: 44                 
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 91                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 98                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 82                 
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 80                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt exec_swap () () exec_k_when_autoconstructing () (integer_rot)) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div boolean_rot) integer_div integer_gte integer_dec exec_noop) (boolean_invert_second_then_and) in4 in4 boolean_pop exec_dup (exec_if (integer_yank print_integer) (exec_dup_times (integer_mult) integer_min) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult integer_min) boolean_rot) ())))) ())))
Lexicase best errors: [1 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt exec_swap () () exec_k_when_autoconstructing () (integer_rot)) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div boolean_rot) integer_div integer_gte integer_dec exec_noop) (boolean_invert_second_then_and) in4 in4 boolean_pop exec_dup (exec_if (integer_yank print_integer) (exec_dup_times (integer_mult) integer_min) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult integer_min) boolean_rot) ())))) ())))
Zero cases best errors: [1 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 853 334 841 339 346 124 5 104 203)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (218 853 334 841 339 346 124 5 104 203)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt exec_swap () () exec_k_when_autoconstructing () (integer_rot)) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec exec_noop) boolean_invert_second_then_and) (in4 in4 boolean_pop exec_dup (exec_if (integer_yank print_integer) (exec_dup_times (integer_mult) integer_min) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult integer_min) boolean_rot) ()))))) ())))
Errors: [1 0 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 40
Size: 65
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 6.633
Median total errors in population: 7
Error averages by case: (0.782 0.147 0.666 0.159 0.661 0.654 0.876 0.995 0.896 0.797)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.378
Average program size in population (points): 54.907
Average percent parens in population: 0.373
Minimum age in population: 39.22148060798645
Maximum age in population: 43.14694327116013
Average age in population: 41.4872303775847
Median age in population: 41.54051703214645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.006
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 13349657
--- Timings ---
Current time: 1559582809073 milliseconds
Total Time:          72.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.8 seconds, 66.9%
Fitness Testing:     13.5 seconds, 18.5%
Report:              10.5 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 58                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 65                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 83                 
Correct output: -70                 | Program output: 49                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: 61                 
Correct output: 23                  | Program output: 60                 
Correct output: -29                 | Program output: 1                  
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 78                 
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 100                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: 44                 
Correct output: -33                 | Program output: 98                 
Correct output: -16                 | Program output: 89                 
Correct output: -86                 | Program output: 100                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: 25                 
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: 37                 
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 93                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 43                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: 57                 
Correct output: -59                 | Program output: 55                 
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: 100                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: 20                 
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt exec_swap () () exec_k_when_autoconstructing () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1) boolean_invert_second_then_and) exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))
Lexicase best errors: [0 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt exec_swap () () exec_k_when_autoconstructing () (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1) boolean_invert_second_then_and) exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))
Zero cases best errors: [0 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (303 326 17 267 197 219 284 112 174 262)
Population mean number of elite cases: 2.16
Count of perfect (error zero) individuals by case: (303 326 17 267 197 219 284 112 174 262)
Population mean number of perfect (error zero) cases: 2.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () (integer_mult)) integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (in3 boolean_swap integer_yank) (boolean_eq exec_yankdup in4) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ())
Errors: [0 0 1 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 42
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 7.839
Median total errors in population: 9
Error averages by case: (0.697 0.674 0.983 0.733 0.803 0.781 0.716 0.888 0.826 0.738)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.392
Average program size in population (points): 56.789
Average percent parens in population: 0.374
Minimum age in population: 41.08114802837372
Maximum age in population: 44.7439016699791
Average age in population: 42.96513383601606
Median age in population: 43.06170916557312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.006
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 13977207
--- Timings ---
Current time: 1559582811812 milliseconds
Total Time:          75.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.6 seconds, 66.6%
Fitness Testing:     14.1 seconds, 18.5%
Report:              11.1 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 83                 
Correct output: 0                   | Program output: 33                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 88                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -5                 
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: 44                 
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 91                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -23                
Correct output: -92                 | Program output: 98                 
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 82                 
Correct output: -59                 | Program output: -27                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -25                
Correct output: -86                 | Program output: -22                
Correct output: -40                 | Program output: -34                
Correct output: -71                 | Program output: -11                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -12                
Correct output: 64                  | Program output: 80                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -24                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt exec_swap () () exec_k_when_autoconstructing () (integer_rot)) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div exec_flush integer_dec exec_noop) boolean_invert_second_then_and) (in4 in4 boolean_pop exec_dup (exec_if (integer_yank print_integer) (exec_dup_times (integer_mult) integer_min) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult integer_min) boolean_rot) ()))))) ())))
Lexicase best errors: [0 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 66
Percent parens: 0.379
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt exec_swap () () exec_k_when_autoconstructing () (integer_rot)) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div exec_flush integer_dec exec_noop) boolean_invert_second_then_and) (in4 in4 boolean_pop exec_dup (exec_if (integer_yank print_integer) (exec_dup_times (integer_mult) integer_min) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult integer_min) boolean_rot) ()))))) ())))
Zero cases best errors: [0 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 66
Percent parens: 0.379
--- Lexicase Population Statistics ---
Count of elite individuals by case: (679 195 196 274 649 575 341 197 238 899)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (679 195 196 274 649 575 341 197 238 899)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt exec_swap () () exec_k_when_autoconstructing () (integer_rot)) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec exec_noop) boolean_invert_second_then_and) (in4 in4 boolean_pop exec_dup (exec_if (integer_yank print_integer) (exec_dup_times (integer_mult) integer_min) boolean_pop exec_dup (exec_s (integer_yank print_integer) (exec_dup_times (integer_mult integer_min) boolean_rot) ()))))) ())))
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 41
Size: 66
Percent parens: 0.379
--- Population Statistics ---
Average total errors in population: 5.757
Median total errors in population: 6
Error averages by case: (0.321 0.805 0.804 0.726 0.351 0.425 0.659 0.803 0.762 0.101)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.987
Average program size in population (points): 55.052
Average percent parens in population: 0.363
Minimum age in population: 42.26477432250977
Maximum age in population: 46.25582139194012
Average age in population: 44.72873688156158
Median age in population: 44.85626239329576
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.008
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 14598407
--- Timings ---
Current time: 1559582814788 milliseconds
Total Time:          78.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.3 seconds, 66.6%
Fitness Testing:     14.7 seconds, 18.6%
Report:              11.5 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 57                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 21                  | Program output: 49                 
Correct output: 7                   | Program output: 10                 
Correct output: 40                  | Program output: 41                 
Correct output: 10                  | Program output: 36                 
Correct output: 29                  | Program output: 40                 
Correct output: 18                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 62                  | Program output: 72                 
Correct output: 34                  | Program output: 47                 
Correct output: 17                  | Program output: 60                 
Correct output: 3                   | Program output: 64                 
Correct output: 0                   | Program output: 47                 
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 75                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 56                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 78                 
Correct output: -71                 | Program output: 59                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -2                 
Correct output: -63                 | Program output: -28                
Correct output: -83                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -70                
Correct output: -94                 | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 44                 
Correct output: -47                 | Program output: -22                
Correct output: -33                 | Program output: -3                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -89                
Correct output: -79                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: 51                 
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -40                
Correct output: -75                 | Program output: -63                
Correct output: 64                  | Program output: 64                 
Correct output: -14                 | Program output: -14                
Correct output: -82                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -40                
Correct output: -59                 | Program output: 92                 
Correct output: -44                 | Program output: 69                 
Correct output: -23                 | Program output: 11                 
Correct output: -40                 | Program output: 60                 
Correct output: -61                 | Program output: -7                 
Correct output: -59                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -19                
Correct output: -48                 | Program output: -3                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1) boolean_invert_second_then_and) (exec_yankdup in4) in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ()))
Lexicase best errors: [1 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 45
Percent parens: 0.356
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1) boolean_invert_second_then_and) (exec_yankdup in4) in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ()))
Zero cases best errors: [1 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 45
Percent parens: 0.356
--- Lexicase Population Statistics ---
Count of elite individuals by case: (773 26 11 101 451 118 71 568 277 26)
Population mean number of elite cases: 2.42
Count of perfect (error zero) individuals by case: (773 26 11 101 451 118 71 568 277 26)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1) boolean_invert_second_then_and) (exec_yankdup in4) in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))) ()))
Errors: [1 0 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 45
Percent parens: 0.356
--- Population Statistics ---
Average total errors in population: 7.578
Median total errors in population: 7
Error averages by case: (0.227 0.974 0.989 0.899 0.549 0.882 0.929 0.432 0.723 0.974)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.45
Average program size in population (points): 59.636
Average percent parens in population: 0.370
Minimum age in population: 43.51019388437271
Maximum age in population: 47.91224848479033
Average age in population: 46.05161850982159
Median age in population: 46.14053578302264
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 15343681
--- Timings ---
Current time: 1559582817773 milliseconds
Total Time:          81.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.1 seconds, 66.3%
Fitness Testing:     15.3 seconds, 18.8%
Report:              12.1 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 13                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 40                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 56                 
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 59                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 59                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -82                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 43                 
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: -22                
Correct output: -33                 | Program output: 79                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: 25                 
Correct output: -75                 | Program output: -58                
Correct output: 64                  | Program output: 75                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -7                 
Correct output: -59                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (integer_max boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec integer_lte) in4) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (integer_max boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec integer_lte) in4) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (458 594 595 497 838 498 873 123 865 123)
Population mean number of elite cases: 5.46
Count of perfect (error zero) individuals by case: (458 594 595 497 838 498 873 123 865 123)
Population mean number of perfect (error zero) cases: 5.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (integer_max exec_do*count (integer_lt) boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec exec_noop) in4) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 4.536
Median total errors in population: 4
Error averages by case: (0.542 0.406 0.405 0.503 0.162 0.502 0.127 0.877 0.135 0.877)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.486
Average program size in population (points): 46.411
Average percent parens in population: 0.340
Minimum age in population: 46.83898349478841
Maximum age in population: 49.53299799561501
Average age in population: 48.30332782407477
Median age in population: 48.43874770589173
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 260
Genome diversity (% unique genomes):	 0.415
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 261
Syntactic diversity (% unique Push programs):	 0.406
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 15829946
--- Timings ---
Current time: 1559582820337 milliseconds
Total Time:          84.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.9 seconds, 66.2%
Fitness Testing:     15.8 seconds, 18.7%
Report:              12.6 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 65                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -40                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -97                 | Program output: -2                 
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -40                
Correct output: -63                 | Program output: -33                
Correct output: -17                 | Program output: 31                 
Correct output: -100                | Program output: 40                 
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: -11                
Correct output: -79                 | Program output: -4                 
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -38                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: 2                  
Correct output: -50                 | Program output: -44                
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: -39                
Correct output: -71                 | Program output: -48                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 64                 
Correct output: -14                 | Program output: -14                
Correct output: -82                 | Program output: -7                 
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: 30                 
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: 9                  
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: 10                 
Correct output: -81                 | Program output: -34                
Correct output: -65                 | Program output: -19                
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1) exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())) ()))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 48
Percent parens: 0.396
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1) exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())) ()))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 48
Percent parens: 0.396
--- Lexicase Population Statistics ---
Count of elite individuals by case: (484 485 873 483 495 244 488 883 243 884)
Population mean number of elite cases: 5.56
Count of perfect (error zero) individuals by case: (484 485 873 483 495 244 488 883 243 884)
Population mean number of perfect (error zero) cases: 5.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1 boolean_invert_second_then_and) exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())) ()))
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 49
Percent parens: 0.388
--- Population Statistics ---
Average total errors in population: 4.438
Median total errors in population: 4
Error averages by case: (0.516 0.515 0.127 0.517 0.505 0.756 0.512 0.117 0.757 0.116)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.824
Average program size in population (points): 47.05
Average percent parens in population: 0.364
Minimum age in population: 48.06510113179684
Maximum age in population: 51.24283920228481
Average age in population: 49.69588843757194
Median age in population: 49.75172099936754
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 16269130
--- Timings ---
Current time: 1559582822897 milliseconds
Total Time:          87.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.7 seconds, 66.4%
Fitness Testing:     16.2 seconds, 18.6%
Report:              13.0 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 13                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 40                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 56                 
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 59                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 59                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -82                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 43                 
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: -22                
Correct output: -33                 | Program output: 79                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: 25                 
Correct output: -75                 | Program output: -58                
Correct output: 64                  | Program output: 75                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -7                 
Correct output: -59                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (integer_max exec_do*count (integer_lt) boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec exec_noop) in4) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (integer_max exec_do*count (integer_lt) boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec exec_noop) in4) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (288 284 267 885 289 723 528 608 886 269)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (288 284 267 885 289 723 528 608 886 269)
Population mean number of perfect (error zero) cases: 5.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (boolean_dup integer_inc integer_gte integer_gte boolean_empty boolean_rot) integer_div integer_gte integer_dec integer_flush boolean_invert_second_then_and exec_yankdup in4 in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ()))
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 4.973
Median total errors in population: 5
Error averages by case: (0.712 0.716 0.733 0.115 0.711 0.277 0.472 0.392 0.114 0.731)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.926
Average program size in population (points): 48.301
Average percent parens in population: 0.380
Minimum age in population: 49.06510113179684
Maximum age in population: 52.74704310018569
Average age in population: 51.19433933861228
Median age in population: 51.25747154606506
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 16702968
--- Timings ---
Current time: 1559582825408 milliseconds
Total Time:          89.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.5 seconds, 66.5%
Fitness Testing:     16.6 seconds, 18.5%
Report:              13.3 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 13                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 40                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 56                 
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 59                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 59                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -82                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 43                 
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: -22                
Correct output: -33                 | Program output: 79                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: 25                 
Correct output: -75                 | Program output: -58                
Correct output: 64                  | Program output: 75                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -7                 
Correct output: -59                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (integer_max exec_do*count (integer_lt) boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec exec_noop) in4) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (integer_max exec_do*count (integer_lt) boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec exec_noop) in4) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 625 625 529 841 628 528 281 628 528)
Population mean number of elite cases: 5.47
Count of perfect (error zero) individuals by case: (254 625 625 529 841 628 528 281 628 528)
Population mean number of perfect (error zero) cases: 5.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (integer_max exec_do*count (integer_lt) boolean_frominteger integer_dup_items integer_max in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (boolean_dup integer_dec boolean_shove) (boolean_invert_second_then_and) exec_yankdup in4) in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 4.533
Median total errors in population: 4
Error averages by case: (0.746 0.375 0.375 0.471 0.159 0.372 0.472 0.719 0.372 0.472)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.849
Average program size in population (points): 46.132
Average percent parens in population: 0.350
Minimum age in population: 50.41133458912373
Maximum age in population: 54.50402028206736
Average age in population: 52.74328640502319
Median age in population: 52.82223898125812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 17146570
--- Timings ---
Current time: 1559582828012 milliseconds
Total Time:          92.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.3 seconds, 66.6%
Fitness Testing:     17.0 seconds, 18.5%
Report:              13.6 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 13                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 40                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 56                 
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 59                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 59                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -82                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 43                 
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: -22                
Correct output: -33                 | Program output: 79                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: 25                 
Correct output: -75                 | Program output: -58                
Correct output: 64                  | Program output: 75                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -7                 
Correct output: -59                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (boolean_dup integer_inc integer_gte integer_gte boolean_empty boolean_rot) integer_div integer_gte integer_dec integer_flush boolean_invert_second_then_and exec_yankdup in4 in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot)))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (boolean_dup integer_inc integer_gte integer_gte boolean_empty boolean_rot) integer_div integer_gte integer_dec integer_flush boolean_invert_second_then_and exec_yankdup in4 in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot)))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (661 663 569 660 579 236 865 572 663 660)
Population mean number of elite cases: 6.13
Count of perfect (error zero) individuals by case: (661 663 569 660 579 236 865 572 663 660)
Population mean number of perfect (error zero) cases: 6.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (integer_max exec_do*count (integer_lt) boolean_frominteger integer_dup_items integer_gte in3 boolean_swap exec_k (exec_y_when_autoconstructing (exec_swap (boolean_dup integer_inc integer_gte boolean_empty boolean_rot) (integer_div integer_gte integer_dec exec_noop) in4) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 3.872
Median total errors in population: 3
Error averages by case: (0.339 0.337 0.431 0.34 0.421 0.764 0.135 0.428 0.337 0.34)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.712
Average program size in population (points): 45.73
Average percent parens in population: 0.347
Minimum age in population: 51.69148935377598
Maximum age in population: 56.37633404717781
Average age in population: 54.23167805662181
Median age in population: 54.32002021907829
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 17603334
--- Timings ---
Current time: 1559582830528 milliseconds
Total Time:          94.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.1 seconds, 66.7%
Fitness Testing:     17.4 seconds, 18.4%
Report:              14.0 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 57                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 13                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 40                 
Correct output: 18                  | Program output: 23                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 60                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -1                 
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: 19                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: 96                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -70                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -89                
Correct output: -79                 | Program output: -28                
Correct output: -28                 | Program output: 80                 
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: 2                  
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 75                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: 11                 
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: 69                 
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -7                 
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (boolean_invert_second_then_and) exec_yankdup in4) (in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))) ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 44
Percent parens: 0.432
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (boolean_invert_second_then_and) exec_yankdup in4) (in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))) ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 44
Percent parens: 0.432
--- Lexicase Population Statistics ---
Count of elite individuals by case: (653 655 268 890 843 655 8 874 653 653)
Population mean number of elite cases: 6.15
Count of perfect (error zero) individuals by case: (653 655 268 890 843 655 8 874 653 653)
Population mean number of perfect (error zero) cases: 6.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult)) integer_mult) exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (boolean_invert_second_then_and) exec_yankdup in4) (in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))) ()))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 28
Size: 49
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 3.848
Median total errors in population: 2
Error averages by case: (0.347 0.345 0.732 0.11 0.157 0.345 0.992 0.126 0.347 0.347)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.256
Average program size in population (points): 44.396
Average percent parens in population: 0.337
Minimum age in population: 52.8159999139607
Maximum age in population: 57.53178919682978
Average age in population: 55.67483304476563
Median age in population: 55.74241552694002
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.01
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 18036587
--- Timings ---
Current time: 1559582833078 milliseconds
Total Time:          97.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.9 seconds, 66.8%
Fitness Testing:     17.8 seconds, 18.4%
Report:              14.3 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 65                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -40                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -97                 | Program output: -2                 
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -40                
Correct output: -63                 | Program output: -33                
Correct output: -17                 | Program output: 31                 
Correct output: -100                | Program output: 40                 
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: -11                
Correct output: -79                 | Program output: -4                 
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -38                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: 2                  
Correct output: -50                 | Program output: -44                
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: -39                
Correct output: -71                 | Program output: -48                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 64                 
Correct output: -14                 | Program output: -14                
Correct output: -82                 | Program output: -7                 
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: 30                 
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: 9                  
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: 10                 
Correct output: -81                 | Program output: -34                
Correct output: -65                 | Program output: -19                
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult) integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())) ()))
Lexicase best errors: [1 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.462
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult) integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())) ()))
Zero cases best errors: [1 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.462
--- Lexicase Population Statistics ---
Count of elite individuals by case: (873 18 21 438 438 400 405 432 438 841)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (873 18 21 438 438 400 405 432 438 841)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor})
Best program: (integer_sub exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (boolean_invert_second_then_and) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_xor) ())) ())) ()))
Errors: [1 1 1 0 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 24
Size: 42
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 5.696
Median total errors in population: 6
Error averages by case: (0.127 0.982 0.979 0.562 0.562 0.6 0.595 0.568 0.562 0.159)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.071
Average program size in population (points): 45.546
Average percent parens in population: 0.405
Minimum age in population: 53.8159999139607
Maximum age in population: 58.96148728890694
Average age in population: 57.47034373483396
Median age in population: 57.62332074565347
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 156
Genome diversity (% unique genomes):	 0.414
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.407
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 18471149
--- Timings ---
Current time: 1559582835685 milliseconds
Total Time:          99.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.8 seconds, 66.9%
Fitness Testing:     18.3 seconds, 18.3%
Report:              14.6 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 87                 
Correct output: 21                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 65                 
Correct output: 18                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 71                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -40                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 78                 
Correct output: -97                 | Program output: -2                 
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -40                
Correct output: -63                 | Program output: -33                
Correct output: -17                 | Program output: 31                 
Correct output: -100                | Program output: 40                 
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: -11                
Correct output: -79                 | Program output: -4                 
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -38                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: 2                  
Correct output: -50                 | Program output: -44                
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: -39                
Correct output: -71                 | Program output: -48                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 64                 
Correct output: -14                 | Program output: -14                
Correct output: -82                 | Program output: -7                 
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: 30                 
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: 9                  
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: 10                 
Correct output: -81                 | Program output: -34                
Correct output: -65                 | Program output: -19                
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult) integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())) ()))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.462
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult) integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())) ())) ()))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.462
--- Lexicase Population Statistics ---
Count of elite individuals by case: (759 403 402 223 220 228 761 761 403 404)
Population mean number of elite cases: 4.56
Count of perfect (error zero) individuals by case: (759 403 402 223 220 228 761 761 403 404)
Population mean number of perfect (error zero) cases: 4.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor})
Best program: (integer_sub exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (boolean_invert_second_then_and) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_xor) ())) ())) ()))
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 24
Size: 42
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 5.436
Median total errors in population: 6
Error averages by case: (0.241 0.597 0.598 0.777 0.78 0.772 0.239 0.239 0.597 0.596)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.761
Average program size in population (points): 46.5
Average percent parens in population: 0.425
Minimum age in population: 56.34151515772101
Maximum age in population: 60.82442782563157
Average age in population: 59.12692652904488
Median age in population: 59.15862205435405
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 221
Genome diversity (% unique genomes):	 0.43
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.424
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 18921279
--- Timings ---
Current time: 1559582838240 milliseconds
Total Time:         102.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.6 seconds, 67.0%
Fitness Testing:     18.7 seconds, 18.3%
Report:              15.0 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 13                 
Correct output: 52                  | Program output: 60                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 81                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 40                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 59                 
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 60                 
Correct output: 0                   | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 56                 
Correct output: -70                 | Program output: 46                 
Correct output: -95                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 59                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 59                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -45                
Correct output: -83                 | Program output: -82                
Correct output: -92                 | Program output: 49                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -52                
Correct output: -83                 | Program output: 43                 
Correct output: -92                 | Program output: -60                
Correct output: -99                 | Program output: 4                  
Correct output: -47                 | Program output: -22                
Correct output: -33                 | Program output: 79                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 8                  
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: -41                
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -79                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: 25                 
Correct output: -75                 | Program output: -58                
Correct output: 64                  | Program output: 75                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -2                 
Correct output: -59                 | Program output: 47                 
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -7                 
Correct output: -59                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: 83                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_lt exec_if (boolean_rot) (integer_div integer_gte integer_dec in1 boolean_invert_second_then_and)) (exec_yankdup in4) in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) exec_do*while ()) ())) ())) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 48
Percent parens: 0.396
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_lt exec_if (boolean_rot) (integer_div integer_gte integer_dec in1 boolean_invert_second_then_and)) (exec_yankdup in4) in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) exec_do*while ()) ())) ())) ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 48
Percent parens: 0.396
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 578 916 581 916 926 657 582 11 10)
Population mean number of elite cases: 5.19
Count of perfect (error zero) individuals by case: (11 578 916 581 916 926 657 582 11 10)
Population mean number of perfect (error zero) cases: 5.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) integer_inc integer_lt boolean_empty boolean_rot) integer_div integer_gte integer_eq in1 boolean_invert_second_then_and exec_yankdup in4 in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (exec_s (integer_min print_integer) (boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_xor) ())) ())) ()))
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 49
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 4.812
Median total errors in population: 4
Error averages by case: (0.989 0.422 0.084 0.419 0.084 0.074 0.343 0.418 0.989 0.99)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.338
Average program size in population (points): 43.559
Average percent parens in population: 0.420
Minimum age in population: 58.04061347222887
Maximum age in population: 62.65797638281219
Average age in population: 60.80387881547376
Median age in population: 60.85456271640578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.432
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.422
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 19325020
--- Timings ---
Current time: 1559582841221 milliseconds
Total Time:         105.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.5 seconds, 67.2%
Fitness Testing:     19.1 seconds, 18.2%
Report:              15.3 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 57                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 53                 
Correct output: 21                  | Program output: 49                 
Correct output: 7                   | Program output: 10                 
Correct output: 40                  | Program output: 41                 
Correct output: 10                  | Program output: 36                 
Correct output: 29                  | Program output: 40                 
Correct output: 18                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 62                  | Program output: 72                 
Correct output: 34                  | Program output: 47                 
Correct output: 17                  | Program output: 60                 
Correct output: 3                   | Program output: 64                 
Correct output: 0                   | Program output: 47                 
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 75                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 56                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 78                 
Correct output: -71                 | Program output: 59                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -2                 
Correct output: -63                 | Program output: -28                
Correct output: -83                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -70                
Correct output: -94                 | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 44                 
Correct output: -47                 | Program output: -22                
Correct output: -33                 | Program output: -3                 
Correct output: -16                 | Program output: 81                 
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -89                
Correct output: -79                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: 18                 
Correct output: 22                  | Program output: 26                 
Correct output: -66                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: 51                 
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -40                
Correct output: -75                 | Program output: -63                
Correct output: 64                  | Program output: 64                 
Correct output: -14                 | Program output: -14                
Correct output: -82                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -40                
Correct output: -59                 | Program output: 92                 
Correct output: -44                 | Program output: 69                 
Correct output: -23                 | Program output: 11                 
Correct output: -40                 | Program output: 60                 
Correct output: -61                 | Program output: -7                 
Correct output: -59                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -19                
Correct output: -48                 | Program output: -3                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_do*count (integer_lt boolean_frominteger) exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_lt boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1 boolean_invert_second_then_and)) (exec_yankdup in4) in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) exec_do*while ()) ()))) ())
Lexicase best errors: [0 1 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_do*count (integer_lt boolean_frominteger) exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_lt boolean_empty boolean_rot) (integer_div integer_gte integer_dec in1 boolean_invert_second_then_and)) (exec_yankdup in4) in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) exec_do*while ()) ()))) ())
Zero cases best errors: [0 1 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (792 212 222 212 879 225 511 794 363 508)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (792 212 222 212 879 225 511 794 363 508)
Population mean number of perfect (error zero) cases: 4.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*while})
Best program: (exec_do*times (exec_k (integer_lt boolean_frominteger) (exec_k_when_autoconstructing () () integer_mult)) boolean_shove exec_swap (exec_s_when_autoconstructing () (boolean_dup integer_inc integer_lt boolean_empty boolean_rot) (integer_div integer_gte integer_yankdup in1 boolean_invert_second_then_and)) (exec_yankdup in4) in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) exec_do*while ()) ()))
Errors: [0 1 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 30
Size: 47
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 5.282
Median total errors in population: 5
Error averages by case: (0.208 0.788 0.778 0.788 0.121 0.775 0.489 0.206 0.637 0.492)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.04
Average program size in population (points): 45.589
Average percent parens in population: 0.385
Minimum age in population: 59.04061347222887
Maximum age in population: 63.80403955699148
Average age in population: 61.835302512154
Median age in population: 61.9050638205681
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 19846987
--- Timings ---
Current time: 1559582844054 milliseconds
Total Time:         107.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.3 seconds, 67.0%
Fitness Testing:     19.6 seconds, 18.2%
Report:              15.9 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 57                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 13                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 40                 
Correct output: 18                  | Program output: 23                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 60                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -1                 
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: 19                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: 96                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -70                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -89                
Correct output: -79                 | Program output: -28                
Correct output: -28                 | Program output: 80                 
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: 2                  
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 75                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: 11                 
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: 69                 
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -7                 
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_sub exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (boolean_invert_second_then_and) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_xor) ())) ())) ()))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.429
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_sub exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (boolean_invert_second_then_and) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_xor) ())) ())) ()))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.429
--- Lexicase Population Statistics ---
Count of elite individuals by case: (414 414 427 632 412 627 427 884 413 249)
Population mean number of elite cases: 4.90
Count of perfect (error zero) individuals by case: (414 414 427 632 412 627 427 884 413 249)
Population mean number of perfect (error zero) cases: 4.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k_when_autoconstructing () () integer_mult) integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (boolean_invert_second_then_and) exec_yankdup in4) (in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))) ()))
Errors: [0 0 1 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 26
Size: 45
Percent parens: 0.422
--- Population Statistics ---
Average total errors in population: 5.101
Median total errors in population: 5
Error averages by case: (0.586 0.586 0.573 0.368 0.588 0.373 0.573 0.116 0.587 0.751)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.911
Average program size in population (points): 44.94
Average percent parens in population: 0.402
Minimum age in population: 60.69407503353432
Maximum age in population: 65.25632673159453
Average age in population: 63.49179918191013
Median age in population: 63.55036789303085
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 20328853
--- Timings ---
Current time: 1559582846621 milliseconds
Total Time:         110.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.1 seconds, 67.0%
Fitness Testing:     20.1 seconds, 18.1%
Report:              16.4 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: 18                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 46                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 57                 
Correct output: 21                  | Program output: 21                 
Correct output: 0                   | Program output: 13                 
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 45                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 40                 
Correct output: 18                  | Program output: 23                 
Correct output: 3                   | Program output: 96                 
Correct output: 62                  | Program output: 69                 
Correct output: 34                  | Program output: 36                 
Correct output: 17                  | Program output: 60                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 58                 
Correct output: 21                  | Program output: 30                 
Correct output: 7                   | Program output: 7                  
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: 20                 
Correct output: -95                 | Program output: -1                 
Correct output: -89                 | Program output: -89                
Correct output: 23                  | Program output: 34                 
Correct output: -29                 | Program output: -7                 
Correct output: -57                 | Program output: 19                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: 62                 
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: 96                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: 5                  
Correct output: -17                 | Program output: -17                
Correct output: -100                | Program output: -70                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -12                
Correct output: -92                 | Program output: -56                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -89                
Correct output: -79                 | Program output: -28                
Correct output: -28                 | Program output: 80                 
Correct output: -59                 | Program output: -59                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -61                
Correct output: -98                 | Program output: -46                
Correct output: -44                 | Program output: 2                  
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 75                 
Correct output: -14                 | Program output: -10                
Correct output: -82                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -24                
Correct output: -23                 | Program output: 11                 
Correct output: -40                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: 69                 
Correct output: -65                 | Program output: -65                
Correct output: -70                 | Program output: 96                 
Correct output: -4                  | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -7                 
Correct output: -48                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (boolean_invert_second_then_and) exec_yankdup in4) (in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.441
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (boolean_invert_second_then_and) exec_yankdup in4) (in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_rot) ())))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.441
--- Lexicase Population Statistics ---
Count of elite individuals by case: (717 858 795 605 607 462 462 166 460 916)
Population mean number of elite cases: 6.05
Count of perfect (error zero) individuals by case: (717 858 795 605 607 462 462 166 460 916)
Population mean number of perfect (error zero) cases: 6.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) exec_k (exec_y_when_autoconstructing (exec_do*times (in2 exec_k (exec_y_when_autoconstructing (exec_swap (exec_s_when_autoconstructing () (in1) (boolean_invert_second_then_and) exec_yankdup in4) (in3 exec_dup (exec_s (integer_min print_integer) (exec_dup_times (boolean_invert_second_then_and) boolean_pop exec_dup (exec_s (integer_min print_integer) (exec_dup_times (integer_mult boolean_yank) boolean_xor) ())) ())))) ()))) ()))
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 57
Percent parens: 0.439
--- Population Statistics ---
Average total errors in population: 3.952
Median total errors in population: 3
Error averages by case: (0.283 0.142 0.205 0.395 0.393 0.538 0.538 0.834 0.54 0.084)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.14
Average program size in population (points): 43.251
Average percent parens in population: 0.418
Minimum age in population: 61.69407503353432
Maximum age in population: 66.72767495396602
Average age in population: 65.04390543697109
Median age in population: 65.1067422646147
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.009
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 20690106
--- Timings ---
Current time: 1559582849322 milliseconds
Total Time:         113.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.0 seconds, 67.1%
Fitness Testing:     20.4 seconds, 18.1%
Report:              16.7 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 220
Test mean error for best: 0.22000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -40                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 31                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -38                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -44                
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: -39                
Correct output: -71                 | Program output: -48                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 64                 
Correct output: -14                 | Program output: -14                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction in4} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 46
Percent parens: 0.413
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction in4} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 46
Percent parens: 0.413
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 908 259 919 322 686 321 756 259 637)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (234 908 259 919 322 686 321 756 259 637)
Population mean number of perfect (error zero) cases: 5.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction in4} {:close 2, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Best program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 27
Size: 46
Percent parens: 0.413
--- Population Statistics ---
Average total errors in population: 4.699
Median total errors in population: 5
Error averages by case: (0.766 0.092 0.741 0.081 0.678 0.314 0.679 0.244 0.741 0.363)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.56
Average program size in population (points): 43.64
Average percent parens in population: 0.413
Minimum age in population: 62.69407503353432
Maximum age in population: 68.42950346158705
Average age in population: 66.52638589654967
Median age in population: 66.58974334724599
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.01
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 21087912
--- Timings ---
Current time: 1559582851827 milliseconds
Total Time:         115.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.8 seconds, 67.1%
Fitness Testing:     20.8 seconds, 18.0%
Report:              17.2 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 42
Successful program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 46


Auto-simplifying with starting size: 46
step: 0
program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 500
program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 1000
program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 1500
program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 2000
program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 2500
program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 3000
program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 3500
program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 4000
program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 4500
program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 5000
program: (exec_do*times (exec_do*count (integer_lt boolean_frominteger) in4) integer_mult integer_mult exec_y_when_autoconstructing (in2 exec_k (exec_y_when_autoconstructing () exec_swap (exec_swap () (in1) exec_swap (exec_s_when_autoconstructing () (in1) (exec_shove (integer_min in1 exec_shove (integer_min print_integer exec_dup_times (integer_mult boolean_yank) boolean_rot)))) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 220
Test mean error for best: 0.22000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -53                 | Program output: -53                
Correct output: -37                 | Program output: -37                
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: -92                 | Program output: -92                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: 24                  | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -31                 | Program output: -31                
Correct output: 34                  | Program output: 34                 
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: 98                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 21                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 52                  | Program output: 52                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 29                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 62                  | Program output: 62                 
Correct output: 34                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 56                 
Correct output: 45                  | Program output: 45                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -40                
Correct output: 23                  | Program output: 23                 
Correct output: -29                 | Program output: -29                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -63                 | Program output: -63                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -51                
Correct output: -63                 | Program output: -63                
Correct output: -17                 | Program output: 31                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: -33                
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 31                 
Correct output: -93                 | Program output: -93                
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -38                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -44                
Correct output: -86                 | Program output: -46                
Correct output: -40                 | Program output: -39                
Correct output: -71                 | Program output: -48                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: 64                  | Program output: 64                 
Correct output: -14                 | Program output: -14                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -40                 | Program output: -40                
Correct output: -61                 | Program output: -61                
Correct output: -59                 | Program output: -59                
Correct output: -63                 | Program output: -28                
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: -24                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -48                 | Program output: -48                
Correct output: -99                 | Program output: -99                
;;******************************
