Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-29 -19 -19 -19] -29] [[-21 -21 71 -21] -21] [[-74 -74 -74 18] -74] [[16 -26 16 16] -26] [[49 49 -46 49] -46] [[77 -18 77 77] -18] [[-75 -75 -75 45] -75] [[61 -87 61 61] -87] [[-27 12 -27 -27] -27] [[-52 -55 -55 -55] -55] [(40 40 40 40) 40] [(-41 -41 -41 -41) -41] [(-100 -100 -100 -100) -100] [(5 5 5 5) 5] [(42 42 42 42) 42] [(44 50 36 48) 36] [(6 60 71 32) 6] [(96 10 12 31) 10] [(17 53 82 3) 3] [(3 26 87 53) 3] [(18 30 90 29) 18] [(1 14 20 4) 1] [(58 4 90 26) 4] [(80 11 87 90) 11] [(43 32 11 8) 8] [(90 97 48 26) 26] [(11 52 48 55) 11] [(99 36 92 74) 36] [(72 15 76 91) 15] [(54 58 67 39) 39] [(50 82 77 65) 50] [(71 15 24 81) 15] [(58 67 28 10) 10] [(96 35 88 35) 35] [(28 44 91 67) 28] [(-43 -8 98 -55) -55] [(64 57 -12 -69) -69] [(-51 -50 49 86) -51] [(-31 -94 61 -95) -95] [(-94 90 76 -71) -94] [(-59 59 31 91) -59] [(58 -82 -9 5) -82] [(65 30 82 45) 30] [(84 -67 74 7) -67] [(-45 -63 -33 -20) -63] [(-27 32 15 -65) -65] [(86 9 11 78) 9] [(-9 42 -80 -80) -80] [(36 95 91 53) 36] [(-4 -76 -1 -48) -76] [(-41 66 98 -54) -54] [(52 37 57 25) 25] [(58 63 -81 -91) -91] [(14 -99 71 69) -99] [(70 -44 98 25) -44] [(-18 66 87 -49) -49] [(-82 40 88 21) -82] [(-3 -67 -93 89) -93] [(85 -57 49 21) -57] [(22 -58 31 -51) -58] [(35 -44 91 -33) -44] [(11 50 -28 -9) -28] [(93 92 -56 -1) -56] [(-25 67 63 71) -25] [(62 -23 42 47) -23] [(-84 -71 77 48) -84] [(-95 -27 -15 -93) -95] [(88 -99 -60 19) -99] [(34 -30 15 -55) -55] [(-55 22 -93 -82) -93] [(-6 2 -87 -50) -87] [(30 82 16 70) 16] [(13 -68 72 -100) -100] [(79 -14 20 -78) -78] [(42 -59 -39 93) -59] [(59 49 -2 93) -2] [(34 -92 -88 -18) -92] [(-20 50 22 -11) -20] [(50 -11 37 -78) -78] [(37 -17 68 11) -17] [(22 -31 -36 -7) -36] [(60 -97 -35 71) -97] [(-92 -38 -60 40) -92] [(3 -64 15 71) -64] [(36 85 50 78) 36] [(90 -44 -3 31) -44] [(50 -44 -19 13) -44] [(67 -88 55 -99) -99] [(-39 -44 -100 -61) -100] [(7 36 25 -62) -62] [(-88 -29 -52 46) -88] [(-25 75 -80 -13) -80] [(43 -25 80 -44) -44] [(-32 55 -4 -62) -62] [(10 14 27 -68) -68])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-29 -19 -19 -19] -29]
Train Case:   6 | Input/Output: [[-21 -21 71 -21] -21]
Train Case:   7 | Input/Output: [[-74 -74 -74 18] -74]
Train Case:   8 | Input/Output: [[16 -26 16 16] -26]
Train Case:   9 | Input/Output: [[49 49 -46 49] -46]
Train Case:  10 | Input/Output: [[77 -18 77 77] -18]
Train Case:  11 | Input/Output: [[-75 -75 -75 45] -75]
Train Case:  12 | Input/Output: [[61 -87 61 61] -87]
Train Case:  13 | Input/Output: [[-27 12 -27 -27] -27]
Train Case:  14 | Input/Output: [[-52 -55 -55 -55] -55]
Train Case:  15 | Input/Output: [(40 40 40 40) 40]
Train Case:  16 | Input/Output: [(-41 -41 -41 -41) -41]
Train Case:  17 | Input/Output: [(-100 -100 -100 -100) -100]
Train Case:  18 | Input/Output: [(5 5 5 5) 5]
Train Case:  19 | Input/Output: [(42 42 42 42) 42]
Train Case:  20 | Input/Output: [(44 50 36 48) 36]
Train Case:  21 | Input/Output: [(6 60 71 32) 6]
Train Case:  22 | Input/Output: [(96 10 12 31) 10]
Train Case:  23 | Input/Output: [(17 53 82 3) 3]
Train Case:  24 | Input/Output: [(3 26 87 53) 3]
Train Case:  25 | Input/Output: [(18 30 90 29) 18]
Train Case:  26 | Input/Output: [(1 14 20 4) 1]
Train Case:  27 | Input/Output: [(58 4 90 26) 4]
Train Case:  28 | Input/Output: [(80 11 87 90) 11]
Train Case:  29 | Input/Output: [(43 32 11 8) 8]
Train Case:  30 | Input/Output: [(90 97 48 26) 26]
Train Case:  31 | Input/Output: [(11 52 48 55) 11]
Train Case:  32 | Input/Output: [(99 36 92 74) 36]
Train Case:  33 | Input/Output: [(72 15 76 91) 15]
Train Case:  34 | Input/Output: [(54 58 67 39) 39]
Train Case:  35 | Input/Output: [(50 82 77 65) 50]
Train Case:  36 | Input/Output: [(71 15 24 81) 15]
Train Case:  37 | Input/Output: [(58 67 28 10) 10]
Train Case:  38 | Input/Output: [(96 35 88 35) 35]
Train Case:  39 | Input/Output: [(28 44 91 67) 28]
Train Case:  40 | Input/Output: [(-43 -8 98 -55) -55]
Train Case:  41 | Input/Output: [(64 57 -12 -69) -69]
Train Case:  42 | Input/Output: [(-51 -50 49 86) -51]
Train Case:  43 | Input/Output: [(-31 -94 61 -95) -95]
Train Case:  44 | Input/Output: [(-94 90 76 -71) -94]
Train Case:  45 | Input/Output: [(-59 59 31 91) -59]
Train Case:  46 | Input/Output: [(58 -82 -9 5) -82]
Train Case:  47 | Input/Output: [(65 30 82 45) 30]
Train Case:  48 | Input/Output: [(84 -67 74 7) -67]
Train Case:  49 | Input/Output: [(-45 -63 -33 -20) -63]
Train Case:  50 | Input/Output: [(-27 32 15 -65) -65]
Train Case:  51 | Input/Output: [(86 9 11 78) 9]
Train Case:  52 | Input/Output: [(-9 42 -80 -80) -80]
Train Case:  53 | Input/Output: [(36 95 91 53) 36]
Train Case:  54 | Input/Output: [(-4 -76 -1 -48) -76]
Train Case:  55 | Input/Output: [(-41 66 98 -54) -54]
Train Case:  56 | Input/Output: [(52 37 57 25) 25]
Train Case:  57 | Input/Output: [(58 63 -81 -91) -91]
Train Case:  58 | Input/Output: [(14 -99 71 69) -99]
Train Case:  59 | Input/Output: [(70 -44 98 25) -44]
Train Case:  60 | Input/Output: [(-18 66 87 -49) -49]
Train Case:  61 | Input/Output: [(-82 40 88 21) -82]
Train Case:  62 | Input/Output: [(-3 -67 -93 89) -93]
Train Case:  63 | Input/Output: [(85 -57 49 21) -57]
Train Case:  64 | Input/Output: [(22 -58 31 -51) -58]
Train Case:  65 | Input/Output: [(35 -44 91 -33) -44]
Train Case:  66 | Input/Output: [(11 50 -28 -9) -28]
Train Case:  67 | Input/Output: [(93 92 -56 -1) -56]
Train Case:  68 | Input/Output: [(-25 67 63 71) -25]
Train Case:  69 | Input/Output: [(62 -23 42 47) -23]
Train Case:  70 | Input/Output: [(-84 -71 77 48) -84]
Train Case:  71 | Input/Output: [(-95 -27 -15 -93) -95]
Train Case:  72 | Input/Output: [(88 -99 -60 19) -99]
Train Case:  73 | Input/Output: [(34 -30 15 -55) -55]
Train Case:  74 | Input/Output: [(-55 22 -93 -82) -93]
Train Case:  75 | Input/Output: [(-6 2 -87 -50) -87]
Train Case:  76 | Input/Output: [(30 82 16 70) 16]
Train Case:  77 | Input/Output: [(13 -68 72 -100) -100]
Train Case:  78 | Input/Output: [(79 -14 20 -78) -78]
Train Case:  79 | Input/Output: [(42 -59 -39 93) -59]
Train Case:  80 | Input/Output: [(59 49 -2 93) -2]
Train Case:  81 | Input/Output: [(34 -92 -88 -18) -92]
Train Case:  82 | Input/Output: [(-20 50 22 -11) -20]
Train Case:  83 | Input/Output: [(50 -11 37 -78) -78]
Train Case:  84 | Input/Output: [(37 -17 68 11) -17]
Train Case:  85 | Input/Output: [(22 -31 -36 -7) -36]
Train Case:  86 | Input/Output: [(60 -97 -35 71) -97]
Train Case:  87 | Input/Output: [(-92 -38 -60 40) -92]
Train Case:  88 | Input/Output: [(3 -64 15 71) -64]
Train Case:  89 | Input/Output: [(36 85 50 78) 36]
Train Case:  90 | Input/Output: [(90 -44 -3 31) -44]
Train Case:  91 | Input/Output: [(50 -44 -19 13) -44]
Train Case:  92 | Input/Output: [(67 -88 55 -99) -99]
Train Case:  93 | Input/Output: [(-39 -44 -100 -61) -100]
Train Case:  94 | Input/Output: [(7 36 25 -62) -62]
Train Case:  95 | Input/Output: [(-88 -29 -52 46) -88]
Train Case:  96 | Input/Output: [(-25 75 -80 -13) -80]
Train Case:  97 | Input/Output: [(43 -25 80 -44) -44]
Train Case:  98 | Input/Output: [(-32 55 -4 -62) -62]
Train Case:  99 | Input/Output: [(10 14 27 -68) -68]
Test Case:   0 | Input/Output: [[2 2 2 -81] -81]
Test Case:   1 | Input/Output: [[90 -39 -39 -39] -39]
Test Case:   2 | Input/Output: [[-12 -12 -12 58] -12]
Test Case:   3 | Input/Output: [[-64 -64 -66 -64] -66]
Test Case:   4 | Input/Output: [[-2 -56 -56 -56] -56]
Test Case:   5 | Input/Output: [[37 19 19 19] 19]
Test Case:   6 | Input/Output: [[28 28 -31 28] -31]
Test Case:   7 | Input/Output: [[72 72 72 17] 17]
Test Case:   8 | Input/Output: [[-66 -66 -44 -66] -66]
Test Case:   9 | Input/Output: [[15 15 91 15] 15]
Test Case:  10 | Input/Output: [[6 -31 6 6] -31]
Test Case:  11 | Input/Output: [[-61 -95 -61 -61] -95]
Test Case:  12 | Input/Output: [[-3 -3 -58 -3] -58]
Test Case:  13 | Input/Output: [[62 -59 -59 -59] -59]
Test Case:  14 | Input/Output: [[-8 -8 -8 76] -8]
Test Case:  15 | Input/Output: [[-53 58 58 58] -53]
Test Case:  16 | Input/Output: [[-9 -57 -57 -57] -57]
Test Case:  17 | Input/Output: [[81 81 81 -31] -31]
Test Case:  18 | Input/Output: [[34 -96 34 34] -96]
Test Case:  19 | Input/Output: [[92 92 92 85] 85]
Test Case:  20 | Input/Output: [[-38 -38 -38 -92] -92]
Test Case:  21 | Input/Output: [[7 7 7 94] 7]
Test Case:  22 | Input/Output: [[71 -85 71 71] -85]
Test Case:  23 | Input/Output: [[27 55 27 27] 27]
Test Case:  24 | Input/Output: [[41 41 41 83] 41]
Test Case:  25 | Input/Output: [[7 -62 7 7] -62]
Test Case:  26 | Input/Output: [[25 25 25 77] 25]
Test Case:  27 | Input/Output: [[7 7 50 7] 7]
Test Case:  28 | Input/Output: [[33 -82 33 33] -82]
Test Case:  29 | Input/Output: [[27 27 27 -56] -56]
Test Case:  30 | Input/Output: [[21 -45 21 21] -45]
Test Case:  31 | Input/Output: [[99 97 97 97] 97]
Test Case:  32 | Input/Output: [[92 4 92 92] 4]
Test Case:  33 | Input/Output: [[32 32 32 -47] -47]
Test Case:  34 | Input/Output: [[-82 8 8 8] -82]
Test Case:  35 | Input/Output: [[-2 -2 35 -2] -2]
Test Case:  36 | Input/Output: [[-32 -32 -41 -32] -41]
Test Case:  37 | Input/Output: [[46 46 -6 46] -6]
Test Case:  38 | Input/Output: [[75 -99 -99 -99] -99]
Test Case:  39 | Input/Output: [[-24 -24 -100 -24] -100]
Test Case:  40 | Input/Output: [[-60 -60 -60 -22] -60]
Test Case:  41 | Input/Output: [[-50 -85 -50 -50] -85]
Test Case:  42 | Input/Output: [[-67 -67 -67 -71] -71]
Test Case:  43 | Input/Output: [[78 78 78 26] 26]
Test Case:  44 | Input/Output: [[-13 -52 -52 -52] -52]
Test Case:  45 | Input/Output: [[94 94 94 72] 72]
Test Case:  46 | Input/Output: [[42 50 42 42] 42]
Test Case:  47 | Input/Output: [[-17 -17 -17 43] -17]
Test Case:  48 | Input/Output: [[-40 64 -40 -40] -40]
Test Case:  49 | Input/Output: [[-100 52 -100 -100] -100]
Test Case:  50 | Input/Output: [[33 -33 33 33] -33]
Test Case:  51 | Input/Output: [[-12 43 -12 -12] -12]
Test Case:  52 | Input/Output: [[-3 -3 -3 44] -3]
Test Case:  53 | Input/Output: [[-25 -25 -25 -54] -54]
Test Case:  54 | Input/Output: [[-27 12 12 12] -27]
Test Case:  55 | Input/Output: [[-94 -10 -10 -10] -94]
Test Case:  56 | Input/Output: [[-91 2 2 2] -91]
Test Case:  57 | Input/Output: [[54 54 21 54] 21]
Test Case:  58 | Input/Output: [[81 81 23 81] 23]
Test Case:  59 | Input/Output: [[25 25 25 -8] -8]
Test Case:  60 | Input/Output: [[87 -56 87 87] -56]
Test Case:  61 | Input/Output: [[48 48 -57 48] -57]
Test Case:  62 | Input/Output: [[-70 -77 -70 -70] -77]
Test Case:  63 | Input/Output: [[-18 -18 -18 90] -18]
Test Case:  64 | Input/Output: [[33 68 68 68] 33]
Test Case:  65 | Input/Output: [[-61 -61 -61 -20] -61]
Test Case:  66 | Input/Output: [[-71 -71 -71 -75] -75]
Test Case:  67 | Input/Output: [[97 12 97 97] 12]
Test Case:  68 | Input/Output: [[-82 63 63 63] -82]
Test Case:  69 | Input/Output: [[-55 -55 -55 34] -55]
Test Case:  70 | Input/Output: [[79 79 79 83] 79]
Test Case:  71 | Input/Output: [[10 10 10 53] 10]
Test Case:  72 | Input/Output: [[83 92 92 92] 83]
Test Case:  73 | Input/Output: [[29 -18 29 29] -18]
Test Case:  74 | Input/Output: [[97 97 97 -18] -18]
Test Case:  75 | Input/Output: [[31 -81 -81 -81] -81]
Test Case:  76 | Input/Output: [[60 60 71 60] 60]
Test Case:  77 | Input/Output: [[-58 -58 -58 91] -58]
Test Case:  78 | Input/Output: [[44 44 69 44] 44]
Test Case:  79 | Input/Output: [[-81 -81 17 -81] -81]
Test Case:  80 | Input/Output: [[-88 45 45 45] -88]
Test Case:  81 | Input/Output: [[-23 94 -23 -23] -23]
Test Case:  82 | Input/Output: [[41 41 41 91] 41]
Test Case:  83 | Input/Output: [[39 28 28 28] 28]
Test Case:  84 | Input/Output: [[-78 67 -78 -78] -78]
Test Case:  85 | Input/Output: [[31 99 31 31] 31]
Test Case:  86 | Input/Output: [[40 -47 -47 -47] -47]
Test Case:  87 | Input/Output: [[-100 -100 -33 -100] -100]
Test Case:  88 | Input/Output: [[-85 65 -85 -85] -85]
Test Case:  89 | Input/Output: [[53 -26 -26 -26] -26]
Test Case:  90 | Input/Output: [[14 -43 -43 -43] -43]
Test Case:  91 | Input/Output: [[11 11 11 -74] -74]
Test Case:  92 | Input/Output: [[19 19 19 23] 19]
Test Case:  93 | Input/Output: [[-19 -74 -74 -74] -74]
Test Case:  94 | Input/Output: [[94 94 46 94] 46]
Test Case:  95 | Input/Output: [[77 -71 -71 -71] -71]
Test Case:  96 | Input/Output: [[42 42 60 42] 42]
Test Case:  97 | Input/Output: [[8 8 -77 8] -77]
Test Case:  98 | Input/Output: [[-75 -53 -53 -53] -75]
Test Case:  99 | Input/Output: [[39 -54 -54 -54] -54]
Test Case: 100 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 101 | Input/Output: [(17 17 17 17) 17]
Test Case: 102 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 103 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 104 | Input/Output: [(15 15 15 15) 15]
Test Case: 105 | Input/Output: [(22 22 22 22) 22]
Test Case: 106 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 107 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 108 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 109 | Input/Output: [(32 32 32 32) 32]
Test Case: 110 | Input/Output: [(100 100 100 100) 100]
Test Case: 111 | Input/Output: [(36 36 36 36) 36]
Test Case: 112 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 113 | Input/Output: [(23 23 23 23) 23]
Test Case: 114 | Input/Output: [(74 74 74 74) 74]
Test Case: 115 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 116 | Input/Output: [(68 68 68 68) 68]
Test Case: 117 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 118 | Input/Output: [(3 3 3 3) 3]
Test Case: 119 | Input/Output: [(11 11 11 11) 11]
Test Case: 120 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 121 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 122 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 123 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 124 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 125 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 126 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 127 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 128 | Input/Output: [(95 95 95 95) 95]
Test Case: 129 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 130 | Input/Output: [(1 1 1 1) 1]
Test Case: 131 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 132 | Input/Output: [(81 81 81 81) 81]
Test Case: 133 | Input/Output: [(29 29 29 29) 29]
Test Case: 134 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 135 | Input/Output: [(43 43 43 43) 43]
Test Case: 136 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 137 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 138 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 139 | Input/Output: [(8 8 8 8) 8]
Test Case: 140 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 141 | Input/Output: [(74 74 74 74) 74]
Test Case: 142 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 143 | Input/Output: [(51 51 51 51) 51]
Test Case: 144 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 145 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 146 | Input/Output: [(38 38 38 38) 38]
Test Case: 147 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 148 | Input/Output: [(33 33 33 33) 33]
Test Case: 149 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 150 | Input/Output: [(95 95 95 95) 95]
Test Case: 151 | Input/Output: [(9 9 9 9) 9]
Test Case: 152 | Input/Output: [(33 33 33 33) 33]
Test Case: 153 | Input/Output: [(30 30 30 30) 30]
Test Case: 154 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 155 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 156 | Input/Output: [(22 22 22 22) 22]
Test Case: 157 | Input/Output: [(40 40 40 40) 40]
Test Case: 158 | Input/Output: [(84 84 84 84) 84]
Test Case: 159 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 160 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 161 | Input/Output: [(88 88 88 88) 88]
Test Case: 162 | Input/Output: [(47 47 47 47) 47]
Test Case: 163 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 164 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 165 | Input/Output: [(71 71 71 71) 71]
Test Case: 166 | Input/Output: [(7 7 7 7) 7]
Test Case: 167 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 168 | Input/Output: [(69 69 69 69) 69]
Test Case: 169 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 170 | Input/Output: [(55 55 55 55) 55]
Test Case: 171 | Input/Output: [(39 39 39 39) 39]
Test Case: 172 | Input/Output: [(86 86 86 86) 86]
Test Case: 173 | Input/Output: [(24 24 24 24) 24]
Test Case: 174 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 175 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 176 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 177 | Input/Output: [(51 51 51 51) 51]
Test Case: 178 | Input/Output: [(72 72 72 72) 72]
Test Case: 179 | Input/Output: [(55 55 55 55) 55]
Test Case: 180 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 181 | Input/Output: [(65 65 65 65) 65]
Test Case: 182 | Input/Output: [(95 95 95 95) 95]
Test Case: 183 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 184 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 185 | Input/Output: [(92 92 92 92) 92]
Test Case: 186 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 187 | Input/Output: [(50 50 50 50) 50]
Test Case: 188 | Input/Output: [(44 44 44 44) 44]
Test Case: 189 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 190 | Input/Output: [(82 82 82 82) 82]
Test Case: 191 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 192 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 193 | Input/Output: [(92 92 92 92) 92]
Test Case: 194 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 195 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 196 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 197 | Input/Output: [(61 61 61 61) 61]
Test Case: 198 | Input/Output: [(0 0 0 0) 0]
Test Case: 199 | Input/Output: [(35 35 35 35) 35]
Test Case: 200 | Input/Output: [(19 89 38 40) 19]
Test Case: 201 | Input/Output: [(83 40 100 16) 16]
Test Case: 202 | Input/Output: [(34 66 99 77) 34]
Test Case: 203 | Input/Output: [(57 51 10 14) 10]
Test Case: 204 | Input/Output: [(71 79 25 77) 25]
Test Case: 205 | Input/Output: [(37 42 52 73) 37]
Test Case: 206 | Input/Output: [(87 86 95 30) 30]
Test Case: 207 | Input/Output: [(50 82 97 69) 50]
Test Case: 208 | Input/Output: [(28 24 3 25) 3]
Test Case: 209 | Input/Output: [(39 13 30 13) 13]
Test Case: 210 | Input/Output: [(19 23 36 13) 13]
Test Case: 211 | Input/Output: [(17 77 70 84) 17]
Test Case: 212 | Input/Output: [(35 15 36 83) 15]
Test Case: 213 | Input/Output: [(38 19 59 84) 19]
Test Case: 214 | Input/Output: [(1 40 61 37) 1]
Test Case: 215 | Input/Output: [(71 20 92 89) 20]
Test Case: 216 | Input/Output: [(45 27 93 75) 27]
Test Case: 217 | Input/Output: [(56 19 28 98) 19]
Test Case: 218 | Input/Output: [(53 11 26 86) 11]
Test Case: 219 | Input/Output: [(88 49 70 4) 4]
Test Case: 220 | Input/Output: [(99 91 93 23) 23]
Test Case: 221 | Input/Output: [(55 54 14 94) 14]
Test Case: 222 | Input/Output: [(84 77 21 86) 21]
Test Case: 223 | Input/Output: [(64 64 29 30) 29]
Test Case: 224 | Input/Output: [(27 19 14 53) 14]
Test Case: 225 | Input/Output: [(13 8 9 26) 8]
Test Case: 226 | Input/Output: [(24 59 71 50) 24]
Test Case: 227 | Input/Output: [(37 47 49 45) 37]
Test Case: 228 | Input/Output: [(21 98 90 14) 14]
Test Case: 229 | Input/Output: [(64 54 92 40) 40]
Test Case: 230 | Input/Output: [(86 77 53 70) 53]
Test Case: 231 | Input/Output: [(34 9 98 8) 8]
Test Case: 232 | Input/Output: [(32 15 46 47) 15]
Test Case: 233 | Input/Output: [(22 9 56 13) 9]
Test Case: 234 | Input/Output: [(88 86 93 22) 22]
Test Case: 235 | Input/Output: [(80 5 89 25) 5]
Test Case: 236 | Input/Output: [(29 34 35 16) 16]
Test Case: 237 | Input/Output: [(23 55 62 12) 12]
Test Case: 238 | Input/Output: [(66 37 37 89) 37]
Test Case: 239 | Input/Output: [(27 88 49 95) 27]
Test Case: 240 | Input/Output: [(9 8 96 25) 8]
Test Case: 241 | Input/Output: [(29 58 83 39) 29]
Test Case: 242 | Input/Output: [(80 62 97 25) 25]
Test Case: 243 | Input/Output: [(72 63 19 29) 19]
Test Case: 244 | Input/Output: [(53 17 95 65) 17]
Test Case: 245 | Input/Output: [(19 63 65 93) 19]
Test Case: 246 | Input/Output: [(91 11 71 44) 11]
Test Case: 247 | Input/Output: [(41 70 44 24) 24]
Test Case: 248 | Input/Output: [(79 35 76 94) 35]
Test Case: 249 | Input/Output: [(47 76 64 73) 47]
Test Case: 250 | Input/Output: [(47 9 91 54) 9]
Test Case: 251 | Input/Output: [(29 74 94 92) 29]
Test Case: 252 | Input/Output: [(65 39 6 61) 6]
Test Case: 253 | Input/Output: [(39 4 20 2) 2]
Test Case: 254 | Input/Output: [(57 80 64 26) 26]
Test Case: 255 | Input/Output: [(9 45 37 71) 9]
Test Case: 256 | Input/Output: [(42 50 39 20) 20]
Test Case: 257 | Input/Output: [(37 14 91 76) 14]
Test Case: 258 | Input/Output: [(61 91 66 79) 61]
Test Case: 259 | Input/Output: [(10 63 75 47) 10]
Test Case: 260 | Input/Output: [(92 16 97 63) 16]
Test Case: 261 | Input/Output: [(67 42 1 85) 1]
Test Case: 262 | Input/Output: [(34 30 21 11) 11]
Test Case: 263 | Input/Output: [(76 47 58 10) 10]
Test Case: 264 | Input/Output: [(58 70 73 41) 41]
Test Case: 265 | Input/Output: [(17 10 37 54) 10]
Test Case: 266 | Input/Output: [(93 56 82 72) 56]
Test Case: 267 | Input/Output: [(94 4 48 4) 4]
Test Case: 268 | Input/Output: [(95 87 32 89) 32]
Test Case: 269 | Input/Output: [(32 60 25 53) 25]
Test Case: 270 | Input/Output: [(73 22 49 33) 22]
Test Case: 271 | Input/Output: [(11 38 5 73) 5]
Test Case: 272 | Input/Output: [(87 53 52 55) 52]
Test Case: 273 | Input/Output: [(92 54 48 3) 3]
Test Case: 274 | Input/Output: [(9 74 53 19) 9]
Test Case: 275 | Input/Output: [(87 94 35 76) 35]
Test Case: 276 | Input/Output: [(61 73 8 67) 8]
Test Case: 277 | Input/Output: [(1 27 15 28) 1]
Test Case: 278 | Input/Output: [(80 41 90 19) 19]
Test Case: 279 | Input/Output: [(5 29 95 26) 5]
Test Case: 280 | Input/Output: [(65 21 5 65) 5]
Test Case: 281 | Input/Output: [(40 8 22 29) 8]
Test Case: 282 | Input/Output: [(18 11 71 66) 11]
Test Case: 283 | Input/Output: [(49 64 57 68) 49]
Test Case: 284 | Input/Output: [(28 17 77 17) 17]
Test Case: 285 | Input/Output: [(52 4 47 43) 4]
Test Case: 286 | Input/Output: [(8 99 73 52) 8]
Test Case: 287 | Input/Output: [(19 58 79 11) 11]
Test Case: 288 | Input/Output: [(90 25 73 24) 24]
Test Case: 289 | Input/Output: [(1 48 32 1) 1]
Test Case: 290 | Input/Output: [(44 18 74 99) 18]
Test Case: 291 | Input/Output: [(13 15 31 58) 13]
Test Case: 292 | Input/Output: [(79 58 5 64) 5]
Test Case: 293 | Input/Output: [(29 11 100 32) 11]
Test Case: 294 | Input/Output: [(49 3 28 91) 3]
Test Case: 295 | Input/Output: [(100 94 13 58) 13]
Test Case: 296 | Input/Output: [(14 17 53 9) 9]
Test Case: 297 | Input/Output: [(36 20 42 94) 20]
Test Case: 298 | Input/Output: [(39 43 67 84) 39]
Test Case: 299 | Input/Output: [(54 15 25 97) 15]
Test Case: 300 | Input/Output: [(11 43 8 11) 8]
Test Case: 301 | Input/Output: [(72 18 66 37) 18]
Test Case: 302 | Input/Output: [(18 72 16 31) 16]
Test Case: 303 | Input/Output: [(41 40 60 25) 25]
Test Case: 304 | Input/Output: [(50 41 9 93) 9]
Test Case: 305 | Input/Output: [(87 51 42 57) 42]
Test Case: 306 | Input/Output: [(33 67 90 90) 33]
Test Case: 307 | Input/Output: [(3 11 4 81) 3]
Test Case: 308 | Input/Output: [(27 78 12 46) 12]
Test Case: 309 | Input/Output: [(61 14 53 52) 14]
Test Case: 310 | Input/Output: [(58 29 44 33) 29]
Test Case: 311 | Input/Output: [(54 57 71 19) 19]
Test Case: 312 | Input/Output: [(76 100 62 85) 62]
Test Case: 313 | Input/Output: [(56 51 10 8) 8]
Test Case: 314 | Input/Output: [(12 62 47 33) 12]
Test Case: 315 | Input/Output: [(24 26 25 36) 24]
Test Case: 316 | Input/Output: [(8 85 67 83) 8]
Test Case: 317 | Input/Output: [(3 97 27 85) 3]
Test Case: 318 | Input/Output: [(56 13 84 97) 13]
Test Case: 319 | Input/Output: [(70 61 33 15) 15]
Test Case: 320 | Input/Output: [(67 100 44 3) 3]
Test Case: 321 | Input/Output: [(16 58 15 23) 15]
Test Case: 322 | Input/Output: [(52 78 43 92) 43]
Test Case: 323 | Input/Output: [(14 17 52 35) 14]
Test Case: 324 | Input/Output: [(48 78 9 82) 9]
Test Case: 325 | Input/Output: [(35 22 35 81) 22]
Test Case: 326 | Input/Output: [(35 63 63 90) 35]
Test Case: 327 | Input/Output: [(33 34 15 58) 15]
Test Case: 328 | Input/Output: [(88 2 10 85) 2]
Test Case: 329 | Input/Output: [(91 24 90 41) 24]
Test Case: 330 | Input/Output: [(84 43 81 95) 43]
Test Case: 331 | Input/Output: [(59 45 14 100) 14]
Test Case: 332 | Input/Output: [(54 20 97 4) 4]
Test Case: 333 | Input/Output: [(19 15 31 98) 15]
Test Case: 334 | Input/Output: [(8 86 77 77) 8]
Test Case: 335 | Input/Output: [(11 67 25 41) 11]
Test Case: 336 | Input/Output: [(52 70 32 35) 32]
Test Case: 337 | Input/Output: [(76 92 100 34) 34]
Test Case: 338 | Input/Output: [(15 57 68 28) 15]
Test Case: 339 | Input/Output: [(71 11 60 12) 11]
Test Case: 340 | Input/Output: [(86 94 60 50) 50]
Test Case: 341 | Input/Output: [(48 23 76 2) 2]
Test Case: 342 | Input/Output: [(50 83 69 89) 50]
Test Case: 343 | Input/Output: [(53 69 89 75) 53]
Test Case: 344 | Input/Output: [(23 3 60 27) 3]
Test Case: 345 | Input/Output: [(61 71 70 19) 19]
Test Case: 346 | Input/Output: [(100 14 56 64) 14]
Test Case: 347 | Input/Output: [(90 75 0 7) 0]
Test Case: 348 | Input/Output: [(4 43 52 17) 4]
Test Case: 349 | Input/Output: [(88 89 82 55) 55]
Test Case: 350 | Input/Output: [(41 49 41 78) 41]
Test Case: 351 | Input/Output: [(15 14 57 35) 14]
Test Case: 352 | Input/Output: [(14 76 10 54) 10]
Test Case: 353 | Input/Output: [(96 61 50 69) 50]
Test Case: 354 | Input/Output: [(4 20 43 30) 4]
Test Case: 355 | Input/Output: [(57 3 17 58) 3]
Test Case: 356 | Input/Output: [(37 14 100 65) 14]
Test Case: 357 | Input/Output: [(81 33 100 9) 9]
Test Case: 358 | Input/Output: [(25 100 78 10) 10]
Test Case: 359 | Input/Output: [(67 26 89 87) 26]
Test Case: 360 | Input/Output: [(28 91 7 53) 7]
Test Case: 361 | Input/Output: [(53 66 20 98) 20]
Test Case: 362 | Input/Output: [(15 71 38 98) 15]
Test Case: 363 | Input/Output: [(94 90 22 89) 22]
Test Case: 364 | Input/Output: [(41 31 8 91) 8]
Test Case: 365 | Input/Output: [(37 27 59 37) 27]
Test Case: 366 | Input/Output: [(74 60 82 36) 36]
Test Case: 367 | Input/Output: [(61 58 84 90) 58]
Test Case: 368 | Input/Output: [(89 30 61 9) 9]
Test Case: 369 | Input/Output: [(60 63 71 32) 32]
Test Case: 370 | Input/Output: [(68 82 52 86) 52]
Test Case: 371 | Input/Output: [(8 77 52 44) 8]
Test Case: 372 | Input/Output: [(58 92 0 68) 0]
Test Case: 373 | Input/Output: [(6 33 57 16) 6]
Test Case: 374 | Input/Output: [(35 91 50 51) 35]
Test Case: 375 | Input/Output: [(28 84 67 38) 28]
Test Case: 376 | Input/Output: [(71 42 52 70) 42]
Test Case: 377 | Input/Output: [(80 53 45 34) 34]
Test Case: 378 | Input/Output: [(85 6 93 52) 6]
Test Case: 379 | Input/Output: [(28 44 42 10) 10]
Test Case: 380 | Input/Output: [(25 65 35 48) 25]
Test Case: 381 | Input/Output: [(56 22 70 74) 22]
Test Case: 382 | Input/Output: [(41 74 83 16) 16]
Test Case: 383 | Input/Output: [(63 6 85 16) 6]
Test Case: 384 | Input/Output: [(87 61 21 95) 21]
Test Case: 385 | Input/Output: [(61 73 5 24) 5]
Test Case: 386 | Input/Output: [(49 14 3 79) 3]
Test Case: 387 | Input/Output: [(9 20 57 33) 9]
Test Case: 388 | Input/Output: [(90 43 69 82) 43]
Test Case: 389 | Input/Output: [(66 42 24 64) 24]
Test Case: 390 | Input/Output: [(72 50 76 80) 50]
Test Case: 391 | Input/Output: [(89 15 45 3) 3]
Test Case: 392 | Input/Output: [(63 31 85 84) 31]
Test Case: 393 | Input/Output: [(10 3 55 0) 0]
Test Case: 394 | Input/Output: [(53 88 79 86) 53]
Test Case: 395 | Input/Output: [(1 88 26 39) 1]
Test Case: 396 | Input/Output: [(70 43 90 78) 43]
Test Case: 397 | Input/Output: [(31 47 49 24) 24]
Test Case: 398 | Input/Output: [(99 41 79 36) 36]
Test Case: 399 | Input/Output: [(24 29 83 65) 24]
Test Case: 400 | Input/Output: [(-58 73 -6 -13) -58]
Test Case: 401 | Input/Output: [(-78 5 -81 -48) -81]
Test Case: 402 | Input/Output: [(-93 -45 8 80) -93]
Test Case: 403 | Input/Output: [(80 29 -85 -85) -85]
Test Case: 404 | Input/Output: [(24 49 -39 88) -39]
Test Case: 405 | Input/Output: [(47 0 68 90) 0]
Test Case: 406 | Input/Output: [(82 -25 -25 -53) -53]
Test Case: 407 | Input/Output: [(-96 72 11 32) -96]
Test Case: 408 | Input/Output: [(-80 -82 10 -13) -82]
Test Case: 409 | Input/Output: [(94 13 90 64) 13]
Test Case: 410 | Input/Output: [(50 -46 -17 -30) -46]
Test Case: 411 | Input/Output: [(-74 29 16 42) -74]
Test Case: 412 | Input/Output: [(-22 -2 -67 92) -67]
Test Case: 413 | Input/Output: [(-83 8 -41 19) -83]
Test Case: 414 | Input/Output: [(50 42 -25 29) -25]
Test Case: 415 | Input/Output: [(47 -81 29 26) -81]
Test Case: 416 | Input/Output: [(-91 36 -61 28) -91]
Test Case: 417 | Input/Output: [(-56 -69 -17 14) -69]
Test Case: 418 | Input/Output: [(40 -18 19 45) -18]
Test Case: 419 | Input/Output: [(70 -99 -47 -77) -99]
Test Case: 420 | Input/Output: [(-72 -70 16 84) -72]
Test Case: 421 | Input/Output: [(-3 35 71 35) -3]
Test Case: 422 | Input/Output: [(-83 78 71 -85) -85]
Test Case: 423 | Input/Output: [(-72 -61 93 -77) -77]
Test Case: 424 | Input/Output: [(-38 -27 75 65) -38]
Test Case: 425 | Input/Output: [(76 51 -12 45) -12]
Test Case: 426 | Input/Output: [(-1 -39 -44 -11) -44]
Test Case: 427 | Input/Output: [(-10 89 -57 43) -57]
Test Case: 428 | Input/Output: [(-4 -50 6 3) -50]
Test Case: 429 | Input/Output: [(51 9 40 21) 9]
Test Case: 430 | Input/Output: [(-51 -86 -72 6) -86]
Test Case: 431 | Input/Output: [(-16 44 0 -17) -17]
Test Case: 432 | Input/Output: [(77 -98 71 -52) -98]
Test Case: 433 | Input/Output: [(-83 89 -47 -36) -83]
Test Case: 434 | Input/Output: [(72 -68 12 -93) -93]
Test Case: 435 | Input/Output: [(63 -22 76 10) -22]
Test Case: 436 | Input/Output: [(44 17 -16 96) -16]
Test Case: 437 | Input/Output: [(32 16 -41 -77) -77]
Test Case: 438 | Input/Output: [(-52 -39 -40 8) -52]
Test Case: 439 | Input/Output: [(62 -44 -3 -17) -44]
Test Case: 440 | Input/Output: [(52 -23 86 73) -23]
Test Case: 441 | Input/Output: [(-83 13 -49 16) -83]
Test Case: 442 | Input/Output: [(8 18 -93 38) -93]
Test Case: 443 | Input/Output: [(87 -50 -93 -58) -93]
Test Case: 444 | Input/Output: [(-80 66 40 -41) -80]
Test Case: 445 | Input/Output: [(100 87 -92 83) -92]
Test Case: 446 | Input/Output: [(-83 -69 62 29) -83]
Test Case: 447 | Input/Output: [(-57 91 24 -3) -57]
Test Case: 448 | Input/Output: [(-12 8 -55 -71) -71]
Test Case: 449 | Input/Output: [(-87 89 91 -35) -87]
Test Case: 450 | Input/Output: [(-58 -74 -9 11) -74]
Test Case: 451 | Input/Output: [(-80 -38 -38 79) -80]
Test Case: 452 | Input/Output: [(64 90 63 -35) -35]
Test Case: 453 | Input/Output: [(36 96 -14 -5) -14]
Test Case: 454 | Input/Output: [(6 -35 -37 49) -37]
Test Case: 455 | Input/Output: [(-11 -69 93 -85) -85]
Test Case: 456 | Input/Output: [(-84 71 2 -82) -84]
Test Case: 457 | Input/Output: [(-80 15 -46 -31) -80]
Test Case: 458 | Input/Output: [(31 93 47 91) 31]
Test Case: 459 | Input/Output: [(93 75 -58 61) -58]
Test Case: 460 | Input/Output: [(-4 -75 77 -90) -90]
Test Case: 461 | Input/Output: [(-53 90 -47 -39) -53]
Test Case: 462 | Input/Output: [(-55 -41 -66 -87) -87]
Test Case: 463 | Input/Output: [(-28 59 3 6) -28]
Test Case: 464 | Input/Output: [(49 -32 -54 -76) -76]
Test Case: 465 | Input/Output: [(37 76 1 -9) -9]
Test Case: 466 | Input/Output: [(-83 17 -82 -52) -83]
Test Case: 467 | Input/Output: [(-86 -56 -18 -20) -86]
Test Case: 468 | Input/Output: [(37 50 60 -35) -35]
Test Case: 469 | Input/Output: [(-57 77 -42 45) -57]
Test Case: 470 | Input/Output: [(-54 -55 68 -12) -55]
Test Case: 471 | Input/Output: [(45 -34 22 72) -34]
Test Case: 472 | Input/Output: [(0 18 15 97) 0]
Test Case: 473 | Input/Output: [(-96 34 47 42) -96]
Test Case: 474 | Input/Output: [(-53 4 70 -89) -89]
Test Case: 475 | Input/Output: [(-92 50 -48 -47) -92]
Test Case: 476 | Input/Output: [(-10 75 79 -35) -35]
Test Case: 477 | Input/Output: [(15 -46 -47 72) -47]
Test Case: 478 | Input/Output: [(69 82 95 -74) -74]
Test Case: 479 | Input/Output: [(-66 42 -75 8) -75]
Test Case: 480 | Input/Output: [(40 63 57 -93) -93]
Test Case: 481 | Input/Output: [(85 -62 15 -86) -86]
Test Case: 482 | Input/Output: [(-80 70 -92 41) -92]
Test Case: 483 | Input/Output: [(-38 -92 63 65) -92]
Test Case: 484 | Input/Output: [(-54 -16 -13 87) -54]
Test Case: 485 | Input/Output: [(-10 55 80 -91) -91]
Test Case: 486 | Input/Output: [(-88 -13 52 -17) -88]
Test Case: 487 | Input/Output: [(-30 47 -50 60) -50]
Test Case: 488 | Input/Output: [(75 -26 60 89) -26]
Test Case: 489 | Input/Output: [(-7 -17 9 93) -17]
Test Case: 490 | Input/Output: [(-36 -45 -22 -19) -45]
Test Case: 491 | Input/Output: [(-61 -91 66 -14) -91]
Test Case: 492 | Input/Output: [(-35 -87 16 -50) -87]
Test Case: 493 | Input/Output: [(-81 -19 -35 -20) -81]
Test Case: 494 | Input/Output: [(33 -54 -99 46) -99]
Test Case: 495 | Input/Output: [(-7 -19 -62 -94) -94]
Test Case: 496 | Input/Output: [(88 12 -85 -51) -85]
Test Case: 497 | Input/Output: [(11 -67 -91 -24) -91]
Test Case: 498 | Input/Output: [(-63 -58 59 -93) -93]
Test Case: 499 | Input/Output: [(40 99 -39 -73) -73]
Test Case: 500 | Input/Output: [(57 74 9 89) 9]
Test Case: 501 | Input/Output: [(-5 -77 -65 37) -77]
Test Case: 502 | Input/Output: [(-72 -66 74 -5) -72]
Test Case: 503 | Input/Output: [(-11 -56 -32 57) -56]
Test Case: 504 | Input/Output: [(39 84 -64 -11) -64]
Test Case: 505 | Input/Output: [(23 -93 96 -80) -93]
Test Case: 506 | Input/Output: [(56 29 -30 71) -30]
Test Case: 507 | Input/Output: [(55 -71 82 44) -71]
Test Case: 508 | Input/Output: [(-60 -56 -34 -89) -89]
Test Case: 509 | Input/Output: [(-33 -18 80 26) -33]
Test Case: 510 | Input/Output: [(-97 -26 22 -57) -97]
Test Case: 511 | Input/Output: [(30 94 98 -28) -28]
Test Case: 512 | Input/Output: [(15 31 97 36) 15]
Test Case: 513 | Input/Output: [(-75 -42 83 36) -75]
Test Case: 514 | Input/Output: [(-81 89 88 -57) -81]
Test Case: 515 | Input/Output: [(85 26 46 -3) -3]
Test Case: 516 | Input/Output: [(3 9 -88 27) -88]
Test Case: 517 | Input/Output: [(-95 -12 61 -54) -95]
Test Case: 518 | Input/Output: [(87 -42 54 -95) -95]
Test Case: 519 | Input/Output: [(-17 -3 -90 -94) -94]
Test Case: 520 | Input/Output: [(-58 34 77 -99) -99]
Test Case: 521 | Input/Output: [(-71 63 67 14) -71]
Test Case: 522 | Input/Output: [(33 96 11 71) 11]
Test Case: 523 | Input/Output: [(-60 95 67 -88) -88]
Test Case: 524 | Input/Output: [(-59 -18 -75 75) -75]
Test Case: 525 | Input/Output: [(-25 -15 -3 -61) -61]
Test Case: 526 | Input/Output: [(96 25 -69 -52) -69]
Test Case: 527 | Input/Output: [(32 89 23 53) 23]
Test Case: 528 | Input/Output: [(84 -93 49 78) -93]
Test Case: 529 | Input/Output: [(70 79 -93 58) -93]
Test Case: 530 | Input/Output: [(-81 -32 56 -89) -89]
Test Case: 531 | Input/Output: [(-83 -71 -7 -14) -83]
Test Case: 532 | Input/Output: [(31 100 59 -27) -27]
Test Case: 533 | Input/Output: [(-5 0 -98 -65) -98]
Test Case: 534 | Input/Output: [(17 59 -38 -81) -81]
Test Case: 535 | Input/Output: [(73 -37 70 -57) -57]
Test Case: 536 | Input/Output: [(-93 69 35 -100) -100]
Test Case: 537 | Input/Output: [(-86 -30 -90 16) -90]
Test Case: 538 | Input/Output: [(-95 -50 41 -62) -95]
Test Case: 539 | Input/Output: [(95 -29 -20 -24) -29]
Test Case: 540 | Input/Output: [(57 77 61 44) 44]
Test Case: 541 | Input/Output: [(65 -87 83 -2) -87]
Test Case: 542 | Input/Output: [(-89 -38 83 -9) -89]
Test Case: 543 | Input/Output: [(-37 -56 2 -17) -56]
Test Case: 544 | Input/Output: [(1 9 51 63) 1]
Test Case: 545 | Input/Output: [(-46 19 -71 -30) -71]
Test Case: 546 | Input/Output: [(-13 39 -48 87) -48]
Test Case: 547 | Input/Output: [(-87 69 63 75) -87]
Test Case: 548 | Input/Output: [(66 -36 62 6) -36]
Test Case: 549 | Input/Output: [(-49 -4 -4 -80) -80]
Test Case: 550 | Input/Output: [(-27 55 92 -69) -69]
Test Case: 551 | Input/Output: [(96 5 81 50) 5]
Test Case: 552 | Input/Output: [(46 68 55 24) 24]
Test Case: 553 | Input/Output: [(22 42 -93 -22) -93]
Test Case: 554 | Input/Output: [(-51 -46 -45 85) -51]
Test Case: 555 | Input/Output: [(-87 -19 87 -36) -87]
Test Case: 556 | Input/Output: [(-47 92 -60 -46) -60]
Test Case: 557 | Input/Output: [(77 -64 -30 -64) -64]
Test Case: 558 | Input/Output: [(-48 -21 68 28) -48]
Test Case: 559 | Input/Output: [(-87 91 -98 84) -98]
Test Case: 560 | Input/Output: [(24 -34 -61 65) -61]
Test Case: 561 | Input/Output: [(14 -77 82 -33) -77]
Test Case: 562 | Input/Output: [(-5 4 -26 91) -26]
Test Case: 563 | Input/Output: [(99 25 62 21) 21]
Test Case: 564 | Input/Output: [(31 -41 7 32) -41]
Test Case: 565 | Input/Output: [(-99 -81 -67 75) -99]
Test Case: 566 | Input/Output: [(30 17 63 54) 17]
Test Case: 567 | Input/Output: [(26 8 90 50) 8]
Test Case: 568 | Input/Output: [(-62 -21 -12 -76) -76]
Test Case: 569 | Input/Output: [(57 0 45 -25) -25]
Test Case: 570 | Input/Output: [(-76 3 -16 64) -76]
Test Case: 571 | Input/Output: [(-89 75 83 76) -89]
Test Case: 572 | Input/Output: [(90 -36 44 -50) -50]
Test Case: 573 | Input/Output: [(25 55 -62 -19) -62]
Test Case: 574 | Input/Output: [(80 -97 -40 -84) -97]
Test Case: 575 | Input/Output: [(-61 54 84 46) -61]
Test Case: 576 | Input/Output: [(-39 -80 -63 -2) -80]
Test Case: 577 | Input/Output: [(-82 34 78 84) -82]
Test Case: 578 | Input/Output: [(32 -78 74 82) -78]
Test Case: 579 | Input/Output: [(-45 100 54 -1) -45]
Test Case: 580 | Input/Output: [(-88 60 11 16) -88]
Test Case: 581 | Input/Output: [(87 0 39 -63) -63]
Test Case: 582 | Input/Output: [(-92 -78 44 69) -92]
Test Case: 583 | Input/Output: [(64 29 -94 91) -94]
Test Case: 584 | Input/Output: [(-71 -78 -52 11) -78]
Test Case: 585 | Input/Output: [(27 78 -76 -41) -76]
Test Case: 586 | Input/Output: [(19 -64 88 -15) -64]
Test Case: 587 | Input/Output: [(35 -34 -78 -84) -84]
Test Case: 588 | Input/Output: [(73 -66 -37 -44) -66]
Test Case: 589 | Input/Output: [(-43 -66 12 -24) -66]
Test Case: 590 | Input/Output: [(56 -35 49 51) -35]
Test Case: 591 | Input/Output: [(-77 -49 -34 30) -77]
Test Case: 592 | Input/Output: [(8 -16 -35 80) -35]
Test Case: 593 | Input/Output: [(68 44 -67 -37) -67]
Test Case: 594 | Input/Output: [(94 -1 -32 -70) -70]
Test Case: 595 | Input/Output: [(50 -4 -8 55) -8]
Test Case: 596 | Input/Output: [(42 -64 47 44) -64]
Test Case: 597 | Input/Output: [(73 68 11 -21) -21]
Test Case: 598 | Input/Output: [(-5 7 26 29) -5]
Test Case: 599 | Input/Output: [(8 -72 72 91) -72]
Test Case: 600 | Input/Output: [(87 38 35 -90) -90]
Test Case: 601 | Input/Output: [(75 62 21 46) 21]
Test Case: 602 | Input/Output: [(-72 31 70 -30) -72]
Test Case: 603 | Input/Output: [(1 78 72 14) 1]
Test Case: 604 | Input/Output: [(-98 74 -29 32) -98]
Test Case: 605 | Input/Output: [(42 38 -53 -95) -95]
Test Case: 606 | Input/Output: [(14 -15 -77 -71) -77]
Test Case: 607 | Input/Output: [(-71 -49 -71 -61) -71]
Test Case: 608 | Input/Output: [(32 -28 -46 10) -46]
Test Case: 609 | Input/Output: [(42 -42 73 -18) -42]
Test Case: 610 | Input/Output: [(-14 48 -4 55) -14]
Test Case: 611 | Input/Output: [(18 -33 38 -26) -33]
Test Case: 612 | Input/Output: [(16 -27 98 67) -27]
Test Case: 613 | Input/Output: [(82 20 63 -5) -5]
Test Case: 614 | Input/Output: [(-48 -47 10 84) -48]
Test Case: 615 | Input/Output: [(82 93 -48 76) -48]
Test Case: 616 | Input/Output: [(-93 15 -37 26) -93]
Test Case: 617 | Input/Output: [(59 -47 39 -63) -63]
Test Case: 618 | Input/Output: [(-10 94 -84 29) -84]
Test Case: 619 | Input/Output: [(-52 -87 39 -71) -87]
Test Case: 620 | Input/Output: [(18 4 -80 -98) -98]
Test Case: 621 | Input/Output: [(-30 -88 47 -88) -88]
Test Case: 622 | Input/Output: [(46 -43 -33 12) -43]
Test Case: 623 | Input/Output: [(-85 75 2 23) -85]
Test Case: 624 | Input/Output: [(75 -49 -79 80) -79]
Test Case: 625 | Input/Output: [(-19 66 -84 97) -84]
Test Case: 626 | Input/Output: [(81 46 69 26) 26]
Test Case: 627 | Input/Output: [(11 -95 -83 -8) -95]
Test Case: 628 | Input/Output: [(-94 81 -97 19) -97]
Test Case: 629 | Input/Output: [(-45 0 -88 61) -88]
Test Case: 630 | Input/Output: [(47 -55 55 83) -55]
Test Case: 631 | Input/Output: [(-75 63 5 -52) -75]
Test Case: 632 | Input/Output: [(55 -9 41 -34) -34]
Test Case: 633 | Input/Output: [(-51 44 24 -65) -65]
Test Case: 634 | Input/Output: [(-40 -43 -99 10) -99]
Test Case: 635 | Input/Output: [(-70 -24 -58 74) -70]
Test Case: 636 | Input/Output: [(-59 62 92 -14) -59]
Test Case: 637 | Input/Output: [(-21 40 -39 84) -39]
Test Case: 638 | Input/Output: [(92 -95 -63 -97) -97]
Test Case: 639 | Input/Output: [(38 16 -67 61) -67]
Test Case: 640 | Input/Output: [(7 12 -100 76) -100]
Test Case: 641 | Input/Output: [(85 -44 -64 47) -64]
Test Case: 642 | Input/Output: [(-23 49 21 -73) -73]
Test Case: 643 | Input/Output: [(48 -78 49 92) -78]
Test Case: 644 | Input/Output: [(-12 21 32 -32) -32]
Test Case: 645 | Input/Output: [(-35 75 32 -48) -48]
Test Case: 646 | Input/Output: [(-93 -56 -3 40) -93]
Test Case: 647 | Input/Output: [(-33 31 52 -92) -92]
Test Case: 648 | Input/Output: [(68 -19 -31 56) -31]
Test Case: 649 | Input/Output: [(-94 -42 -95 60) -95]
Test Case: 650 | Input/Output: [(24 1 -4 -79) -79]
Test Case: 651 | Input/Output: [(-11 61 -70 -34) -70]
Test Case: 652 | Input/Output: [(-1 -17 54 70) -17]
Test Case: 653 | Input/Output: [(41 57 -43 40) -43]
Test Case: 654 | Input/Output: [(24 62 58 -22) -22]
Test Case: 655 | Input/Output: [(20 100 22 96) 20]
Test Case: 656 | Input/Output: [(55 45 -10 51) -10]
Test Case: 657 | Input/Output: [(78 -67 69 -42) -67]
Test Case: 658 | Input/Output: [(-94 -87 87 -67) -94]
Test Case: 659 | Input/Output: [(65 69 12 -48) -48]
Test Case: 660 | Input/Output: [(-91 8 -97 97) -97]
Test Case: 661 | Input/Output: [(96 -38 -94 -23) -94]
Test Case: 662 | Input/Output: [(49 59 98 -79) -79]
Test Case: 663 | Input/Output: [(-46 31 -32 -15) -46]
Test Case: 664 | Input/Output: [(-85 0 22 -70) -85]
Test Case: 665 | Input/Output: [(-30 34 -41 -82) -82]
Test Case: 666 | Input/Output: [(-66 3 -92 -32) -92]
Test Case: 667 | Input/Output: [(-86 -96 49 29) -96]
Test Case: 668 | Input/Output: [(92 -39 -12 19) -39]
Test Case: 669 | Input/Output: [(78 21 -54 -18) -54]
Test Case: 670 | Input/Output: [(65 21 63 99) 21]
Test Case: 671 | Input/Output: [(-39 -39 76 44) -39]
Test Case: 672 | Input/Output: [(10 -74 -61 57) -74]
Test Case: 673 | Input/Output: [(-11 -32 2 -25) -32]
Test Case: 674 | Input/Output: [(82 36 -55 -76) -76]
Test Case: 675 | Input/Output: [(-24 75 1 -8) -24]
Test Case: 676 | Input/Output: [(58 1 -55 0) -55]
Test Case: 677 | Input/Output: [(82 -27 -83 80) -83]
Test Case: 678 | Input/Output: [(41 80 -65 -37) -65]
Test Case: 679 | Input/Output: [(23 -13 -3 0) -13]
Test Case: 680 | Input/Output: [(40 69 67 -36) -36]
Test Case: 681 | Input/Output: [(-18 77 87 -74) -74]
Test Case: 682 | Input/Output: [(83 58 -95 46) -95]
Test Case: 683 | Input/Output: [(62 5 -75 98) -75]
Test Case: 684 | Input/Output: [(-22 -10 18 73) -22]
Test Case: 685 | Input/Output: [(-89 40 31 23) -89]
Test Case: 686 | Input/Output: [(-77 56 -95 -13) -95]
Test Case: 687 | Input/Output: [(87 39 99 94) 39]
Test Case: 688 | Input/Output: [(-76 -89 17 -58) -89]
Test Case: 689 | Input/Output: [(-11 -58 -98 13) -98]
Test Case: 690 | Input/Output: [(52 27 100 14) 14]
Test Case: 691 | Input/Output: [(-90 -34 5 -9) -90]
Test Case: 692 | Input/Output: [(-30 61 -40 16) -40]
Test Case: 693 | Input/Output: [(-17 -26 -80 -20) -80]
Test Case: 694 | Input/Output: [(61 -69 -68 -38) -69]
Test Case: 695 | Input/Output: [(87 -66 -5 58) -66]
Test Case: 696 | Input/Output: [(-97 50 62 68) -97]
Test Case: 697 | Input/Output: [(2 81 -1 -87) -87]
Test Case: 698 | Input/Output: [(24 23 32 95) 23]
Test Case: 699 | Input/Output: [(44 79 72 -91) -91]
Test Case: 700 | Input/Output: [(60 13 79 -92) -92]
Test Case: 701 | Input/Output: [(-68 57 98 -89) -89]
Test Case: 702 | Input/Output: [(5 -79 -39 -59) -79]
Test Case: 703 | Input/Output: [(29 -30 -34 65) -34]
Test Case: 704 | Input/Output: [(-20 29 51 -46) -46]
Test Case: 705 | Input/Output: [(-60 0 -22 -23) -60]
Test Case: 706 | Input/Output: [(2 34 -47 19) -47]
Test Case: 707 | Input/Output: [(-20 -26 -96 40) -96]
Test Case: 708 | Input/Output: [(-81 -76 4 70) -81]
Test Case: 709 | Input/Output: [(30 38 -92 82) -92]
Test Case: 710 | Input/Output: [(-54 -68 -44 17) -68]
Test Case: 711 | Input/Output: [(-7 -60 87 -26) -60]
Test Case: 712 | Input/Output: [(37 79 69 36) 36]
Test Case: 713 | Input/Output: [(-4 -69 -97 3) -97]
Test Case: 714 | Input/Output: [(-7 17 25 -2) -7]
Test Case: 715 | Input/Output: [(-22 -57 37 88) -57]
Test Case: 716 | Input/Output: [(90 48 -10 -39) -39]
Test Case: 717 | Input/Output: [(6 34 94 -72) -72]
Test Case: 718 | Input/Output: [(33 40 -63 42) -63]
Test Case: 719 | Input/Output: [(13 15 84 -34) -34]
Test Case: 720 | Input/Output: [(-18 -17 -73 70) -73]
Test Case: 721 | Input/Output: [(-13 -81 40 -23) -81]
Test Case: 722 | Input/Output: [(9 -26 -95 -28) -95]
Test Case: 723 | Input/Output: [(-38 -76 6 70) -76]
Test Case: 724 | Input/Output: [(25 -39 60 -84) -84]
Test Case: 725 | Input/Output: [(19 -99 6 57) -99]
Test Case: 726 | Input/Output: [(40 28 -86 -57) -86]
Test Case: 727 | Input/Output: [(2 4 -31 -46) -46]
Test Case: 728 | Input/Output: [(-66 50 52 25) -66]
Test Case: 729 | Input/Output: [(-39 6 -34 -58) -58]
Test Case: 730 | Input/Output: [(13 -5 -1 -2) -5]
Test Case: 731 | Input/Output: [(3 96 76 46) 3]
Test Case: 732 | Input/Output: [(-37 35 -64 43) -64]
Test Case: 733 | Input/Output: [(20 -84 -22 -70) -84]
Test Case: 734 | Input/Output: [(83 81 76 28) 28]
Test Case: 735 | Input/Output: [(-43 -68 -88 -1) -88]
Test Case: 736 | Input/Output: [(43 -26 -50 -58) -58]
Test Case: 737 | Input/Output: [(0 -28 100 -89) -89]
Test Case: 738 | Input/Output: [(-75 -57 5 -7) -75]
Test Case: 739 | Input/Output: [(-54 37 -48 18) -54]
Test Case: 740 | Input/Output: [(43 92 -90 99) -90]
Test Case: 741 | Input/Output: [(80 -18 -10 -1) -18]
Test Case: 742 | Input/Output: [(83 -26 53 -29) -29]
Test Case: 743 | Input/Output: [(88 -35 -64 -61) -64]
Test Case: 744 | Input/Output: [(-18 -64 94 -69) -69]
Test Case: 745 | Input/Output: [(83 83 -56 83) -56]
Test Case: 746 | Input/Output: [(9 64 93 -16) -16]
Test Case: 747 | Input/Output: [(98 -55 33 35) -55]
Test Case: 748 | Input/Output: [(-49 -14 27 86) -49]
Test Case: 749 | Input/Output: [(49 63 -65 12) -65]
Test Case: 750 | Input/Output: [(-64 -55 8 -62) -64]
Test Case: 751 | Input/Output: [(74 -91 74 12) -91]
Test Case: 752 | Input/Output: [(92 -22 81 92) -22]
Test Case: 753 | Input/Output: [(-94 29 63 -31) -94]
Test Case: 754 | Input/Output: [(-13 86 -83 -6) -83]
Test Case: 755 | Input/Output: [(-40 70 36 -90) -90]
Test Case: 756 | Input/Output: [(-6 41 24 34) -6]
Test Case: 757 | Input/Output: [(-51 -11 -67 93) -67]
Test Case: 758 | Input/Output: [(-100 -46 -18 -86) -100]
Test Case: 759 | Input/Output: [(9 79 53 23) 9]
Test Case: 760 | Input/Output: [(13 68 -50 -71) -71]
Test Case: 761 | Input/Output: [(65 -9 72 -73) -73]
Test Case: 762 | Input/Output: [(94 56 43 -89) -89]
Test Case: 763 | Input/Output: [(71 -11 91 40) -11]
Test Case: 764 | Input/Output: [(4 -76 -68 -84) -84]
Test Case: 765 | Input/Output: [(72 -96 24 39) -96]
Test Case: 766 | Input/Output: [(-78 -21 -85 -13) -85]
Test Case: 767 | Input/Output: [(74 94 -64 -22) -64]
Test Case: 768 | Input/Output: [(-52 66 -11 89) -52]
Test Case: 769 | Input/Output: [(-39 99 -20 14) -39]
Test Case: 770 | Input/Output: [(7 58 81 84) 7]
Test Case: 771 | Input/Output: [(-94 -66 -60 96) -94]
Test Case: 772 | Input/Output: [(-16 -96 45 -89) -96]
Test Case: 773 | Input/Output: [(-24 0 67 -94) -94]
Test Case: 774 | Input/Output: [(-53 33 -39 85) -53]
Test Case: 775 | Input/Output: [(24 6 -59 75) -59]
Test Case: 776 | Input/Output: [(85 66 -71 60) -71]
Test Case: 777 | Input/Output: [(57 -1 49 92) -1]
Test Case: 778 | Input/Output: [(-83 62 86 -52) -83]
Test Case: 779 | Input/Output: [(-37 68 -9 0) -37]
Test Case: 780 | Input/Output: [(19 80 -76 78) -76]
Test Case: 781 | Input/Output: [(58 -48 26 31) -48]
Test Case: 782 | Input/Output: [(99 -53 98 97) -53]
Test Case: 783 | Input/Output: [(90 -16 17 -37) -37]
Test Case: 784 | Input/Output: [(32 78 71 46) 32]
Test Case: 785 | Input/Output: [(18 -76 52 26) -76]
Test Case: 786 | Input/Output: [(49 -82 67 -48) -82]
Test Case: 787 | Input/Output: [(-74 53 -57 -39) -74]
Test Case: 788 | Input/Output: [(-29 90 -7 -20) -29]
Test Case: 789 | Input/Output: [(99 49 78 97) 49]
Test Case: 790 | Input/Output: [(52 39 60 61) 39]
Test Case: 791 | Input/Output: [(-34 40 80 -77) -77]
Test Case: 792 | Input/Output: [(67 -1 33 5) -1]
Test Case: 793 | Input/Output: [(-84 98 36 -28) -84]
Test Case: 794 | Input/Output: [(50 51 97 76) 50]
Test Case: 795 | Input/Output: [(-95 -21 -69 80) -95]
Test Case: 796 | Input/Output: [(-70 89 27 2) -70]
Test Case: 797 | Input/Output: [(24 -70 88 -37) -70]
Test Case: 798 | Input/Output: [(-78 -54 -97 30) -97]
Test Case: 799 | Input/Output: [(24 -78 -33 -86) -86]
Test Case: 800 | Input/Output: [(-91 -57 31 -91) -91]
Test Case: 801 | Input/Output: [(68 -2 41 61) -2]
Test Case: 802 | Input/Output: [(-51 45 28 -22) -51]
Test Case: 803 | Input/Output: [(9 -70 23 63) -70]
Test Case: 804 | Input/Output: [(40 16 -26 33) -26]
Test Case: 805 | Input/Output: [(79 -64 -50 -16) -64]
Test Case: 806 | Input/Output: [(-56 -17 17 -8) -56]
Test Case: 807 | Input/Output: [(84 40 88 36) 36]
Test Case: 808 | Input/Output: [(-42 -6 100 86) -42]
Test Case: 809 | Input/Output: [(41 -9 60 37) -9]
Test Case: 810 | Input/Output: [(-53 -80 73 100) -80]
Test Case: 811 | Input/Output: [(70 -16 56 -32) -32]
Test Case: 812 | Input/Output: [(-85 39 -28 -5) -85]
Test Case: 813 | Input/Output: [(49 -66 58 -85) -85]
Test Case: 814 | Input/Output: [(-36 -13 90 48) -36]
Test Case: 815 | Input/Output: [(40 -46 -83 -95) -95]
Test Case: 816 | Input/Output: [(-12 56 -60 2) -60]
Test Case: 817 | Input/Output: [(-86 -95 -47 66) -95]
Test Case: 818 | Input/Output: [(67 -81 71 60) -81]
Test Case: 819 | Input/Output: [(-20 -4 -81 -26) -81]
Test Case: 820 | Input/Output: [(64 -38 -4 -14) -38]
Test Case: 821 | Input/Output: [(70 94 31 -46) -46]
Test Case: 822 | Input/Output: [(44 43 -14 29) -14]
Test Case: 823 | Input/Output: [(36 -86 65 64) -86]
Test Case: 824 | Input/Output: [(-7 50 84 48) -7]
Test Case: 825 | Input/Output: [(-13 47 32 -13) -13]
Test Case: 826 | Input/Output: [(60 -14 46 -56) -56]
Test Case: 827 | Input/Output: [(-16 97 -60 84) -60]
Test Case: 828 | Input/Output: [(11 16 -24 22) -24]
Test Case: 829 | Input/Output: [(-33 66 -85 34) -85]
Test Case: 830 | Input/Output: [(14 -1 96 -86) -86]
Test Case: 831 | Input/Output: [(-41 15 41 74) -41]
Test Case: 832 | Input/Output: [(99 26 9 -100) -100]
Test Case: 833 | Input/Output: [(-31 55 84 61) -31]
Test Case: 834 | Input/Output: [(-49 18 68 93) -49]
Test Case: 835 | Input/Output: [(45 -96 -5 -98) -98]
Test Case: 836 | Input/Output: [(-63 29 -95 37) -95]
Test Case: 837 | Input/Output: [(61 28 -94 18) -94]
Test Case: 838 | Input/Output: [(-83 -7 -40 40) -83]
Test Case: 839 | Input/Output: [(99 -38 93 -22) -38]
Test Case: 840 | Input/Output: [(-88 -93 -49 -76) -93]
Test Case: 841 | Input/Output: [(53 21 -62 51) -62]
Test Case: 842 | Input/Output: [(36 -63 -26 63) -63]
Test Case: 843 | Input/Output: [(51 -78 35 -89) -89]
Test Case: 844 | Input/Output: [(50 -59 -32 63) -59]
Test Case: 845 | Input/Output: [(41 -30 59 -37) -37]
Test Case: 846 | Input/Output: [(-100 58 71 96) -100]
Test Case: 847 | Input/Output: [(84 -10 -9 -93) -93]
Test Case: 848 | Input/Output: [(-2 -58 -87 19) -87]
Test Case: 849 | Input/Output: [(12 -85 -66 82) -85]
Test Case: 850 | Input/Output: [(49 -6 -44 6) -44]
Test Case: 851 | Input/Output: [(-36 -92 -54 -38) -92]
Test Case: 852 | Input/Output: [(94 -23 24 -89) -89]
Test Case: 853 | Input/Output: [(-51 9 -82 -32) -82]
Test Case: 854 | Input/Output: [(43 74 23 -68) -68]
Test Case: 855 | Input/Output: [(97 1 64 65) 1]
Test Case: 856 | Input/Output: [(-81 -47 54 -89) -89]
Test Case: 857 | Input/Output: [(41 41 -16 -44) -44]
Test Case: 858 | Input/Output: [(45 -10 55 -73) -73]
Test Case: 859 | Input/Output: [(-44 84 -57 75) -57]
Test Case: 860 | Input/Output: [(67 -65 79 -92) -92]
Test Case: 861 | Input/Output: [(81 -1 46 -64) -64]
Test Case: 862 | Input/Output: [(-33 64 67 -65) -65]
Test Case: 863 | Input/Output: [(-13 -52 -81 -51) -81]
Test Case: 864 | Input/Output: [(-6 35 12 -93) -93]
Test Case: 865 | Input/Output: [(20 29 -57 -59) -59]
Test Case: 866 | Input/Output: [(-54 -98 -65 -86) -98]
Test Case: 867 | Input/Output: [(26 -6 -60 79) -60]
Test Case: 868 | Input/Output: [(-88 -77 -54 -55) -88]
Test Case: 869 | Input/Output: [(16 50 -18 36) -18]
Test Case: 870 | Input/Output: [(-90 -33 65 -22) -90]
Test Case: 871 | Input/Output: [(-72 76 -99 96) -99]
Test Case: 872 | Input/Output: [(-11 -100 52 -23) -100]
Test Case: 873 | Input/Output: [(71 35 -19 36) -19]
Test Case: 874 | Input/Output: [(28 -23 92 -23) -23]
Test Case: 875 | Input/Output: [(-100 27 42 74) -100]
Test Case: 876 | Input/Output: [(64 59 -57 -90) -90]
Test Case: 877 | Input/Output: [(-29 39 26 22) -29]
Test Case: 878 | Input/Output: [(-97 71 -44 -5) -97]
Test Case: 879 | Input/Output: [(38 86 -39 62) -39]
Test Case: 880 | Input/Output: [(-93 -17 55 34) -93]
Test Case: 881 | Input/Output: [(-18 -9 -55 -9) -55]
Test Case: 882 | Input/Output: [(29 53 -2 68) -2]
Test Case: 883 | Input/Output: [(56 0 16 -16) -16]
Test Case: 884 | Input/Output: [(-47 -100 57 -98) -100]
Test Case: 885 | Input/Output: [(20 20 -52 0) -52]
Test Case: 886 | Input/Output: [(4 79 -49 32) -49]
Test Case: 887 | Input/Output: [(56 -98 71 79) -98]
Test Case: 888 | Input/Output: [(-57 80 -70 -49) -70]
Test Case: 889 | Input/Output: [(-94 -38 -47 78) -94]
Test Case: 890 | Input/Output: [(-16 48 29 64) -16]
Test Case: 891 | Input/Output: [(-55 33 5 -30) -55]
Test Case: 892 | Input/Output: [(21 10 66 22) 10]
Test Case: 893 | Input/Output: [(-95 95 35 53) -95]
Test Case: 894 | Input/Output: [(-74 20 58 -20) -74]
Test Case: 895 | Input/Output: [(-75 -36 -8 -89) -89]
Test Case: 896 | Input/Output: [(-65 -57 -78 12) -78]
Test Case: 897 | Input/Output: [(-15 -13 -45 -96) -96]
Test Case: 898 | Input/Output: [(-97 -1 -42 -88) -97]
Test Case: 899 | Input/Output: [(83 86 -77 -49) -77]
Test Case: 900 | Input/Output: [(70 3 15 77) 3]
Test Case: 901 | Input/Output: [(-15 38 87 98) -15]
Test Case: 902 | Input/Output: [(85 89 -10 -7) -10]
Test Case: 903 | Input/Output: [(56 9 93 65) 9]
Test Case: 904 | Input/Output: [(-82 15 -74 41) -82]
Test Case: 905 | Input/Output: [(-57 54 16 93) -57]
Test Case: 906 | Input/Output: [(33 26 86 -100) -100]
Test Case: 907 | Input/Output: [(20 -9 -58 3) -58]
Test Case: 908 | Input/Output: [(-31 -49 67 -54) -54]
Test Case: 909 | Input/Output: [(7 -81 42 75) -81]
Test Case: 910 | Input/Output: [(43 67 -31 -88) -88]
Test Case: 911 | Input/Output: [(-15 67 19 20) -15]
Test Case: 912 | Input/Output: [(-35 -89 -75 56) -89]
Test Case: 913 | Input/Output: [(43 38 -77 78) -77]
Test Case: 914 | Input/Output: [(-32 -34 -74 12) -74]
Test Case: 915 | Input/Output: [(-44 -33 96 43) -44]
Test Case: 916 | Input/Output: [(29 -6 -11 -15) -15]
Test Case: 917 | Input/Output: [(27 -62 -82 90) -82]
Test Case: 918 | Input/Output: [(21 -36 -4 -17) -36]
Test Case: 919 | Input/Output: [(-69 -28 -20 27) -69]
Test Case: 920 | Input/Output: [(-94 52 54 -36) -94]
Test Case: 921 | Input/Output: [(-17 -2 -16 -31) -31]
Test Case: 922 | Input/Output: [(-33 -64 62 -87) -87]
Test Case: 923 | Input/Output: [(-83 66 59 -69) -83]
Test Case: 924 | Input/Output: [(-98 75 20 -12) -98]
Test Case: 925 | Input/Output: [(-92 -14 -84 -53) -92]
Test Case: 926 | Input/Output: [(-30 37 -47 -22) -47]
Test Case: 927 | Input/Output: [(76 40 17 5) 5]
Test Case: 928 | Input/Output: [(69 55 78 53) 53]
Test Case: 929 | Input/Output: [(-7 29 86 10) -7]
Test Case: 930 | Input/Output: [(-59 12 -29 -61) -61]
Test Case: 931 | Input/Output: [(25 9 -88 6) -88]
Test Case: 932 | Input/Output: [(-66 -72 -81 47) -81]
Test Case: 933 | Input/Output: [(-21 -66 18 -44) -66]
Test Case: 934 | Input/Output: [(-26 9 22 76) -26]
Test Case: 935 | Input/Output: [(29 -32 -35 -99) -99]
Test Case: 936 | Input/Output: [(-59 41 -71 -91) -91]
Test Case: 937 | Input/Output: [(-74 -16 -54 94) -74]
Test Case: 938 | Input/Output: [(31 54 -49 -35) -49]
Test Case: 939 | Input/Output: [(-78 62 64 -78) -78]
Test Case: 940 | Input/Output: [(-36 -41 -86 54) -86]
Test Case: 941 | Input/Output: [(-4 66 71 -47) -47]
Test Case: 942 | Input/Output: [(35 -47 67 -54) -54]
Test Case: 943 | Input/Output: [(38 -34 1 -66) -66]
Test Case: 944 | Input/Output: [(74 43 -96 -22) -96]
Test Case: 945 | Input/Output: [(33 97 -64 17) -64]
Test Case: 946 | Input/Output: [(76 6 89 -33) -33]
Test Case: 947 | Input/Output: [(-40 -17 -62 -50) -62]
Test Case: 948 | Input/Output: [(-49 21 7 -73) -73]
Test Case: 949 | Input/Output: [(-26 -60 47 -6) -60]
Test Case: 950 | Input/Output: [(-18 18 84 -26) -26]
Test Case: 951 | Input/Output: [(24 -10 -32 26) -32]
Test Case: 952 | Input/Output: [(-50 85 63 -76) -76]
Test Case: 953 | Input/Output: [(27 28 -34 -58) -58]
Test Case: 954 | Input/Output: [(33 -43 87 -35) -43]
Test Case: 955 | Input/Output: [(-3 -8 32 -77) -77]
Test Case: 956 | Input/Output: [(-89 66 12 83) -89]
Test Case: 957 | Input/Output: [(72 -97 81 29) -97]
Test Case: 958 | Input/Output: [(-58 74 -39 55) -58]
Test Case: 959 | Input/Output: [(-22 21 -44 9) -44]
Test Case: 960 | Input/Output: [(-35 60 -40 43) -40]
Test Case: 961 | Input/Output: [(-78 21 -89 84) -89]
Test Case: 962 | Input/Output: [(47 5 -13 91) -13]
Test Case: 963 | Input/Output: [(72 88 35 -93) -93]
Test Case: 964 | Input/Output: [(-61 83 -7 -1) -61]
Test Case: 965 | Input/Output: [(65 87 -87 -58) -87]
Test Case: 966 | Input/Output: [(-91 84 -52 63) -91]
Test Case: 967 | Input/Output: [(61 50 37 8) 8]
Test Case: 968 | Input/Output: [(0 25 -67 -76) -76]
Test Case: 969 | Input/Output: [(-20 -25 -92 -88) -92]
Test Case: 970 | Input/Output: [(12 57 37 8) 8]
Test Case: 971 | Input/Output: [(10 52 35 64) 10]
Test Case: 972 | Input/Output: [(16 8 12 85) 8]
Test Case: 973 | Input/Output: [(38 31 55 -10) -10]
Test Case: 974 | Input/Output: [(47 -95 44 -78) -95]
Test Case: 975 | Input/Output: [(72 -64 87 -1) -64]
Test Case: 976 | Input/Output: [(57 -42 97 28) -42]
Test Case: 977 | Input/Output: [(93 -98 -48 -68) -98]
Test Case: 978 | Input/Output: [(-15 -28 21 -80) -80]
Test Case: 979 | Input/Output: [(16 -55 -85 56) -85]
Test Case: 980 | Input/Output: [(-19 38 -74 37) -74]
Test Case: 981 | Input/Output: [(64 3 73 -83) -83]
Test Case: 982 | Input/Output: [(53 46 -98 69) -98]
Test Case: 983 | Input/Output: [(-3 -93 -51 -25) -93]
Test Case: 984 | Input/Output: [(56 -73 62 -78) -78]
Test Case: 985 | Input/Output: [(8 99 -12 68) -12]
Test Case: 986 | Input/Output: [(-86 -52 -35 -41) -86]
Test Case: 987 | Input/Output: [(-33 85 65 34) -33]
Test Case: 988 | Input/Output: [(-41 46 -97 -73) -97]
Test Case: 989 | Input/Output: [(-80 -20 81 -46) -80]
Test Case: 990 | Input/Output: [(7 67 3 -52) -52]
Test Case: 991 | Input/Output: [(-27 66 94 -6) -27]
Test Case: 992 | Input/Output: [(79 20 8 -25) -25]
Test Case: 993 | Input/Output: [(35 -74 -2 58) -74]
Test Case: 994 | Input/Output: [(66 35 -38 -18) -38]
Test Case: 995 | Input/Output: [(-31 10 71 88) -31]
Test Case: 996 | Input/Output: [(-56 73 37 -5) -56]
Test Case: 997 | Input/Output: [(74 67 -46 26) -46]
Test Case: 998 | Input/Output: [(-67 77 -63 -6) -67]
Test Case: 999 | Input/Output: [(60 41 16 19) 16]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 87 -26 -8 90 -31 -86 26 35 5 78 25 67 -98 -54 111 33
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-29 -19 -19 -19] -29] [[-21 -21 71 -21] -21] [[-74 -74 -74 18] -74] [[16 -26 16 16] -26] [[49 49 -46 49] -46] [[77 -18 77 77] -18] [[-75 -75 -75 45] -75] [[61 -87 61 61] -87] [[-27 12 -27 -27] -27] [[-52 -55 -55 -55] -55] [(40 40 40 40) 40] [(-41 -41 -41 -41) -41] [(-100 -100 -100 -100) -100] [(5 5 5 5) 5] [(42 42 42 42) 42] [(44 50 36 48) 36] [(6 60 71 32) 6] [(96 10 12 31) 10] [(17 53 82 3) 3] [(3 26 87 53) 3] [(18 30 90 29) 18] [(1 14 20 4) 1] [(58 4 90 26) 4] [(80 11 87 90) 11] [(43 32 11 8) 8] [(90 97 48 26) 26] [(11 52 48 55) 11] [(99 36 92 74) 36] [(72 15 76 91) 15] [(54 58 67 39) 39] [(50 82 77 65) 50] [(71 15 24 81) 15] [(58 67 28 10) 10] [(96 35 88 35) 35] [(28 44 91 67) 28] [(-43 -8 98 -55) -55] [(64 57 -12 -69) -69] [(-51 -50 49 86) -51] [(-31 -94 61 -95) -95] [(-94 90 76 -71) -94] [(-59 59 31 91) -59] [(58 -82 -9 5) -82] [(65 30 82 45) 30] [(84 -67 74 7) -67] [(-45 -63 -33 -20) -63] [(-27 32 15 -65) -65] [(86 9 11 78) 9] [(-9 42 -80 -80) -80] [(36 95 91 53) 36] [(-4 -76 -1 -48) -76] [(-41 66 98 -54) -54] [(52 37 57 25) 25] [(58 63 -81 -91) -91] [(14 -99 71 69) -99] [(70 -44 98 25) -44] [(-18 66 87 -49) -49] [(-82 40 88 21) -82] [(-3 -67 -93 89) -93] [(85 -57 49 21) -57] [(22 -58 31 -51) -58] [(35 -44 91 -33) -44] [(11 50 -28 -9) -28] [(93 92 -56 -1) -56] [(-25 67 63 71) -25] [(62 -23 42 47) -23] [(-84 -71 77 48) -84] [(-95 -27 -15 -93) -95] [(88 -99 -60 19) -99] [(34 -30 15 -55) -55] [(-55 22 -93 -82) -93] [(-6 2 -87 -50) -87] [(30 82 16 70) 16] [(13 -68 72 -100) -100] [(79 -14 20 -78) -78] [(42 -59 -39 93) -59] [(59 49 -2 93) -2] [(34 -92 -88 -18) -92] [(-20 50 22 -11) -20] [(50 -11 37 -78) -78] [(37 -17 68 11) -17] [(22 -31 -36 -7) -36] [(60 -97 -35 71) -97] [(-92 -38 -60 40) -92] [(3 -64 15 71) -64] [(36 85 50 78) 36] [(90 -44 -3 31) -44] [(50 -44 -19 13) -44] [(67 -88 55 -99) -99] [(-39 -44 -100 -61) -100] [(7 36 25 -62) -62] [(-88 -29 -52 46) -88] [(-25 75 -80 -13) -80] [(43 -25 80 -44) -44] [(-32 55 -4 -62) -62] [(10 14 27 -68) -68])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 6                   | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 53                 
Correct output: 3                   | Program output: 26                 
Correct output: 18                  | Program output: 30                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 32                 
Correct output: 26                  | Program output: 97                 
Correct output: 11                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 58                 
Correct output: 50                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 44                 
Correct output: -55                 | Program output: -8                 
Correct output: -69                 | Program output: 57                 
Correct output: -51                 | Program output: -50                
Correct output: -95                 | Program output: -94                
Correct output: -94                 | Program output: 90                 
Correct output: -59                 | Program output: 59                 
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: 42                 
Correct output: 36                  | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: 66                 
Correct output: 25                  | Program output: 37                 
Correct output: -91                 | Program output: 63                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: 66                 
Correct output: -82                 | Program output: 40                 
Correct output: -93                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 50                 
Correct output: -56                 | Program output: 92                 
Correct output: -25                 | Program output: 67                 
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -71                
Correct output: -95                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -30                
Correct output: -93                 | Program output: 22                 
Correct output: -87                 | Program output: 2                  
Correct output: 16                  | Program output: 82                 
Correct output: -100                | Program output: -68                
Correct output: -78                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: 50                 
Correct output: -78                 | Program output: -11                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -38                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -88                
Correct output: -100                | Program output: -44                
Correct output: -62                 | Program output: 36                 
Correct output: -88                 | Program output: -29                
Correct output: -80                 | Program output: 75                 
Correct output: -44                 | Program output: -25                
Correct output: -62                 | Program output: 55                 
Correct output: -68                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction tagged_50} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup} {:close 0, :instruction tagged_390} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4} {:close 0, :instruction tag_boolean_160} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_462} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_405})
Lexicase best program: (integer_gte exec_when (integer_fromboolean) exec_do*count (print_integer exec_shove (boolean_not integer_min) boolean_pop boolean_dup_times integer_flush integer_dup_items boolean_invert_second_then_and exec_stackdepth) in2 exec_eq tagged_50 integer_max exec_dup () tagged_390 exec_noop print_integer boolean_xor boolean_not exec_dup (integer_yankdup integer_swap exec_noop exec_s_when_autoconstructing (exec_while () integer_dec) (boolean_dup_times in4 exec_do*while (integer_lte integer_shove) exec_yank) (exec_y_when_autoconstructing (in1 exec_do*range (integer_max exec_flush exec_while () exec_dup_items exec_yank exec_do*count (in4) tag_boolean_160 integer_sub) exec_when (integer_add integer_mod integer_eq integer_sub boolean_xor boolean_dup_items boolean_yankdup exec_stackdepth boolean_swap exec_yank) integer_fromboolean integer_shove integer_dup boolean_frominteger boolean_empty) integer_gte exec_y_when_autoconstructing (boolean_frominteger tag_integer_462 integer_sub boolean_frominteger boolean_shove boolean_invert_first_then_and integer_inc integer_empty integer_swap boolean_yankdup boolean_xor boolean_invert_second_then_and exec_y () in4 tag_boolean_405))))
Lexicase best errors: [1 0 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 100
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction tagged_50} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup} {:close 0, :instruction tagged_390} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4} {:close 0, :instruction tag_boolean_160} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_462} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_405})
Zero cases best program: (integer_gte exec_when (integer_fromboolean) exec_do*count (print_integer exec_shove (boolean_not integer_min) boolean_pop boolean_dup_times integer_flush integer_dup_items boolean_invert_second_then_and exec_stackdepth) in2 exec_eq tagged_50 integer_max exec_dup () tagged_390 exec_noop print_integer boolean_xor boolean_not exec_dup (integer_yankdup integer_swap exec_noop exec_s_when_autoconstructing (exec_while () integer_dec) (boolean_dup_times in4 exec_do*while (integer_lte integer_shove) exec_yank) (exec_y_when_autoconstructing (in1 exec_do*range (integer_max exec_flush exec_while () exec_dup_items exec_yank exec_do*count (in4) tag_boolean_160 integer_sub) exec_when (integer_add integer_mod integer_eq integer_sub boolean_xor boolean_dup_items boolean_yankdup exec_stackdepth boolean_swap exec_yank) integer_fromboolean integer_shove integer_dup boolean_frominteger boolean_empty) integer_gte exec_y_when_autoconstructing (boolean_frominteger tag_integer_462 integer_sub boolean_frominteger boolean_shove boolean_invert_first_then_and integer_inc integer_empty integer_swap boolean_yankdup boolean_xor boolean_invert_second_then_and exec_y () in4 tag_boolean_405))))
Zero cases best errors: [1 0 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 100
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 11 3 1 1 3 2 12 1 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 11 3 1 1 3 2 12 1 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction tagged_50} {:close 0, :instruction integer_max} {:close 1, :instruction exec_dup} {:close 0, :instruction tagged_390} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4} {:close 0, :instruction tag_boolean_160} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_462} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_405})
Best program: (integer_gte exec_when (integer_fromboolean) exec_do*count (print_integer exec_shove (boolean_not integer_min) boolean_pop boolean_dup_times integer_flush integer_dup_items boolean_invert_second_then_and exec_stackdepth) in2 exec_eq tagged_50 integer_max exec_dup () tagged_390 exec_noop print_integer boolean_xor boolean_not exec_dup (integer_yankdup integer_swap exec_noop exec_s_when_autoconstructing (exec_while () integer_dec) (boolean_dup_times in4 exec_do*while (integer_lte integer_shove) exec_yank) (exec_y_when_autoconstructing (in1 exec_do*range (integer_max exec_flush exec_while () exec_dup_items exec_yank exec_do*count (in4) tag_boolean_160 integer_sub) exec_when (integer_add integer_mod integer_eq integer_sub boolean_xor boolean_dup_items boolean_yankdup exec_stackdepth boolean_swap exec_yank) integer_fromboolean integer_shove integer_dup boolean_frominteger boolean_empty) integer_gte exec_y_when_autoconstructing (boolean_frominteger tag_integer_462 integer_sub boolean_frominteger boolean_shove boolean_invert_first_then_and integer_inc integer_empty integer_swap boolean_yankdup boolean_xor boolean_invert_second_then_and exec_y () in4 tag_boolean_405))))
Errors: [1 0 1 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 82
Size: 100
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 9.96
Median total errors in population: 10
Error averages by case: (0.997 0.989 0.997 0.999 0.999 0.997 0.998 0.988 0.999 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.757
Average program size in population (points): 68.27
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 493995
--- Timings ---
Current time: 1559584049008 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 30.9%
Fitness Testing:      1.6 seconds, 65.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_dup_items integer_stackdepth boolean_flush integer_swap boolean_yankdup integer_mult in1 exec_do*while (integer_pop boolean_yankdup) integer_flush tag_exec_419 () in4 print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times (integer_gt boolean_frominteger exec_empty in3) integer_swap exec_do*times (integer_yankdup) boolean_yank integer_eq exec_s_when_autoconstructing (exec_empty) (integer_fromboolean) ())
Lexicase best errors: [1 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_dup_items integer_stackdepth boolean_flush integer_swap boolean_yankdup integer_mult in1 exec_do*while (integer_pop boolean_yankdup) integer_flush tag_exec_419 () in4 print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times (integer_gt boolean_frominteger exec_empty in3) integer_swap exec_do*times (integer_yankdup) boolean_yank integer_eq exec_s_when_autoconstructing (exec_empty) (integer_fromboolean) ())
Zero cases best errors: [1 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 631 212 1000 837 164 209 161 210 209)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (0 631 212 0 837 164 209 161 210 209)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction -37} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_121} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (integer_dup_items boolean_flush exec_swap (in3 integer_dec) (boolean_yank integer_swap integer_shove exec_noop integer_yankdup exec_dup_times (integer_dup_times) exec_do*while (in4 exec_eq integer_sub exec_s (exec_k (print_integer exec_swap (integer_max exec_s () (boolean_dup_items boolean_frominteger integer_fromboolean integer_empty in1 integer_stackdepth boolean_or boolean_invert_first_then_and) (boolean_dup_times integer_empty integer_fromboolean integer_rot integer_yankdup) exec_yankdup -37) (integer_max tagged_121 boolean_stackdepth boolean_or) boolean_invert_first_then_and) ()) () ())))
Errors: [1 1 0 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 42
Size: 57
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.367
Median total errors in population: 8
Error averages by case: (1.0 0.369 0.788 1.0 0.163 0.836 0.791 0.839 0.79 0.791)
Error minima by case: (1 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 64.844
Average program size in population (points): 82.329
Average percent parens in population: 0.219
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.487
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1003063
--- Timings ---
Current time: 1559584051661 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 47.1%
Fitness Testing:      2.2 seconds, 42.4%
Report:               0.4 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_771} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if})
Lexicase best program: (boolean_invert_first_then_and boolean_swap boolean_stackdepth integer_fromboolean in1 print_integer tag_exec_771 (print_integer boolean_swap boolean_yankdup boolean_and exec_rot (integer_mult) (exec_dup (integer_mult integer_mult exec_eq integer_yankdup exec_if () ())) ()))
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_771} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if})
Zero cases best program: (boolean_invert_first_then_and boolean_swap boolean_stackdepth integer_fromboolean in1 print_integer tag_exec_771 (print_integer boolean_swap boolean_yankdup boolean_and exec_rot (integer_mult) (exec_dup (integer_mult integer_mult exec_eq integer_yankdup exec_if () ())) ()))
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (518 829 310 1000 1000 310 1000 304 518 829)
Population mean number of elite cases: 6.62
Count of perfect (error zero) individuals by case: (518 829 310 0 0 310 0 304 518 829)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_771} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Best program: (boolean_invert_first_then_and exec_do*count (boolean_stackdepth integer_fromboolean in1 print_integer tag_exec_771 (exec_y (boolean_swap boolean_yankdup boolean_and exec_rot (integer_mult) (exec_dup (integer_mult integer_mult exec_eq integer_gt boolean_frominteger exec_empty in3) integer_swap exec_do*times (integer_yankdup) boolean_rot integer_eq exec_s_when_autoconstructing (exec_empty) (integer_fromboolean) ()) ()))))
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 41
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 6.382
Median total errors in population: 6
Error averages by case: (0.482 0.171 0.69 1.0 1.0 0.69 1.0 0.696 0.482 0.171)
Error minima by case: (0 0 0 1 1 0 1 0 0 0)
Average genome size in population (length): 44.159
Average program size in population (points): 59.476
Average percent parens in population: 0.253
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.937
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1489600
--- Timings ---
Current time: 1559584054534 milliseconds
Total Time:           8.2 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.6 seconds, 55.9%
Fitness Testing:      2.7 seconds, 32.5%
Report:               0.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_848} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction integer_swap} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_s_when_autoconstructing (boolean_empty integer_gt integer_add) (exec_stackdepth) (integer_yankdup integer_min exec_yank) integer_mult exec_dup_times (exec_dup_times (boolean_pop) boolean_dup_times in2) integer_mod exec_yankdup integer_lte integer_shove exec_shove () exec_pop (exec_dup_times (boolean_invert_first_then_and exec_k_when_autoconstructing (integer_mod print_exec () integer_mod exec_dup () boolean_frominteger boolean_and in3 boolean_yankdup exec_do*range () integer_mult boolean_and boolean_rot exec_noop) (exec_y_when_autoconstructing (exec_do*times (exec_dup_items boolean_xor tag_exec_848 (boolean_swap integer_yankdup) exec_shove (exec_stackdepth integer_mult integer_rot) boolean_invert_first_then_and) integer_inc in1) boolean_xor boolean_invert_second_then_and integer_empty exec_while (boolean_flush) integer_max integer_dec boolean_flush boolean_dup_items) print_newline exec_y (boolean_pop) integer_stackdepth) integer_swap) integer_fromboolean boolean_and print_exec (integer_empty boolean_pop in1 exec_swap (exec_do*range (boolean_xor exec_if () (integer_rot integer_pop) boolean_flush integer_yank) integer_mult exec_when (integer_swap print_integer) integer_stackdepth) ()))
Lexicase best errors: [1 0 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 110
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_848} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction integer_swap} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_and} {:close 0, :instruction print_exec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_s_when_autoconstructing (boolean_empty integer_gt integer_add) (exec_stackdepth) (integer_yankdup integer_min exec_yank) integer_mult exec_dup_times (exec_dup_times (boolean_pop) boolean_dup_times in2) integer_mod exec_yankdup integer_lte integer_shove exec_shove () exec_pop (exec_dup_times (boolean_invert_first_then_and exec_k_when_autoconstructing (integer_mod print_exec () integer_mod exec_dup () boolean_frominteger boolean_and in3 boolean_yankdup exec_do*range () integer_mult boolean_and boolean_rot exec_noop) (exec_y_when_autoconstructing (exec_do*times (exec_dup_items boolean_xor tag_exec_848 (boolean_swap integer_yankdup) exec_shove (exec_stackdepth integer_mult integer_rot) boolean_invert_first_then_and) integer_inc in1) boolean_xor boolean_invert_second_then_and integer_empty exec_while (boolean_flush) integer_max integer_dec boolean_flush boolean_dup_items) print_newline exec_y (boolean_pop) integer_stackdepth) integer_swap) integer_fromboolean boolean_and print_exec (integer_empty boolean_pop in1 exec_swap (exec_do*range (boolean_xor exec_if () (integer_rot integer_pop) boolean_flush integer_yank) integer_mult exec_when (integer_swap print_integer) integer_stackdepth) ()))
Zero cases best errors: [1 0 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 110
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 494 1 492 308 494 1 307 487 315)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (311 494 1 492 308 494 1 307 487 315)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Best program: (integer_dup_items integer_stackdepth boolean_flush integer_swap boolean_yankdup integer_mult in1 exec_do*while (integer_pop boolean_yankdup) integer_flush tag_exec_419 () in4 print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times (integer_gt boolean_frominteger exec_empty in3) integer_swap exec_do*times (integer_yankdup) boolean_yank integer_eq exec_s_when_autoconstructing (exec_empty) (integer_fromboolean) ())
Errors: [0 1 1 1 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.79
Median total errors in population: 6
Error averages by case: (0.689 0.506 0.999 0.508 0.692 0.506 0.999 0.693 0.513 0.685)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.771
Average program size in population (points): 66.339
Average percent parens in population: 0.263
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4435
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1956196
--- Timings ---
Current time: 1559584057478 milliseconds
Total Time:          10.7 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.5 seconds, 60.3%
Fitness Testing:      3.1 seconds, 29.2%
Report:               1.0 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_771} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_343} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction 38} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_831} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction 80} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items})
Lexicase best program: (boolean_invert_first_then_and exec_do*count (boolean_stackdepth integer_fromboolean in1 print_integer tag_exec_771 (print_integer boolean_swap boolean_yankdup integer_lte exec_rot (integer_mult) (exec_dup (integer_mult integer_mult exec_eq integer_yankdup exec_if (integer_inc boolean_or integer_dup_times integer_min) (boolean_and integer_gt integer_add exec_shove (integer_stackdepth integer_sub integer_stackdepth) boolean_xor integer_pop boolean_invert_second_then_and boolean_yankdup integer_yank boolean_stackdepth print_boolean integer_flush integer_empty tagged_343) integer_flush exec_if (integer_shove boolean_flush boolean_yank integer_shove boolean_empty exec_do*range (boolean_stackdepth) boolean_dup_times 38 exec_rot (boolean_not) (exec_stackdepth) (in1 tag_boolean_831) print_exec (integer_fromboolean exec_do*times (exec_noop boolean_swap integer_dup 80) exec_y (exec_dup_times (exec_shove (integer_mod) exec_swap (integer_lt integer_gte print_boolean) (integer_dup_items integer_min boolean_flush) integer_dup_items)))) ())) ())))
Lexicase best errors: [1 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 98
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_771} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_343} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction 38} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_831} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction 80} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items})
Zero cases best program: (boolean_invert_first_then_and exec_do*count (boolean_stackdepth integer_fromboolean in1 print_integer tag_exec_771 (print_integer boolean_swap boolean_yankdup integer_lte exec_rot (integer_mult) (exec_dup (integer_mult integer_mult exec_eq integer_yankdup exec_if (integer_inc boolean_or integer_dup_times integer_min) (boolean_and integer_gt integer_add exec_shove (integer_stackdepth integer_sub integer_stackdepth) boolean_xor integer_pop boolean_invert_second_then_and boolean_yankdup integer_yank boolean_stackdepth print_boolean integer_flush integer_empty tagged_343) integer_flush exec_if (integer_shove boolean_flush boolean_yank integer_shove boolean_empty exec_do*range (boolean_stackdepth) boolean_dup_times 38 exec_rot (boolean_not) (exec_stackdepth) (in1 tag_boolean_831) print_exec (integer_fromboolean exec_do*times (exec_noop boolean_swap integer_dup 80) exec_y (exec_dup_times (exec_shove (integer_mod) exec_swap (integer_lt integer_gte print_boolean) (integer_dup_items integer_min boolean_flush) integer_dup_items)))) ())) ())))
Zero cases best errors: [1 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 98
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 315 426 86 343 513 314 343 342 87)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (86 315 426 86 343 513 314 343 342 87)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_599} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_boolean_355} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_rot} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_exec_361} {:close 0, :instruction exec_rot})
Best program: (exec_k (integer_dup_times integer_swap exec_pop (boolean_invert_first_then_and integer_empty print_newline boolean_invert_second_then_and boolean_and integer_gte boolean_yank) boolean_swap boolean_swap integer_gt tag_exec_599 (exec_y (integer_lt exec_empty print_exec (integer_yank boolean_not) boolean_invert_second_then_and)) exec_rot (exec_stackdepth) (in1 exec_noop tag_boolean_355 print_integer integer_gte) (exec_rot () (exec_do*times ()) (integer_add exec_eq boolean_dup_times tag_exec_361 () exec_rot () () ()))) ())
Errors: [1 0 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 54
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.145
Median total errors in population: 7
Error averages by case: (0.914 0.685 0.574 0.914 0.657 0.487 0.686 0.657 0.658 0.913)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.967
Average program size in population (points): 60.618
Average percent parens in population: 0.270
Minimum age in population: 4.0
Maximum age in population: 7.375
Average age in population: 5.797875
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2441488
--- Timings ---
Current time: 1559584060163 milliseconds
Total Time:          13.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.5 seconds, 61.3%
Fitness Testing:      3.6 seconds, 26.0%
Report:               1.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_771} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction -31} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_exec_361} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_invert_first_then_and exec_do*count (boolean_stackdepth integer_fromboolean in1 print_integer tag_exec_771 (print_integer boolean_swap boolean_yankdup boolean_and exec_rot (integer_mult) (boolean_eq integer_mult integer_mult exec_eq -31 exec_if (integer_inc boolean_or exec_if (boolean_stackdepth) (boolean_and boolean_and integer_add exec_shove () integer_stackdepth exec_do*times ()) integer_add exec_eq boolean_dup_times tag_exec_361 () exec_while (exec_swap (integer_dup_times boolean_frominteger boolean_flush exec_y_when_autoconstructing () integer_inc integer_flush exec_k_when_autoconstructing (integer_mod boolean_rot integer_lt) ()) ())) ()) ())))
Lexicase best errors: [1 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 64
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_771} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction -31} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_exec_361} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_invert_first_then_and exec_do*count (boolean_stackdepth integer_fromboolean in1 print_integer tag_exec_771 (print_integer boolean_swap boolean_yankdup boolean_and exec_rot (integer_mult) (boolean_eq integer_mult integer_mult exec_eq -31 exec_if (integer_inc boolean_or exec_if (boolean_stackdepth) (boolean_and boolean_and integer_add exec_shove () integer_stackdepth exec_do*times ()) integer_add exec_eq boolean_dup_times tag_exec_361 () exec_while (exec_swap (integer_dup_times boolean_frominteger boolean_flush exec_y_when_autoconstructing () integer_inc integer_flush exec_k_when_autoconstructing (integer_mod boolean_rot integer_lt) ()) ())) ()) ())))
Zero cases best errors: [1 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 64
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 791 307 258 797 307 257 309 306 1000)
Population mean number of elite cases: 5.33
Count of perfect (error zero) individuals by case: (0 791 307 258 797 307 257 309 306 0)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_599} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_boolean_214} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_exec_361} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt})
Best program: (exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_empty integer_gt integer_add) (exec_k (integer_dup_times in1 exec_do*while (integer_pop exec_pop (boolean_invert_first_then_and integer_empty print_newline boolean_invert_second_then_and boolean_and integer_gte boolean_yank) boolean_swap boolean_swap integer_gt tag_exec_599 (exec_y (integer_lt exec_empty print_exec (integer_yank boolean_not) boolean_invert_second_then_and)) exec_rot (exec_stackdepth) (in1 exec_noop tag_boolean_214 print_integer integer_gte) (exec_rot () (integer_inc boolean_or integer_dup_times integer_min) (boolean_and integer_gt integer_add exec_shove (integer_stackdepth integer_sub integer_stackdepth) boolean_xor integer_pop boolean_invert_second_then_and boolean_yankdup integer_yank exec_eq tag_exec_361 () exec_rot (exec_swap (exec_y_when_autoconstructing (boolean_frominteger boolean_flush exec_y_when_autoconstructing () integer_inc integer_flush exec_k_when_autoconstructing (integer_mod boolean_rot integer_lt) ())) ()) () ())))) ()) ()) () ())
Errors: [1 0 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 67
Size: 98
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 6.668
Median total errors in population: 6
Error averages by case: (1.0 0.209 0.693 0.742 0.203 0.693 0.743 0.691 0.694 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 44.806
Average program size in population (points): 63.272
Average percent parens in population: 0.286
Minimum age in population: 5.0
Maximum age in population: 9.0625
Average age in population: 7.3539375
Median age in population: 7.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2849224
--- Timings ---
Current time: 1559584063089 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.6 seconds, 64.1%
Fitness Testing:      4.0 seconds, 24.0%
Report:               1.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max exec_swap (in1 in4 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_pop) () ()) ())
Lexicase best errors: [1 1 1 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 29
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max exec_swap (in1 in4 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_pop) () ()) ())
Zero cases best errors: [1 1 1 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 29
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 565 1000 1000 1000 1000 1000 285 287 1000)
Population mean number of elite cases: 8.14
Count of perfect (error zero) individuals by case: (0 565 0 0 0 0 0 285 287 0)
Population mean number of perfect (error zero) cases: 1.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Best program: (integer_dup_items integer_stackdepth boolean_flush integer_swap boolean_yankdup integer_mult in1 exec_do*while (integer_pop boolean_yankdup) integer_flush tag_exec_419 () in4 print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times (integer_gt boolean_frominteger exec_empty in3) integer_swap exec_do*times (integer_yankdup) boolean_yank integer_eq exec_s_when_autoconstructing () (exec_empty) (integer_fromboolean))
Errors: [1 1 1 1 1 1 1 0 0 1]
Total: 8
Mean: 0.8
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 8.863
Median total errors in population: 9
Error averages by case: (1.0 0.435 1.0 1.0 1.0 1.0 1.0 0.715 0.713 1.0)
Error minima by case: (1 0 1 1 1 1 1 0 0 1)
Average genome size in population (length): 45.532
Average program size in population (points): 61.936
Average percent parens in population: 0.261
Minimum age in population: 6.0
Maximum age in population: 10.75
Average age in population: 8.8121875
Median age in population: 8.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3203038
--- Timings ---
Current time: 1559584066134 milliseconds
Total Time:          19.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.7 seconds, 65.7%
Fitness Testing:      4.3 seconds, 22.3%
Report:               2.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max exec_swap (in1 exec_when (print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_pop) () ())) ())
Lexicase best errors: [1 0 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max exec_swap (in1 exec_when (print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_pop) () ())) ())
Zero cases best errors: [1 0 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 270 615 270 1000 612 270 612 884 270)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (1 270 615 270 0 612 270 612 884 270)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_771} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction tagged_343} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction 38} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_831} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction 80} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_items})
Best program: (boolean_invert_first_then_and exec_do*count (boolean_stackdepth integer_fromboolean in1 print_integer tag_exec_771 (print_integer boolean_swap boolean_yankdup boolean_and exec_rot (integer_dup_items) (exec_dup (integer_mult integer_mult exec_eq integer_pop exec_if (integer_inc boolean_or boolean_empty integer_min) (boolean_and integer_gt integer_add exec_shove () integer_stackdepth integer_sub integer_stackdepth) boolean_xor integer_pop boolean_invert_second_then_and boolean_yankdup integer_yank boolean_stackdepth integer_div integer_flush integer_empty tagged_343) integer_flush exec_if (integer_shove boolean_flush boolean_yank integer_shove boolean_empty exec_do*range (exec_empty) boolean_dup_times 38 exec_rot (boolean_not) (exec_stackdepth) (in1 tag_boolean_831) print_exec (integer_fromboolean exec_do*times (boolean_stackdepth boolean_swap integer_dup 80) exec_y (exec_dup_times (exec_shove (integer_mod) exec_swap () (integer_lt integer_gte print_boolean) integer_dup_items integer_min integer_yank integer_dup_items)))) ()) ())))
Errors: [1 0 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 75
Size: 98
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.196
Median total errors in population: 6
Error averages by case: (0.999 0.73 0.385 0.73 1.0 0.388 0.73 0.388 0.116 0.73)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 37.124
Average program size in population (points): 49.575
Average percent parens in population: 0.246
Minimum age in population: 7.0
Maximum age in population: 12.515625
Average age in population: 10.206453125
Median age in population: 10.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3705091
--- Timings ---
Current time: 1559584068501 milliseconds
Total Time:          22.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.5 seconds, 65.2%
Fitness Testing:      4.8 seconds, 21.5%
Report:               2.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (boolean_invert_first_then_and exec_do*count (boolean_stackdepth integer_fromboolean in1 in4) print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times (integer_gt in3 exec_empty in3) integer_swap exec_do*times (integer_yankdup) boolean_yank integer_eq exec_s_when_autoconstructing (exec_empty) (integer_fromboolean) ())
Lexicase best errors: [0 1 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (boolean_invert_first_then_and exec_do*count (boolean_stackdepth integer_fromboolean in1 in4) print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times (integer_gt in3 exec_empty in3) integer_swap exec_do*times (integer_yankdup) boolean_yank integer_eq exec_s_when_autoconstructing (exec_empty) (integer_fromboolean) ())
Zero cases best errors: [0 1 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (272 155 268 269 436 863 270 591 707 436)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (272 155 268 269 436 863 270 591 707 436)
Population mean number of perfect (error zero) cases: 4.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Best program: (integer_dup_items integer_stackdepth boolean_flush integer_swap boolean_yankdup integer_mult in1 exec_do*while (integer_pop boolean_yankdup) integer_flush tag_exec_419 () in4 print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times (integer_gt boolean_frominteger exec_empty in3) integer_swap exec_do*times (integer_yankdup) boolean_yank integer_eq exec_s_when_autoconstructing (exec_empty) (integer_fromboolean) ())
Errors: [0 1 0 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 5.733
Median total errors in population: 5
Error averages by case: (0.728 0.845 0.732 0.731 0.564 0.137 0.73 0.409 0.293 0.564)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.606
Average program size in population (points): 52.573
Average percent parens in population: 0.239
Minimum age in population: 9.0625
Maximum age in population: 13.984375
Average age in population: 11.8862265625
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4044527
--- Timings ---
Current time: 1559584071120 milliseconds
Total Time:          24.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.2 seconds, 66.4%
Fitness Testing:      5.1 seconds, 21.0%
Report:               3.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53false            
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71false            
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max exec_swap (in1 in4 print_integer integer_eq boolean_shove exec_s (integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_pop) () ()) () ()) ())
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max exec_swap (in1 in4 print_integer integer_eq boolean_shove exec_s (integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_pop) () ()) () ()) ())
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (906 790 1000 1000 490 1000 489 494 492 492)
Population mean number of elite cases: 7.15
Count of perfect (error zero) individuals by case: (906 790 0 0 490 0 489 494 492 492)
Population mean number of perfect (error zero) cases: 4.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Best program: (exec_k (exec_swap (in1 in4 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and boolean_swap boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) (exec_empty boolean_pop) ()) ()) ())
Errors: [0 0 1 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 5.847
Median total errors in population: 8
Error averages by case: (0.094 0.21 1.0 1.0 0.51 1.0 0.511 0.506 0.508 0.508)
Error minima by case: (0 0 1 1 0 1 0 0 0 0)
Average genome size in population (length): 34.673
Average program size in population (points): 45.864
Average percent parens in population: 0.237
Minimum age in population: 10.46875
Maximum age in population: 15.578125
Average age in population: 13.35639453125
Median age in population: 13.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4482046
--- Timings ---
Current time: 1559584073790 milliseconds
Total Time:          27.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.3 seconds, 66.6%
Fitness Testing:      5.5 seconds, 20.0%
Report:               3.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 677
Test mean error for best: 0.67700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 55                 
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output:                    
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output:                    
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output:                    
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output:                    
Correct output: -55                 | Program output:                    
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output:                    
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output:                    
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output:                    
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output:                    
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max exec_swap () (in1 in4 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_pop) ()))
Lexicase best errors: [0 1 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max exec_swap () (in1 in4 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_pop) ()))
Zero cases best errors: [0 1 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (908 1000 1000 1000 1000 922 5 1000 910 911)
Population mean number of elite cases: 8.66
Count of perfect (error zero) individuals by case: (908 0 0 0 0 922 5 0 910 911)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction -79} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction -37} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_121} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (integer_dup_items boolean_flush exec_swap () (in3 integer_gt boolean_yank exec_when (integer_shove integer_add integer_yankdup exec_dup_times (integer_dup_times) exec_do*while (in4 exec_eq integer_sub exec_s (exec_k (print_integer exec_swap (integer_max exec_s () (boolean_dup_items boolean_frominteger integer_fromboolean integer_empty in1 integer_stackdepth boolean_or boolean_invert_first_then_and) (boolean_dup_times integer_empty -79 integer_rot integer_yankdup) exec_yankdup -37) (integer_max tagged_121 boolean_stackdepth boolean_or) boolean_invert_first_then_and) ()) () ()))))
Errors: [0 1 1 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 42
Size: 58
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.344
Median total errors in population: 6
Error averages by case: (0.092 1.0 1.0 1.0 1.0 0.078 0.995 1.0 0.09 0.089)
Error minima by case: (0 1 1 1 1 0 0 1 0 0)
Average genome size in population (length): 29.259
Average program size in population (points): 38.537
Average percent parens in population: 0.235
Minimum age in population: 11.875
Maximum age in population: 16.84375
Average age in population: 14.82011328125
Median age in population: 14.9228515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5081566
--- Timings ---
Current time: 1559584076831 milliseconds
Total Time:          30.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.4 seconds, 67.5%
Fitness Testing:      6.0 seconds, 19.8%
Report:               3.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty})
Lexicase best program: (integer_dup_items integer_stackdepth boolean_flush integer_swap integer_dup_items integer_stackdepth boolean_flush integer_swap integer_empty integer_mult in1 exec_do*while (integer_pop boolean_yankdup) integer_flush tag_exec_419 () in4 print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank boolean_empty)
Lexicase best errors: [1 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 26
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty})
Zero cases best program: (integer_dup_items integer_stackdepth boolean_flush integer_swap integer_dup_items integer_stackdepth boolean_flush integer_swap integer_empty integer_mult in1 exec_do*while (integer_pop boolean_yankdup) integer_flush tag_exec_419 () in4 print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank boolean_empty)
Zero cases best errors: [1 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 26
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 935 703 234 1000 1000 234 1000 1000 701)
Population mean number of elite cases: 7.81
Count of perfect (error zero) individuals by case: (0 935 703 234 0 0 234 0 0 701)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Best program: (integer_max exec_swap (in1 in4 print_integer integer_eq boolean_shove) (exec_s (integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_shove (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_pop) () ()) () ()))
Errors: [1 0 0 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 22
Size: 32
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.193
Median total errors in population: 7
Error averages by case: (1.0 0.065 0.297 0.766 1.0 1.0 0.766 1.0 1.0 0.299)
Error minima by case: (1 0 0 0 1 1 0 1 1 0)
Average genome size in population (length): 28.573
Average program size in population (points): 38.232
Average percent parens in population: 0.246
Minimum age in population: 13.31640625
Maximum age in population: 18.263671875
Average age in population: 16.23514453125
Median age in population: 16.30078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5580200
--- Timings ---
Current time: 1559584078925 milliseconds
Total Time:          32.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.9 seconds, 67.2%
Fitness Testing:      6.4 seconds, 19.7%
Report:               4.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_max exec_swap (in1 integer_gte print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and in3) integer_swap exec_do*times (integer_yankdup boolean_yank integer_eq exec_s_when_autoconstructing () (exec_empty) (integer_fromboolean))) () ()) ())
Lexicase best errors: [1 1 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 38
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_max exec_swap (in1 integer_gte print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and in3) integer_swap exec_do*times (integer_yankdup boolean_yank integer_eq exec_s_when_autoconstructing () (exec_empty) (integer_fromboolean))) () ()) ())
Zero cases best errors: [1 1 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 38
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 488 488 1000 488 428 488 1000)
Population mean number of elite cases: 7.38
Count of perfect (error zero) individuals by case: (0 0 0 488 488 0 488 428 488 0)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 0, :instruction -23} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction in1})
Best program: (integer_max exec_swap () (in1 integer_gt print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (integer_yank boolean_and in4 exec_eq integer_sub exec_s (exec_rot () (-23 exec_swap (integer_max exec_s () (boolean_dup_items boolean_frominteger integer_fromboolean integer_empty in1) ()) ()) ()) () ())) ()))
Errors: [1 1 1 0 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 48
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 7.62
Median total errors in population: 9
Error averages by case: (1.0 1.0 1.0 0.512 0.512 1.0 0.512 0.572 0.512 1.0)
Error minima by case: (1 1 1 0 0 1 0 0 0 1)
Average genome size in population (length): 28.124
Average program size in population (points): 38.187
Average percent parens in population: 0.256
Minimum age in population: 14.890625
Maximum age in population: 19.66845703125
Average age in population: 17.7180009765625
Median age in population: 17.772216796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5984768
--- Timings ---
Current time: 1559584081055 milliseconds
Total Time:          34.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.5 seconds, 67.6%
Fitness Testing:      6.8 seconds, 19.5%
Report:               4.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_max exec_swap (in1 exec_k (print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup print_integer) boolean_xor boolean_pop) (exec_stackdepth) (boolean_yank exec_do*times (integer_gt boolean_frominteger integer_swap in3) integer_swap exec_do*times (integer_yankdup) integer_yank integer_shove exec_s_when_autoconstructing (exec_empty) (integer_fromboolean) ())) ()) ())
Lexicase best errors: [0 1 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_max exec_swap (in1 exec_k (print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup print_integer) boolean_xor boolean_pop) (exec_stackdepth) (boolean_yank exec_do*times (integer_gt boolean_frominteger integer_swap in3) integer_swap exec_do*times (integer_yankdup) integer_yank integer_shove exec_s_when_autoconstructing (exec_empty) (integer_fromboolean) ())) ()) ())
Zero cases best errors: [0 1 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (748 1000 1000 183 748 1000 930 748 1000 1000)
Population mean number of elite cases: 8.36
Count of perfect (error zero) individuals by case: (748 0 0 183 748 0 930 748 0 0)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction -37} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_121} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or})
Best program: (integer_max exec_swap (in1 print_boolean print_integer integer_eq boolean_shove exec_yank print_integer boolean_swap boolean_yankdup boolean_and exec_rot (integer_mult) (exec_dup (integer_mult integer_mult exec_eq integer_yankdup exec_if (integer_inc boolean_or integer_dup_times integer_min) (boolean_and integer_gt integer_add exec_shove () integer_stackdepth integer_sub integer_stackdepth) boolean_xor integer_pop -37) integer_max tagged_121 boolean_stackdepth boolean_or) ()) ())
Errors: [0 1 1 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 48
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.643
Median total errors in population: 6
Error averages by case: (0.252 1.0 1.0 0.817 0.252 1.0 0.07 0.252 1.0 1.0)
Error minima by case: (0 1 1 0 0 1 0 0 1 1)
Average genome size in population (length): 27.462
Average program size in population (points): 38.102
Average percent parens in population: 0.271
Minimum age in population: 16.36328125
Maximum age in population: 21.1337890625
Average age in population: 19.141322265625
Median age in population: 19.1898193359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6268811
--- Timings ---
Current time: 1559584083322 milliseconds
Total Time:          36.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.2 seconds, 68.3%
Fitness Testing:      7.1 seconds, 19.2%
Report:               4.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction -37} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_121} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or})
Lexicase best program: (integer_max exec_swap (in1 print_boolean print_integer integer_eq boolean_shove exec_yank integer_flush boolean_swap boolean_yankdup boolean_and exec_rot (integer_mult) (exec_dup (integer_mult integer_mult exec_eq integer_yankdup exec_if (integer_inc boolean_or integer_dup_times integer_min) (boolean_and integer_gt integer_add exec_shove () integer_stackdepth integer_sub integer_stackdepth) boolean_xor integer_pop -37) integer_max tagged_121 boolean_stackdepth boolean_or) ()) ())
Lexicase best errors: [1 1 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 48
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction -37} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_121} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or})
Zero cases best program: (integer_max exec_swap (in1 print_boolean print_integer integer_eq boolean_shove exec_yank integer_flush boolean_swap boolean_yankdup boolean_and exec_rot (integer_mult) (exec_dup (integer_mult integer_mult exec_eq integer_yankdup exec_if (integer_inc boolean_or integer_dup_times integer_min) (boolean_and integer_gt integer_add exec_shove () integer_stackdepth integer_sub integer_stackdepth) boolean_xor integer_pop -37) integer_max tagged_121 boolean_stackdepth boolean_or) ()) ())
Zero cases best errors: [1 1 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 48
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 706 1000 1 705 1000 1000 225 706)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (1 0 706 0 1 705 0 0 225 706)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop})
Best program: (integer_max exec_swap (in1 exec_k (print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and integer_dec boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty) (boolean_pop) ()) ()) ())
Errors: [1 1 0 1 1 0 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 7.656
Median total errors in population: 7
Error averages by case: (0.999 1.0 0.294 1.0 0.999 0.295 1.0 1.0 0.775 0.294)
Error minima by case: (0 1 0 1 0 0 1 1 0 0)
Average genome size in population (length): 27.082
Average program size in population (points): 37.41
Average percent parens in population: 0.267
Minimum age in population: 17.36328125
Maximum age in population: 22.677001953125
Average age in population: 20.57582495117188
Median age in population: 20.6334228515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6570190
--- Timings ---
Current time: 1559584085330 milliseconds
Total Time:          39.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.8 seconds, 68.5%
Fitness Testing:      7.3 seconds, 18.8%
Report:               4.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_max exec_swap (in1 integer_gte print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_yank boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and)) ())
Lexicase best errors: [1 1 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_max exec_swap (in1 integer_gte print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_yank boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and)) ())
Zero cases best errors: [1 1 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 370 1000 1000 775 1000 370 405 156)
Population mean number of elite cases: 7.08
Count of perfect (error zero) individuals by case: (0 0 370 0 0 775 0 370 405 156)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop})
Best program: (integer_max exec_swap (in1 exec_k (print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty) (boolean_pop) ()) ()) ())
Errors: [1 1 0 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 7.924
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.63 1.0 1.0 0.225 1.0 0.63 0.595 0.844)
Error minima by case: (1 1 0 1 1 0 1 0 0 0)
Average genome size in population (length): 29.728
Average program size in population (points): 43.335
Average percent parens in population: 0.302
Minimum age in population: 19.2265625
Maximum age in population: 24.1485595703125
Average age in population: 22.6822724609375
Median age in population: 22.97482299804688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 248
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 252
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6819973
--- Timings ---
Current time: 1559584087803 milliseconds
Total Time:          41.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.8 seconds, 69.3%
Fitness Testing:      7.6 seconds, 18.4%
Report:               5.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction -37} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_121} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or})
Lexicase best program: (integer_dup_items boolean_flush exec_swap (in3 integer_dec boolean_yank integer_swap) (integer_shove exec_noop integer_yankdup exec_dup_times (integer_dup_times exec_do*while (in4 exec_eq integer_sub exec_s (exec_k (print_integer exec_shove () integer_stackdepth integer_sub integer_stackdepth) (integer_stackdepth integer_sub integer_stackdepth) boolean_xor integer_pop -37) (integer_max tagged_121 boolean_stackdepth boolean_or) ()))))
Lexicase best errors: [0 0 1 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 44
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 1, :instruction -37} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_121} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or})
Zero cases best program: (integer_dup_items boolean_flush exec_swap (in3 integer_dec boolean_yank integer_swap) (integer_shove exec_noop integer_yankdup exec_dup_times (integer_dup_times exec_do*while (in4 exec_eq integer_sub exec_s (exec_k (print_integer exec_shove () integer_stackdepth integer_sub integer_stackdepth) (integer_stackdepth integer_sub integer_stackdepth) boolean_xor integer_pop -37) (integer_max tagged_121 boolean_stackdepth boolean_or) ()))))
Zero cases best errors: [0 0 1 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 44
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 178 507 186 507 1 1000 1000 186 507)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (186 178 507 186 507 1 0 0 186 507)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup})
Best program: (integer_dup_items integer_stackdepth boolean_flush integer_swap boolean_yankdup integer_mult integer_gte exec_do*while (integer_pop boolean_yankdup) integer_flush boolean_not in4 print_integer boolean_xor boolean_pop boolean_and integer_mult exec_dup ())
Errors: [0 0 1 0 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 7.742
Median total errors in population: 7
Error averages by case: (0.814 0.822 0.493 0.814 0.493 0.999 1.0 1.0 0.814 0.493)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 28.51
Average program size in population (points): 40.769
Average percent parens in population: 0.288
Minimum age in population: 20.2265625
Maximum age in population: 25.91702270507812
Average age in population: 23.98677087402344
Median age in population: 24.04655456542969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7091729
--- Timings ---
Current time: 1559584090126 milliseconds
Total Time:          43.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.7 seconds, 70.0%
Fitness Testing:      7.9 seconds, 18.0%
Report:               5.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max exec_swap (in1 boolean_xor print_integer integer_sub boolean_shove exec_yank boolean_invert_second_then_and print_boolean integer_gte integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) (exec_empty boolean_pop))
Lexicase best errors: [0 0 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max exec_swap (in1 boolean_xor print_integer integer_sub boolean_shove exec_yank boolean_invert_second_then_and print_boolean integer_gte integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) (exec_empty boolean_pop))
Zero cases best errors: [0 0 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (344 829 343 437 482 1000 827 1000 829 481)
Population mean number of elite cases: 6.57
Count of perfect (error zero) individuals by case: (344 829 343 437 482 0 827 0 829 481)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean})
Best program: (integer_max exec_swap (in1 print_boolean print_integer integer_eq boolean_shove exec_yank print_integer boolean_swap boolean_yankdup boolean_and exec_rot (integer_mult) (exec_dup (integer_mult integer_mult exec_eq exec_swap (integer_max exec_s () (exec_do*times (integer_yankdup) boolean_yank integer_eq exec_s_when_autoconstructing () (exec_empty) (integer_fromboolean)) ()) ())) ()) ())
Errors: [0 0 0 0 1 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 28
Size: 44
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 5.428
Median total errors in population: 5
Error averages by case: (0.656 0.171 0.657 0.563 0.518 1.0 0.173 1.0 0.171 0.519)
Error minima by case: (0 0 0 0 0 1 0 1 0 0)
Average genome size in population (length): 27.998
Average program size in population (points): 38.652
Average percent parens in population: 0.263
Minimum age in population: 22.0234375
Maximum age in population: 27.08244323730469
Average age in population: 25.32235188293457
Median age in population: 25.37716674804688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7447435
--- Timings ---
Current time: 1559584092415 milliseconds
Total Time:          46.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.4 seconds, 70.4%
Fitness Testing:      8.2 seconds, 17.8%
Report:               5.3 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction -37} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_121})
Lexicase best program: (integer_dup_items integer_stackdepth boolean_flush integer_swap boolean_yankdup integer_mult in1 exec_do*while (integer_pop boolean_yankdup) integer_flush tag_exec_419 () in4 print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times (integer_gt boolean_frominteger boolean_shove in3) integer_swap exec_yankdup -37 integer_max tagged_121)
Lexicase best errors: [1 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 32
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction -37} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_121})
Zero cases best program: (integer_dup_items integer_stackdepth boolean_flush integer_swap boolean_yankdup integer_mult in1 exec_do*while (integer_pop boolean_yankdup) integer_flush tag_exec_419 () in4 print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times (integer_gt boolean_frominteger boolean_shove in3) integer_swap exec_yankdup -37 integer_max tagged_121)
Zero cases best errors: [1 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (584 1000 372 372 372 1000 584 371 1000 1000)
Population mean number of elite cases: 6.66
Count of perfect (error zero) individuals by case: (584 0 372 372 372 0 584 371 0 0)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times})
Best program: (integer_max exec_swap (in1 in4 print_integer integer_sub boolean_shove exec_yank integer_rot print_boolean exec_s_when_autoconstructing (integer_dup_items exec_rot (integer_mult) (exec_dup (integer_mult integer_mult in1 integer_yankdup exec_if (integer_inc boolean_invert_second_then_and boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times)) ())) ()) () ()) ())
Errors: [1 1 0 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 43
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 7.345
Median total errors in population: 8
Error averages by case: (0.416 1.0 0.628 0.628 0.628 1.0 0.416 0.629 1.0 1.0)
Error minima by case: (0 1 0 0 0 1 0 0 1 1)
Average genome size in population (length): 26.923
Average program size in population (points): 37.24
Average percent parens in population: 0.266
Minimum age in population: 23.0234375
Maximum age in population: 28.70297241210938
Average age in population: 26.78359188842773
Median age in population: 26.83708190917969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7762292
--- Timings ---
Current time: 1559584094857 milliseconds
Total Time:          48.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.4 seconds, 70.9%
Fitness Testing:      8.5 seconds, 17.5%
Report:               5.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction -47} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 0, :instruction -23} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_do*count (exec_swap (-47 in4 print_integer integer_eq boolean_and exec_yank exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (exec_do*times (boolean_and in4 exec_eq integer_sub exec_s (exec_rot () (-23 exec_swap (integer_gt exec_s () (integer_dup_times integer_lt) (exec_empty boolean_pop)) ()) ()) () ()))) ()) ()))
Lexicase best errors: [1 1 1 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 50
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction -47} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 1, :instruction exec_rot} {:close 0, :instruction -23} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_do*count (exec_swap (-47 in4 print_integer integer_eq boolean_and exec_yank exec_yank integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (exec_do*times (boolean_and in4 exec_eq integer_sub exec_s (exec_rot () (-23 exec_swap (integer_gt exec_s () (integer_dup_times integer_lt) (exec_empty boolean_pop)) ()) ()) () ()))) ()) ()))
Zero cases best errors: [1 1 1 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 50
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 1000 307 602 605 1000 1000)
Population mean number of elite cases: 8.51
Count of perfect (error zero) individuals by case: (0 0 0 0 0 307 602 605 0 0)
Population mean number of perfect (error zero) cases: 1.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 1, :instruction in3})
Best program: (integer_dup_items integer_stackdepth exec_noop integer_swap in4 print_integer boolean_xor exec_if () (exec_stackdepth) boolean_yank exec_do*times (integer_gt boolean_frominteger exec_empty in3))
Errors: [1 1 1 1 1 1 0 0 1 1]
Total: 8
Mean: 0.8
Genome size: 15
Size: 19
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 8.486
Median total errors in population: 8
Error averages by case: (1.0 1.0 1.0 1.0 1.0 0.693 0.398 0.395 1.0 1.0)
Error minima by case: (1 1 1 1 1 0 0 0 1 1)
Average genome size in population (length): 26.906
Average program size in population (points): 36.493
Average percent parens in population: 0.251
Minimum age in population: 25.26551055908203
Maximum age in population: 30.43941879272461
Average age in population: 28.31417253494263
Median age in population: 28.40438461303711
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8129996
--- Timings ---
Current time: 1559584097074 milliseconds
Total Time:          50.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.0 seconds, 71.0%
Fitness Testing:      8.8 seconds, 17.4%
Report:               5.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_do*count (in4 print_integer integer_eq boolean_shove exec_noop integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty) (boolean_pop) ()))
Lexicase best errors: [1 1 1 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_do*count (in4 print_integer integer_eq boolean_shove exec_noop integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty) (boolean_pop) ()))
Zero cases best errors: [1 1 1 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 633 1000 309 309 632 632 309)
Population mean number of elite cases: 6.82
Count of perfect (error zero) individuals by case: (0 0 0 633 0 309 309 632 632 309)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Best program: (exec_do*count (in4 print_integer integer_eq boolean_shove exec_noop integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty) (boolean_pop) ()))
Errors: [1 1 1 0 1 1 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.176
Median total errors in population: 7
Error averages by case: (1.0 1.0 1.0 0.367 1.0 0.691 0.691 0.368 0.368 0.691)
Error minima by case: (1 1 1 0 1 0 0 0 0 0)
Average genome size in population (length): 26.859
Average program size in population (points): 36.333
Average percent parens in population: 0.251
Minimum age in population: 26.26551055908203
Maximum age in population: 31.87148094177246
Average age in population: 29.77580508041382
Median age in population: 29.85074234008789
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8489177
--- Timings ---
Current time: 1559584099569 milliseconds
Total Time:          53.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.1 seconds, 71.4%
Fitness Testing:      9.1 seconds, 17.2%
Report:               6.0 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 6                   | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 53                 
Correct output: 3                   | Program output: 26                 
Correct output: 18                  | Program output: 30                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 32                 
Correct output: 26                  | Program output: 97                 
Correct output: 11                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 58                 
Correct output: 50                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 44                 
Correct output: -55                 | Program output: -8                 
Correct output: -69                 | Program output: 57                 
Correct output: -51                 | Program output: -50                
Correct output: -95                 | Program output: -94                
Correct output: -94                 | Program output: 90                 
Correct output: -59                 | Program output: 59                 
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: 42                 
Correct output: 36                  | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: 66                 
Correct output: 25                  | Program output: 37                 
Correct output: -91                 | Program output: 63                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: 66                 
Correct output: -82                 | Program output: 40                 
Correct output: -93                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 50                 
Correct output: -56                 | Program output: 92                 
Correct output: -25                 | Program output: 67                 
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -71                
Correct output: -95                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -30                
Correct output: -93                 | Program output: 22                 
Correct output: -87                 | Program output: 2                  
Correct output: 16                  | Program output: 82                 
Correct output: -100                | Program output: -68                
Correct output: -78                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: 50                 
Correct output: -78                 | Program output: -11                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -38                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -88                
Correct output: -100                | Program output: -44                
Correct output: -62                 | Program output: 36                 
Correct output: -88                 | Program output: -29                
Correct output: -80                 | Program output: 75                 
Correct output: -44                 | Program output: -25                
Correct output: -62                 | Program output: 55                 
Correct output: -68                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max exec_swap (in2 print_boolean print_integer integer_eq boolean_shove exec_yank print_integer boolean_swap print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (integer_yank boolean_yank boolean_pop)) ()) ())
Lexicase best errors: [1 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max exec_swap (in2 print_boolean print_integer integer_eq boolean_shove exec_yank print_integer boolean_swap print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (integer_yank boolean_yank boolean_pop)) ()) ())
Zero cases best errors: [1 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (429 428 428 430 1 1 429 1 1000 1)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (429 428 428 430 1 1 429 1 0 1)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop})
Best program: (integer_max exec_swap (in2 print_boolean print_integer integer_eq boolean_shove exec_yank print_integer boolean_swap print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (integer_yank boolean_yank boolean_pop)) ()) ())
Errors: [1 1 1 0 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 25
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.852
Median total errors in population: 10
Error averages by case: (0.571 0.572 0.572 0.57 0.999 0.999 0.571 0.999 1.0 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 26.189
Average program size in population (points): 36.007
Average percent parens in population: 0.262
Minimum age in population: 27.26551055908203
Maximum age in population: 33.14298057556152
Average age in population: 31.27394505405426
Median age in population: 31.37621116638184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8827586
--- Timings ---
Current time: 1559584101811 milliseconds
Total Time:          55.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.8 seconds, 71.7%
Fitness Testing:      9.5 seconds, 17.0%
Report:               6.1 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max exec_swap (in2 print_boolean print_integer integer_eq boolean_shove exec_yank print_integer boolean_swap print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (integer_yank boolean_yank boolean_pop)) ()) ())
Lexicase best errors: [1 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max exec_swap (in2 print_boolean print_integer integer_eq boolean_shove exec_yank print_integer boolean_swap print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (integer_yank boolean_yank boolean_pop)) ()) ())
Zero cases best errors: [1 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 530 935 4 530 1000 530 405 405 408)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (4 530 935 4 530 0 530 405 405 408)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tag_exec_232} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction tag_exec_81} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times})
Best program: (tag_exec_232 (integer_stackdepth boolean_flush integer_swap integer_dup_items integer_stackdepth boolean_invert_first_then_and integer_swap) boolean_dup_times integer_mult in1 exec_do*while (integer_pop boolean_yankdup integer_flush integer_yank in4) print_integer boolean_xor boolean_pop boolean_swap tag_exec_81 (boolean_xor integer_rot boolean_frominteger exec_empty in3) integer_swap exec_do*times ())
Errors: [1 1 0 1 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 29
Size: 34
Percent parens: 0.147
--- Population Statistics ---
Average total errors in population: 6.249
Median total errors in population: 6
Error averages by case: (0.996 0.47 0.065 0.996 0.47 1.0 0.47 0.595 0.595 0.592)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 21.58
Average program size in population (points): 29.178
Average percent parens in population: 0.260
Minimum age in population: 29.1263542175293
Maximum age in population: 34.78752088546753
Average age in population: 33.4280928196907
Median age in population: 33.43206119537354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 415
Genome diversity (% unique genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 419
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9105276
--- Timings ---
Current time: 1559584103876 milliseconds
Total Time:          57.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 72.0%
Fitness Testing:      9.7 seconds, 16.9%
Report:               6.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 6                   | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 53                 
Correct output: 3                   | Program output: 26                 
Correct output: 18                  | Program output: 30                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 32                 
Correct output: 26                  | Program output: 97                 
Correct output: 11                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 58                 
Correct output: 50                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 44                 
Correct output: -55                 | Program output: -8                 
Correct output: -69                 | Program output: 57                 
Correct output: -51                 | Program output: -50                
Correct output: -95                 | Program output: -94                
Correct output: -94                 | Program output: 90                 
Correct output: -59                 | Program output: 59                 
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: 42                 
Correct output: 36                  | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: 66                 
Correct output: 25                  | Program output: 37                 
Correct output: -91                 | Program output: 63                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: 66                 
Correct output: -82                 | Program output: 40                 
Correct output: -93                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 50                 
Correct output: -56                 | Program output: 92                 
Correct output: -25                 | Program output: 67                 
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -71                
Correct output: -95                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -30                
Correct output: -93                 | Program output: 22                 
Correct output: -87                 | Program output: 2                  
Correct output: 16                  | Program output: 82                 
Correct output: -100                | Program output: -68                
Correct output: -78                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: 50                 
Correct output: -78                 | Program output: -11                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -38                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -88                
Correct output: -100                | Program output: -44                
Correct output: -62                 | Program output: 36                 
Correct output: -88                 | Program output: -29                
Correct output: -80                 | Program output: 75                 
Correct output: -44                 | Program output: -25                
Correct output: -62                 | Program output: 55                 
Correct output: -68                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max exec_swap (in2 print_boolean print_integer integer_eq boolean_shove exec_yank print_integer boolean_swap print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (integer_yank boolean_yank boolean_pop)) ()) ())
Lexicase best errors: [1 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max exec_swap (in2 print_boolean print_integer integer_eq boolean_shove exec_yank print_integer boolean_swap print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (integer_yank boolean_yank boolean_pop)) ()) ())
Zero cases best errors: [1 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 935 354 364 354 572 364 218 572 354)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (218 935 354 364 354 572 364 218 572 354)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop})
Best program: (integer_max exec_swap (in2 print_boolean print_integer integer_eq boolean_shove exec_yank print_integer boolean_swap print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (integer_yank boolean_yank boolean_pop)) ()) ())
Errors: [1 0 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 25
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 5.695
Median total errors in population: 5
Error averages by case: (0.782 0.065 0.646 0.636 0.646 0.428 0.636 0.782 0.428 0.646)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.406
Average program size in population (points): 31.852
Average percent parens in population: 0.261
Minimum age in population: 30.33465576171875
Maximum age in population: 36.43206119537354
Average age in population: 34.83234848880768
Median age in population: 34.93206119537354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.518
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9437191
--- Timings ---
Current time: 1559584106379 milliseconds
Total Time:          60.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.5 seconds, 72.4%
Fitness Testing:     10.0 seconds, 16.7%
Report:               6.5 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 6                   | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 53                 
Correct output: 3                   | Program output: 26                 
Correct output: 18                  | Program output: 30                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 32                 
Correct output: 26                  | Program output: 97                 
Correct output: 11                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 58                 
Correct output: 50                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 44                 
Correct output: -55                 | Program output: -8                 
Correct output: -69                 | Program output: 57                 
Correct output: -51                 | Program output: -50                
Correct output: -95                 | Program output: -94                
Correct output: -94                 | Program output: 90                 
Correct output: -59                 | Program output: 59                 
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: 42                 
Correct output: 36                  | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: 66                 
Correct output: 25                  | Program output: 37                 
Correct output: -91                 | Program output: 63                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: 66                 
Correct output: -82                 | Program output: 40                 
Correct output: -93                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 50                 
Correct output: -56                 | Program output: 92                 
Correct output: -25                 | Program output: 67                 
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -71                
Correct output: -95                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -30                
Correct output: -93                 | Program output: 22                 
Correct output: -87                 | Program output: 2                  
Correct output: 16                  | Program output: 82                 
Correct output: -100                | Program output: -68                
Correct output: -78                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: 50                 
Correct output: -78                 | Program output: -11                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -38                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -88                
Correct output: -100                | Program output: -44                
Correct output: -62                 | Program output: 36                 
Correct output: -88                 | Program output: -29                
Correct output: -80                 | Program output: 75                 
Correct output: -44                 | Program output: -25                
Correct output: -62                 | Program output: 55                 
Correct output: -68                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max exec_swap (in1 integer_sub print_integer integer_eq boolean_shove) (exec_yank integer_rot exec_pop (exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup integer_dup_items boolean_flush boolean_and exec_yankdup exec_rot (integer_dup_times integer_lt) (integer_lte boolean_pop) ()) () ())))
Lexicase best errors: [0 0 1 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max exec_swap (in1 integer_sub print_integer integer_eq boolean_shove) (exec_yank integer_rot exec_pop (exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup integer_dup_items boolean_flush boolean_and exec_yankdup exec_rot (integer_dup_times integer_lt) (integer_lte boolean_pop) ()) () ())))
Zero cases best errors: [0 0 1 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (286 286 447 447 206 447 286 1000 206 206)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (286 286 447 447 206 447 286 0 206 206)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop})
Best program: (integer_max exec_swap (in2 print_boolean print_integer integer_eq boolean_shove exec_yank print_integer boolean_swap print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup) (exec_pop (integer_yank boolean_yank boolean_pop)) ()) ())
Errors: [1 1 0 0 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 18
Size: 25
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.183
Median total errors in population: 7
Error averages by case: (0.714 0.714 0.553 0.553 0.794 0.553 0.714 1.0 0.794 0.794)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 22.767
Average program size in population (points): 31.555
Average percent parens in population: 0.273
Minimum age in population: 33.51819372177124
Maximum age in population: 38.17591261863708
Average age in population: 36.43189711415768
Median age in population: 36.49462425708771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 240
Genome diversity (% unique genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 240
Syntactic diversity (% unique Push programs):	 0.489
Total error diversity:				 0.002
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9721382
--- Timings ---
Current time: 1559584109019 milliseconds
Total Time:          62.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.8 seconds, 72.9%
Fitness Testing:     10.3 seconds, 16.4%
Report:               6.6 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max exec_swap (in1 integer_lt print_integer integer_eq boolean_shove exec_s (integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_pop) () ()) () ()) ())
Lexicase best errors: [1 0 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max exec_swap (in1 integer_lt print_integer integer_eq boolean_shove exec_s (integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_pop) () ()) () ()) ())
Zero cases best errors: [1 0 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (643 301 1000 326 300 617 301 627 316 316)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (643 301 0 326 300 617 301 627 316 316)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Best program: (integer_max exec_swap (in1 integer_lt print_integer integer_eq boolean_shove exec_s (integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times integer_lt) exec_empty boolean_pop) () ()) () ()) ())
Errors: [1 0 1 1 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 22
Size: 32
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.253
Median total errors in population: 6
Error averages by case: (0.357 0.699 1.0 0.674 0.7 0.383 0.699 0.373 0.684 0.684)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 23.751
Average program size in population (points): 32.652
Average percent parens in population: 0.266
Minimum age in population: 34.51819372177124
Maximum age in population: 39.90502256155014
Average age in population: 37.88575973778963
Median age in population: 37.96439388394356
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10005536
--- Timings ---
Current time: 1559584111335 milliseconds
Total Time:          65.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.6 seconds, 73.3%
Fitness Testing:     10.5 seconds, 16.2%
Report:               6.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max exec_swap (in1 integer_sub print_integer integer_eq boolean_shove) (exec_yank integer_rot exec_pop (exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup integer_dup_items boolean_flush boolean_and exec_yankdup exec_rot (integer_dup_times integer_lt) (exec_empty boolean_pop) ()) () ())))
Lexicase best errors: [0 1 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max exec_swap (in1 integer_sub print_integer integer_eq boolean_shove) (exec_yank integer_rot exec_pop (exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup integer_dup_items boolean_flush boolean_and exec_yankdup exec_rot (integer_dup_times integer_lt) (exec_empty boolean_pop) ()) () ())))
Zero cases best errors: [0 1 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (435 179 946 178 435 179 435 1000 179 435)
Population mean number of elite cases: 4.40
Count of perfect (error zero) individuals by case: (435 179 946 178 435 179 435 0 179 435)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Best program: (integer_max exec_swap (in1 integer_sub print_integer integer_eq boolean_shove) (exec_yank integer_rot exec_pop (exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup integer_dup_items boolean_flush boolean_and exec_yankdup exec_rot (integer_dup_times integer_lt) (exec_empty boolean_pop) ()) () ())))
Errors: [0 1 0 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 32
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.599
Median total errors in population: 5
Error averages by case: (0.565 0.821 0.054 0.822 0.565 0.821 0.565 1.0 0.821 0.565)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 23.425
Average program size in population (points): 32.672
Average percent parens in population: 0.277
Minimum age in population: 35.51819372177124
Maximum age in population: 41.45384487509727
Average age in population: 39.37725942602754
Median age in population: 39.48135152459145
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 10295520
--- Timings ---
Current time: 1559584113735 milliseconds
Total Time:          67.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.6 seconds, 73.6%
Fitness Testing:     10.8 seconds, 16.0%
Report:               6.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq})
Lexicase best program: (integer_max exec_swap (in1 in4 print_integer integer_eq boolean_shove) (exec_yank integer_rot print_boolean exec_do*times (boolean_stackdepth boolean_yankdup boolean_and exec_rot (integer_mult) (boolean_eq exec_eq) ())))
Lexicase best errors: [1 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq})
Zero cases best program: (integer_max exec_swap (in1 in4 print_integer integer_eq boolean_shove) (exec_yank integer_rot print_boolean exec_do*times (boolean_stackdepth boolean_yankdup boolean_and exec_rot (integer_mult) (boolean_eq exec_eq) ())))
Zero cases best errors: [1 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 480 1000 1000 480 482 481 931 451)
Population mean number of elite cases: 7.30
Count of perfect (error zero) individuals by case: (0 0 480 0 0 480 482 481 931 451)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_invert_first_then_and integer_max exec_swap (in1 in4 print_integer integer_eq boolean_shove exec_yank exec_pop (integer_yank boolean_and integer_shove integer_flush integer_dup integer_swap exec_empty boolean_frominteger)) ())
Errors: [1 1 0 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 22
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.695
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.52 1.0 1.0 0.52 0.518 0.519 0.069 0.549)
Error minima by case: (1 1 0 1 1 0 0 0 0 0)
Average genome size in population (length): 25.38
Average program size in population (points): 35.001
Average percent parens in population: 0.265
Minimum age in population: 37.26227831840515
Maximum age in population: 42.77211046218872
Average age in population: 40.78658810132742
Median age in population: 40.90763691067696
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10618603
--- Timings ---
Current time: 1559584116133 milliseconds
Total Time:          69.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.6 seconds, 73.9%
Fitness Testing:     11.1 seconds, 15.9%
Report:               7.0 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_exec_419} {:close 2, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_max exec_swap (integer_pop in4 print_integer integer_eq tag_exec_419 (in4)) (print_integer) boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times (integer_gt boolean_frominteger exec_empty integer_empty integer_swap exec_do*times (integer_yankdup boolean_yank integer_eq exec_s_when_autoconstructing (exec_empty) (boolean_xor) ())))
Lexicase best errors: [1 0 1 1 1 1 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_exec_419} {:close 2, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_max exec_swap (integer_pop in4 print_integer integer_eq tag_exec_419 (in4)) (print_integer) boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times (integer_gt boolean_frominteger exec_empty integer_empty integer_swap exec_do*times (integer_yankdup boolean_yank integer_eq exec_s_when_autoconstructing (exec_empty) (boolean_xor) ())))
Zero cases best errors: [1 0 1 1 1 1 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 752 1000 1000 1000 191 189 753 1000 1000)
Population mean number of elite cases: 7.89
Count of perfect (error zero) individuals by case: (0 752 0 0 0 191 189 753 0 0)
Population mean number of perfect (error zero) cases: 1.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and})
Best program: (integer_max exec_swap (in1 in4 print_integer integer_eq boolean_shove exec_yank integer_rot) (print_boolean integer_gte boolean_stackdepth boolean_pop in3 integer_yank boolean_and))
Errors: [1 0 1 1 1 1 1 0 1 1]
Total: 8
Mean: 0.8
Genome size: 16
Size: 19
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 8.115
Median total errors in population: 8
Error averages by case: (1.0 0.248 1.0 1.0 1.0 0.809 0.811 0.247 1.0 1.0)
Error minima by case: (1 0 1 1 1 0 0 0 1 1)
Average genome size in population (length): 25.475
Average program size in population (points): 34.674
Average percent parens in population: 0.255
Minimum age in population: 39.47775053977966
Maximum age in population: 44.19498230516911
Average age in population: 42.27535571585596
Median age in population: 42.35130010917783
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10986715
--- Timings ---
Current time: 1559584118344 milliseconds
Total Time:          72.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.3 seconds, 74.0%
Fitness Testing:     11.4 seconds, 15.9%
Report:               7.2 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 6                   | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 53                 
Correct output: 3                   | Program output: 26                 
Correct output: 18                  | Program output: 30                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 32                 
Correct output: 26                  | Program output: 97                 
Correct output: 11                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 58                 
Correct output: 50                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 44                 
Correct output: -55                 | Program output: -8                 
Correct output: -69                 | Program output: 57                 
Correct output: -51                 | Program output: -50                
Correct output: -95                 | Program output: -94                
Correct output: -94                 | Program output: 90                 
Correct output: -59                 | Program output: 59                 
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: 42                 
Correct output: 36                  | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: 66                 
Correct output: 25                  | Program output: 37                 
Correct output: -91                 | Program output: 63                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: 66                 
Correct output: -82                 | Program output: 40                 
Correct output: -93                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 50                 
Correct output: -56                 | Program output: 92                 
Correct output: -25                 | Program output: 67                 
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -71                
Correct output: -95                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -30                
Correct output: -93                 | Program output: 22                 
Correct output: -87                 | Program output: 2                  
Correct output: 16                  | Program output: 82                 
Correct output: -100                | Program output: -68                
Correct output: -78                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: 50                 
Correct output: -78                 | Program output: -11                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -38                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -88                
Correct output: -100                | Program output: -44                
Correct output: -62                 | Program output: 36                 
Correct output: -88                 | Program output: -29                
Correct output: -80                 | Program output: 75                 
Correct output: -44                 | Program output: -25                
Correct output: -62                 | Program output: 55                 
Correct output: -68                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Lexicase best program: (integer_swap boolean_yankdup integer_mult integer_swap boolean_yankdup integer_mult in1 in2 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) integer_rot exec_swap () ())
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Zero cases best program: (integer_swap boolean_yankdup integer_mult integer_swap boolean_yankdup integer_mult in1 in2 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) integer_rot exec_swap () ())
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1 445 1 485 492 445 1 1 491)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (0 1 445 1 485 492 445 1 1 491)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Best program: (integer_swap boolean_yankdup integer_mult integer_swap boolean_yankdup integer_mult in1 in2 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) integer_rot exec_swap () ())
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 30
Size: 36
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.638
Median total errors in population: 8
Error averages by case: (1.0 0.999 0.555 0.999 0.515 0.508 0.555 0.999 0.999 0.509)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.446
Average program size in population (points): 35.077
Average percent parens in population: 0.264
Minimum age in population: 40.626200735569
Maximum age in population: 45.79171113669872
Average age in population: 43.78789514186606
Median age in population: 43.8461476508528
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 11346123
--- Timings ---
Current time: 1559584120471 milliseconds
Total Time:          74.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.9 seconds, 74.0%
Fitness Testing:     11.8 seconds, 15.9%
Report:               7.4 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 6                   | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 53                 
Correct output: 3                   | Program output: 26                 
Correct output: 18                  | Program output: 30                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 32                 
Correct output: 26                  | Program output: 97                 
Correct output: 11                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 58                 
Correct output: 50                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 44                 
Correct output: -55                 | Program output: -8                 
Correct output: -69                 | Program output: 57                 
Correct output: -51                 | Program output: -50                
Correct output: -95                 | Program output: -94                
Correct output: -94                 | Program output: 90                 
Correct output: -59                 | Program output: 59                 
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: 42                 
Correct output: 36                  | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: 66                 
Correct output: 25                  | Program output: 37                 
Correct output: -91                 | Program output: 63                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: 66                 
Correct output: -82                 | Program output: 40                 
Correct output: -93                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 50                 
Correct output: -56                 | Program output: 92                 
Correct output: -25                 | Program output: 67                 
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -71                
Correct output: -95                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -30                
Correct output: -93                 | Program output: 22                 
Correct output: -87                 | Program output: 2                  
Correct output: 16                  | Program output: 82                 
Correct output: -100                | Program output: -68                
Correct output: -78                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: 50                 
Correct output: -78                 | Program output: -11                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -38                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -88                
Correct output: -100                | Program output: -44                
Correct output: -62                 | Program output: 36                 
Correct output: -88                 | Program output: -29                
Correct output: -80                 | Program output: 75                 
Correct output: -44                 | Program output: -25                
Correct output: -62                 | Program output: 55                 
Correct output: -68                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Lexicase best program: (integer_swap boolean_yankdup integer_mult integer_swap boolean_yankdup integer_mult in1 in2 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) integer_rot exec_swap () ())
Lexicase best errors: [0 1 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Zero cases best program: (integer_swap boolean_yankdup integer_mult integer_swap boolean_yankdup integer_mult in1 in2 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) integer_rot exec_swap () ())
Zero cases best errors: [0 1 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (693 1000 468 247 247 470 222 1000 470 223)
Population mean number of elite cases: 5.04
Count of perfect (error zero) individuals by case: (693 0 468 247 247 470 222 0 470 223)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Best program: (integer_swap boolean_yankdup integer_mult integer_swap boolean_yankdup integer_mult in1 in2 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) integer_rot exec_swap () ())
Errors: [0 1 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 36
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.96
Median total errors in population: 7
Error averages by case: (0.307 1.0 0.532 0.753 0.753 0.53 0.778 1.0 0.53 0.777)
Error minima by case: (0 1 0 0 0 0 0 1 0 0)
Average genome size in population (length): 27.644
Average program size in population (points): 35.41
Average percent parens in population: 0.215
Minimum age in population: 41.626200735569
Maximum age in population: 46.94635252840817
Average age in population: 44.71026512742043
Median age in population: 44.71364299580455
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 309
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 327
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 11634834
--- Timings ---
Current time: 1559584122634 milliseconds
Total Time:          76.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.6 seconds, 74.2%
Fitness Testing:     12.1 seconds, 15.8%
Report:               7.5 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 6                   | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 53                 
Correct output: 3                   | Program output: 26                 
Correct output: 18                  | Program output: 30                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 32                 
Correct output: 26                  | Program output: 97                 
Correct output: 11                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 58                 
Correct output: 50                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 44                 
Correct output: -55                 | Program output: -8                 
Correct output: -69                 | Program output: 57                 
Correct output: -51                 | Program output: -50                
Correct output: -95                 | Program output: -94                
Correct output: -94                 | Program output: 90                 
Correct output: -59                 | Program output: 59                 
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: 42                 
Correct output: 36                  | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: 66                 
Correct output: 25                  | Program output: 37                 
Correct output: -91                 | Program output: 63                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: 66                 
Correct output: -82                 | Program output: 40                 
Correct output: -93                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 50                 
Correct output: -56                 | Program output: 92                 
Correct output: -25                 | Program output: 67                 
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -71                
Correct output: -95                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -30                
Correct output: -93                 | Program output: 22                 
Correct output: -87                 | Program output: 2                  
Correct output: 16                  | Program output: 82                 
Correct output: -100                | Program output: -68                
Correct output: -78                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: 50                 
Correct output: -78                 | Program output: -11                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -38                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -88                
Correct output: -100                | Program output: -44                
Correct output: -62                 | Program output: 36                 
Correct output: -88                 | Program output: -29                
Correct output: -80                 | Program output: 75                 
Correct output: -44                 | Program output: -25                
Correct output: -62                 | Program output: 55                 
Correct output: -68                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult})
Lexicase best program: (integer_max integer_dup_items integer_stackdepth integer_dup integer_swap boolean_yankdup integer_mult in1 exec_do*while (integer_pop boolean_yankdup integer_flush tag_exec_419 () in4) print_integer in1 integer_mult exec_stackdepth boolean_yank exec_do*times (integer_gt integer_mult))
Lexicase best errors: [1 0 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_max integer_dup_items integer_stackdepth integer_dup integer_swap boolean_yankdup integer_mult in1 exec_do*while (integer_pop boolean_yankdup integer_flush tag_exec_419 () in4) print_integer in1 integer_mult exec_stackdepth boolean_yank exec_do*times (integer_gt integer_mult))
Zero cases best errors: [1 0 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 228 414 927 284 228 415 1000 228 415)
Population mean number of elite cases: 5.14
Count of perfect (error zero) individuals by case: (0 228 414 927 284 228 415 0 228 415)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup})
Best program: (integer_swap boolean_yankdup integer_mult integer_swap integer_lt integer_mult in1 in2 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup ()))
Errors: [1 1 0 0 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 24
Size: 28
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.861
Median total errors in population: 6
Error averages by case: (1.0 0.772 0.586 0.073 0.716 0.772 0.585 1.0 0.772 0.585)
Error minima by case: (1 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 27.227
Average program size in population (points): 35.086
Average percent parens in population: 0.217
Minimum age in population: 43.47190141677856
Maximum age in population: 48.54595374409109
Average age in population: 46.22157485391106
Median age in population: 46.22968611959368
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11925780
--- Timings ---
Current time: 1559584125159 milliseconds
Total Time:          78.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.7 seconds, 74.5%
Fitness Testing:     12.3 seconds, 15.6%
Report:               7.7 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 6                   | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 53                 
Correct output: 3                   | Program output: 26                 
Correct output: 18                  | Program output: 30                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 32                 
Correct output: 26                  | Program output: 97                 
Correct output: 11                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 58                 
Correct output: 50                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 44                 
Correct output: -55                 | Program output: -8                 
Correct output: -69                 | Program output: 57                 
Correct output: -51                 | Program output: -50                
Correct output: -95                 | Program output: -94                
Correct output: -94                 | Program output: 90                 
Correct output: -59                 | Program output: 59                 
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: 42                 
Correct output: 36                  | Program output: 95                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: 66                 
Correct output: 25                  | Program output: 37                 
Correct output: -91                 | Program output: 63                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: 66                 
Correct output: -82                 | Program output: 40                 
Correct output: -93                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 50                 
Correct output: -56                 | Program output: 92                 
Correct output: -25                 | Program output: 67                 
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -71                
Correct output: -95                 | Program output: -27                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -30                
Correct output: -93                 | Program output: 22                 
Correct output: -87                 | Program output: 2                  
Correct output: 16                  | Program output: 82                 
Correct output: -100                | Program output: -68                
Correct output: -78                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: 50                 
Correct output: -78                 | Program output: -11                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -38                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -88                
Correct output: -100                | Program output: -44                
Correct output: -62                 | Program output: 36                 
Correct output: -88                 | Program output: -29                
Correct output: -80                 | Program output: 75                 
Correct output: -44                 | Program output: -25                
Correct output: -62                 | Program output: 55                 
Correct output: -68                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Lexicase best program: (integer_swap boolean_yankdup integer_mult integer_swap boolean_yankdup integer_mult in1 in2 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) integer_rot exec_swap () ())
Lexicase best errors: [1 0 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Zero cases best program: (integer_swap boolean_yankdup integer_mult integer_swap boolean_yankdup integer_mult in1 in2 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) integer_rot exec_swap () ())
Zero cases best errors: [1 0 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 383 131 383 383 1000 383 416 383 131)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (0 383 131 383 383 0 383 416 383 131)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Best program: (integer_swap boolean_yankdup integer_mult integer_swap boolean_yankdup integer_mult in1 in2 print_integer integer_eq boolean_shove exec_yank integer_rot print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) integer_rot exec_swap () ())
Errors: [1 0 1 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 36
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.407
Median total errors in population: 8
Error averages by case: (1.0 0.617 0.869 0.617 0.617 1.0 0.617 0.584 0.617 0.869)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 26.617
Average program size in population (points): 33.93
Average percent parens in population: 0.209
Minimum age in population: 45.34180933237076
Maximum age in population: 49.89483190560713
Average age in population: 47.70989859712031
Median age in population: 47.71364299580455
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 12218600
--- Timings ---
Current time: 1559584127622 milliseconds
Total Time:          81.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.7 seconds, 74.7%
Fitness Testing:     12.6 seconds, 15.5%
Report:               7.9 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Lexicase best program: (exec_shove (exec_swap (in4 exec_k (print_integer integer_eq boolean_shove exec_yank print_integer integer_eq boolean_shove exec_yank integer_rot) (print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) integer_rot exec_swap () ())) ()))
Lexicase best errors: [0 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Zero cases best program: (exec_shove (exec_swap (in4 exec_k (print_integer integer_eq boolean_shove exec_yank print_integer integer_eq boolean_shove exec_yank integer_rot) (print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) integer_rot exec_swap () ())) ()))
Zero cases best errors: [0 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 106 106 583 1000 816 693 575 106 1000)
Population mean number of elite cases: 5.09
Count of perfect (error zero) individuals by case: (106 106 106 583 0 816 693 575 106 0)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Best program: (integer_max exec_swap (in1 in4 print_integer integer_gt boolean_shove exec_yank integer_rot) (print_boolean boolean_shove exec_yank exec_pop (integer_yank boolean_and exec_yankdup exec_empty in3) integer_swap exec_empty in3) integer_swap exec_empty boolean_pop)
Errors: [0 0 0 1 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 28
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.909
Median total errors in population: 6
Error averages by case: (0.894 0.894 0.894 0.417 1.0 0.184 0.307 0.425 0.894 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 27.58
Average program size in population (points): 34.51
Average percent parens in population: 0.196
Minimum age in population: 46.57574660144746
Maximum age in population: 51.30649546370842
Average age in population: 49.0888235288572
Median age in population: 49.14028263720684
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 12477800
--- Timings ---
Current time: 1559584130210 milliseconds
Total Time:          83.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.9 seconds, 74.9%
Fitness Testing:     12.9 seconds, 15.3%
Report:               8.1 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) () ()) ()))
Lexicase best errors: [0 0 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) () ()) ()))
Zero cases best errors: [0 0 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 542 931 1 929 1000 929 385 385)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (1 1 542 931 1 929 0 929 385 385)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) () ()) ()))
Errors: [0 0 1 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 30
Size: 46
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 5.896
Median total errors in population: 6
Error averages by case: (0.999 0.999 0.458 0.069 0.999 0.071 1.0 0.071 0.615 0.615)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 25.993
Average program size in population (points): 32.809
Average percent parens in population: 0.200
Minimum age in population: 47.71364299580455
Maximum age in population: 52.50994077022187
Average age in population: 50.61102850039955
Median age in population: 50.67910387576558
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 12769559
--- Timings ---
Current time: 1559584133151 milliseconds
Total Time:          86.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.0 seconds, 75.2%
Fitness Testing:     13.1 seconds, 15.2%
Report:               8.2 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) () ()) ()))
Lexicase best errors: [0 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) () ()) ()))
Zero cases best errors: [0 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (457 323 939 1000 155 613 324 1000 457 457)
Population mean number of elite cases: 5.72
Count of perfect (error zero) individuals by case: (457 323 939 0 155 613 324 0 457 457)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) () ()) ()))
Errors: [0 1 0 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 30
Size: 46
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 6.275
Median total errors in population: 7
Error averages by case: (0.543 0.677 0.061 1.0 0.845 0.387 0.676 1.0 0.543 0.543)
Error minima by case: (0 0 0 1 0 0 0 1 0 0)
Average genome size in population (length): 28.362
Average program size in population (points): 39.338
Average percent parens in population: 0.263
Minimum age in population: 48.71364299580455
Maximum age in population: 54.4438802866498
Average age in population: 53.00151725893765
Median age in population: 53.30516357877059
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 303
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 307
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 13403273
--- Timings ---
Current time: 1559584136126 milliseconds
Total Time:          89.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.8 seconds, 74.7%
Fitness Testing:     13.7 seconds, 15.3%
Report:               8.8 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) () ()) ()))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) () ()) ()))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 159 784 943 518 518 940 943 519 158)
Population mean number of elite cases: 5.64
Count of perfect (error zero) individuals by case: (158 159 784 943 518 518 940 943 519 158)
Population mean number of perfect (error zero) cases: 5.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) () ()) ()))
Errors: [1 1 0 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 30
Size: 46
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 4.36
Median total errors in population: 3
Error averages by case: (0.842 0.841 0.216 0.057 0.482 0.482 0.06 0.057 0.481 0.842)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.23
Average program size in population (points): 39.686
Average percent parens in population: 0.274
Minimum age in population: 51.49208169500344
Maximum age in population: 56.41161188355181
Average age in population: 54.59373850456823
Median age in population: 54.67861182412889
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 225
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 228
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 14088652
--- Timings ---
Current time: 1559584139451 milliseconds
Total Time:          92.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.0 seconds, 74.4%
Fitness Testing:     14.4 seconds, 15.5%
Report:               9.3 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_swap boolean_yankdup integer_mult in4 print_integer integer_max boolean_pop boolean_flush boolean_yank exec_do*times (integer_dup_times integer_lt) exec_empty boolean_pop)
Lexicase best errors: [0 1 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_swap boolean_yankdup integer_mult in4 print_integer integer_max boolean_pop boolean_flush boolean_yank exec_do*times (integer_dup_times integer_lt) exec_empty boolean_pop)
Zero cases best errors: [0 1 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (408 1000 1000 409 408 408 524 1000 409 936)
Population mean number of elite cases: 6.50
Count of perfect (error zero) individuals by case: (408 0 0 409 408 408 524 0 409 936)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 1, :instruction 50} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*while})
Best program: (integer_dup_items integer_stackdepth exec_noop boolean_yank in4 print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times (integer_gt boolean_frominteger exec_empty 50) integer_swap integer_eq boolean_shove exec_yank integer_rot print_boolean integer_gte boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) integer_rot exec_do*while ())
Errors: [0 1 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 37
Size: 43
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 6.498
Median total errors in population: 8
Error averages by case: (0.592 1.0 1.0 0.591 0.592 0.592 0.476 1.0 0.591 0.064)
Error minima by case: (0 1 1 0 0 0 0 1 0 0)
Average genome size in population (length): 26.998
Average program size in population (points): 39.151
Average percent parens in population: 0.299
Minimum age in population: 52.91139423375716
Maximum age in population: 58.02511577481346
Average age in population: 56.09626337706958
Median age in population: 56.1628132671176
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 154
Genome diversity (% unique genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.549
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 14800117
--- Timings ---
Current time: 1559584142754 milliseconds
Total Time:          96.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.1 seconds, 74.0%
Fitness Testing:     15.0 seconds, 15.6%
Report:               9.9 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 integer_pop integer_fromboolean integer_rot print_boolean integer_dup_times exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) ()))
Lexicase best errors: [0 1 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 integer_pop integer_fromboolean integer_rot print_boolean integer_dup_times exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) ()))
Zero cases best errors: [0 1 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 772 774 1000 1000 163 1000 1000 1000 163)
Population mean number of elite cases: 7.03
Count of perfect (error zero) individuals by case: (163 772 774 0 0 163 0 0 0 163)
Population mean number of perfect (error zero) cases: 2.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) () ()) ()))
Errors: [0 1 1 1 1 0 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 30
Size: 46
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 7.965
Median total errors in population: 8
Error averages by case: (0.837 0.228 0.226 1.0 1.0 0.837 1.0 1.0 1.0 0.837)
Error minima by case: (0 0 0 1 1 0 1 1 1 0)
Average genome size in population (length): 24.178
Average program size in population (points): 33.678
Average percent parens in population: 0.266
Minimum age in population: 53.91139423375716
Maximum age in population: 59.56865975293476
Average age in population: 57.33736380088635
Median age in population: 57.39701683190651
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 15237735
--- Timings ---
Current time: 1559584145742 milliseconds
Total Time:          99.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 73.8%
Fitness Testing:     15.4 seconds, 15.6%
Report:              10.4 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Lexicase best program: (integer_max exec_swap (integer_pop in4 print_integer integer_eq boolean_shove exec_noop integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ())) () ()) ())
Lexicase best errors: [1 0 1 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 40
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Zero cases best program: (integer_max exec_swap (integer_pop in4 print_integer integer_eq boolean_shove exec_noop integer_rot print_boolean exec_s_when_autoconstructing (boolean_stackdepth integer_yankdup exec_pop (integer_yank boolean_and exec_yankdup boolean_invert_second_then_and integer_dup_times exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ())) () ()) ())
Zero cases best errors: [1 0 1 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 40
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 403 530 1000 402 1000 402 1000 1 1000)
Population mean number of elite cases: 5.74
Count of perfect (error zero) individuals by case: (1 403 530 0 402 0 402 0 1 0)
Population mean number of perfect (error zero) cases: 1.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_502} {:close 1, :instruction boolean_rot})
Best program: (in4 exec_k (print_integer integer_eq boolean_shove exec_yank exec_shove (print_boolean exec_stackdepth boolean_stackdepth integer_yankdup integer_empty integer_yank) boolean_and exec_yankdup) (boolean_invert_second_then_and integer_yankdup) exec_s_when_autoconstructing (boolean_stackdepth boolean_invert_first_then_and exec_pop (integer_yank boolean_and exec_pop (boolean_invert_second_then_and integer_dup_times tag_integer_502) boolean_rot)) () ())
Errors: [1 0 1 1 0 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 8.261
Median total errors in population: 9
Error averages by case: (0.999 0.597 0.47 1.0 0.598 1.0 0.598 1.0 0.999 1.0)
Error minima by case: (0 0 0 1 0 1 0 1 0 1)
Average genome size in population (length): 26.606
Average program size in population (points): 38.677
Average percent parens in population: 0.300
Minimum age in population: 54.91139423375716
Maximum age in population: 60.9350736391134
Average age in population: 59.03922992983308
Median age in population: 59.11070886260859
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 15909290
--- Timings ---
Current time: 1559584148486 milliseconds
Total Time:         102.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.1 seconds, 73.5%
Fitness Testing:     16.1 seconds, 15.7%
Report:              11.0 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_not integer_flush tag_exec_419 () in4 print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times () integer_yank boolean_yank boolean_pop)
Lexicase best errors: [1 0 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_not integer_flush tag_exec_419 () in4 print_integer boolean_xor boolean_pop exec_stackdepth boolean_yank exec_do*times () integer_yank boolean_yank boolean_pop)
Zero cases best errors: [1 0 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (166 453 465 166 777 1000 468 166 144 774)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (166 453 465 166 777 0 468 166 144 774)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Best program: (boolean_invert_first_then_and integer_max exec_swap (in1 in4 print_integer integer_eq boolean_shove exec_yank integer_yankdup) (exec_pop (integer_yank boolean_and integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_dup_times in3) integer_lt) (integer_rot exec_swap () ()) ()) () ())))
Errors: [1 0 0 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 6.421
Median total errors in population: 5
Error averages by case: (0.834 0.547 0.535 0.834 0.223 1.0 0.532 0.834 0.856 0.226)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 27.404
Average program size in population (points): 39.206
Average percent parens in population: 0.288
Minimum age in population: 55.91139423375716
Maximum age in population: 62.54192019916263
Average age in population: 60.87634679067909
Median age in population: 61.05186719043468
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 16421548
--- Timings ---
Current time: 1559584150834 milliseconds
Total Time:         104.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.8 seconds, 73.4%
Fitness Testing:     16.6 seconds, 15.8%
Report:              11.1 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max exec_swap () (in1 integer_empty print_integer integer_sub boolean_shove exec_yank exec_yank exec_while (integer_yank boolean_and exec_yankdup exec_empty in3) integer_swap exec_empty boolean_pop))
Lexicase best errors: [1 1 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 22
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max exec_swap () (in1 integer_empty print_integer integer_sub boolean_shove exec_yank exec_yank exec_while (integer_yank boolean_and exec_yankdup exec_empty in3) integer_swap exec_empty boolean_pop))
Zero cases best errors: [1 1 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 22
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (418 1000 116 1000 116 116 391 1000 1000 504)
Population mean number of elite cases: 5.66
Count of perfect (error zero) individuals by case: (418 0 116 0 116 116 391 0 0 504)
Population mean number of perfect (error zero) cases: 1.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction in1})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_sub exec_swap (integer_max exec_s (boolean_dup_items boolean_frominteger integer_fromboolean integer_empty in1) () ()) ()) () ()) ()))
Errors: [1 1 0 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 26
Size: 41
Percent parens: 0.366
--- Population Statistics ---
Average total errors in population: 8.339
Median total errors in population: 8
Error averages by case: (0.582 1.0 0.884 1.0 0.884 0.884 0.609 1.0 1.0 0.496)
Error minima by case: (0 1 0 1 0 0 0 1 1 0)
Average genome size in population (length): 26.477
Average program size in population (points): 38.207
Average percent parens in population: 0.295
Minimum age in population: 56.91139423375716
Maximum age in population: 64.41664545206731
Average age in population: 62.47000713191267
Median age in population: 62.52274651467997
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 17115310
--- Timings ---
Current time: 1559584154259 milliseconds
Total Time:         107.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.0 seconds, 73.4%
Fitness Testing:     17.2 seconds, 16.0%
Report:              11.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) () ()) ()))
Lexicase best errors: [0 1 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) () ()) ()))
Zero cases best errors: [0 1 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (730 1000 1000 1000 561 1000 936 207 937 561)
Population mean number of elite cases: 7.93
Count of perfect (error zero) individuals by case: (730 0 0 0 561 0 936 207 937 561)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Best program: (integer_mult boolean_and integer_max exec_swap () (exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) boolean_not) (integer_rot exec_swap () ()) ()) () ()) ())))
Errors: [0 1 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 51
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.068
Median total errors in population: 5
Error averages by case: (0.27 1.0 1.0 1.0 0.439 1.0 0.064 0.793 0.063 0.439)
Error minima by case: (0 1 1 1 0 1 0 0 0 0)
Average genome size in population (length): 27.408
Average program size in population (points): 40.153
Average percent parens in population: 0.308
Minimum age in population: 57.91139423375716
Maximum age in population: 66.26846508375093
Average age in population: 63.95292385625751
Median age in population: 64.04099127632549
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.575
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 17880508
--- Timings ---
Current time: 1559584157618 milliseconds
Total Time:         110.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.1 seconds, 73.1%
Fitness Testing:     17.9 seconds, 16.2%
Report:              11.8 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: 71                 
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: -46                
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 71                 
Correct output: 10                  | Program output: 12                 
Correct output: 3                   | Program output: 82                 
Correct output: 3                   | Program output: 87                 
Correct output: 18                  | Program output: 90                 
Correct output: 1                   | Program output: 20                 
Correct output: 4                   | Program output: 90                 
Correct output: 11                  | Program output: 87                 
Correct output: 8                   | Program output: 11                 
Correct output: 26                  | Program output: 48                 
Correct output: 11                  | Program output: 48                 
Correct output: 36                  | Program output: 92                 
Correct output: 15                  | Program output: 76                 
Correct output: 39                  | Program output: 67                 
Correct output: 50                  | Program output: 77                 
Correct output: 15                  | Program output: 24                 
Correct output: 10                  | Program output: 28                 
Correct output: 35                  | Program output: 88                 
Correct output: 28                  | Program output: 91                 
Correct output: -55                 | Program output: 98                 
Correct output: -69                 | Program output: -12                
Correct output: -51                 | Program output: 49                 
Correct output: -95                 | Program output: 61                 
Correct output: -94                 | Program output: 76                 
Correct output: -59                 | Program output: 31                 
Correct output: -82                 | Program output: -9                 
Correct output: 30                  | Program output: 82                 
Correct output: -67                 | Program output: 74                 
Correct output: -63                 | Program output: -33                
Correct output: -65                 | Program output: 15                 
Correct output: 9                   | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 91                 
Correct output: -76                 | Program output: -1                 
Correct output: -54                 | Program output: 98                 
Correct output: 25                  | Program output: 57                 
Correct output: -91                 | Program output: -81                
Correct output: -99                 | Program output: 71                 
Correct output: -44                 | Program output: 98                 
Correct output: -49                 | Program output: 87                 
Correct output: -82                 | Program output: 88                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 49                 
Correct output: -58                 | Program output: 31                 
Correct output: -44                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: -56                 | Program output: -56                
Correct output: -25                 | Program output: 63                 
Correct output: -23                 | Program output: 42                 
Correct output: -84                 | Program output: 77                 
Correct output: -95                 | Program output: -15                
Correct output: -99                 | Program output: -60                
Correct output: -55                 | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 20                 
Correct output: -59                 | Program output: -39                
Correct output: -2                  | Program output: -2                 
Correct output: -92                 | Program output: -88                
Correct output: -20                 | Program output: 22                 
Correct output: -78                 | Program output: 37                 
Correct output: -17                 | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -35                
Correct output: -92                 | Program output: -60                
Correct output: -64                 | Program output: 15                 
Correct output: 36                  | Program output: 50                 
Correct output: -44                 | Program output: -3                 
Correct output: -44                 | Program output: -19                
Correct output: -99                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: 25                 
Correct output: -88                 | Program output: -52                
Correct output: -80                 | Program output: -80                
Correct output: -44                 | Program output: 80                 
Correct output: -62                 | Program output: -4                 
Correct output: -68                 | Program output: 27                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction in1})
Lexicase best program: (integer_mult exec_swap (integer_max exec_swap (in3 integer_sub print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_swap (integer_max exec_s (boolean_dup_items boolean_frominteger integer_fromboolean integer_empty in1) () ()) ()) () ()) ()) ())
Lexicase best errors: [1 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction in1})
Zero cases best program: (integer_mult exec_swap (integer_max exec_swap (in3 integer_sub print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_swap (integer_max exec_s (boolean_dup_items boolean_frominteger integer_fromboolean integer_empty in1) () ()) ()) () ()) ()) ())
Zero cases best errors: [1 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (689 235 924 688 235 235 1000 1000 924 923)
Population mean number of elite cases: 6.85
Count of perfect (error zero) individuals by case: (689 235 924 688 235 235 0 0 924 923)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction tag_exec_419} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in3 integer_sub print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () in1 boolean_stackdepth integer_pop) (boolean_yankdup) (integer_flush tag_exec_419 () in4 print_integer boolean_xor integer_lt exec_empty integer_gt)) ()))
Errors: [1 0 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 40
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 5.147
Median total errors in population: 5
Error averages by case: (0.311 0.765 0.076 0.312 0.765 0.765 1.0 1.0 0.076 0.077)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 28.09
Average program size in population (points): 41.647
Average percent parens in population: 0.320
Minimum age in population: 62.18699852234568
Maximum age in population: 67.52443383699188
Average age in population: 65.47836893117693
Median age in population: 65.56809335185517
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 18715778
--- Timings ---
Current time: 1559584160804 milliseconds
Total Time:         114.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.9 seconds, 72.6%
Fitness Testing:     18.8 seconds, 16.4%
Report:              12.4 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5false             
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction in1})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in3 integer_sub print_integer integer_eq print_boolean exec_s_when_autoconstructing (exec_y (integer_mult) in1 in2 print_integer integer_eq boolean_shove integer_rot) (print_boolean integer_gte exec_k (integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank integer_empty in1)) ()) ()) ()))
Lexicase best errors: [1 1 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction in1})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in3 integer_sub print_integer integer_eq print_boolean exec_s_when_autoconstructing (exec_y (integer_mult) in1 in2 print_integer integer_eq boolean_shove integer_rot) (print_boolean integer_gte exec_k (integer_yankdup exec_pop (integer_yank boolean_and) integer_yankdup exec_pop (integer_yank integer_empty in1)) ()) ()) ()))
Zero cases best errors: [1 1 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 366 1000 1000 1000 938 1000 367 572 572)
Population mean number of elite cases: 7.82
Count of perfect (error zero) individuals by case: (0 366 0 0 0 938 0 367 572 572)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) boolean_invert_second_then_and) (integer_yank integer_div in4 exec_eq integer_sub) ()) ()))
Errors: [1 0 1 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 7.185
Median total errors in population: 7
Error averages by case: (1.0 0.634 1.0 1.0 1.0 0.062 1.0 0.633 0.428 0.428)
Error minima by case: (1 0 1 1 1 0 1 0 0 0)
Average genome size in population (length): 28.115
Average program size in population (points): 41.741
Average percent parens in population: 0.322
Minimum age in population: 63.18699852234568
Maximum age in population: 69.258828908331
Average age in population: 67.00466131381361
Median age in population: 67.07651706964123
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 19585596
--- Timings ---
Current time: 1559584163751 milliseconds
Total Time:         117.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.5 seconds, 72.1%
Fitness Testing:     19.6 seconds, 16.7%
Report:              12.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction in1})
Lexicase best program: (boolean_invert_first_then_and exec_swap () () integer_max exec_swap (in3 integer_sub print_integer integer_eq in3 boolean_invert_second_then_and integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_swap () (integer_max boolean_dup_items boolean_dup_items boolean_frominteger integer_fromboolean integer_empty in1)) () ()) ())
Lexicase best errors: [1 0 1 1 1 1 1 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 9
Lexicase best mean error: 0.9
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction in1})
Zero cases best program: (boolean_invert_first_then_and exec_swap () () integer_max exec_swap (in3 integer_sub print_integer integer_eq in3 boolean_invert_second_then_and integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_swap () (integer_max boolean_dup_items boolean_dup_items boolean_frominteger integer_fromboolean integer_empty in1)) () ()) ())
Zero cases best errors: [1 0 1 1 1 1 1 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 1
Zero cases best total error: 9
Zero cases best mean error: 0.9
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 444 1000 1000 1000 1000 495 1000 1000 1000)
Population mean number of elite cases: 8.94
Count of perfect (error zero) individuals by case: (0 444 0 0 0 0 495 0 0 0)
Population mean number of perfect (error zero) cases: 0.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) boolean_yankdup) (integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ()) ()) ()))
Errors: [1 1 1 1 1 1 0 1 1 1]
Total: 9
Mean: 0.9
Genome size: 30
Size: 45
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 9.061
Median total errors in population: 9
Error averages by case: (1.0 0.556 1.0 1.0 1.0 1.0 0.505 1.0 1.0 1.0)
Error minima by case: (1 0 1 1 1 1 0 1 1 1)
Average genome size in population (length): 27.881
Average program size in population (points): 41.467
Average percent parens in population: 0.322
Minimum age in population: 66.06521832245471
Maximum age in population: 70.56035038855384
Average age in population: 68.48593153285036
Median age in population: 68.547812909095
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 20414037
--- Timings ---
Current time: 1559584167183 milliseconds
Total Time:         120.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.5 seconds, 71.8%
Fitness Testing:     20.4 seconds, 16.9%
Report:              13.5 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: 71                 
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: -46                
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 71                 
Correct output: 10                  | Program output: 12                 
Correct output: 3                   | Program output: 82                 
Correct output: 3                   | Program output: 87                 
Correct output: 18                  | Program output: 90                 
Correct output: 1                   | Program output: 20                 
Correct output: 4                   | Program output: 90                 
Correct output: 11                  | Program output: 87                 
Correct output: 8                   | Program output: 11                 
Correct output: 26                  | Program output: 48                 
Correct output: 11                  | Program output: 48                 
Correct output: 36                  | Program output: 92                 
Correct output: 15                  | Program output: 76                 
Correct output: 39                  | Program output: 67                 
Correct output: 50                  | Program output: 77                 
Correct output: 15                  | Program output: 24                 
Correct output: 10                  | Program output: 28                 
Correct output: 35                  | Program output: 88                 
Correct output: 28                  | Program output: 91                 
Correct output: -55                 | Program output: 98                 
Correct output: -69                 | Program output: -12                
Correct output: -51                 | Program output: 49                 
Correct output: -95                 | Program output: 61                 
Correct output: -94                 | Program output: 76                 
Correct output: -59                 | Program output: 31                 
Correct output: -82                 | Program output: -9                 
Correct output: 30                  | Program output: 82                 
Correct output: -67                 | Program output: 74                 
Correct output: -63                 | Program output: -33                
Correct output: -65                 | Program output: 15                 
Correct output: 9                   | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 91                 
Correct output: -76                 | Program output: -1                 
Correct output: -54                 | Program output: 98                 
Correct output: 25                  | Program output: 57                 
Correct output: -91                 | Program output: -81                
Correct output: -99                 | Program output: 71                 
Correct output: -44                 | Program output: 98                 
Correct output: -49                 | Program output: 87                 
Correct output: -82                 | Program output: 88                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 49                 
Correct output: -58                 | Program output: 31                 
Correct output: -44                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: -56                 | Program output: -56                
Correct output: -25                 | Program output: 63                 
Correct output: -23                 | Program output: 42                 
Correct output: -84                 | Program output: 77                 
Correct output: -95                 | Program output: -15                
Correct output: -99                 | Program output: -60                
Correct output: -55                 | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 20                 
Correct output: -59                 | Program output: -39                
Correct output: -2                  | Program output: -2                 
Correct output: -92                 | Program output: -88                
Correct output: -20                 | Program output: 22                 
Correct output: -78                 | Program output: 37                 
Correct output: -17                 | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -35                
Correct output: -92                 | Program output: -60                
Correct output: -64                 | Program output: 15                 
Correct output: 36                  | Program output: 50                 
Correct output: -44                 | Program output: -3                 
Correct output: -44                 | Program output: -19                
Correct output: -99                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: 25                 
Correct output: -88                 | Program output: -52                
Correct output: -80                 | Program output: -80                
Correct output: -44                 | Program output: 80                 
Correct output: -62                 | Program output: -4                 
Correct output: -68                 | Program output: 27                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in3 integer_sub print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_swap (integer_max exec_s (boolean_dup_items boolean_frominteger boolean_stackdepth integer_empty) () ()) ()) () ()) ()))
Lexicase best errors: [1 1 0 1 0 1 1 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 44
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in3 integer_sub print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_swap (integer_max exec_s (boolean_dup_items boolean_frominteger boolean_stackdepth integer_empty) () ()) ()) () ()) ()))
Zero cases best errors: [1 1 0 1 0 1 1 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 44
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 464 1000 466 450 1000 1000 1000 1000)
Population mean number of elite cases: 8.38
Count of perfect (error zero) individuals by case: (0 0 464 0 466 450 0 0 0 0)
Population mean number of perfect (error zero) cases: 1.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction in1})
Best program: (integer_mult exec_swap () (integer_yankdup exec_swap (in3 integer_sub print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot boolean_invert_second_then_and exec_s_when_autoconstructing (exec_y (integer_inc) exec_pop () integer_yank integer_div in4 exec_eq integer_max exec_s (boolean_dup_items boolean_frominteger integer_fromboolean integer_empty in1) () ()) () ()) ()))
Errors: [1 1 0 1 0 1 1 1 1 1]
Total: 8
Mean: 0.8
Genome size: 28
Size: 41
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 8.62
Median total errors in population: 9
Error averages by case: (1.0 1.0 0.536 1.0 0.534 0.55 1.0 1.0 1.0 1.0)
Error minima by case: (1 1 0 1 0 0 1 1 1 1)
Average genome size in population (length): 27.99
Average program size in population (points): 41.618
Average percent parens in population: 0.323
Minimum age in population: 67.11691136575683
Maximum age in population: 72.17803183203426
Average age in population: 70.02661419394616
Median age in population: 70.08068432045233
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 21238875
--- Timings ---
Current time: 1559584170204 milliseconds
Total Time:         123.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.2 seconds, 71.4%
Fitness Testing:     21.2 seconds, 17.2%
Report:              14.0 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_148} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean tagged_148 exec_y (exec_while () exec_pop () integer_yank integer_div in4 exec_eq integer_sub integer_dup_times exec_dup (integer_yank boolean_and) integer_add exec_pop (integer_yank integer_max exec_s (boolean_dup_items boolean_frominteger integer_fromboolean integer_empty integer_rot exec_swap () ()) () ()))) ()))
Lexicase best errors: [1 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_148} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean tagged_148 exec_y (exec_while () exec_pop () integer_yank integer_div in4 exec_eq integer_sub integer_dup_times exec_dup (integer_yank boolean_and) integer_add exec_pop (integer_yank integer_max exec_s (boolean_dup_items boolean_frominteger integer_fromboolean integer_empty integer_rot exec_swap () ()) () ()))) ()))
Zero cases best errors: [1 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 947 1000 1000 1000 306 307 947 947 1000)
Population mean number of elite cases: 8.45
Count of perfect (error zero) individuals by case: (0 947 0 0 0 306 307 947 947 0)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap})
Best program: (integer_mult exec_swap () (integer_max exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (integer_yankdup exec_pop () integer_yank integer_div in4 exec_eq integer_sub exec_s (exec_dup (exec_yankdup boolean_invert_second_then_and in3) integer_lt) (integer_rot exec_swap () ()) ())) () ()) ())))
Errors: [1 0 1 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 50
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 6.546
Median total errors in population: 7
Error averages by case: (1.0 0.053 1.0 1.0 1.0 0.694 0.693 0.053 0.053 1.0)
Error minima by case: (1 0 1 1 1 0 0 0 0 1)
Average genome size in population (length): 28.142
Average program size in population (points): 41.882
Average percent parens in population: 0.323
Minimum age in population: 68.11691136575683
Maximum age in population: 73.35889225386656
Average age in population: 71.50114049269837
Median age in population: 71.56527918046807
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 22077917
--- Timings ---
Current time: 1559584173906 milliseconds
Total Time:         127.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.4 seconds, 71.1%
Fitness Testing:     22.0 seconds, 17.3%
Report:              14.6 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank print_integer integer_eq integer_swap integer_add integer_rot exec_pop () print_integer boolean_swap print_boolean exec_s_when_autoconstructing (boolean_stackdepth boolean_or) (boolean_flush integer_lt) (integer_rot exec_y_when_autoconstructing ())) ()))
Lexicase best errors: [1 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq in3 exec_yank print_integer integer_eq integer_swap integer_add integer_rot exec_pop () print_integer boolean_swap print_boolean exec_s_when_autoconstructing (boolean_stackdepth boolean_or) (boolean_flush integer_lt) (integer_rot exec_y_when_autoconstructing ())) ()))
Zero cases best errors: [1 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 927 927 1000 1000 1000 1 927 927)
Population mean number of elite cases: 8.71
Count of perfect (error zero) individuals by case: (0 0 927 927 0 0 0 1 927 927)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3})
Best program: (integer_mult exec_swap (integer_max exec_swap (in1 integer_fromboolean print_integer integer_eq exec_s_when_autoconstructing (exec_y (integer_yankdup) exec_pop () integer_yank print_integer integer_eq in3 exec_yank integer_fromboolean integer_rot print_boolean exec_s_when_autoconstructing (exec_y (exec_while () exec_pop () integer_yank integer_div in4 exec_eq integer_sub integer_dup_times exec_dup (boolean_and boolean_invert_second_then_and in3))) () ()) () ()) ()) ())
Errors: [1 1 0 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 34
Size: 51
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.291
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.073 0.073 1.0 1.0 1.0 0.999 0.073 0.073)
Error minima by case: (1 1 0 0 1 1 1 0 0 0)
Average genome size in population (length): 28.116
Average program size in population (points): 41.97
Average percent parens in population: 0.323
Minimum age in population: 69.53060072370658
Maximum age in population: 75.11808469758206
Average age in population: 73.07351369266803
Median age in population: 73.10253004568249
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 22830539
--- Timings ---
Current time: 1559584176997 milliseconds
Total Time:         130.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.2 seconds, 70.7%
Fitness Testing:     22.7 seconds, 17.5%
Report:              15.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: 71                 
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: -46                
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 71                 
Correct output: 10                  | Program output: 12                 
Correct output: 3                   | Program output: 82                 
Correct output: 3                   | Program output: 87                 
Correct output: 18                  | Program output: 90                 
Correct output: 1                   | Program output: 20                 
Correct output: 4                   | Program output: 90                 
Correct output: 11                  | Program output: 87                 
Correct output: 8                   | Program output: 11                 
Correct output: 26                  | Program output: 48                 
Correct output: 11                  | Program output: 48                 
Correct output: 36                  | Program output: 92                 
Correct output: 15                  | Program output: 76                 
Correct output: 39                  | Program output: 67                 
Correct output: 50                  | Program output: 77                 
Correct output: 15                  | Program output: 24                 
Correct output: 10                  | Program output: 28                 
Correct output: 35                  | Program output: 88                 
Correct output: 28                  | Program output: 91                 
Correct output: -55                 | Program output: 98                 
Correct output: -69                 | Program output: -12                
Correct output: -51                 | Program output: 49                 
Correct output: -95                 | Program output: 61                 
Correct output: -94                 | Program output: 76                 
Correct output: -59                 | Program output: 31                 
Correct output: -82                 | Program output: -9                 
Correct output: 30                  | Program output: 82                 
Correct output: -67                 | Program output: 74                 
Correct output: -63                 | Program output: -33                
Correct output: -65                 | Program output: 15                 
Correct output: 9                   | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 91                 
Correct output: -76                 | Program output: -1                 
Correct output: -54                 | Program output: 98                 
Correct output: 25                  | Program output: 57                 
Correct output: -91                 | Program output: -81                
Correct output: -99                 | Program output: 71                 
Correct output: -44                 | Program output: 98                 
Correct output: -49                 | Program output: 87                 
Correct output: -82                 | Program output: 88                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 49                 
Correct output: -58                 | Program output: 31                 
Correct output: -44                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: -56                 | Program output: -56                
Correct output: -25                 | Program output: 63                 
Correct output: -23                 | Program output: 42                 
Correct output: -84                 | Program output: 77                 
Correct output: -95                 | Program output: -15                
Correct output: -99                 | Program output: -60                
Correct output: -55                 | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 20                 
Correct output: -59                 | Program output: -39                
Correct output: -2                  | Program output: -2                 
Correct output: -92                 | Program output: -88                
Correct output: -20                 | Program output: 22                 
Correct output: -78                 | Program output: 37                 
Correct output: -17                 | Program output: 68                 
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -35                
Correct output: -92                 | Program output: -60                
Correct output: -64                 | Program output: 15                 
Correct output: 36                  | Program output: 50                 
Correct output: -44                 | Program output: -3                 
Correct output: -44                 | Program output: -19                
Correct output: -99                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: 25                 
Correct output: -88                 | Program output: -52                
Correct output: -80                 | Program output: -80                
Correct output: -44                 | Program output: 80                 
Correct output: -62                 | Program output: -4                 
Correct output: -68                 | Program output: 27                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_swap integer_yankdup integer_yankdup integer_pop exec_rot (exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4)) ())
Lexicase best errors: [1 1 1 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 47
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_swap integer_yankdup integer_yankdup integer_pop exec_rot (exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4)) ())
Zero cases best errors: [1 1 1 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 47
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 1000 1000 935 1000 1000 165)
Population mean number of elite cases: 9.10
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 935 0 0 165)
Population mean number of perfect (error zero) cases: 1.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction in1})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_swap integer_yankdup integer_yankdup integer_pop integer_gt exec_s () () (boolean_dup_items boolean_frominteger integer_fromboolean integer_empty in1))
Errors: [1 1 1 1 1 1 0 1 1 0]
Total: 8
Mean: 0.8
Genome size: 35
Size: 45
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 8.9
Median total errors in population: 9
Error averages by case: (1.0 1.0 1.0 1.0 1.0 1.0 0.065 1.0 1.0 0.835)
Error minima by case: (1 1 1 1 1 1 0 1 1 0)
Average genome size in population (length): 29.301
Average program size in population (points): 42.615
Average percent parens in population: 0.308
Minimum age in population: 70.53060072370658
Maximum age in population: 76.6994220205755
Average age in population: 74.56485559745593
Median age in population: 74.62609585667208
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 23731411
--- Timings ---
Current time: 1559584180058 milliseconds
Total Time:         133.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.6 seconds, 70.3%
Fitness Testing:     23.6 seconds, 17.7%
Report:              15.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) in3 integer_swap integer_yankdup integer_yankdup integer_pop exec_rot (exec_flush exec_while ()) (exec_dup_items print_integer exec_do*count (in4)) ())
Lexicase best errors: [1 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) in3 integer_swap integer_yankdup integer_yankdup integer_pop exec_rot (exec_flush exec_while ()) (exec_dup_items print_integer exec_do*count (in4)) ())
Zero cases best errors: [1 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 921 124 797 794 3 4 1000 1000 1000)
Population mean number of elite cases: 6.64
Count of perfect (error zero) individuals by case: (0 921 124 797 794 3 4 0 0 0)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in4)) integer_swap integer_yankdup integer_yankdup integer_pop exec_rot (exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4)) ())
Errors: [1 0 1 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.357
Median total errors in population: 7
Error averages by case: (1.0 0.079 0.876 0.203 0.206 0.997 0.996 1.0 1.0 1.0)
Error minima by case: (1 0 0 0 0 0 0 1 1 1)
Average genome size in population (length): 34.66
Average program size in population (points): 46.533
Average percent parens in population: 0.255
Minimum age in population: 73.63923404203427
Maximum age in population: 77.41056817107506
Average age in population: 75.97890209702862
Median age in population: 75.98837824654267
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 447
Genome diversity (% unique genomes):	 0.417
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 458
Syntactic diversity (% unique Push programs):	 0.404
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 25167074
--- Timings ---
Current time: 1559584183723 milliseconds
Total Time:         136.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.1 seconds, 69.5%
Fitness Testing:     25.0 seconds, 18.3%
Report:              16.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 630
Test mean error for best: 0.63000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: 71                 
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: 98                 
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 49                 
Correct output: -95                 | Program output: 61                 
Correct output: -94                 | Program output: 76                 
Correct output: -59                 | Program output: 31                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -33                
Correct output: -65                 | Program output: 15                 
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -1                 
Correct output: -54                 | Program output: 98                 
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: 87                 
Correct output: -82                 | Program output: 88                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 63                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 77                 
Correct output: -95                 | Program output: -15                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: 22                 
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: -60                
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -52                
Correct output: -80                 | Program output: -80                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -4                 
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Lexicase best program: (boolean_or exec_swap () (integer_max exec_swap (exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_swap integer_yankdup integer_yankdup integer_pop boolean_frominteger exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Lexicase best errors: [0 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Zero cases best program: (boolean_or exec_swap () (integer_max exec_swap (exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_swap integer_yankdup integer_yankdup integer_pop boolean_frominteger exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Zero cases best errors: [0 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (602 1000 903 604 1000 552 244 1000 244 602)
Population mean number of elite cases: 6.75
Count of perfect (error zero) individuals by case: (602 0 903 604 0 552 244 0 244 602)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Best program: (boolean_or exec_swap () (integer_max exec_swap (exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_swap integer_yankdup integer_yankdup integer_pop boolean_frominteger exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Errors: [0 1 0 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 51
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.249
Median total errors in population: 6
Error averages by case: (0.398 1.0 0.097 0.396 1.0 0.448 0.756 1.0 0.756 0.398)
Error minima by case: (0 1 0 0 1 0 0 1 0 0)
Average genome size in population (length): 35.808
Average program size in population (points): 47.666
Average percent parens in population: 0.249
Minimum age in population: 75.76829777001397
Maximum age in population: 78.99719500917227
Average age in population: 77.7565714647782
Median age in population: 77.7958115379022
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.521
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 26550421
--- Timings ---
Current time: 1559584187796 milliseconds
Total Time:         140.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.1 seconds, 68.9%
Fitness Testing:     26.3 seconds, 18.6%
Report:              17.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Lexicase best program: (boolean_or exec_swap () (integer_max exec_swap (exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in4)) integer_swap integer_yankdup integer_yankdup integer_pop boolean_frominteger exec_flush exec_while ()) (integer_shove exec_yank exec_do*count (in4))))
Lexicase best errors: [1 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Zero cases best program: (boolean_or exec_swap () (integer_max exec_swap (exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in4)) integer_swap integer_yankdup integer_yankdup integer_pop boolean_frominteger exec_flush exec_while ()) (integer_shove exec_yank exec_do*count (in4))))
Zero cases best errors: [1 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 428 393 429 399 23 427 429 59 430)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (0 428 393 429 399 23 427 429 59 430)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Best program: (boolean_or exec_swap () (integer_max exec_swap (exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_yank integer_div in4 exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4)))) ()))
Errors: [1 0 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 30
Percent parens: 0.367
--- Population Statistics ---
Average total errors in population: 6.983
Median total errors in population: 8
Error averages by case: (1.0 0.572 0.607 0.571 0.601 0.977 0.573 0.571 0.941 0.57)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.327
Average program size in population (points): 48.845
Average percent parens in population: 0.256
Minimum age in population: 76.9687996611318
Maximum age in population: 80.88392406020239
Average age in population: 79.42770889170185
Median age in population: 79.48088315209904
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 243
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 244
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 27867401
--- Timings ---
Current time: 1559584191858 milliseconds
Total Time:         145.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.7 seconds, 68.5%
Fitness Testing:     27.5 seconds, 18.9%
Report:              18.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Lexicase best errors: [1 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Zero cases best errors: [1 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 876 471 471 472 878 303 234 1000 876)
Population mean number of elite cases: 5.81
Count of perfect (error zero) individuals by case: (233 876 471 471 472 878 303 234 0 876)
Population mean number of perfect (error zero) cases: 4.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Errors: [1 0 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 18
Size: 25
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 5.186
Median total errors in population: 4
Error averages by case: (0.767 0.124 0.529 0.529 0.528 0.122 0.697 0.766 1.0 0.124)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 36.978
Average program size in population (points): 49.871
Average percent parens in population: 0.260
Minimum age in population: 77.9687996611318
Maximum age in population: 82.84508159219513
Average age in population: 80.91632450298277
Median age in population: 81.00742675419536
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 29142077
--- Timings ---
Current time: 1559584195140 milliseconds
Total Time:         148.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.6 seconds, 68.3%
Fitness Testing:     28.7 seconds, 19.3%
Report:              18.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Lexicase best errors: [0 0 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Zero cases best errors: [0 0 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (536 535 1000 918 5 1000 917 917 893 8)
Population mean number of elite cases: 6.73
Count of perfect (error zero) individuals by case: (536 535 0 918 5 0 917 917 893 8)
Population mean number of perfect (error zero) cases: 4.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Errors: [0 0 1 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 18
Size: 25
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 5.271
Median total errors in population: 4
Error averages by case: (0.464 0.465 1.0 0.082 0.995 1.0 0.083 0.083 0.107 0.992)
Error minima by case: (0 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 24.641
Average program size in population (points): 33.757
Average percent parens in population: 0.274
Minimum age in population: 78.9687996611318
Maximum age in population: 83.96078593485866
Average age in population: 82.18793232365519
Median age in population: 82.39458682422323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 445
Genome diversity (% unique genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 449
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 29689130
--- Timings ---
Current time: 1559584197872 milliseconds
Total Time:         151.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.6 seconds, 68.3%
Fitness Testing:     29.3 seconds, 19.3%
Report:              18.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Lexicase best errors: [1 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Zero cases best errors: [1 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (150 516 527 390 150 513 542 513 528 1000)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (150 516 527 390 150 513 542 513 528 0)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Errors: [1 0 0 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 18
Size: 25
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 6.171
Median total errors in population: 6
Error averages by case: (0.85 0.484 0.473 0.61 0.85 0.487 0.458 0.487 0.472 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 31.006
Average program size in population (points): 41.515
Average percent parens in population: 0.258
Minimum age in population: 82.00386477170277
Maximum age in population: 85.31192372019012
Average age in population: 84.06301969461981
Median age in population: 84.23538949061783
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.409
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.401
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 30365972
--- Timings ---
Current time: 1559584200531 milliseconds
Total Time:         154.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.4 seconds, 68.3%
Fitness Testing:     29.9 seconds, 19.4%
Report:              18.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 64                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: 58                 
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: 11                 
Correct output: -56                 | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: 34                 
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: 22                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup integer_shove in1 integer_yankdup print_integer exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Lexicase best errors: [1 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 23
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup integer_shove in1 integer_yankdup print_integer exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Zero cases best errors: [1 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 23
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (401 500 1000 501 502 527 1000 926 1000 746)
Population mean number of elite cases: 7.10
Count of perfect (error zero) individuals by case: (401 500 0 501 502 527 0 926 0 746)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty})
Best program: (boolean_or exec_swap () (integer_max exec_swap (exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () exec_y (exec_dup_items) integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) ())) ()))
Errors: [1 0 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 40
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.897
Median total errors in population: 11/2
Error averages by case: (0.599 0.5 1.0 0.499 0.498 0.473 1.0 0.074 1.0 0.254)
Error minima by case: (0 0 1 0 0 0 1 0 1 0)
Average genome size in population (length): 25.892
Average program size in population (points): 34.884
Average percent parens in population: 0.268
Minimum age in population: 83.15094433833995
Maximum age in population: 87.23538949061783
Average age in population: 85.3194830462265
Median age in population: 85.51630376141485
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 212
Genome diversity (% unique genomes):	 0.395
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.386
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 30973309
--- Timings ---
Current time: 1559584203727 milliseconds
Total Time:         157.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.4 seconds, 68.4%
Fitness Testing:     30.6 seconds, 19.5%
Report:              19.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Lexicase best program: (integer_mult exec_swap () (integer_max integer_max exec_swap (in1 in1 integer_yankdup integer_shove in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () exec_rot (integer_div in4 boolean_swap) (boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_swap integer_yankdup integer_yankdup integer_pop boolean_frominteger exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Lexicase best errors: [0 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 52
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Zero cases best program: (integer_mult exec_swap () (integer_max integer_max exec_swap (in1 in1 integer_yankdup integer_shove in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () exec_rot (integer_div in4 boolean_swap) (boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_swap integer_yankdup integer_yankdup integer_pop boolean_frominteger exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Zero cases best errors: [0 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 52
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (937 763 1000 937 1000 937 8 1000 616 930)
Population mean number of elite cases: 8.13
Count of perfect (error zero) individuals by case: (937 763 0 937 0 937 8 0 616 930)
Population mean number of perfect (error zero) cases: 5.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup integer_shove in1 integer_yankdup print_integer exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Errors: [0 0 1 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 16
Size: 23
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 4.872
Median total errors in population: 5
Error averages by case: (0.063 0.237 1.0 0.063 1.0 0.063 0.992 1.0 0.384 0.07)
Error minima by case: (0 0 1 0 1 0 0 1 0 0)
Average genome size in population (length): 23.579
Average program size in population (points): 32.07
Average percent parens in population: 0.275
Minimum age in population: 84.52193161593146
Maximum age in population: 88.71902805970637
Average age in population: 86.74724699061628
Median age in population: 86.70861468117447
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 254
Genome diversity (% unique genomes):	 0.43
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.422
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 31528161
--- Timings ---
Current time: 1559584206351 milliseconds
Total Time:         160.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       109.3 seconds, 68.3%
Fitness Testing:     31.2 seconds, 19.5%
Report:              19.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 545
Test mean error for best: 0.54500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: -46                
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: -12                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -9                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: -81                
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: 22                 
Correct output: -44                 | Program output: 35                 
Correct output: -28                 | Program output: -28                
Correct output: -56                 | Program output: -56                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -60                
Correct output: -55                 | Program output: 34                 
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: 13                 
Correct output: -78                 | Program output: 79                 
Correct output: -59                 | Program output: -39                
Correct output: -2                  | Program output: -2                 
Correct output: -92                 | Program output: -88                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: 50                 
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -35                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: -3                 
Correct output: -44                 | Program output: -19                
Correct output: -99                 | Program output: 67                 
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: 7                  
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: 43                 
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 10                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup integer_shove in1 integer_yankdup print_integer integer_sub in3 boolean_stackdepth tag_boolean_258 boolean_dup_items tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_swap integer_yankdup integer_yankdup print_boolean boolean_frominteger exec_flush exec_while () exec_dup_items exec_yank exec_do*count (in4))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 50
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup integer_shove in1 integer_yankdup print_integer integer_sub in3 boolean_stackdepth tag_boolean_258 boolean_dup_items tag_boolean_258 boolean_dup_items exec_y (exec_pop () integer_yank integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_swap integer_yankdup integer_yankdup print_boolean boolean_frominteger exec_flush exec_while () exec_dup_items exec_yank exec_do*count (in4))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 50
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (908 900 382 911 1000 923 381 16 924 1000)
Population mean number of elite cases: 7.34
Count of perfect (error zero) individuals by case: (908 900 382 911 0 923 381 16 924 0)
Population mean number of perfect (error zero) cases: 5.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup integer_shove in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () print_boolean integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_max integer_yankdup integer_yankdup integer_pop boolean_frominteger exec_flush exec_while () exec_dup_items exec_yank exec_do*count (in4))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 39
Size: 48
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 4.655
Median total errors in population: 5
Error averages by case: (0.092 0.1 0.618 0.089 1.0 0.077 0.619 0.984 0.076 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 30.104
Average program size in population (points): 38.574
Average percent parens in population: 0.233
Minimum age in population: 85.8185993904744
Maximum age in population: 90.42712152707905
Average age in population: 88.5697770327882
Median age in population: 88.66917151744126
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 224
Genome diversity (% unique genomes):	 0.414
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 230
Syntactic diversity (% unique Push programs):	 0.405
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 32363016
--- Timings ---
Current time: 1559584209989 milliseconds
Total Time:         163.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.3 seconds, 68.2%
Fitness Testing:     32.0 seconds, 19.6%
Report:              19.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: 18                 
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: 45                 
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 48                 
Correct output: 6                   | Program output: 32                 
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 53                 
Correct output: 18                  | Program output: 29                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 55                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 91                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 15                  | Program output: 81                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -71                
Correct output: -59                 | Program output: 91                 
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 53                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 69                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: 21                 
Correct output: -93                 | Program output: 89                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: 71                 
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: 48                 
Correct output: -95                 | Program output: -93                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 70                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 93                 
Correct output: -2                  | Program output: 93                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -11                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 71                 
Correct output: -92                 | Program output: 40                 
Correct output: -64                 | Program output: 71                 
Correct output: 36                  | Program output: 78                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: 46                 
Correct output: -80                 | Program output: -13                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer exec_while ()) (exec_noop exec_yank exec_do*count (in4))))
Lexicase best errors: [1 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 19
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in1 integer_yankdup print_integer exec_while ()) (exec_noop exec_yank exec_do*count (in4))))
Zero cases best errors: [1 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 19
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 805 789 210 13 3 210 3 210 805)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (0 805 789 210 13 3 210 3 210 805)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in4 in1 integer_yankdup integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop exec_yank exec_do*count (in4))))
Errors: [1 0 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 16
Size: 23
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.952
Median total errors in population: 7
Error averages by case: (1.0 0.195 0.211 0.79 0.987 0.997 0.79 0.997 0.79 0.195)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.607
Average program size in population (points): 42.834
Average percent parens in population: 0.197
Minimum age in population: 87.66745157594463
Maximum age in population: 92.05440262351772
Average age in population: 90.22758493417923
Median age in population: 90.29728655151185
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 33309179
--- Timings ---
Current time: 1559584212964 milliseconds
Total Time:         166.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.1 seconds, 67.9%
Fitness Testing:     33.0 seconds, 19.8%
Report:              20.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 547
Test mean error for best: 0.54700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -52                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 96                 
Correct output: 3                   | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 4                  
Correct output: 4                   | Program output: 58                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 43                 
Correct output: 26                  | Program output: 90                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 99                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 58                 
Correct output: 35                  | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 58                 
Correct output: 30                  | Program output: 65                 
Correct output: -67                 | Program output: 84                 
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 86                 
Correct output: -80                 | Program output: -9                 
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 52                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 70                 
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 85                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 62                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 88                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -55                
Correct output: -87                 | Program output: -6                 
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 37                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 90                 
Correct output: -44                 | Program output: 50                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -39                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup integer_shove in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () print_boolean integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_max integer_yankdup integer_yankdup integer_pop boolean_frominteger exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Lexicase best errors: [1 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup integer_shove in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () print_boolean integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_max integer_yankdup integer_yankdup integer_pop boolean_frominteger exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Zero cases best errors: [1 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (826 1000 446 105 272 97 643 97 97 1000)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (826 0 446 105 272 97 643 97 97 0)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_258} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_empty} {:close 2, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Best program: (integer_mult exec_swap () (integer_max exec_swap (integer_mult exec_swap () (integer_max exec_swap (in1 in1 integer_yankdup integer_shove in1 integer_yankdup print_integer integer_sub integer_yank boolean_stackdepth tag_boolean_258 boolean_dup_items exec_y (exec_pop () print_boolean integer_div in4 boolean_swap) boolean_yank boolean_xor integer_gt boolean_frominteger exec_empty) (in3)) integer_max integer_yankdup integer_yankdup integer_pop boolean_frominteger exec_flush exec_while ()) (exec_dup_items exec_yank exec_do*count (in4))))
Errors: [1 1 1 0 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 43
Size: 56
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 7.417
Median total errors in population: 7
Error averages by case: (0.174 1.0 0.554 0.895 0.728 0.903 0.357 0.903 0.903 1.0)
Error minima by case: (0 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 24.027
Average program size in population (points): 31.699
Average percent parens in population: 0.260
Minimum age in population: 88.66745157594463
Maximum age in population: 93.39134040025333
Average age in population: 91.89095554090585
Median age in population: 91.90604994330651
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.337
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.325
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 33858729
--- Timings ---
Current time: 1559584216063 milliseconds
Total Time:         169.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       114.9 seconds, 67.9%
Fitness Testing:     33.5 seconds, 19.8%
Report:              20.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: 16                 
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: 77                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: 61                 
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 26                 
Correct output: 11                  | Program output: 80                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 74                 
Correct output: 15                  | Program output: 72                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 71                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: 5                  
Correct output: 30                  | Program output: 45                 
Correct output: -67                 | Program output: 7                  
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 78                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -48                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: 14                 
Correct output: -44                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -3                 
Correct output: -57                 | Program output: 21                 
Correct output: -58                 | Program output: -51                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 47                 
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 19                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 42                 
Correct output: -2                  | Program output: 59                 
Correct output: -92                 | Program output: -18                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: 11                 
Correct output: -36                 | Program output: -7                 
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 3                  
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: 31                 
Correct output: -44                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (integer_mult exec_swap () (integer_max exec_swap (in4 in1 boolean_shove integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop exec_yank exec_do*count (integer_fromboolean))))
Lexicase best errors: [0 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 23
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (integer_mult exec_swap () (integer_max exec_swap (in4 in1 boolean_shove integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop exec_yank exec_do*count (integer_fromboolean))))
Zero cases best errors: [0 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 23
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (923 520 888 1000 1000 495 1000 495 518 392)
Population mean number of elite cases: 7.23
Count of perfect (error zero) individuals by case: (923 520 888 0 0 495 0 495 518 392)
Population mean number of perfect (error zero) cases: 4.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in4})
Best program: (integer_mult exec_swap () (integer_max exec_swap (in4 in1 boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) exec_yank exec_do*count (in4)))
Errors: [0 0 0 1 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 16
Size: 23
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 5.769
Median total errors in population: 6
Error averages by case: (0.077 0.48 0.112 1.0 1.0 0.505 1.0 0.505 0.482 0.608)
Error minima by case: (0 0 0 1 1 0 1 0 0 0)
Average genome size in population (length): 22.15
Average program size in population (points): 29.863
Average percent parens in population: 0.270
Minimum age in population: 91.10960249867072
Maximum age in population: 95.12707568122764
Average age in population: 93.862321849033
Median age in population: 93.86281096220195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.393
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.388
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 34469179
--- Timings ---
Current time: 1559584218645 milliseconds
Total Time:         172.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       116.7 seconds, 67.7%
Fitness Testing:     34.1 seconds, 19.8%
Report:              21.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 25
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 25
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 912 911 3 3 6 914 3 938 3)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (2 912 911 3 3 6 914 3 938 3)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 16
Size: 25
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 6.305
Median total errors in population: 6
Error averages by case: (0.998 0.088 0.089 0.997 0.997 0.994 0.086 0.997 0.062 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.799
Average program size in population (points): 23.69
Average percent parens in population: 0.290
Minimum age in population: 94.70398699921373
Maximum age in population: 96.9949433217148
Average age in population: 95.78286623763769
Median age in population: 95.79401588117823
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.27
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.261
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 34659578
--- Timings ---
Current time: 1559584220895 milliseconds
Total Time:         174.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       118.6 seconds, 67.9%
Fitness Testing:     34.4 seconds, 19.7%
Report:              21.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 25
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 25
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (782 115 961 816 961 804 957 806 115 782)
Population mean number of elite cases: 7.10
Count of perfect (error zero) individuals by case: (782 115 961 816 961 804 957 806 115 782)
Population mean number of perfect (error zero) cases: 7.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()))
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 16
Size: 25
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 2.901
Median total errors in population: 2
Error averages by case: (0.218 0.885 0.039 0.184 0.039 0.196 0.043 0.194 0.885 0.218)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.894
Average program size in population (points): 25.644
Average percent parens in population: 0.344
Minimum age in population: 95.70398699921373
Maximum age in population: 98.44594817860408
Average age in population: 97.78779159606003
Median age in population: 97.44594817860408
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 672
Genome diversity (% unique genomes):	 0.21
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 675
Syntactic diversity (% unique Push programs):	 0.207
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 34828673
--- Timings ---
Current time: 1559584223038 milliseconds
Total Time:         176.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       120.3 seconds, 68.1%
Fitness Testing:     34.6 seconds, 19.6%
Report:              21.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 25
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 25
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (941 691 523 933 520 695 520 693 354 933)
Population mean number of elite cases: 6.80
Count of perfect (error zero) individuals by case: (941 691 523 933 520 695 520 693 354 933)
Population mean number of perfect (error zero) cases: 6.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 16
Size: 25
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 3.197
Median total errors in population: 3
Error averages by case: (0.059 0.309 0.477 0.067 0.48 0.305 0.48 0.307 0.646 0.067)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.355
Average program size in population (points): 28.269
Average percent parens in population: 0.323
Minimum age in population: 97.5749675889089
Maximum age in population: 100.4459481786041
Average age in population: 99.13543423811535
Median age in population: 99.23967357965596
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 408
Genome diversity (% unique genomes):	 0.286
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 411
Syntactic diversity (% unique Push programs):	 0.283
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 35035470
--- Timings ---
Current time: 1559584225250 milliseconds
Total Time:         179.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       122.1 seconds, 68.3%
Fitness Testing:     34.8 seconds, 19.5%
Report:              21.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 470
Test mean error for best: 0.47000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 6                   | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 53                 
Correct output: 3                   | Program output: 26                 
Correct output: 18                  | Program output: 30                 
Correct output: 1                   | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 32                 
Correct output: 26                  | Program output: 97                 
Correct output: 11                  | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 58                 
Correct output: 50                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 44                 
Correct output: -55                 | Program output: -43                
Correct output: -69                 | Program output: 57                 
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -31                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -45                
Correct output: -65                 | Program output: -27                
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 95                 
Correct output: -76                 | Program output: -4                 
Correct output: -54                 | Program output: -41                
Correct output: 25                  | Program output: 37                 
Correct output: -91                 | Program output: 63                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 50                 
Correct output: -56                 | Program output: 92                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 82                 
Correct output: -100                | Program output: -68                
Correct output: -78                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -11                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -80                
Correct output: -44                 | Program output: -25                
Correct output: -62                 | Program output: -32                
Correct output: -68                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_mult exec_swap () (in2 exec_swap () (in3 in1 boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) exec_noop))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 19
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_mult exec_swap () (in2 exec_swap () (in3 in1 boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) exec_noop))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 19
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (807 959 783 780 781 124 959 742 271 781)
Population mean number of elite cases: 6.99
Count of perfect (error zero) individuals by case: (807 959 783 780 781 124 959 742 271 781)
Population mean number of perfect (error zero) cases: 6.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Best program: (integer_mult exec_swap () (in2 exec_swap () (in3 in1 boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) exec_noop))
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 13
Size: 19
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 3.013
Median total errors in population: 2
Error averages by case: (0.193 0.041 0.217 0.22 0.219 0.876 0.041 0.258 0.729 0.219)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.454
Average program size in population (points): 26.035
Average percent parens in population: 0.335
Minimum age in population: 98.91370743094303
Maximum age in population: 102.3644566414259
Average age in population: 100.7718401064555
Median age in population: 100.7829651042476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 442
Genome diversity (% unique genomes):	 0.269
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 446
Syntactic diversity (% unique Push programs):	 0.266
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 35215853
--- Timings ---
Current time: 1559584227504 milliseconds
Total Time:         181.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.0 seconds, 68.4%
Fitness Testing:     35.0 seconds, 19.3%
Report:              22.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: 49                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -67                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -9                 
Correct output: -56                 | Program output: -1                 
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -82                
Correct output: -87                 | Program output: -50                
Correct output: 16                  | Program output: 30                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: 49                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -31                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -25                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 25
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 25
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (949 808 374 621 603 373 621 374 949 593)
Population mean number of elite cases: 6.26
Count of perfect (error zero) individuals by case: (949 808 374 621 603 373 621 374 949 593)
Population mean number of perfect (error zero) cases: 6.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Best program: (integer_mult exec_swap () (in2 exec_swap () (in4 in1 boolean_shove integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ())))
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 16
Size: 25
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 3.735
Median total errors in population: 4
Error averages by case: (0.051 0.192 0.626 0.379 0.397 0.627 0.379 0.626 0.051 0.407)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.337
Average program size in population (points): 23.208
Average percent parens in population: 0.341
Minimum age in population: 100.0333989807078
Maximum age in population: 104.0105473165573
Average age in population: 102.4478643716132
Median age in population: 102.5628879916888
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 191
Genome diversity (% unique genomes):	 0.264
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.26
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 35370840
--- Timings ---
Current time: 1559584229669 milliseconds
Total Time:         183.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       125.9 seconds, 68.6%
Fitness Testing:     35.2 seconds, 19.2%
Report:              22.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: -46                
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -28                
Correct output: -56                 | Program output: -56                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: -2                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -80                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 32
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 32
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (564 531 400 781 931 931 493 401 178 650)
Population mean number of elite cases: 5.86
Count of perfect (error zero) individuals by case: (564 531 400 781 931 931 493 401 178 650)
Population mean number of perfect (error zero) cases: 5.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction exec_noop})
Best program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 20
Size: 32
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 4.14
Median total errors in population: 4
Error averages by case: (0.436 0.469 0.6 0.219 0.069 0.069 0.507 0.599 0.822 0.35)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.533
Average program size in population (points): 24.772
Average percent parens in population: 0.334
Minimum age in population: 101.3644566414259
Maximum age in population: 105.5846422230997
Average age in population: 103.9588923569317
Median age in population: 103.9759307793791
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 234
Genome diversity (% unique genomes):	 0.306
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 235
Syntactic diversity (% unique Push programs):	 0.296
Total error diversity:				 0.01
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 35540770
--- Timings ---
Current time: 1559584231892 milliseconds
Total Time:         185.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       127.7 seconds, 68.8%
Fitness Testing:     35.4 seconds, 19.1%
Report:              22.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 67
Successful program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 32


Auto-simplifying with starting size: 32
step: 0
program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 32

step: 500
program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 32

step: 1000
program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 32

step: 1500
program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 32

step: 2000
program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 32

step: 2500
program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 32

step: 3000
program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 32

step: 3500
program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 32

step: 4000
program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 32

step: 4500
program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 32

step: 5000
program: (integer_mult exec_swap () (in2 exec_swap (in4 in1 boolean_shove integer_min exec_rot (boolean_pop) (in3 integer_min exec_rot (boolean_pop integer_min in1 integer_yankdup print_integer exec_while ()) (exec_noop) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 32

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -21                
Correct output: -74                 | Program output: -74                
Correct output: -26                 | Program output: -26                
Correct output: -46                 | Program output: -46                
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: 40                  | Program output: 40                 
Correct output: -41                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 36                  | Program output: 36                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 26                  | Program output: 26                 
Correct output: 11                  | Program output: 11                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 50                 
Correct output: 15                  | Program output: 15                 
Correct output: 10                  | Program output: 10                 
Correct output: 35                  | Program output: 35                 
Correct output: 28                  | Program output: 28                 
Correct output: -55                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: 30                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -63                 | Program output: -63                
Correct output: -65                 | Program output: -65                
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -49                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -28                
Correct output: -56                 | Program output: -56                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -99                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: 16                  | Program output: 16                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -2                  | Program output: -2                 
Correct output: -92                 | Program output: -92                
Correct output: -20                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -17                 | Program output: -17                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 36                  | Program output: 36                 
Correct output: -44                 | Program output: -44                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -80                 | Program output: -80                
Correct output: -44                 | Program output: -44                
Correct output: -62                 | Program output: -62                
Correct output: -68                 | Program output: -68                
;;******************************
