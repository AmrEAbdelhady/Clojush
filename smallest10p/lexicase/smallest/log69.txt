Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[85 85 -75 85] -75] [[81 -34 -34 -34] -34] [[-51 54 -51 -51] -51] [[100 100 100 29] 29] [[75 37 75 75] 37] [[39 39 25 39] 25] [[-86 -73 -73 -73] -86] [[34 34 34 -5] -5] [[-24 -24 57 -24] -24] [[-78 -78 -78 -90] -90] [(26 26 26 26) 26] [(55 55 55 55) 55] [(21 21 21 21) 21] [(9 9 9 9) 9] [(-1 -1 -1 -1) -1] [(48 34 87 36) 34] [(98 60 73 65) 60] [(75 69 4 87) 4] [(38 39 92 5) 5] [(32 18 93 20) 18] [(66 85 97 6) 6] [(40 42 53 40) 40] [(55 73 68 62) 55] [(100 48 71 59) 48] [(30 23 69 25) 23] [(20 19 25 76) 19] [(74 67 4 30) 4] [(20 43 17 91) 17] [(86 87 22 44) 22] [(97 79 10 61) 10] [(76 36 13 89) 13] [(32 60 19 50) 19] [(84 12 55 38) 12] [(55 38 50 74) 38] [(84 55 44 18) 18] [(35 9 96 13) 9] [(-64 -58 -97 -81) -97] [(-55 80 85 -96) -96] [(-42 -50 -38 -59) -59] [(-5 2 -26 77) -26] [(6 -2 93 100) -2] [(-47 -24 -32 -19) -47] [(80 -44 -34 95) -44] [(36 9 42 -22) -22] [(96 22 67 93) 22] [(-9 1 78 -38) -38] [(63 83 -56 4) -56] [(-77 31 11 35) -77] [(-43 45 7 -100) -100] [(-82 61 40 -44) -82] [(-14 -61 -67 -33) -67] [(-4 56 10 -32) -32] [(85 -98 92 -85) -98] [(-62 6 28 92) -62] [(-33 25 -95 25) -95] [(-97 -83 3 -28) -97] [(50 -91 -57 -15) -91] [(60 54 -85 -42) -85] [(-85 42 -48 -44) -85] [(-66 -13 -31 -21) -66] [(-72 -57 59 44) -72] [(56 28 22 -39) -39] [(-45 -4 33 91) -45] [(-21 73 -99 -56) -99] [(45 -28 -39 -24) -39] [(35 39 -25 14) -25] [(-53 85 -17 21) -53] [(67 -100 -21 -29) -100] [(-54 16 -62 -73) -73] [(-79 77 -9 2) -79] [(-41 -40 23 44) -41] [(-88 80 -10 -66) -88] [(83 -46 -36 69) -46] [(-16 48 -33 -17) -33] [(65 57 -14 -22) -22] [(93 -99 2 -37) -99] [(20 -37 -87 40) -87] [(29 85 -31 26) -31] [(12 -66 -73 -55) -73] [(44 51 -34 43) -34] [(80 -100 -91 -44) -100] [(-65 34 -67 73) -67] [(13 15 8 -94) -94] [(-61 52 74 -20) -61] [(23 -50 -67 -67) -67] [(-97 43 92 68) -97] [(-90 73 -10 -76) -90] [(-32 7 -54 68) -54] [(-61 -67 6 37) -67] [(38 -98 -100 93) -100] [(-77 89 -30 -62) -77] [(-20 -36 -13 -27) -36] [(-23 50 -39 -68) -68] [(1 -40 -17 -60) -60] [(-84 -37 -56 16) -84])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[85 85 -75 85] -75]
Train Case:   6 | Input/Output: [[81 -34 -34 -34] -34]
Train Case:   7 | Input/Output: [[-51 54 -51 -51] -51]
Train Case:   8 | Input/Output: [[100 100 100 29] 29]
Train Case:   9 | Input/Output: [[75 37 75 75] 37]
Train Case:  10 | Input/Output: [[39 39 25 39] 25]
Train Case:  11 | Input/Output: [[-86 -73 -73 -73] -86]
Train Case:  12 | Input/Output: [[34 34 34 -5] -5]
Train Case:  13 | Input/Output: [[-24 -24 57 -24] -24]
Train Case:  14 | Input/Output: [[-78 -78 -78 -90] -90]
Train Case:  15 | Input/Output: [(26 26 26 26) 26]
Train Case:  16 | Input/Output: [(55 55 55 55) 55]
Train Case:  17 | Input/Output: [(21 21 21 21) 21]
Train Case:  18 | Input/Output: [(9 9 9 9) 9]
Train Case:  19 | Input/Output: [(-1 -1 -1 -1) -1]
Train Case:  20 | Input/Output: [(48 34 87 36) 34]
Train Case:  21 | Input/Output: [(98 60 73 65) 60]
Train Case:  22 | Input/Output: [(75 69 4 87) 4]
Train Case:  23 | Input/Output: [(38 39 92 5) 5]
Train Case:  24 | Input/Output: [(32 18 93 20) 18]
Train Case:  25 | Input/Output: [(66 85 97 6) 6]
Train Case:  26 | Input/Output: [(40 42 53 40) 40]
Train Case:  27 | Input/Output: [(55 73 68 62) 55]
Train Case:  28 | Input/Output: [(100 48 71 59) 48]
Train Case:  29 | Input/Output: [(30 23 69 25) 23]
Train Case:  30 | Input/Output: [(20 19 25 76) 19]
Train Case:  31 | Input/Output: [(74 67 4 30) 4]
Train Case:  32 | Input/Output: [(20 43 17 91) 17]
Train Case:  33 | Input/Output: [(86 87 22 44) 22]
Train Case:  34 | Input/Output: [(97 79 10 61) 10]
Train Case:  35 | Input/Output: [(76 36 13 89) 13]
Train Case:  36 | Input/Output: [(32 60 19 50) 19]
Train Case:  37 | Input/Output: [(84 12 55 38) 12]
Train Case:  38 | Input/Output: [(55 38 50 74) 38]
Train Case:  39 | Input/Output: [(84 55 44 18) 18]
Train Case:  40 | Input/Output: [(35 9 96 13) 9]
Train Case:  41 | Input/Output: [(-64 -58 -97 -81) -97]
Train Case:  42 | Input/Output: [(-55 80 85 -96) -96]
Train Case:  43 | Input/Output: [(-42 -50 -38 -59) -59]
Train Case:  44 | Input/Output: [(-5 2 -26 77) -26]
Train Case:  45 | Input/Output: [(6 -2 93 100) -2]
Train Case:  46 | Input/Output: [(-47 -24 -32 -19) -47]
Train Case:  47 | Input/Output: [(80 -44 -34 95) -44]
Train Case:  48 | Input/Output: [(36 9 42 -22) -22]
Train Case:  49 | Input/Output: [(96 22 67 93) 22]
Train Case:  50 | Input/Output: [(-9 1 78 -38) -38]
Train Case:  51 | Input/Output: [(63 83 -56 4) -56]
Train Case:  52 | Input/Output: [(-77 31 11 35) -77]
Train Case:  53 | Input/Output: [(-43 45 7 -100) -100]
Train Case:  54 | Input/Output: [(-82 61 40 -44) -82]
Train Case:  55 | Input/Output: [(-14 -61 -67 -33) -67]
Train Case:  56 | Input/Output: [(-4 56 10 -32) -32]
Train Case:  57 | Input/Output: [(85 -98 92 -85) -98]
Train Case:  58 | Input/Output: [(-62 6 28 92) -62]
Train Case:  59 | Input/Output: [(-33 25 -95 25) -95]
Train Case:  60 | Input/Output: [(-97 -83 3 -28) -97]
Train Case:  61 | Input/Output: [(50 -91 -57 -15) -91]
Train Case:  62 | Input/Output: [(60 54 -85 -42) -85]
Train Case:  63 | Input/Output: [(-85 42 -48 -44) -85]
Train Case:  64 | Input/Output: [(-66 -13 -31 -21) -66]
Train Case:  65 | Input/Output: [(-72 -57 59 44) -72]
Train Case:  66 | Input/Output: [(56 28 22 -39) -39]
Train Case:  67 | Input/Output: [(-45 -4 33 91) -45]
Train Case:  68 | Input/Output: [(-21 73 -99 -56) -99]
Train Case:  69 | Input/Output: [(45 -28 -39 -24) -39]
Train Case:  70 | Input/Output: [(35 39 -25 14) -25]
Train Case:  71 | Input/Output: [(-53 85 -17 21) -53]
Train Case:  72 | Input/Output: [(67 -100 -21 -29) -100]
Train Case:  73 | Input/Output: [(-54 16 -62 -73) -73]
Train Case:  74 | Input/Output: [(-79 77 -9 2) -79]
Train Case:  75 | Input/Output: [(-41 -40 23 44) -41]
Train Case:  76 | Input/Output: [(-88 80 -10 -66) -88]
Train Case:  77 | Input/Output: [(83 -46 -36 69) -46]
Train Case:  78 | Input/Output: [(-16 48 -33 -17) -33]
Train Case:  79 | Input/Output: [(65 57 -14 -22) -22]
Train Case:  80 | Input/Output: [(93 -99 2 -37) -99]
Train Case:  81 | Input/Output: [(20 -37 -87 40) -87]
Train Case:  82 | Input/Output: [(29 85 -31 26) -31]
Train Case:  83 | Input/Output: [(12 -66 -73 -55) -73]
Train Case:  84 | Input/Output: [(44 51 -34 43) -34]
Train Case:  85 | Input/Output: [(80 -100 -91 -44) -100]
Train Case:  86 | Input/Output: [(-65 34 -67 73) -67]
Train Case:  87 | Input/Output: [(13 15 8 -94) -94]
Train Case:  88 | Input/Output: [(-61 52 74 -20) -61]
Train Case:  89 | Input/Output: [(23 -50 -67 -67) -67]
Train Case:  90 | Input/Output: [(-97 43 92 68) -97]
Train Case:  91 | Input/Output: [(-90 73 -10 -76) -90]
Train Case:  92 | Input/Output: [(-32 7 -54 68) -54]
Train Case:  93 | Input/Output: [(-61 -67 6 37) -67]
Train Case:  94 | Input/Output: [(38 -98 -100 93) -100]
Train Case:  95 | Input/Output: [(-77 89 -30 -62) -77]
Train Case:  96 | Input/Output: [(-20 -36 -13 -27) -36]
Train Case:  97 | Input/Output: [(-23 50 -39 -68) -68]
Train Case:  98 | Input/Output: [(1 -40 -17 -60) -60]
Train Case:  99 | Input/Output: [(-84 -37 -56 16) -84]
Test Case:   0 | Input/Output: [[35 32 35 35] 32]
Test Case:   1 | Input/Output: [[-11 -11 -95 -11] -95]
Test Case:   2 | Input/Output: [[1 -56 -56 -56] -56]
Test Case:   3 | Input/Output: [[45 -45 -45 -45] -45]
Test Case:   4 | Input/Output: [[-23 49 49 49] -23]
Test Case:   5 | Input/Output: [[4 4 4 4] 4]
Test Case:   6 | Input/Output: [[69 69 69 78] 69]
Test Case:   7 | Input/Output: [[-68 -68 -84 -68] -84]
Test Case:   8 | Input/Output: [[44 -19 44 44] -19]
Test Case:   9 | Input/Output: [[-4 0 0 0] -4]
Test Case:  10 | Input/Output: [[52 44 52 52] 44]
Test Case:  11 | Input/Output: [[0 22 22 22] 0]
Test Case:  12 | Input/Output: [[25 -28 25 25] -28]
Test Case:  13 | Input/Output: [[10 10 10 -38] -38]
Test Case:  14 | Input/Output: [[-10 31 31 31] -10]
Test Case:  15 | Input/Output: [[63 63 63 -83] -83]
Test Case:  16 | Input/Output: [[92 -53 -53 -53] -53]
Test Case:  17 | Input/Output: [[92 92 -26 92] -26]
Test Case:  18 | Input/Output: [[64 64 31 64] 31]
Test Case:  19 | Input/Output: [[-40 65 65 65] -40]
Test Case:  20 | Input/Output: [[90 90 43 90] 43]
Test Case:  21 | Input/Output: [[3 3 -19 3] -19]
Test Case:  22 | Input/Output: [[35 35 35 71] 35]
Test Case:  23 | Input/Output: [[-28 19 19 19] -28]
Test Case:  24 | Input/Output: [[67 18 18 18] 18]
Test Case:  25 | Input/Output: [[6 6 6 -48] -48]
Test Case:  26 | Input/Output: [[40 40 6 40] 6]
Test Case:  27 | Input/Output: [[-98 84 84 84] -98]
Test Case:  28 | Input/Output: [[-25 -25 37 -25] -25]
Test Case:  29 | Input/Output: [[-64 -64 -100 -64] -100]
Test Case:  30 | Input/Output: [[56 56 -13 56] -13]
Test Case:  31 | Input/Output: [[85 85 85 52] 52]
Test Case:  32 | Input/Output: [[-22 -22 -22 -56] -56]
Test Case:  33 | Input/Output: [[-80 -90 -90 -90] -90]
Test Case:  34 | Input/Output: [[-76 1 1 1] -76]
Test Case:  35 | Input/Output: [[-92 8 -92 -92] -92]
Test Case:  36 | Input/Output: [[2 -53 -53 -53] -53]
Test Case:  37 | Input/Output: [[-66 78 78 78] -66]
Test Case:  38 | Input/Output: [[-51 -40 -51 -51] -51]
Test Case:  39 | Input/Output: [[-12 -20 -20 -20] -20]
Test Case:  40 | Input/Output: [[-16 -16 -16 -66] -66]
Test Case:  41 | Input/Output: [[-27 -64 -27 -27] -64]
Test Case:  42 | Input/Output: [[19 95 19 19] 19]
Test Case:  43 | Input/Output: [[53 -45 53 53] -45]
Test Case:  44 | Input/Output: [[65 65 65 -39] -39]
Test Case:  45 | Input/Output: [[9 9 35 9] 9]
Test Case:  46 | Input/Output: [[3 -10 -10 -10] -10]
Test Case:  47 | Input/Output: [[85 44 85 85] 44]
Test Case:  48 | Input/Output: [[6 6 6 -8] -8]
Test Case:  49 | Input/Output: [[-53 -98 -98 -98] -98]
Test Case:  50 | Input/Output: [[38 -10 -10 -10] -10]
Test Case:  51 | Input/Output: [[33 33 70 33] 33]
Test Case:  52 | Input/Output: [[-32 -32 -32 -92] -92]
Test Case:  53 | Input/Output: [[-59 -59 0 -59] -59]
Test Case:  54 | Input/Output: [[-67 -68 -67 -67] -68]
Test Case:  55 | Input/Output: [[-49 -49 -49 -99] -99]
Test Case:  56 | Input/Output: [[78 78 -72 78] -72]
Test Case:  57 | Input/Output: [[-72 -14 -72 -72] -72]
Test Case:  58 | Input/Output: [[-72 -72 -54 -72] -72]
Test Case:  59 | Input/Output: [[-50 -50 52 -50] -50]
Test Case:  60 | Input/Output: [[33 33 33 -69] -69]
Test Case:  61 | Input/Output: [[45 62 45 45] 45]
Test Case:  62 | Input/Output: [[-41 69 -41 -41] -41]
Test Case:  63 | Input/Output: [[-65 -65 -65 10] -65]
Test Case:  64 | Input/Output: [[-86 -86 14 -86] -86]
Test Case:  65 | Input/Output: [[-3 -3 -3 -62] -62]
Test Case:  66 | Input/Output: [[-59 -59 -59 -9] -59]
Test Case:  67 | Input/Output: [[-56 -56 -56 57] -56]
Test Case:  68 | Input/Output: [[-48 -56 -48 -48] -56]
Test Case:  69 | Input/Output: [[98 98 41 98] 41]
Test Case:  70 | Input/Output: [[48 -97 48 48] -97]
Test Case:  71 | Input/Output: [[66 66 -51 66] -51]
Test Case:  72 | Input/Output: [[-68 59 59 59] -68]
Test Case:  73 | Input/Output: [[46 93 93 93] 46]
Test Case:  74 | Input/Output: [[-78 -78 -60 -78] -78]
Test Case:  75 | Input/Output: [[-39 -39 -39 18] -39]
Test Case:  76 | Input/Output: [[-21 -21 -21 -83] -83]
Test Case:  77 | Input/Output: [[40 -40 -40 -40] -40]
Test Case:  78 | Input/Output: [[39 39 65 39] 39]
Test Case:  79 | Input/Output: [[-63 59 -63 -63] -63]
Test Case:  80 | Input/Output: [[84 -12 -12 -12] -12]
Test Case:  81 | Input/Output: [[65 65 73 65] 65]
Test Case:  82 | Input/Output: [[-12 -12 -13 -12] -13]
Test Case:  83 | Input/Output: [[-26 -6 -6 -6] -26]
Test Case:  84 | Input/Output: [[24 80 24 24] 24]
Test Case:  85 | Input/Output: [[-68 -68 59 -68] -68]
Test Case:  86 | Input/Output: [[22 22 22 -19] -19]
Test Case:  87 | Input/Output: [[-92 -92 -92 75] -92]
Test Case:  88 | Input/Output: [[73 73 73 -65] -65]
Test Case:  89 | Input/Output: [[73 73 53 73] 53]
Test Case:  90 | Input/Output: [[68 68 -81 68] -81]
Test Case:  91 | Input/Output: [[-86 -86 -86 64] -86]
Test Case:  92 | Input/Output: [[-8 -61 -61 -61] -61]
Test Case:  93 | Input/Output: [[5 60 60 60] 5]
Test Case:  94 | Input/Output: [[16 16 16 -37] -37]
Test Case:  95 | Input/Output: [[90 19 19 19] 19]
Test Case:  96 | Input/Output: [[-49 -49 -49 29] -49]
Test Case:  97 | Input/Output: [[3 -49 3 3] -49]
Test Case:  98 | Input/Output: [[-64 -64 -64 -40] -64]
Test Case:  99 | Input/Output: [[53 -63 53 53] -63]
Test Case: 100 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 101 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 102 | Input/Output: [(21 21 21 21) 21]
Test Case: 103 | Input/Output: [(14 14 14 14) 14]
Test Case: 104 | Input/Output: [(15 15 15 15) 15]
Test Case: 105 | Input/Output: [(15 15 15 15) 15]
Test Case: 106 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 107 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 108 | Input/Output: [(36 36 36 36) 36]
Test Case: 109 | Input/Output: [(37 37 37 37) 37]
Test Case: 110 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 111 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 112 | Input/Output: [(31 31 31 31) 31]
Test Case: 113 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 114 | Input/Output: [(35 35 35 35) 35]
Test Case: 115 | Input/Output: [(36 36 36 36) 36]
Test Case: 116 | Input/Output: [(5 5 5 5) 5]
Test Case: 117 | Input/Output: [(62 62 62 62) 62]
Test Case: 118 | Input/Output: [(14 14 14 14) 14]
Test Case: 119 | Input/Output: [(8 8 8 8) 8]
Test Case: 120 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 121 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 122 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 123 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 124 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 125 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 126 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 127 | Input/Output: [(80 80 80 80) 80]
Test Case: 128 | Input/Output: [(87 87 87 87) 87]
Test Case: 129 | Input/Output: [(10 10 10 10) 10]
Test Case: 130 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 131 | Input/Output: [(16 16 16 16) 16]
Test Case: 132 | Input/Output: [(58 58 58 58) 58]
Test Case: 133 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 134 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 135 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 136 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 137 | Input/Output: [(58 58 58 58) 58]
Test Case: 138 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 139 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 140 | Input/Output: [(36 36 36 36) 36]
Test Case: 141 | Input/Output: [(95 95 95 95) 95]
Test Case: 142 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 143 | Input/Output: [(100 100 100 100) 100]
Test Case: 144 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 145 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 146 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 147 | Input/Output: [(54 54 54 54) 54]
Test Case: 148 | Input/Output: [(95 95 95 95) 95]
Test Case: 149 | Input/Output: [(82 82 82 82) 82]
Test Case: 150 | Input/Output: [(64 64 64 64) 64]
Test Case: 151 | Input/Output: [(53 53 53 53) 53]
Test Case: 152 | Input/Output: [(42 42 42 42) 42]
Test Case: 153 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 154 | Input/Output: [(17 17 17 17) 17]
Test Case: 155 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 156 | Input/Output: [(35 35 35 35) 35]
Test Case: 157 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 158 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 159 | Input/Output: [(13 13 13 13) 13]
Test Case: 160 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 161 | Input/Output: [(98 98 98 98) 98]
Test Case: 162 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 163 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 164 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 165 | Input/Output: [(63 63 63 63) 63]
Test Case: 166 | Input/Output: [(22 22 22 22) 22]
Test Case: 167 | Input/Output: [(30 30 30 30) 30]
Test Case: 168 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 169 | Input/Output: [(17 17 17 17) 17]
Test Case: 170 | Input/Output: [(80 80 80 80) 80]
Test Case: 171 | Input/Output: [(48 48 48 48) 48]
Test Case: 172 | Input/Output: [(13 13 13 13) 13]
Test Case: 173 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 174 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 175 | Input/Output: [(63 63 63 63) 63]
Test Case: 176 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 177 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 178 | Input/Output: [(53 53 53 53) 53]
Test Case: 179 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 180 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 181 | Input/Output: [(85 85 85 85) 85]
Test Case: 182 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 183 | Input/Output: [(30 30 30 30) 30]
Test Case: 184 | Input/Output: [(68 68 68 68) 68]
Test Case: 185 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 186 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 187 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 188 | Input/Output: [(83 83 83 83) 83]
Test Case: 189 | Input/Output: [(71 71 71 71) 71]
Test Case: 190 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 191 | Input/Output: [(21 21 21 21) 21]
Test Case: 192 | Input/Output: [(6 6 6 6) 6]
Test Case: 193 | Input/Output: [(53 53 53 53) 53]
Test Case: 194 | Input/Output: [(58 58 58 58) 58]
Test Case: 195 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 196 | Input/Output: [(21 21 21 21) 21]
Test Case: 197 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 198 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 199 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 200 | Input/Output: [(89 6 93 32) 6]
Test Case: 201 | Input/Output: [(96 77 25 66) 25]
Test Case: 202 | Input/Output: [(68 42 71 18) 18]
Test Case: 203 | Input/Output: [(12 54 22 41) 12]
Test Case: 204 | Input/Output: [(31 62 55 94) 31]
Test Case: 205 | Input/Output: [(86 64 20 46) 20]
Test Case: 206 | Input/Output: [(26 63 76 100) 26]
Test Case: 207 | Input/Output: [(12 80 79 62) 12]
Test Case: 208 | Input/Output: [(77 38 78 12) 12]
Test Case: 209 | Input/Output: [(97 37 4 70) 4]
Test Case: 210 | Input/Output: [(88 40 32 40) 32]
Test Case: 211 | Input/Output: [(76 100 79 48) 48]
Test Case: 212 | Input/Output: [(33 47 49 36) 33]
Test Case: 213 | Input/Output: [(58 82 75 43) 43]
Test Case: 214 | Input/Output: [(84 60 49 25) 25]
Test Case: 215 | Input/Output: [(97 38 86 66) 38]
Test Case: 216 | Input/Output: [(90 41 14 91) 14]
Test Case: 217 | Input/Output: [(25 40 84 50) 25]
Test Case: 218 | Input/Output: [(58 86 48 91) 48]
Test Case: 219 | Input/Output: [(51 7 20 60) 7]
Test Case: 220 | Input/Output: [(88 59 77 36) 36]
Test Case: 221 | Input/Output: [(96 82 98 42) 42]
Test Case: 222 | Input/Output: [(36 15 28 41) 15]
Test Case: 223 | Input/Output: [(0 48 39 70) 0]
Test Case: 224 | Input/Output: [(49 69 79 46) 46]
Test Case: 225 | Input/Output: [(18 8 21 80) 8]
Test Case: 226 | Input/Output: [(50 21 36 17) 17]
Test Case: 227 | Input/Output: [(26 99 17 73) 17]
Test Case: 228 | Input/Output: [(14 24 68 2) 2]
Test Case: 229 | Input/Output: [(26 15 59 71) 15]
Test Case: 230 | Input/Output: [(90 21 39 97) 21]
Test Case: 231 | Input/Output: [(70 88 30 22) 22]
Test Case: 232 | Input/Output: [(63 94 9 19) 9]
Test Case: 233 | Input/Output: [(73 67 38 58) 38]
Test Case: 234 | Input/Output: [(39 3 41 33) 3]
Test Case: 235 | Input/Output: [(81 67 8 2) 2]
Test Case: 236 | Input/Output: [(42 76 59 3) 3]
Test Case: 237 | Input/Output: [(74 5 42 7) 5]
Test Case: 238 | Input/Output: [(33 12 48 94) 12]
Test Case: 239 | Input/Output: [(1 9 18 79) 1]
Test Case: 240 | Input/Output: [(83 47 83 78) 47]
Test Case: 241 | Input/Output: [(93 80 48 4) 4]
Test Case: 242 | Input/Output: [(12 77 25 55) 12]
Test Case: 243 | Input/Output: [(2 70 17 100) 2]
Test Case: 244 | Input/Output: [(8 41 100 18) 8]
Test Case: 245 | Input/Output: [(37 73 52 14) 14]
Test Case: 246 | Input/Output: [(38 69 63 24) 24]
Test Case: 247 | Input/Output: [(61 84 29 90) 29]
Test Case: 248 | Input/Output: [(20 67 0 23) 0]
Test Case: 249 | Input/Output: [(49 41 15 56) 15]
Test Case: 250 | Input/Output: [(79 82 14 49) 14]
Test Case: 251 | Input/Output: [(9 24 97 61) 9]
Test Case: 252 | Input/Output: [(79 72 3 58) 3]
Test Case: 253 | Input/Output: [(56 69 77 14) 14]
Test Case: 254 | Input/Output: [(82 34 40 98) 34]
Test Case: 255 | Input/Output: [(55 23 17 60) 17]
Test Case: 256 | Input/Output: [(67 68 49 55) 49]
Test Case: 257 | Input/Output: [(0 65 39 3) 0]
Test Case: 258 | Input/Output: [(32 93 17 46) 17]
Test Case: 259 | Input/Output: [(15 34 30 79) 15]
Test Case: 260 | Input/Output: [(76 76 24 52) 24]
Test Case: 261 | Input/Output: [(33 20 88 61) 20]
Test Case: 262 | Input/Output: [(63 16 18 20) 16]
Test Case: 263 | Input/Output: [(72 4 92 61) 4]
Test Case: 264 | Input/Output: [(39 100 79 76) 39]
Test Case: 265 | Input/Output: [(68 45 76 70) 45]
Test Case: 266 | Input/Output: [(19 32 47 79) 19]
Test Case: 267 | Input/Output: [(21 13 33 3) 3]
Test Case: 268 | Input/Output: [(86 65 25 14) 14]
Test Case: 269 | Input/Output: [(52 87 7 74) 7]
Test Case: 270 | Input/Output: [(20 0 6 91) 0]
Test Case: 271 | Input/Output: [(83 87 4 28) 4]
Test Case: 272 | Input/Output: [(82 59 83 28) 28]
Test Case: 273 | Input/Output: [(76 31 52 24) 24]
Test Case: 274 | Input/Output: [(55 30 78 91) 30]
Test Case: 275 | Input/Output: [(99 70 75 68) 68]
Test Case: 276 | Input/Output: [(61 60 56 86) 56]
Test Case: 277 | Input/Output: [(34 16 89 51) 16]
Test Case: 278 | Input/Output: [(78 10 87 71) 10]
Test Case: 279 | Input/Output: [(29 42 64 32) 29]
Test Case: 280 | Input/Output: [(82 36 43 94) 36]
Test Case: 281 | Input/Output: [(2 91 18 15) 2]
Test Case: 282 | Input/Output: [(99 49 73 63) 49]
Test Case: 283 | Input/Output: [(44 23 15 65) 15]
Test Case: 284 | Input/Output: [(46 89 62 89) 46]
Test Case: 285 | Input/Output: [(9 12 14 65) 9]
Test Case: 286 | Input/Output: [(24 80 23 5) 5]
Test Case: 287 | Input/Output: [(19 17 29 15) 15]
Test Case: 288 | Input/Output: [(29 24 35 87) 24]
Test Case: 289 | Input/Output: [(90 48 36 63) 36]
Test Case: 290 | Input/Output: [(88 22 13 88) 13]
Test Case: 291 | Input/Output: [(39 0 53 17) 0]
Test Case: 292 | Input/Output: [(48 15 53 85) 15]
Test Case: 293 | Input/Output: [(0 93 52 50) 0]
Test Case: 294 | Input/Output: [(99 67 79 74) 67]
Test Case: 295 | Input/Output: [(33 89 91 69) 33]
Test Case: 296 | Input/Output: [(49 73 50 66) 49]
Test Case: 297 | Input/Output: [(17 86 42 69) 17]
Test Case: 298 | Input/Output: [(86 98 38 88) 38]
Test Case: 299 | Input/Output: [(14 46 58 68) 14]
Test Case: 300 | Input/Output: [(4 26 37 40) 4]
Test Case: 301 | Input/Output: [(33 32 15 70) 15]
Test Case: 302 | Input/Output: [(11 19 76 53) 11]
Test Case: 303 | Input/Output: [(84 5 21 37) 5]
Test Case: 304 | Input/Output: [(58 42 0 30) 0]
Test Case: 305 | Input/Output: [(8 71 35 82) 8]
Test Case: 306 | Input/Output: [(74 59 2 79) 2]
Test Case: 307 | Input/Output: [(89 66 53 14) 14]
Test Case: 308 | Input/Output: [(6 68 54 82) 6]
Test Case: 309 | Input/Output: [(15 78 26 54) 15]
Test Case: 310 | Input/Output: [(93 87 96 90) 87]
Test Case: 311 | Input/Output: [(94 60 31 95) 31]
Test Case: 312 | Input/Output: [(27 21 77 30) 21]
Test Case: 313 | Input/Output: [(62 64 14 50) 14]
Test Case: 314 | Input/Output: [(4 92 10 92) 4]
Test Case: 315 | Input/Output: [(20 96 65 45) 20]
Test Case: 316 | Input/Output: [(58 14 42 41) 14]
Test Case: 317 | Input/Output: [(62 14 17 2) 2]
Test Case: 318 | Input/Output: [(69 94 15 67) 15]
Test Case: 319 | Input/Output: [(86 95 96 99) 86]
Test Case: 320 | Input/Output: [(53 27 81 93) 27]
Test Case: 321 | Input/Output: [(17 28 68 71) 17]
Test Case: 322 | Input/Output: [(3 54 37 92) 3]
Test Case: 323 | Input/Output: [(10 93 25 11) 10]
Test Case: 324 | Input/Output: [(40 30 63 77) 30]
Test Case: 325 | Input/Output: [(85 39 39 53) 39]
Test Case: 326 | Input/Output: [(12 14 98 22) 12]
Test Case: 327 | Input/Output: [(22 81 50 5) 5]
Test Case: 328 | Input/Output: [(69 28 27 27) 27]
Test Case: 329 | Input/Output: [(79 76 85 21) 21]
Test Case: 330 | Input/Output: [(34 57 40 96) 34]
Test Case: 331 | Input/Output: [(48 33 57 39) 33]
Test Case: 332 | Input/Output: [(38 37 42 80) 37]
Test Case: 333 | Input/Output: [(2 25 54 64) 2]
Test Case: 334 | Input/Output: [(76 17 43 93) 17]
Test Case: 335 | Input/Output: [(34 56 64 60) 34]
Test Case: 336 | Input/Output: [(84 68 15 100) 15]
Test Case: 337 | Input/Output: [(64 66 78 58) 58]
Test Case: 338 | Input/Output: [(53 51 74 1) 1]
Test Case: 339 | Input/Output: [(14 69 83 22) 14]
Test Case: 340 | Input/Output: [(11 93 61 75) 11]
Test Case: 341 | Input/Output: [(9 93 8 33) 8]
Test Case: 342 | Input/Output: [(70 87 85 9) 9]
Test Case: 343 | Input/Output: [(21 49 27 9) 9]
Test Case: 344 | Input/Output: [(64 38 3 86) 3]
Test Case: 345 | Input/Output: [(44 95 19 88) 19]
Test Case: 346 | Input/Output: [(21 56 54 89) 21]
Test Case: 347 | Input/Output: [(92 23 98 85) 23]
Test Case: 348 | Input/Output: [(96 85 10 42) 10]
Test Case: 349 | Input/Output: [(89 98 84 91) 84]
Test Case: 350 | Input/Output: [(84 72 4 66) 4]
Test Case: 351 | Input/Output: [(59 9 95 78) 9]
Test Case: 352 | Input/Output: [(52 69 83 25) 25]
Test Case: 353 | Input/Output: [(97 52 56 48) 48]
Test Case: 354 | Input/Output: [(5 90 72 7) 5]
Test Case: 355 | Input/Output: [(79 12 93 39) 12]
Test Case: 356 | Input/Output: [(75 87 72 34) 34]
Test Case: 357 | Input/Output: [(100 31 18 41) 18]
Test Case: 358 | Input/Output: [(59 7 49 23) 7]
Test Case: 359 | Input/Output: [(21 66 16 52) 16]
Test Case: 360 | Input/Output: [(92 57 50 98) 50]
Test Case: 361 | Input/Output: [(25 89 50 49) 25]
Test Case: 362 | Input/Output: [(23 73 51 46) 23]
Test Case: 363 | Input/Output: [(48 37 75 98) 37]
Test Case: 364 | Input/Output: [(17 33 48 25) 17]
Test Case: 365 | Input/Output: [(34 75 90 60) 34]
Test Case: 366 | Input/Output: [(55 7 82 21) 7]
Test Case: 367 | Input/Output: [(82 75 24 12) 12]
Test Case: 368 | Input/Output: [(66 93 82 84) 66]
Test Case: 369 | Input/Output: [(83 10 34 73) 10]
Test Case: 370 | Input/Output: [(32 63 96 100) 32]
Test Case: 371 | Input/Output: [(67 8 30 27) 8]
Test Case: 372 | Input/Output: [(70 80 79 71) 70]
Test Case: 373 | Input/Output: [(14 15 65 24) 14]
Test Case: 374 | Input/Output: [(88 70 99 100) 70]
Test Case: 375 | Input/Output: [(24 4 85 34) 4]
Test Case: 376 | Input/Output: [(82 54 5 50) 5]
Test Case: 377 | Input/Output: [(33 17 83 92) 17]
Test Case: 378 | Input/Output: [(17 11 17 67) 11]
Test Case: 379 | Input/Output: [(63 49 63 33) 33]
Test Case: 380 | Input/Output: [(75 6 2 58) 2]
Test Case: 381 | Input/Output: [(91 14 6 34) 6]
Test Case: 382 | Input/Output: [(48 17 49 70) 17]
Test Case: 383 | Input/Output: [(68 94 37 58) 37]
Test Case: 384 | Input/Output: [(73 69 55 88) 55]
Test Case: 385 | Input/Output: [(67 96 24 83) 24]
Test Case: 386 | Input/Output: [(17 55 23 55) 17]
Test Case: 387 | Input/Output: [(78 11 23 56) 11]
Test Case: 388 | Input/Output: [(61 28 60 10) 10]
Test Case: 389 | Input/Output: [(38 96 28 55) 28]
Test Case: 390 | Input/Output: [(36 49 69 87) 36]
Test Case: 391 | Input/Output: [(12 58 76 99) 12]
Test Case: 392 | Input/Output: [(85 87 3 4) 3]
Test Case: 393 | Input/Output: [(56 63 53 52) 52]
Test Case: 394 | Input/Output: [(0 51 9 9) 0]
Test Case: 395 | Input/Output: [(63 41 2 70) 2]
Test Case: 396 | Input/Output: [(52 81 66 13) 13]
Test Case: 397 | Input/Output: [(78 91 100 98) 78]
Test Case: 398 | Input/Output: [(36 40 41 61) 36]
Test Case: 399 | Input/Output: [(90 20 75 8) 8]
Test Case: 400 | Input/Output: [(46 -11 -12 3) -12]
Test Case: 401 | Input/Output: [(68 -38 -29 -76) -76]
Test Case: 402 | Input/Output: [(-69 -7 -12 -63) -69]
Test Case: 403 | Input/Output: [(-55 -1 29 -89) -89]
Test Case: 404 | Input/Output: [(5 -64 -83 -84) -84]
Test Case: 405 | Input/Output: [(3 7 99 -68) -68]
Test Case: 406 | Input/Output: [(60 27 76 -70) -70]
Test Case: 407 | Input/Output: [(-91 -81 66 -92) -92]
Test Case: 408 | Input/Output: [(76 -34 39 -7) -34]
Test Case: 409 | Input/Output: [(49 64 27 -20) -20]
Test Case: 410 | Input/Output: [(-70 -45 48 -55) -70]
Test Case: 411 | Input/Output: [(41 86 -22 -45) -45]
Test Case: 412 | Input/Output: [(-100 -39 12 33) -100]
Test Case: 413 | Input/Output: [(-7 72 -3 -96) -96]
Test Case: 414 | Input/Output: [(58 -52 31 55) -52]
Test Case: 415 | Input/Output: [(30 67 20 -72) -72]
Test Case: 416 | Input/Output: [(-57 12 46 81) -57]
Test Case: 417 | Input/Output: [(18 -13 -20 78) -20]
Test Case: 418 | Input/Output: [(49 42 51 -60) -60]
Test Case: 419 | Input/Output: [(95 -80 12 -83) -83]
Test Case: 420 | Input/Output: [(79 -26 -36 51) -36]
Test Case: 421 | Input/Output: [(92 -65 35 32) -65]
Test Case: 422 | Input/Output: [(-76 70 6 2) -76]
Test Case: 423 | Input/Output: [(-37 -82 78 19) -82]
Test Case: 424 | Input/Output: [(64 94 81 29) 29]
Test Case: 425 | Input/Output: [(-24 94 -96 -8) -96]
Test Case: 426 | Input/Output: [(79 -4 14 -73) -73]
Test Case: 427 | Input/Output: [(-56 12 -2 -57) -57]
Test Case: 428 | Input/Output: [(-87 83 -41 -66) -87]
Test Case: 429 | Input/Output: [(4 -40 95 77) -40]
Test Case: 430 | Input/Output: [(-67 32 90 -3) -67]
Test Case: 431 | Input/Output: [(84 -51 -69 -22) -69]
Test Case: 432 | Input/Output: [(84 12 47 -3) -3]
Test Case: 433 | Input/Output: [(75 96 -30 77) -30]
Test Case: 434 | Input/Output: [(-11 -62 -29 75) -62]
Test Case: 435 | Input/Output: [(-12 10 -48 62) -48]
Test Case: 436 | Input/Output: [(76 -73 27 69) -73]
Test Case: 437 | Input/Output: [(-83 -93 43 10) -93]
Test Case: 438 | Input/Output: [(57 95 34 6) 6]
Test Case: 439 | Input/Output: [(-76 6 -22 91) -76]
Test Case: 440 | Input/Output: [(30 -92 16 14) -92]
Test Case: 441 | Input/Output: [(-51 -24 90 9) -51]
Test Case: 442 | Input/Output: [(51 -84 57 -63) -84]
Test Case: 443 | Input/Output: [(-36 90 -44 69) -44]
Test Case: 444 | Input/Output: [(-64 90 42 29) -64]
Test Case: 445 | Input/Output: [(25 -49 72 -45) -49]
Test Case: 446 | Input/Output: [(-53 18 45 -76) -76]
Test Case: 447 | Input/Output: [(-95 -53 44 64) -95]
Test Case: 448 | Input/Output: [(96 30 34 -39) -39]
Test Case: 449 | Input/Output: [(34 64 7 -25) -25]
Test Case: 450 | Input/Output: [(58 -23 -62 68) -62]
Test Case: 451 | Input/Output: [(55 -60 89 -68) -68]
Test Case: 452 | Input/Output: [(7 38 13 -14) -14]
Test Case: 453 | Input/Output: [(48 8 -66 -90) -90]
Test Case: 454 | Input/Output: [(-37 -3 12 -46) -46]
Test Case: 455 | Input/Output: [(-93 -26 73 39) -93]
Test Case: 456 | Input/Output: [(-18 -52 37 -62) -62]
Test Case: 457 | Input/Output: [(-24 14 -83 27) -83]
Test Case: 458 | Input/Output: [(53 -41 -64 52) -64]
Test Case: 459 | Input/Output: [(-74 -69 -100 55) -100]
Test Case: 460 | Input/Output: [(-72 10 -76 25) -76]
Test Case: 461 | Input/Output: [(73 -34 -9 -40) -40]
Test Case: 462 | Input/Output: [(11 18 -34 67) -34]
Test Case: 463 | Input/Output: [(-65 75 54 -45) -65]
Test Case: 464 | Input/Output: [(-1 -67 38 56) -67]
Test Case: 465 | Input/Output: [(-86 62 81 15) -86]
Test Case: 466 | Input/Output: [(83 62 -24 -10) -24]
Test Case: 467 | Input/Output: [(12 -61 -8 -96) -96]
Test Case: 468 | Input/Output: [(88 18 75 71) 18]
Test Case: 469 | Input/Output: [(-67 -34 -7 -88) -88]
Test Case: 470 | Input/Output: [(26 -84 14 17) -84]
Test Case: 471 | Input/Output: [(7 12 74 -45) -45]
Test Case: 472 | Input/Output: [(47 -58 91 -50) -58]
Test Case: 473 | Input/Output: [(-85 -55 -22 25) -85]
Test Case: 474 | Input/Output: [(-21 24 53 -86) -86]
Test Case: 475 | Input/Output: [(2 -42 -31 91) -42]
Test Case: 476 | Input/Output: [(-46 -14 89 -22) -46]
Test Case: 477 | Input/Output: [(-72 53 20 24) -72]
Test Case: 478 | Input/Output: [(1 66 -50 41) -50]
Test Case: 479 | Input/Output: [(91 -75 -38 72) -75]
Test Case: 480 | Input/Output: [(-45 29 -51 -51) -51]
Test Case: 481 | Input/Output: [(-50 22 -48 34) -50]
Test Case: 482 | Input/Output: [(-81 58 80 -73) -81]
Test Case: 483 | Input/Output: [(-87 -38 -30 80) -87]
Test Case: 484 | Input/Output: [(-68 -52 35 25) -68]
Test Case: 485 | Input/Output: [(14 93 17 20) 14]
Test Case: 486 | Input/Output: [(68 63 80 -56) -56]
Test Case: 487 | Input/Output: [(85 91 -66 85) -66]
Test Case: 488 | Input/Output: [(8 -94 1 -54) -94]
Test Case: 489 | Input/Output: [(18 -92 -72 44) -92]
Test Case: 490 | Input/Output: [(-36 -68 73 -51) -68]
Test Case: 491 | Input/Output: [(-13 -43 32 97) -43]
Test Case: 492 | Input/Output: [(64 -62 88 78) -62]
Test Case: 493 | Input/Output: [(-24 -58 -43 -17) -58]
Test Case: 494 | Input/Output: [(60 -77 57 -67) -77]
Test Case: 495 | Input/Output: [(-45 -74 -41 -6) -74]
Test Case: 496 | Input/Output: [(-61 100 1 50) -61]
Test Case: 497 | Input/Output: [(90 -15 -72 54) -72]
Test Case: 498 | Input/Output: [(-58 -68 44 63) -68]
Test Case: 499 | Input/Output: [(72 94 -40 3) -40]
Test Case: 500 | Input/Output: [(-91 1 54 -33) -91]
Test Case: 501 | Input/Output: [(-78 72 85 62) -78]
Test Case: 502 | Input/Output: [(-10 -72 -52 2) -72]
Test Case: 503 | Input/Output: [(69 23 11 61) 11]
Test Case: 504 | Input/Output: [(-12 -84 58 5) -84]
Test Case: 505 | Input/Output: [(-54 40 70 -77) -77]
Test Case: 506 | Input/Output: [(18 25 -98 -86) -98]
Test Case: 507 | Input/Output: [(32 39 90 -57) -57]
Test Case: 508 | Input/Output: [(84 5 -57 9) -57]
Test Case: 509 | Input/Output: [(-27 -12 82 87) -27]
Test Case: 510 | Input/Output: [(-13 80 13 31) -13]
Test Case: 511 | Input/Output: [(92 52 25 -9) -9]
Test Case: 512 | Input/Output: [(-49 36 95 44) -49]
Test Case: 513 | Input/Output: [(-18 -12 -26 -28) -28]
Test Case: 514 | Input/Output: [(1 -95 -41 22) -95]
Test Case: 515 | Input/Output: [(72 55 79 -50) -50]
Test Case: 516 | Input/Output: [(23 -34 -26 22) -34]
Test Case: 517 | Input/Output: [(-68 -21 91 -60) -68]
Test Case: 518 | Input/Output: [(-29 -25 92 28) -29]
Test Case: 519 | Input/Output: [(75 49 18 -48) -48]
Test Case: 520 | Input/Output: [(72 -97 -85 -38) -97]
Test Case: 521 | Input/Output: [(61 -7 -28 -31) -31]
Test Case: 522 | Input/Output: [(35 -32 -16 44) -32]
Test Case: 523 | Input/Output: [(34 32 43 93) 32]
Test Case: 524 | Input/Output: [(93 55 71 85) 55]
Test Case: 525 | Input/Output: [(-2 38 -33 -32) -33]
Test Case: 526 | Input/Output: [(58 -28 5 14) -28]
Test Case: 527 | Input/Output: [(65 41 -59 51) -59]
Test Case: 528 | Input/Output: [(-58 -53 89 -9) -58]
Test Case: 529 | Input/Output: [(47 57 -50 37) -50]
Test Case: 530 | Input/Output: [(-74 -52 -61 -19) -74]
Test Case: 531 | Input/Output: [(13 35 -62 -26) -62]
Test Case: 532 | Input/Output: [(-63 -75 7 10) -75]
Test Case: 533 | Input/Output: [(-2 -22 28 32) -22]
Test Case: 534 | Input/Output: [(-92 -19 46 47) -92]
Test Case: 535 | Input/Output: [(2 96 99 -7) -7]
Test Case: 536 | Input/Output: [(-99 93 39 -84) -99]
Test Case: 537 | Input/Output: [(-69 3 -89 -60) -89]
Test Case: 538 | Input/Output: [(-51 -53 -42 52) -53]
Test Case: 539 | Input/Output: [(24 26 -22 9) -22]
Test Case: 540 | Input/Output: [(-29 -87 57 40) -87]
Test Case: 541 | Input/Output: [(80 -76 3 47) -76]
Test Case: 542 | Input/Output: [(58 21 -45 41) -45]
Test Case: 543 | Input/Output: [(92 -15 -45 -29) -45]
Test Case: 544 | Input/Output: [(66 -11 52 -51) -51]
Test Case: 545 | Input/Output: [(-38 -26 -42 19) -42]
Test Case: 546 | Input/Output: [(73 37 15 34) 15]
Test Case: 547 | Input/Output: [(71 -96 -97 4) -97]
Test Case: 548 | Input/Output: [(50 -83 52 42) -83]
Test Case: 549 | Input/Output: [(-99 -73 -73 63) -99]
Test Case: 550 | Input/Output: [(47 8 22 -42) -42]
Test Case: 551 | Input/Output: [(80 -48 -43 -15) -48]
Test Case: 552 | Input/Output: [(69 -87 53 -80) -87]
Test Case: 553 | Input/Output: [(61 -49 77 97) -49]
Test Case: 554 | Input/Output: [(30 -12 -27 -22) -27]
Test Case: 555 | Input/Output: [(-59 70 -3 97) -59]
Test Case: 556 | Input/Output: [(29 -10 -11 88) -11]
Test Case: 557 | Input/Output: [(-57 -54 95 -59) -59]
Test Case: 558 | Input/Output: [(23 -46 -59 -92) -92]
Test Case: 559 | Input/Output: [(29 72 92 -31) -31]
Test Case: 560 | Input/Output: [(28 -80 -95 -48) -95]
Test Case: 561 | Input/Output: [(-3 82 67 -71) -71]
Test Case: 562 | Input/Output: [(51 -93 39 -67) -93]
Test Case: 563 | Input/Output: [(-58 40 -9 51) -58]
Test Case: 564 | Input/Output: [(41 -76 -5 97) -76]
Test Case: 565 | Input/Output: [(93 -24 -5 31) -24]
Test Case: 566 | Input/Output: [(33 -48 60 89) -48]
Test Case: 567 | Input/Output: [(-85 90 -3 42) -85]
Test Case: 568 | Input/Output: [(-15 -74 -15 82) -74]
Test Case: 569 | Input/Output: [(42 10 -78 -21) -78]
Test Case: 570 | Input/Output: [(-55 -8 -82 80) -82]
Test Case: 571 | Input/Output: [(8 -69 93 -35) -69]
Test Case: 572 | Input/Output: [(-94 -51 90 89) -94]
Test Case: 573 | Input/Output: [(1 77 -50 11) -50]
Test Case: 574 | Input/Output: [(-29 15 -66 -30) -66]
Test Case: 575 | Input/Output: [(-91 -47 -71 40) -91]
Test Case: 576 | Input/Output: [(-19 83 -27 -19) -27]
Test Case: 577 | Input/Output: [(-100 -15 31 70) -100]
Test Case: 578 | Input/Output: [(31 -63 9 -77) -77]
Test Case: 579 | Input/Output: [(-57 -24 -52 -19) -57]
Test Case: 580 | Input/Output: [(-39 -13 -68 -99) -99]
Test Case: 581 | Input/Output: [(-32 -27 96 -34) -34]
Test Case: 582 | Input/Output: [(76 29 78 70) 29]
Test Case: 583 | Input/Output: [(-60 1 -4 -33) -60]
Test Case: 584 | Input/Output: [(-15 -31 43 -74) -74]
Test Case: 585 | Input/Output: [(17 80 -35 -74) -74]
Test Case: 586 | Input/Output: [(58 43 54 10) 10]
Test Case: 587 | Input/Output: [(50 13 86 -55) -55]
Test Case: 588 | Input/Output: [(-65 43 -62 23) -65]
Test Case: 589 | Input/Output: [(-2 -98 -21 42) -98]
Test Case: 590 | Input/Output: [(46 86 -2 -97) -97]
Test Case: 591 | Input/Output: [(6 -32 -47 -31) -47]
Test Case: 592 | Input/Output: [(15 -41 -40 89) -41]
Test Case: 593 | Input/Output: [(-38 -26 97 42) -38]
Test Case: 594 | Input/Output: [(73 49 -89 -65) -89]
Test Case: 595 | Input/Output: [(-2 0 59 61) -2]
Test Case: 596 | Input/Output: [(-54 57 31 33) -54]
Test Case: 597 | Input/Output: [(75 62 54 18) 18]
Test Case: 598 | Input/Output: [(-66 12 -19 47) -66]
Test Case: 599 | Input/Output: [(82 20 70 11) 11]
Test Case: 600 | Input/Output: [(-89 -54 10 -82) -89]
Test Case: 601 | Input/Output: [(74 37 -57 26) -57]
Test Case: 602 | Input/Output: [(83 -20 -91 43) -91]
Test Case: 603 | Input/Output: [(-63 4 66 1) -63]
Test Case: 604 | Input/Output: [(-86 14 36 -38) -86]
Test Case: 605 | Input/Output: [(9 44 57 74) 9]
Test Case: 606 | Input/Output: [(-39 8 62 49) -39]
Test Case: 607 | Input/Output: [(79 -93 66 -88) -93]
Test Case: 608 | Input/Output: [(35 6 17 43) 6]
Test Case: 609 | Input/Output: [(28 75 59 -9) -9]
Test Case: 610 | Input/Output: [(-84 66 -87 47) -87]
Test Case: 611 | Input/Output: [(86 -87 -60 75) -87]
Test Case: 612 | Input/Output: [(3 -77 -66 33) -77]
Test Case: 613 | Input/Output: [(66 -30 -2 32) -30]
Test Case: 614 | Input/Output: [(-55 26 -8 89) -55]
Test Case: 615 | Input/Output: [(-64 -96 88 -5) -96]
Test Case: 616 | Input/Output: [(-80 -83 94 85) -83]
Test Case: 617 | Input/Output: [(-1 67 -36 42) -36]
Test Case: 618 | Input/Output: [(-32 -66 -39 -49) -66]
Test Case: 619 | Input/Output: [(32 -14 -36 89) -36]
Test Case: 620 | Input/Output: [(30 62 -77 18) -77]
Test Case: 621 | Input/Output: [(4 -73 -18 -51) -73]
Test Case: 622 | Input/Output: [(0 53 -54 53) -54]
Test Case: 623 | Input/Output: [(-57 -65 19 -85) -85]
Test Case: 624 | Input/Output: [(14 -46 2 45) -46]
Test Case: 625 | Input/Output: [(-94 61 -74 3) -94]
Test Case: 626 | Input/Output: [(59 -51 -74 47) -74]
Test Case: 627 | Input/Output: [(-97 -91 -81 78) -97]
Test Case: 628 | Input/Output: [(97 43 16 -56) -56]
Test Case: 629 | Input/Output: [(-48 39 65 -87) -87]
Test Case: 630 | Input/Output: [(-83 -22 98 55) -83]
Test Case: 631 | Input/Output: [(-42 -16 40 51) -42]
Test Case: 632 | Input/Output: [(-24 16 55 -62) -62]
Test Case: 633 | Input/Output: [(-11 91 37 2) -11]
Test Case: 634 | Input/Output: [(-34 -86 -67 -47) -86]
Test Case: 635 | Input/Output: [(15 37 44 68) 15]
Test Case: 636 | Input/Output: [(-73 30 46 0) -73]
Test Case: 637 | Input/Output: [(24 89 92 -26) -26]
Test Case: 638 | Input/Output: [(59 36 -22 -25) -25]
Test Case: 639 | Input/Output: [(58 -83 -15 -79) -83]
Test Case: 640 | Input/Output: [(-79 55 -60 19) -79]
Test Case: 641 | Input/Output: [(-16 39 15 -1) -16]
Test Case: 642 | Input/Output: [(45 34 8 -63) -63]
Test Case: 643 | Input/Output: [(-89 39 63 29) -89]
Test Case: 644 | Input/Output: [(12 -68 7 -49) -68]
Test Case: 645 | Input/Output: [(94 99 -97 2) -97]
Test Case: 646 | Input/Output: [(43 50 -81 -36) -81]
Test Case: 647 | Input/Output: [(33 -96 90 99) -96]
Test Case: 648 | Input/Output: [(53 -26 71 32) -26]
Test Case: 649 | Input/Output: [(57 -14 -62 18) -62]
Test Case: 650 | Input/Output: [(-32 -15 68 34) -32]
Test Case: 651 | Input/Output: [(28 77 21 -10) -10]
Test Case: 652 | Input/Output: [(75 -39 71 73) -39]
Test Case: 653 | Input/Output: [(14 -25 11 -18) -25]
Test Case: 654 | Input/Output: [(-10 -68 -98 -83) -98]
Test Case: 655 | Input/Output: [(6 4 -70 -10) -70]
Test Case: 656 | Input/Output: [(-75 42 63 -3) -75]
Test Case: 657 | Input/Output: [(-37 25 -35 -100) -100]
Test Case: 658 | Input/Output: [(93 -55 -97 88) -97]
Test Case: 659 | Input/Output: [(2 64 44 -29) -29]
Test Case: 660 | Input/Output: [(-54 -18 -35 -27) -54]
Test Case: 661 | Input/Output: [(12 -12 -63 -9) -63]
Test Case: 662 | Input/Output: [(-67 -83 -10 -60) -83]
Test Case: 663 | Input/Output: [(-12 0 62 -24) -24]
Test Case: 664 | Input/Output: [(63 -28 53 -15) -28]
Test Case: 665 | Input/Output: [(-32 24 80 75) -32]
Test Case: 666 | Input/Output: [(-64 -17 -55 -13) -64]
Test Case: 667 | Input/Output: [(-22 37 -71 -70) -71]
Test Case: 668 | Input/Output: [(-1 -28 -72 28) -72]
Test Case: 669 | Input/Output: [(28 98 -65 57) -65]
Test Case: 670 | Input/Output: [(99 -67 -64 -95) -95]
Test Case: 671 | Input/Output: [(33 11 18 44) 11]
Test Case: 672 | Input/Output: [(95 -80 43 29) -80]
Test Case: 673 | Input/Output: [(82 62 90 -80) -80]
Test Case: 674 | Input/Output: [(-64 36 -32 98) -64]
Test Case: 675 | Input/Output: [(-80 34 92 -34) -80]
Test Case: 676 | Input/Output: [(40 -28 88 -80) -80]
Test Case: 677 | Input/Output: [(-40 100 -63 49) -63]
Test Case: 678 | Input/Output: [(80 -76 -6 -40) -76]
Test Case: 679 | Input/Output: [(72 12 14 -65) -65]
Test Case: 680 | Input/Output: [(59 -67 -73 56) -73]
Test Case: 681 | Input/Output: [(-10 88 25 43) -10]
Test Case: 682 | Input/Output: [(-81 -92 73 78) -92]
Test Case: 683 | Input/Output: [(-65 -10 61 -52) -65]
Test Case: 684 | Input/Output: [(79 -5 29 -31) -31]
Test Case: 685 | Input/Output: [(-97 0 38 0) -97]
Test Case: 686 | Input/Output: [(100 -6 11 57) -6]
Test Case: 687 | Input/Output: [(-16 -95 5 -82) -95]
Test Case: 688 | Input/Output: [(-38 -81 98 -31) -81]
Test Case: 689 | Input/Output: [(-63 -8 42 28) -63]
Test Case: 690 | Input/Output: [(-84 -95 -18 53) -95]
Test Case: 691 | Input/Output: [(99 79 -74 -60) -74]
Test Case: 692 | Input/Output: [(-16 34 -88 -38) -88]
Test Case: 693 | Input/Output: [(-67 7 -41 -55) -67]
Test Case: 694 | Input/Output: [(58 3 -17 18) -17]
Test Case: 695 | Input/Output: [(89 -48 -31 85) -48]
Test Case: 696 | Input/Output: [(-25 33 6 26) -25]
Test Case: 697 | Input/Output: [(64 31 -53 -74) -74]
Test Case: 698 | Input/Output: [(16 26 -83 -22) -83]
Test Case: 699 | Input/Output: [(-34 13 -41 -95) -95]
Test Case: 700 | Input/Output: [(-34 -24 98 50) -34]
Test Case: 701 | Input/Output: [(94 -35 29 -89) -89]
Test Case: 702 | Input/Output: [(96 -100 -86 -29) -100]
Test Case: 703 | Input/Output: [(30 -40 -66 -88) -88]
Test Case: 704 | Input/Output: [(-24 64 -33 16) -33]
Test Case: 705 | Input/Output: [(53 -74 94 51) -74]
Test Case: 706 | Input/Output: [(66 25 54 -6) -6]
Test Case: 707 | Input/Output: [(-90 85 9 11) -90]
Test Case: 708 | Input/Output: [(82 53 -16 -14) -16]
Test Case: 709 | Input/Output: [(-6 14 -78 99) -78]
Test Case: 710 | Input/Output: [(98 -82 -32 -75) -82]
Test Case: 711 | Input/Output: [(-5 17 -45 35) -45]
Test Case: 712 | Input/Output: [(40 62 -28 -11) -28]
Test Case: 713 | Input/Output: [(9 -70 95 -45) -70]
Test Case: 714 | Input/Output: [(44 23 57 -33) -33]
Test Case: 715 | Input/Output: [(23 41 -77 25) -77]
Test Case: 716 | Input/Output: [(56 53 69 -80) -80]
Test Case: 717 | Input/Output: [(77 10 -46 74) -46]
Test Case: 718 | Input/Output: [(55 56 84 -64) -64]
Test Case: 719 | Input/Output: [(-59 -42 10 -68) -68]
Test Case: 720 | Input/Output: [(25 -75 65 -2) -75]
Test Case: 721 | Input/Output: [(-1 -5 86 72) -5]
Test Case: 722 | Input/Output: [(63 39 -45 -24) -45]
Test Case: 723 | Input/Output: [(-48 -84 1 -14) -84]
Test Case: 724 | Input/Output: [(-58 -72 50 -42) -72]
Test Case: 725 | Input/Output: [(-64 21 -64 17) -64]
Test Case: 726 | Input/Output: [(-9 28 -74 68) -74]
Test Case: 727 | Input/Output: [(-45 63 77 -69) -69]
Test Case: 728 | Input/Output: [(30 -3 -97 73) -97]
Test Case: 729 | Input/Output: [(5 81 97 -90) -90]
Test Case: 730 | Input/Output: [(-24 92 90 61) -24]
Test Case: 731 | Input/Output: [(13 -46 10 -19) -46]
Test Case: 732 | Input/Output: [(61 -5 -12 48) -12]
Test Case: 733 | Input/Output: [(-69 -6 62 -83) -83]
Test Case: 734 | Input/Output: [(-65 61 91 17) -65]
Test Case: 735 | Input/Output: [(-13 51 -6 -39) -39]
Test Case: 736 | Input/Output: [(-55 -73 89 77) -73]
Test Case: 737 | Input/Output: [(-61 -65 -37 -21) -65]
Test Case: 738 | Input/Output: [(-97 -37 89 -35) -97]
Test Case: 739 | Input/Output: [(52 50 44 0) 0]
Test Case: 740 | Input/Output: [(80 -45 -19 57) -45]
Test Case: 741 | Input/Output: [(60 -59 3 -18) -59]
Test Case: 742 | Input/Output: [(-91 24 2 67) -91]
Test Case: 743 | Input/Output: [(-57 -15 55 -45) -57]
Test Case: 744 | Input/Output: [(46 69 -3 21) -3]
Test Case: 745 | Input/Output: [(86 -20 45 -11) -20]
Test Case: 746 | Input/Output: [(-91 -74 -81 19) -91]
Test Case: 747 | Input/Output: [(-29 32 -96 -51) -96]
Test Case: 748 | Input/Output: [(-100 -77 -21 -8) -100]
Test Case: 749 | Input/Output: [(-45 77 83 71) -45]
Test Case: 750 | Input/Output: [(68 50 -53 -91) -91]
Test Case: 751 | Input/Output: [(-95 -22 60 39) -95]
Test Case: 752 | Input/Output: [(9 -23 70 -50) -50]
Test Case: 753 | Input/Output: [(75 98 36 27) 27]
Test Case: 754 | Input/Output: [(-49 -24 51 -18) -49]
Test Case: 755 | Input/Output: [(62 -21 -42 70) -42]
Test Case: 756 | Input/Output: [(82 -96 -23 59) -96]
Test Case: 757 | Input/Output: [(-52 -21 58 -72) -72]
Test Case: 758 | Input/Output: [(-53 -13 -4 19) -53]
Test Case: 759 | Input/Output: [(-65 71 12 -98) -98]
Test Case: 760 | Input/Output: [(3 64 90 78) 3]
Test Case: 761 | Input/Output: [(66 93 1 36) 1]
Test Case: 762 | Input/Output: [(-50 -72 -9 68) -72]
Test Case: 763 | Input/Output: [(-7 -23 21 -9) -23]
Test Case: 764 | Input/Output: [(64 -78 -9 5) -78]
Test Case: 765 | Input/Output: [(-78 -35 -35 -44) -78]
Test Case: 766 | Input/Output: [(-41 41 -21 -87) -87]
Test Case: 767 | Input/Output: [(-94 -32 -65 36) -94]
Test Case: 768 | Input/Output: [(-68 -90 -9 22) -90]
Test Case: 769 | Input/Output: [(-4 73 -57 -31) -57]
Test Case: 770 | Input/Output: [(17 84 58 81) 17]
Test Case: 771 | Input/Output: [(-10 11 -93 -76) -93]
Test Case: 772 | Input/Output: [(89 3 80 -13) -13]
Test Case: 773 | Input/Output: [(-33 -86 -4 -22) -86]
Test Case: 774 | Input/Output: [(77 20 -32 -5) -32]
Test Case: 775 | Input/Output: [(-91 26 65 99) -91]
Test Case: 776 | Input/Output: [(-95 67 14 -11) -95]
Test Case: 777 | Input/Output: [(37 100 -91 -64) -91]
Test Case: 778 | Input/Output: [(-41 -44 -72 97) -72]
Test Case: 779 | Input/Output: [(-25 66 81 3) -25]
Test Case: 780 | Input/Output: [(-54 51 10 -58) -58]
Test Case: 781 | Input/Output: [(41 -55 24 90) -55]
Test Case: 782 | Input/Output: [(-40 -37 -90 97) -90]
Test Case: 783 | Input/Output: [(31 -97 -50 -25) -97]
Test Case: 784 | Input/Output: [(49 -88 68 -85) -88]
Test Case: 785 | Input/Output: [(-54 -35 51 -15) -54]
Test Case: 786 | Input/Output: [(80 -80 49 -41) -80]
Test Case: 787 | Input/Output: [(-2 77 60 88) -2]
Test Case: 788 | Input/Output: [(40 -1 74 47) -1]
Test Case: 789 | Input/Output: [(-1 85 -67 -6) -67]
Test Case: 790 | Input/Output: [(-57 3 -31 41) -57]
Test Case: 791 | Input/Output: [(-62 -22 7 -29) -62]
Test Case: 792 | Input/Output: [(-94 -33 -66 68) -94]
Test Case: 793 | Input/Output: [(-25 -19 -81 34) -81]
Test Case: 794 | Input/Output: [(-40 2 7 62) -40]
Test Case: 795 | Input/Output: [(81 -82 -76 9) -82]
Test Case: 796 | Input/Output: [(-86 -93 -23 67) -93]
Test Case: 797 | Input/Output: [(11 -23 21 -75) -75]
Test Case: 798 | Input/Output: [(2 14 56 -21) -21]
Test Case: 799 | Input/Output: [(-79 59 -67 22) -79]
Test Case: 800 | Input/Output: [(45 -56 19 -40) -56]
Test Case: 801 | Input/Output: [(37 -32 76 -42) -42]
Test Case: 802 | Input/Output: [(47 100 52 82) 47]
Test Case: 803 | Input/Output: [(-82 48 24 1) -82]
Test Case: 804 | Input/Output: [(-44 97 71 -42) -44]
Test Case: 805 | Input/Output: [(-2 73 -56 1) -56]
Test Case: 806 | Input/Output: [(64 7 32 -37) -37]
Test Case: 807 | Input/Output: [(-85 98 -40 -71) -85]
Test Case: 808 | Input/Output: [(-57 -18 15 49) -57]
Test Case: 809 | Input/Output: [(-68 -44 28 -45) -68]
Test Case: 810 | Input/Output: [(4 -96 93 77) -96]
Test Case: 811 | Input/Output: [(39 -60 25 -18) -60]
Test Case: 812 | Input/Output: [(39 -15 -43 -75) -75]
Test Case: 813 | Input/Output: [(-97 -6 49 -73) -97]
Test Case: 814 | Input/Output: [(-20 -2 50 -28) -28]
Test Case: 815 | Input/Output: [(-45 -43 77 -11) -45]
Test Case: 816 | Input/Output: [(22 23 100 -66) -66]
Test Case: 817 | Input/Output: [(-28 12 -36 -80) -80]
Test Case: 818 | Input/Output: [(-5 29 -19 -90) -90]
Test Case: 819 | Input/Output: [(81 92 39 -56) -56]
Test Case: 820 | Input/Output: [(-79 -93 10 6) -93]
Test Case: 821 | Input/Output: [(-98 94 87 2) -98]
Test Case: 822 | Input/Output: [(28 -5 -38 -43) -43]
Test Case: 823 | Input/Output: [(-84 15 -28 59) -84]
Test Case: 824 | Input/Output: [(-38 -47 -82 88) -82]
Test Case: 825 | Input/Output: [(52 -59 23 -61) -61]
Test Case: 826 | Input/Output: [(-39 33 -7 -86) -86]
Test Case: 827 | Input/Output: [(-22 55 -61 -81) -81]
Test Case: 828 | Input/Output: [(-69 -4 46 -50) -69]
Test Case: 829 | Input/Output: [(22 -54 32 -83) -83]
Test Case: 830 | Input/Output: [(35 85 -23 -86) -86]
Test Case: 831 | Input/Output: [(27 -21 -48 -30) -48]
Test Case: 832 | Input/Output: [(-38 -27 -6 85) -38]
Test Case: 833 | Input/Output: [(6 58 61 -99) -99]
Test Case: 834 | Input/Output: [(-72 86 58 89) -72]
Test Case: 835 | Input/Output: [(-4 -59 -96 0) -96]
Test Case: 836 | Input/Output: [(75 47 -34 32) -34]
Test Case: 837 | Input/Output: [(57 -52 -9 -22) -52]
Test Case: 838 | Input/Output: [(8 -97 -96 81) -97]
Test Case: 839 | Input/Output: [(79 57 -99 43) -99]
Test Case: 840 | Input/Output: [(-39 19 -35 -43) -43]
Test Case: 841 | Input/Output: [(-4 -74 16 91) -74]
Test Case: 842 | Input/Output: [(79 59 -57 -93) -93]
Test Case: 843 | Input/Output: [(26 26 -89 -13) -89]
Test Case: 844 | Input/Output: [(80 -47 90 55) -47]
Test Case: 845 | Input/Output: [(-14 -46 -13 62) -46]
Test Case: 846 | Input/Output: [(21 -31 5 41) -31]
Test Case: 847 | Input/Output: [(59 -14 9 14) -14]
Test Case: 848 | Input/Output: [(67 -22 77 -3) -22]
Test Case: 849 | Input/Output: [(-51 -78 17 63) -78]
Test Case: 850 | Input/Output: [(-30 51 -6 78) -30]
Test Case: 851 | Input/Output: [(-13 -73 -23 -54) -73]
Test Case: 852 | Input/Output: [(10 93 -20 64) -20]
Test Case: 853 | Input/Output: [(13 -54 59 -98) -98]
Test Case: 854 | Input/Output: [(-16 86 32 -22) -22]
Test Case: 855 | Input/Output: [(34 -52 -69 -37) -69]
Test Case: 856 | Input/Output: [(45 -17 66 23) -17]
Test Case: 857 | Input/Output: [(37 68 45 -78) -78]
Test Case: 858 | Input/Output: [(-41 -17 11 34) -41]
Test Case: 859 | Input/Output: [(38 96 -91 -55) -91]
Test Case: 860 | Input/Output: [(69 -91 -36 -72) -91]
Test Case: 861 | Input/Output: [(-61 -76 45 3) -76]
Test Case: 862 | Input/Output: [(-58 99 94 -10) -58]
Test Case: 863 | Input/Output: [(-54 62 46 30) -54]
Test Case: 864 | Input/Output: [(-14 50 28 32) -14]
Test Case: 865 | Input/Output: [(0 67 57 6) 0]
Test Case: 866 | Input/Output: [(86 22 5 -80) -80]
Test Case: 867 | Input/Output: [(-88 9 45 5) -88]
Test Case: 868 | Input/Output: [(72 -64 -6 76) -64]
Test Case: 869 | Input/Output: [(22 66 -85 -37) -85]
Test Case: 870 | Input/Output: [(73 43 -5 7) -5]
Test Case: 871 | Input/Output: [(-68 -8 90 89) -68]
Test Case: 872 | Input/Output: [(-1 -57 31 -40) -57]
Test Case: 873 | Input/Output: [(-74 -16 55 36) -74]
Test Case: 874 | Input/Output: [(-83 95 -17 -64) -83]
Test Case: 875 | Input/Output: [(-93 -71 -68 -18) -93]
Test Case: 876 | Input/Output: [(17 -45 -30 -8) -45]
Test Case: 877 | Input/Output: [(-88 -2 -42 -30) -88]
Test Case: 878 | Input/Output: [(-42 -13 84 50) -42]
Test Case: 879 | Input/Output: [(-82 -54 57 -29) -82]
Test Case: 880 | Input/Output: [(-47 -41 29 -77) -77]
Test Case: 881 | Input/Output: [(-72 -18 78 -58) -72]
Test Case: 882 | Input/Output: [(-24 34 -79 -19) -79]
Test Case: 883 | Input/Output: [(79 -12 41 96) -12]
Test Case: 884 | Input/Output: [(-77 -67 48 65) -77]
Test Case: 885 | Input/Output: [(99 98 88 72) 72]
Test Case: 886 | Input/Output: [(23 53 79 65) 23]
Test Case: 887 | Input/Output: [(0 69 -80 -32) -80]
Test Case: 888 | Input/Output: [(76 -79 41 90) -79]
Test Case: 889 | Input/Output: [(-73 -30 -37 -74) -74]
Test Case: 890 | Input/Output: [(-72 80 -77 68) -77]
Test Case: 891 | Input/Output: [(-65 -30 42 -50) -65]
Test Case: 892 | Input/Output: [(83 -33 96 -41) -41]
Test Case: 893 | Input/Output: [(-81 -46 -32 -11) -81]
Test Case: 894 | Input/Output: [(-8 41 -33 -72) -72]
Test Case: 895 | Input/Output: [(-27 -14 83 76) -27]
Test Case: 896 | Input/Output: [(82 69 -6 49) -6]
Test Case: 897 | Input/Output: [(-100 84 -15 -17) -100]
Test Case: 898 | Input/Output: [(14 -88 23 67) -88]
Test Case: 899 | Input/Output: [(-46 40 -56 71) -56]
Test Case: 900 | Input/Output: [(2 83 91 55) 2]
Test Case: 901 | Input/Output: [(43 -21 91 -33) -33]
Test Case: 902 | Input/Output: [(-55 32 -63 -71) -71]
Test Case: 903 | Input/Output: [(46 21 28 -24) -24]
Test Case: 904 | Input/Output: [(-71 24 88 6) -71]
Test Case: 905 | Input/Output: [(-75 -74 -90 -10) -90]
Test Case: 906 | Input/Output: [(14 -38 40 -58) -58]
Test Case: 907 | Input/Output: [(-16 -69 -67 87) -69]
Test Case: 908 | Input/Output: [(-29 71 -97 25) -97]
Test Case: 909 | Input/Output: [(-36 -14 -36 53) -36]
Test Case: 910 | Input/Output: [(-35 97 53 -91) -91]
Test Case: 911 | Input/Output: [(12 17 -2 -18) -18]
Test Case: 912 | Input/Output: [(-21 -22 41 -69) -69]
Test Case: 913 | Input/Output: [(-86 36 -95 -71) -95]
Test Case: 914 | Input/Output: [(-39 -55 -50 -27) -55]
Test Case: 915 | Input/Output: [(-64 89 98 12) -64]
Test Case: 916 | Input/Output: [(72 -86 -79 -69) -86]
Test Case: 917 | Input/Output: [(95 -57 -88 -21) -88]
Test Case: 918 | Input/Output: [(33 -60 32 78) -60]
Test Case: 919 | Input/Output: [(83 -70 82 26) -70]
Test Case: 920 | Input/Output: [(21 3 -43 -1) -43]
Test Case: 921 | Input/Output: [(0 -13 64 7) -13]
Test Case: 922 | Input/Output: [(2 66 0 17) 0]
Test Case: 923 | Input/Output: [(46 17 -63 -3) -63]
Test Case: 924 | Input/Output: [(-71 31 -79 -53) -79]
Test Case: 925 | Input/Output: [(-76 -40 -5 12) -76]
Test Case: 926 | Input/Output: [(91 42 33 -28) -28]
Test Case: 927 | Input/Output: [(-16 -48 -12 -82) -82]
Test Case: 928 | Input/Output: [(45 -49 -63 -15) -63]
Test Case: 929 | Input/Output: [(85 75 -19 -48) -48]
Test Case: 930 | Input/Output: [(100 -76 -23 -22) -76]
Test Case: 931 | Input/Output: [(11 26 -92 -10) -92]
Test Case: 932 | Input/Output: [(97 43 -35 41) -35]
Test Case: 933 | Input/Output: [(-17 -65 31 18) -65]
Test Case: 934 | Input/Output: [(-64 -36 -90 61) -90]
Test Case: 935 | Input/Output: [(43 81 17 99) 17]
Test Case: 936 | Input/Output: [(-79 56 -73 -46) -79]
Test Case: 937 | Input/Output: [(-55 11 -79 -38) -79]
Test Case: 938 | Input/Output: [(-85 -1 -5 -6) -85]
Test Case: 939 | Input/Output: [(20 70 99 13) 13]
Test Case: 940 | Input/Output: [(-31 58 58 -5) -31]
Test Case: 941 | Input/Output: [(28 -21 -83 -68) -83]
Test Case: 942 | Input/Output: [(96 -50 -80 71) -80]
Test Case: 943 | Input/Output: [(20 85 15 40) 15]
Test Case: 944 | Input/Output: [(50 -71 -86 51) -86]
Test Case: 945 | Input/Output: [(-3 0 -39 11) -39]
Test Case: 946 | Input/Output: [(13 -3 66 98) -3]
Test Case: 947 | Input/Output: [(-45 -90 -50 -16) -90]
Test Case: 948 | Input/Output: [(89 -20 54 19) -20]
Test Case: 949 | Input/Output: [(-15 73 -97 -42) -97]
Test Case: 950 | Input/Output: [(-79 -41 -46 32) -79]
Test Case: 951 | Input/Output: [(-67 -43 79 -23) -67]
Test Case: 952 | Input/Output: [(-48 -51 -5 -51) -51]
Test Case: 953 | Input/Output: [(53 6 31 -30) -30]
Test Case: 954 | Input/Output: [(-43 91 -32 -75) -75]
Test Case: 955 | Input/Output: [(-36 -54 91 66) -54]
Test Case: 956 | Input/Output: [(-45 -58 -20 72) -58]
Test Case: 957 | Input/Output: [(-79 -89 86 60) -89]
Test Case: 958 | Input/Output: [(31 18 -54 -1) -54]
Test Case: 959 | Input/Output: [(56 51 91 99) 51]
Test Case: 960 | Input/Output: [(69 31 -83 20) -83]
Test Case: 961 | Input/Output: [(-46 10 -29 -26) -46]
Test Case: 962 | Input/Output: [(44 -78 -47 -37) -78]
Test Case: 963 | Input/Output: [(-10 -56 1 -19) -56]
Test Case: 964 | Input/Output: [(-51 2 94 -2) -51]
Test Case: 965 | Input/Output: [(-71 -5 77 -51) -71]
Test Case: 966 | Input/Output: [(-57 -26 -81 -90) -90]
Test Case: 967 | Input/Output: [(-65 77 45 -36) -65]
Test Case: 968 | Input/Output: [(-52 -19 -11 25) -52]
Test Case: 969 | Input/Output: [(-13 -91 -31 -67) -91]
Test Case: 970 | Input/Output: [(-10 -46 50 22) -46]
Test Case: 971 | Input/Output: [(-34 16 -28 -6) -34]
Test Case: 972 | Input/Output: [(-29 7 53 86) -29]
Test Case: 973 | Input/Output: [(-71 -42 -46 -31) -71]
Test Case: 974 | Input/Output: [(-47 -85 62 -59) -85]
Test Case: 975 | Input/Output: [(-54 -25 -48 45) -54]
Test Case: 976 | Input/Output: [(53 -93 21 87) -93]
Test Case: 977 | Input/Output: [(-44 87 41 -5) -44]
Test Case: 978 | Input/Output: [(-85 -93 57 -62) -93]
Test Case: 979 | Input/Output: [(3 -96 52 -43) -96]
Test Case: 980 | Input/Output: [(49 85 53 57) 49]
Test Case: 981 | Input/Output: [(-62 13 -88 40) -88]
Test Case: 982 | Input/Output: [(69 -14 -27 0) -27]
Test Case: 983 | Input/Output: [(95 -28 50 -55) -55]
Test Case: 984 | Input/Output: [(-82 -10 -47 88) -82]
Test Case: 985 | Input/Output: [(28 -72 3 76) -72]
Test Case: 986 | Input/Output: [(19 -74 69 -39) -74]
Test Case: 987 | Input/Output: [(-20 1 -37 -82) -82]
Test Case: 988 | Input/Output: [(73 28 -72 61) -72]
Test Case: 989 | Input/Output: [(-53 73 -95 53) -95]
Test Case: 990 | Input/Output: [(-35 99 29 -77) -77]
Test Case: 991 | Input/Output: [(-64 98 48 -18) -64]
Test Case: 992 | Input/Output: [(76 -67 63 -30) -67]
Test Case: 993 | Input/Output: [(40 -24 -95 -60) -95]
Test Case: 994 | Input/Output: [(19 -69 -28 -24) -69]
Test Case: 995 | Input/Output: [(-16 -87 -23 -68) -87]
Test Case: 996 | Input/Output: [(-99 -97 18 62) -99]
Test Case: 997 | Input/Output: [(-2 70 8 29) -2]
Test Case: 998 | Input/Output: [(-87 -18 34 -50) -87]
Test Case: 999 | Input/Output: [(-99 33 -36 -30) -99]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 76 70 -100 -83 70 118 -2 41 37 -18 -105 -72 76 85 72 77
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[85 85 -75 85] -75] [[81 -34 -34 -34] -34] [[-51 54 -51 -51] -51] [[100 100 100 29] 29] [[75 37 75 75] 37] [[39 39 25 39] 25] [[-86 -73 -73 -73] -86] [[34 34 34 -5] -5] [[-24 -24 57 -24] -24] [[-78 -78 -78 -90] -90] [(26 26 26 26) 26] [(55 55 55 55) 55] [(21 21 21 21) 21] [(9 9 9 9) 9] [(-1 -1 -1 -1) -1] [(48 34 87 36) 34] [(98 60 73 65) 60] [(75 69 4 87) 4] [(38 39 92 5) 5] [(32 18 93 20) 18] [(66 85 97 6) 6] [(40 42 53 40) 40] [(55 73 68 62) 55] [(100 48 71 59) 48] [(30 23 69 25) 23] [(20 19 25 76) 19] [(74 67 4 30) 4] [(20 43 17 91) 17] [(86 87 22 44) 22] [(97 79 10 61) 10] [(76 36 13 89) 13] [(32 60 19 50) 19] [(84 12 55 38) 12] [(55 38 50 74) 38] [(84 55 44 18) 18] [(35 9 96 13) 9] [(-64 -58 -97 -81) -97] [(-55 80 85 -96) -96] [(-42 -50 -38 -59) -59] [(-5 2 -26 77) -26] [(6 -2 93 100) -2] [(-47 -24 -32 -19) -47] [(80 -44 -34 95) -44] [(36 9 42 -22) -22] [(96 22 67 93) 22] [(-9 1 78 -38) -38] [(63 83 -56 4) -56] [(-77 31 11 35) -77] [(-43 45 7 -100) -100] [(-82 61 40 -44) -82] [(-14 -61 -67 -33) -67] [(-4 56 10 -32) -32] [(85 -98 92 -85) -98] [(-62 6 28 92) -62] [(-33 25 -95 25) -95] [(-97 -83 3 -28) -97] [(50 -91 -57 -15) -91] [(60 54 -85 -42) -85] [(-85 42 -48 -44) -85] [(-66 -13 -31 -21) -66] [(-72 -57 59 44) -72] [(56 28 22 -39) -39] [(-45 -4 33 91) -45] [(-21 73 -99 -56) -99] [(45 -28 -39 -24) -39] [(35 39 -25 14) -25] [(-53 85 -17 21) -53] [(67 -100 -21 -29) -100] [(-54 16 -62 -73) -73] [(-79 77 -9 2) -79] [(-41 -40 23 44) -41] [(-88 80 -10 -66) -88] [(83 -46 -36 69) -46] [(-16 48 -33 -17) -33] [(65 57 -14 -22) -22] [(93 -99 2 -37) -99] [(20 -37 -87 40) -87] [(29 85 -31 26) -31] [(12 -66 -73 -55) -73] [(44 51 -34 43) -34] [(80 -100 -91 -44) -100] [(-65 34 -67 73) -67] [(13 15 8 -94) -94] [(-61 52 74 -20) -61] [(23 -50 -67 -67) -67] [(-97 43 92 68) -97] [(-90 73 -10 -76) -90] [(-32 7 -54 68) -54] [(-61 -67 6 37) -67] [(38 -98 -100 93) -100] [(-77 89 -30 -62) -77] [(-20 -36 -13 -27) -36] [(-23 50 -39 -68) -68] [(1 -40 -17 -60) -60] [(-84 -37 -56 16) -84])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 98                 
Correct output: 4                   | Program output: 75                 
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 100                
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 74                 
Correct output: 17                  | Program output: 20                 
Correct output: 22                  | Program output: 86                 
Correct output: 10                  | Program output: 97                 
Correct output: 13                  | Program output: 76                 
Correct output: 19                  | Program output: 32                 
Correct output: 12                  | Program output: 84                 
Correct output: 38                  | Program output: 55                 
Correct output: 18                  | Program output: 84                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -5                 
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: 80                 
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 96                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: 63                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -14                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 50                 
Correct output: -85                 | Program output: 60                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 56                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -21                
Correct output: -39                 | Program output: 45                 
Correct output: -25                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: 67                 
Correct output: -73                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: 83                 
Correct output: -33                 | Program output: -16                
Correct output: -22                 | Program output: 65                 
Correct output: -99                 | Program output: 93                 
Correct output: -87                 | Program output: 20                 
Correct output: -31                 | Program output: 29                 
Correct output: -73                 | Program output: 12                 
Correct output: -34                 | Program output: 44                 
Correct output: -100                | Program output: 80                 
Correct output: -67                 | Program output: -65                
Correct output: -94                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -32                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: 38                 
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -23                
Correct output: -60                 | Program output: 1                  
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in3 boolean_not exec_do*while () exec_rot () (exec_do*range () integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) in4 exec_s_when_autoconstructing (exec_pop (exec_stackdepth) exec_if (integer_mult integer_swap) (boolean_flush) integer_lt boolean_pop) (exec_empty exec_if () (boolean_frominteger)) ())
Lexicase best errors: [1 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in3 boolean_not exec_do*while () exec_rot () (exec_do*range () integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) in4 exec_s_when_autoconstructing (exec_pop (exec_stackdepth) exec_if (integer_mult integer_swap) (boolean_flush) integer_lt boolean_pop) (exec_empty exec_if () (boolean_frominteger)) ())
Zero cases best errors: [1 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 12 10 21 3 6 3 3 13 3)
Population mean number of elite cases: 0.08
Count of perfect (error zero) individuals by case: (3 12 10 21 3 6 3 3 13 3)
Population mean number of perfect (error zero) cases: 0.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_min in1 print_integer exec_pop ())
Errors: [1 0 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 4
Size: 6
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 9.923
Median total errors in population: 10
Error averages by case: (0.997 0.988 0.99 0.979 0.997 0.994 0.997 0.997 0.987 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.355
Average program size in population (points): 69.271
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 466921
--- Timings ---
Current time: 1559583974000 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 29.6%
Fitness Testing:      1.7 seconds, 66.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: 57                 
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 87                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 92                 
Correct output: 18                  | Program output: 93                 
Correct output: 6                   | Program output: 97                 
Correct output: 40                  | Program output: 53                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 69                 
Correct output: 19                  | Program output: 25                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 85                 
Correct output: -59                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 93                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 42                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: 78                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 92                 
Correct output: -62                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: 3                  
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: 59                 
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: 23                 
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 74                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 92                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -13                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in3 boolean_not exec_do*while () exec_rot () (exec_do*range () integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) in4 exec_s_when_autoconstructing (exec_pop (exec_stackdepth) exec_if (integer_mult integer_swap) (boolean_flush) integer_lt boolean_pop) (exec_empty exec_if () (boolean_frominteger)) ())
Lexicase best errors: [1 0 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in3 boolean_not exec_do*while () exec_rot () (exec_do*range () integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) in4 exec_s_when_autoconstructing (exec_pop (exec_stackdepth) exec_if (integer_mult integer_swap) (boolean_flush) integer_lt boolean_pop) (exec_empty exec_if () (boolean_frominteger)) ())
Zero cases best errors: [1 0 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 235 358 342 234 1 358 235 593 936)
Population mean number of elite cases: 3.29
Count of perfect (error zero) individuals by case: (1 235 358 342 234 1 358 235 593 936)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 2, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_473} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_517} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div})
Best program: (exec_dup (integer_mult boolean_empty in3 exec_when (print_integer exec_s_when_autoconstructing (exec_flush integer_stackdepth boolean_or print_exec () exec_while (exec_stackdepth exec_dup (exec_k (integer_yank integer_gt exec_swap () (integer_add exec_yank integer_div in4)) (integer_dup_times) boolean_dup_times in1 exec_stackdepth boolean_shove integer_gte integer_dup_items boolean_yank integer_mult boolean_xor exec_s (integer_fromboolean print_integer integer_min tagged_473 integer_add integer_add integer_gte exec_s_when_autoconstructing (integer_swap exec_eq tag_integer_517 exec_do*range ()) (integer_max integer_div) ()) () ()))) () ())))
Errors: [1 0 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 47
Size: 67
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 6.707
Median total errors in population: 6
Error averages by case: (0.999 0.765 0.642 0.658 0.766 0.999 0.642 0.765 0.407 0.064)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.945
Average program size in population (points): 41.291
Average percent parens in population: 0.300
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.502
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.366
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.348
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 656953
--- Timings ---
Current time: 1559583976285 milliseconds
Total Time:           5.0 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.6 seconds, 50.9%
Fitness Testing:      2.1 seconds, 41.8%
Report:               0.3 seconds,  5.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 98                 
Correct output: 4                   | Program output: 75                 
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 100                
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 74                 
Correct output: 17                  | Program output: 20                 
Correct output: 22                  | Program output: 86                 
Correct output: 10                  | Program output: 97                 
Correct output: 13                  | Program output: 76                 
Correct output: 19                  | Program output: 32                 
Correct output: 12                  | Program output: 84                 
Correct output: 38                  | Program output: 55                 
Correct output: 18                  | Program output: 84                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -5                 
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: 80                 
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 96                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: 63                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -14                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 50                 
Correct output: -85                 | Program output: 60                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 56                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -21                
Correct output: -39                 | Program output: 45                 
Correct output: -25                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: 67                 
Correct output: -73                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: 83                 
Correct output: -33                 | Program output: -16                
Correct output: -22                 | Program output: 65                 
Correct output: -99                 | Program output: 93                 
Correct output: -87                 | Program output: 20                 
Correct output: -31                 | Program output: 29                 
Correct output: -73                 | Program output: 12                 
Correct output: -34                 | Program output: 44                 
Correct output: -100                | Program output: 80                 
Correct output: -67                 | Program output: -65                
Correct output: -94                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -32                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: 38                 
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -23                
Correct output: -60                 | Program output: 1                  
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_eq in1 integer_gt boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (print_integer) (integer_mult integer_swap) ())
Lexicase best errors: [0 1 1 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 13
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_eq in1 integer_gt boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (print_integer) (integer_mult integer_swap) ())
Zero cases best errors: [0 1 1 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 13
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 350 117 117 349 242 245 245 242 117)
Population mean number of elite cases: 2.27
Count of perfect (error zero) individuals by case: (242 350 117 117 349 242 245 245 242 117)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction -41} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_boolean_873} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean})
Best program: (in1 print_integer integer_shove exec_eq boolean_not boolean_or integer_inc boolean_pop exec_while (exec_dup (boolean_or boolean_dup integer_pop integer_yankdup exec_noop) exec_shove (integer_dup_items exec_do*count () exec_dup () integer_lt boolean_or -41 exec_pop (integer_lte integer_gte integer_gt boolean_stackdepth integer_dup_items integer_flush exec_do*times (integer_swap tag_boolean_873 exec_s_when_autoconstructing (integer_dup) () (integer_empty boolean_yankdup integer_dup_times exec_do*times () integer_flush exec_y (print_integer integer_flush boolean_shove) print_boolean))))))
Errors: [0 1 1 1 1 0 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 44
Size: 57
Percent parens: 0.228
--- Population Statistics ---
Average total errors in population: 7.734
Median total errors in population: 8
Error averages by case: (0.758 0.65 0.883 0.883 0.651 0.758 0.755 0.755 0.758 0.883)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.747
Average program size in population (points): 50.339
Average percent parens in population: 0.278
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.1425
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 883937
--- Timings ---
Current time: 1559583979056 milliseconds
Total Time:           7.8 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.8 seconds, 61.8%
Fitness Testing:      2.4 seconds, 31.4%
Report:               0.4 seconds,  5.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 29                 
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 36                 
Correct output: 60                  | Program output: 65                 
Correct output: 4                   | Program output: 87                 
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 62                 
Correct output: 48                  | Program output: 59                 
Correct output: 23                  | Program output: 25                 
Correct output: 19                  | Program output: 76                 
Correct output: 4                   | Program output: 30                 
Correct output: 17                  | Program output: 91                 
Correct output: 22                  | Program output: 44                 
Correct output: 10                  | Program output: 61                 
Correct output: 13                  | Program output: 89                 
Correct output: 19                  | Program output: 50                 
Correct output: 12                  | Program output: 38                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 13                 
Correct output: -97                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: 77                 
Correct output: -2                  | Program output: 100                
Correct output: -47                 | Program output: -19                
Correct output: -44                 | Program output: 95                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 93                 
Correct output: -38                 | Program output: -38                
Correct output: -56                 | Program output: 4                  
Correct output: -77                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -44                
Correct output: -67                 | Program output: -33                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -85                
Correct output: -62                 | Program output: 92                 
Correct output: -95                 | Program output: 25                 
Correct output: -97                 | Program output: -28                
Correct output: -91                 | Program output: -15                
Correct output: -85                 | Program output: -42                
Correct output: -85                 | Program output: -44                
Correct output: -66                 | Program output: -21                
Correct output: -72                 | Program output: 44                 
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: 91                 
Correct output: -99                 | Program output: -56                
Correct output: -39                 | Program output: -24                
Correct output: -25                 | Program output: 14                 
Correct output: -53                 | Program output: 21                 
Correct output: -100                | Program output: -29                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 2                  
Correct output: -41                 | Program output: 44                 
Correct output: -88                 | Program output: -66                
Correct output: -46                 | Program output: 69                 
Correct output: -33                 | Program output: -17                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -37                
Correct output: -87                 | Program output: 40                 
Correct output: -31                 | Program output: 26                 
Correct output: -73                 | Program output: -55                
Correct output: -34                 | Program output: 43                 
Correct output: -100                | Program output: -44                
Correct output: -67                 | Program output: 73                 
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -20                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 68                 
Correct output: -90                 | Program output: -76                
Correct output: -54                 | Program output: 68                 
Correct output: -67                 | Program output: 37                 
Correct output: -100                | Program output: 93                 
Correct output: -77                 | Program output: -62                
Correct output: -36                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_or} {:close 0, :instruction -41} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_boolean_873} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean})
Lexicase best program: (in4 print_integer integer_shove in2 boolean_not boolean_or integer_inc boolean_pop exec_while (exec_dup (boolean_or boolean_dup integer_pop integer_yankdup exec_noop) exec_shove (integer_dup_items exec_do*count (exec_dup () integer_lt boolean_or) -41 exec_pop (integer_lte integer_gte integer_gt boolean_stackdepth integer_dup_items integer_flush exec_do*times (integer_swap tag_boolean_873 exec_s_when_autoconstructing (integer_dup) () (integer_empty boolean_yankdup) integer_dup_times exec_do*times () integer_flush exec_y (print_integer integer_flush boolean_shove) print_boolean)))))
Lexicase best errors: [1 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 57
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_or} {:close 0, :instruction -41} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_boolean_873} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean})
Zero cases best program: (in4 print_integer integer_shove in2 boolean_not boolean_or integer_inc boolean_pop exec_while (exec_dup (boolean_or boolean_dup integer_pop integer_yankdup exec_noop) exec_shove (integer_dup_items exec_do*count (exec_dup () integer_lt boolean_or) -41 exec_pop (integer_lte integer_gte integer_gt boolean_stackdepth integer_dup_items integer_flush exec_do*times (integer_swap tag_boolean_873 exec_s_when_autoconstructing (integer_dup) () (integer_empty boolean_yankdup) integer_dup_times exec_do*times () integer_flush exec_y (print_integer integer_flush boolean_shove) print_boolean)))))
Zero cases best errors: [1 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 57
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 201 201 200 271 275 201 275 201 200)
Population mean number of elite cases: 2.22
Count of perfect (error zero) individuals by case: (200 201 201 200 271 275 201 275 201 200)
Population mean number of perfect (error zero) cases: 2.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup})
Best program: (in4 print_integer integer_shove in2 boolean_not integer_yank boolean_empty integer_sub boolean_eq exec_when (in1 boolean_stackdepth) exec_y_when_autoconstructing (integer_dup_times exec_s_when_autoconstructing (boolean_invert_first_then_and) (boolean_swap in1) (exec_k_when_autoconstructing (boolean_and integer_eq) (boolean_not integer_swap) integer_shove) boolean_eq boolean_rot integer_gt) exec_do*count (exec_yank exec_flush exec_s (exec_while () boolean_shove integer_max boolean_invert_first_then_and in3) (boolean_frominteger integer_stackdepth in3 exec_do*range () boolean_eq) (exec_s_when_autoconstructing () () (exec_y (integer_dup_times) boolean_dup) exec_swap (integer_gt in3) (exec_y (exec_yank in3) exec_empty) integer_fromboolean) exec_flush integer_eq) integer_flush integer_pop exec_if (in2 exec_yankdup) (integer_mult exec_stackdepth in4) integer_yankdup integer_add exec_noop exec_do*times () integer_mod integer_shove exec_do*times (integer_dup_items) integer_empty integer_dup integer_gt exec_y (integer_lt integer_mult boolean_or boolean_xor in4 integer_dec exec_do*while (exec_dup ())))
Errors: [1 0 0 1 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 83
Size: 111
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 7.775
Median total errors in population: 8
Error averages by case: (0.8 0.799 0.799 0.8 0.729 0.725 0.799 0.725 0.799 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.382
Average program size in population (points): 42.343
Average percent parens in population: 0.286
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.57375
Median age in population: 4.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.531
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1082802
--- Timings ---
Current time: 1559583981801 milliseconds
Total Time:          10.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         7.0 seconds, 67.3%
Fitness Testing:      2.7 seconds, 26.0%
Report:               0.6 seconds,  5.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 98                 
Correct output: 4                   | Program output: 75                 
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 100                
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 74                 
Correct output: 17                  | Program output: 20                 
Correct output: 22                  | Program output: 86                 
Correct output: 10                  | Program output: 97                 
Correct output: 13                  | Program output: 76                 
Correct output: 19                  | Program output: 32                 
Correct output: 12                  | Program output: 84                 
Correct output: 38                  | Program output: 55                 
Correct output: 18                  | Program output: 84                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -5                 
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: 80                 
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 96                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: 63                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -14                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 50                 
Correct output: -85                 | Program output: 60                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 56                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -21                
Correct output: -39                 | Program output: 45                 
Correct output: -25                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: 67                 
Correct output: -73                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: 83                 
Correct output: -33                 | Program output: -16                
Correct output: -22                 | Program output: 65                 
Correct output: -99                 | Program output: 93                 
Correct output: -87                 | Program output: 20                 
Correct output: -31                 | Program output: 29                 
Correct output: -73                 | Program output: 12                 
Correct output: -34                 | Program output: 44                 
Correct output: -100                | Program output: 80                 
Correct output: -67                 | Program output: -65                
Correct output: -94                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -32                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: 38                 
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -23                
Correct output: -60                 | Program output: 1                  
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 2, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_473} {:close 0, :instruction -47} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_517} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div})
Lexicase best program: (in1 print_integer integer_shove exec_eq boolean_not boolean_or integer_inc exec_dup (integer_mult boolean_empty in3 exec_when (print_integer exec_s_when_autoconstructing (exec_flush integer_stackdepth boolean_or print_exec () exec_while (exec_stackdepth exec_dup (exec_k (integer_yank integer_gt exec_swap () (integer_add exec_yank integer_div in4)) (integer_dup_times) boolean_dup_times in1 exec_stackdepth boolean_shove integer_gte) integer_dup_items boolean_yank) integer_mult boolean_xor exec_s (integer_fromboolean) (print_integer integer_min tagged_473 -47 integer_add integer_gte exec_s_when_autoconstructing (integer_swap exec_eq tag_integer_517 exec_do*range ()) (integer_max integer_div) ()) ()) () ())))
Lexicase best errors: [1 1 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 2, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_473} {:close 0, :instruction -47} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_517} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div})
Zero cases best program: (in1 print_integer integer_shove exec_eq boolean_not boolean_or integer_inc exec_dup (integer_mult boolean_empty in3 exec_when (print_integer exec_s_when_autoconstructing (exec_flush integer_stackdepth boolean_or print_exec () exec_while (exec_stackdepth exec_dup (exec_k (integer_yank integer_gt exec_swap () (integer_add exec_yank integer_div in4)) (integer_dup_times) boolean_dup_times in1 exec_stackdepth boolean_shove integer_gte) integer_dup_items boolean_yank) integer_mult boolean_xor exec_s (integer_fromboolean) (print_integer integer_min tagged_473 -47 integer_add integer_gte exec_s_when_autoconstructing (integer_swap exec_eq tag_integer_517 exec_do*range ()) (integer_max integer_div) ()) ()) () ())))
Zero cases best errors: [1 1 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (266 265 204 73 585 73 73 204 204 204)
Population mean number of elite cases: 2.15
Count of perfect (error zero) individuals by case: (266 265 204 73 585 73 73 204 204 204)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_min in1 print_integer exec_pop ())
Errors: [1 1 0 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 4
Size: 6
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.849
Median total errors in population: 8
Error averages by case: (0.734 0.735 0.796 0.927 0.415 0.927 0.927 0.796 0.796 0.796)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.897
Average program size in population (points): 48.608
Average percent parens in population: 0.266
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.12475
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1301644
--- Timings ---
Current time: 1559583984706 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         9.5 seconds, 70.6%
Fitness Testing:      3.0 seconds, 22.3%
Report:               0.8 seconds,  6.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 98                 
Correct output: 4                   | Program output: 75                 
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 100                
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 74                 
Correct output: 17                  | Program output: 20                 
Correct output: 22                  | Program output: 86                 
Correct output: 10                  | Program output: 97                 
Correct output: 13                  | Program output: 76                 
Correct output: 19                  | Program output: 32                 
Correct output: 12                  | Program output: 84                 
Correct output: 38                  | Program output: 55                 
Correct output: 18                  | Program output: 84                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -5                 
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: 80                 
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 96                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: 63                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -14                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 50                 
Correct output: -85                 | Program output: 60                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 56                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -21                
Correct output: -39                 | Program output: 45                 
Correct output: -25                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: 67                 
Correct output: -73                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: 83                 
Correct output: -33                 | Program output: -16                
Correct output: -22                 | Program output: 65                 
Correct output: -99                 | Program output: 93                 
Correct output: -87                 | Program output: 20                 
Correct output: -31                 | Program output: 29                 
Correct output: -73                 | Program output: 12                 
Correct output: -34                 | Program output: 44                 
Correct output: -100                | Program output: 80                 
Correct output: -67                 | Program output: -65                
Correct output: -94                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -32                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: 38                 
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -23                
Correct output: -60                 | Program output: 1                  
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y})
Lexicase best program: (integer_eq in1 integer_gt boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (print_integer) (integer_mult exec_y ()) ())
Lexicase best errors: [0 1 1 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 14
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y})
Zero cases best program: (integer_eq in1 integer_gt boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (print_integer) (integer_mult exec_y ()) ())
Zero cases best errors: [0 1 1 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 14
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (479 1 287 185 1 185 185 479 287 479)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (479 1 287 185 1 185 185 479 287 479)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction -41} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_boolean_873} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean})
Best program: (in1 print_integer integer_shove exec_eq boolean_not boolean_or integer_inc boolean_pop exec_while (exec_dup (boolean_or boolean_dup integer_pop integer_yankdup exec_noop) exec_shove (integer_dup_items exec_do*count () exec_dup () integer_lt boolean_or -41 exec_pop (integer_lte integer_gte integer_gt boolean_stackdepth integer_dup_items integer_flush exec_do*times (integer_swap tag_boolean_873 exec_s_when_autoconstructing (integer_dup) () (integer_empty boolean_yankdup integer_dup_times exec_do*times () integer_flush exec_y (print_integer integer_flush boolean_shove) print_boolean))))))
Errors: [0 1 1 1 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 44
Size: 57
Percent parens: 0.228
--- Population Statistics ---
Average total errors in population: 7.432
Median total errors in population: 7
Error averages by case: (0.521 0.999 0.713 0.815 0.999 0.815 0.815 0.521 0.713 0.521)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.968
Average program size in population (points): 35.493
Average percent parens in population: 0.298
Minimum age in population: 5.0
Maximum age in population: 9.5625
Average age in population: 7.5038125
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1500226
--- Timings ---
Current time: 1559583987541 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.0 seconds, 73.4%
Fitness Testing:      3.3 seconds, 20.0%
Report:               1.0 seconds,  6.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: 54                 
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 69                 
Correct output: 5                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 85                 
Correct output: 40                  | Program output: 42                 
Correct output: 55                  | Program output: 73                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 22                  | Program output: 87                 
Correct output: 10                  | Program output: 79                 
Correct output: 13                  | Program output: 36                 
Correct output: 19                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -58                
Correct output: -96                 | Program output: 80                 
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: 2                  
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -24                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: 1                  
Correct output: -56                 | Program output: 83                 
Correct output: -77                 | Program output: 31                 
Correct output: -100                | Program output: 45                 
Correct output: -82                 | Program output: 61                 
Correct output: -67                 | Program output: -61                
Correct output: -32                 | Program output: 56                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: 25                 
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 54                 
Correct output: -85                 | Program output: 42                 
Correct output: -66                 | Program output: -13                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: 28                 
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: 73                 
Correct output: -39                 | Program output: -28                
Correct output: -25                 | Program output: 39                 
Correct output: -53                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: 16                 
Correct output: -79                 | Program output: 77                 
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 48                 
Correct output: -22                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -37                
Correct output: -31                 | Program output: 85                 
Correct output: -73                 | Program output: -66                
Correct output: -34                 | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 34                 
Correct output: -94                 | Program output: 15                 
Correct output: -61                 | Program output: 52                 
Correct output: -67                 | Program output: -50                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: 73                 
Correct output: -54                 | Program output: 7                  
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -98                
Correct output: -77                 | Program output: 89                 
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: 50                 
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -37                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction -41} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_empty})
Lexicase best program: (integer_eq integer_flush exec_swap (exec_noop integer_max in2 integer_yankdup exec_do*while (integer_empty boolean_empty print_integer exec_shove (integer_dup_items exec_do*count () exec_dup () integer_lt boolean_or -41 exec_k (integer_yankdup boolean_swap exec_rot () (boolean_dup_items) (exec_y () exec_do*while ()) boolean_swap exec_k_when_autoconstructing (integer_stackdepth integer_rot) (integer_dec exec_do*times (exec_k (boolean_and exec_dup (integer_mult) exec_y (exec_s_when_autoconstructing (integer_mult integer_empty) () ())) ()))) ()))) ())
Lexicase best errors: [1 0 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction -41} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_empty})
Zero cases best program: (integer_eq integer_flush exec_swap (exec_noop integer_max in2 integer_yankdup exec_do*while (integer_empty boolean_empty print_integer exec_shove (integer_dup_items exec_do*count () exec_dup () integer_lt boolean_or -41 exec_k (integer_yankdup boolean_swap exec_rot () (boolean_dup_items) (exec_y () exec_do*while ()) boolean_swap exec_k_when_autoconstructing (integer_stackdepth integer_rot) (integer_dec exec_do*times (exec_k (boolean_and exec_dup (integer_mult) exec_y (exec_s_when_autoconstructing (integer_mult integer_empty) () ())) ()))) ()))) ())
Zero cases best errors: [1 0 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 191 286 287 573 191 929 286 928 191)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (165 191 286 287 573 191 929 286 928 191)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_noop})
Best program: (integer_mult boolean_frominteger integer_pop integer_pop in2 print_integer in1 integer_inc integer_stackdepth boolean_invert_first_then_and exec_rot (exec_noop) () ())
Errors: [1 0 1 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 12
Size: 16
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.973
Median total errors in population: 6
Error averages by case: (0.835 0.809 0.714 0.713 0.427 0.809 0.071 0.714 0.072 0.809)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.603
Average program size in population (points): 39.673
Average percent parens in population: 0.304
Minimum age in population: 6.125
Maximum age in population: 10.90625
Average age in population: 9.26596875
Median age in population: 9.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 1740634
--- Timings ---
Current time: 1559583990053 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.0 seconds, 74.7%
Fitness Testing:      3.5 seconds, 18.9%
Report:               1.1 seconds,  5.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 29                 
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 36                 
Correct output: 60                  | Program output: 65                 
Correct output: 4                   | Program output: 87                 
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 62                 
Correct output: 48                  | Program output: 59                 
Correct output: 23                  | Program output: 25                 
Correct output: 19                  | Program output: 76                 
Correct output: 4                   | Program output: 30                 
Correct output: 17                  | Program output: 91                 
Correct output: 22                  | Program output: 44                 
Correct output: 10                  | Program output: 61                 
Correct output: 13                  | Program output: 89                 
Correct output: 19                  | Program output: 50                 
Correct output: 12                  | Program output: 38                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 13                 
Correct output: -97                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: 77                 
Correct output: -2                  | Program output: 100                
Correct output: -47                 | Program output: -19                
Correct output: -44                 | Program output: 95                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 93                 
Correct output: -38                 | Program output: -38                
Correct output: -56                 | Program output: 4                  
Correct output: -77                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -44                
Correct output: -67                 | Program output: -33                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -85                
Correct output: -62                 | Program output: 92                 
Correct output: -95                 | Program output: 25                 
Correct output: -97                 | Program output: -28                
Correct output: -91                 | Program output: -15                
Correct output: -85                 | Program output: -42                
Correct output: -85                 | Program output: -44                
Correct output: -66                 | Program output: -21                
Correct output: -72                 | Program output: 44                 
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: 91                 
Correct output: -99                 | Program output: -56                
Correct output: -39                 | Program output: -24                
Correct output: -25                 | Program output: 14                 
Correct output: -53                 | Program output: 21                 
Correct output: -100                | Program output: -29                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 2                  
Correct output: -41                 | Program output: 44                 
Correct output: -88                 | Program output: -66                
Correct output: -46                 | Program output: 69                 
Correct output: -33                 | Program output: -17                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -37                
Correct output: -87                 | Program output: 40                 
Correct output: -31                 | Program output: 26                 
Correct output: -73                 | Program output: -55                
Correct output: -34                 | Program output: 43                 
Correct output: -100                | Program output: -44                
Correct output: -67                 | Program output: 73                 
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -20                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 68                 
Correct output: -90                 | Program output: -76                
Correct output: -54                 | Program output: 68                 
Correct output: -67                 | Program output: 37                 
Correct output: -100                | Program output: 93                 
Correct output: -77                 | Program output: -62                
Correct output: -36                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in3 boolean_not exec_do*while () exec_rot () (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) (in4) exec_s_when_autoconstructing (exec_pop (exec_stackdepth exec_if (integer_mult integer_swap) (boolean_flush) integer_lt boolean_pop) exec_empty exec_if () (boolean_frominteger)) () ())
Lexicase best errors: [1 1 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in3 boolean_not exec_do*while () exec_rot () (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) (in4) exec_s_when_autoconstructing (exec_pop (exec_stackdepth exec_if (integer_mult integer_swap) (boolean_flush) integer_lt boolean_pop) exec_empty exec_if () (boolean_frominteger)) () ())
Zero cases best errors: [1 1 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 312 92 312 92 170 170 92 92 312)
Population mean number of elite cases: 1.81
Count of perfect (error zero) individuals by case: (170 312 92 312 92 170 170 92 92 312)
Population mean number of perfect (error zero) cases: 1.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Best program: (in3 boolean_not exec_do*while () exec_rot () (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) (in4) exec_s_when_autoconstructing (exec_pop (exec_stackdepth exec_if (integer_mult integer_swap) (boolean_flush) integer_lt boolean_pop) exec_empty exec_if () (boolean_frominteger)) () ())
Errors: [1 1 0 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 45
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 8.186
Median total errors in population: 7
Error averages by case: (0.83 0.688 0.908 0.688 0.908 0.83 0.83 0.908 0.908 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.134
Average program size in population (points): 39.317
Average percent parens in population: 0.301
Minimum age in population: 8.0625
Maximum age in population: 12.484375
Average age in population: 10.65690625
Median age in population: 10.71875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 1968785
--- Timings ---
Current time: 1559583993277 milliseconds
Total Time:          22.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        16.7 seconds, 76.2%
Fitness Testing:      3.8 seconds, 17.5%
Report:               1.3 seconds,  5.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 98                 
Correct output: 4                   | Program output: 75                 
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 100                
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 74                 
Correct output: 17                  | Program output: 20                 
Correct output: 22                  | Program output: 86                 
Correct output: 10                  | Program output: 97                 
Correct output: 13                  | Program output: 76                 
Correct output: 19                  | Program output: 32                 
Correct output: 12                  | Program output: 84                 
Correct output: 38                  | Program output: 55                 
Correct output: 18                  | Program output: 84                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -5                 
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: 80                 
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 96                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: 63                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -14                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 50                 
Correct output: -85                 | Program output: 60                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 56                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -21                
Correct output: -39                 | Program output: 45                 
Correct output: -25                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: 67                 
Correct output: -73                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: 83                 
Correct output: -33                 | Program output: -16                
Correct output: -22                 | Program output: 65                 
Correct output: -99                 | Program output: 93                 
Correct output: -87                 | Program output: 20                 
Correct output: -31                 | Program output: 29                 
Correct output: -73                 | Program output: 12                 
Correct output: -34                 | Program output: 44                 
Correct output: -100                | Program output: 80                 
Correct output: -67                 | Program output: -65                
Correct output: -94                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -32                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: 38                 
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -23                
Correct output: -60                 | Program output: 1                  
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or})
Lexicase best program: (in1 print_integer integer_shove in2 boolean_not boolean_or integer_inc boolean_pop exec_while (exec_dup (boolean_or)))
Lexicase best errors: [1 0 1 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 14
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or})
Zero cases best program: (in1 print_integer integer_shove in2 boolean_not boolean_or integer_inc boolean_pop exec_while (exec_dup (boolean_or)))
Zero cases best errors: [1 0 1 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 14
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 284 1000 906 317 1000 1000 317 284 303)
Population mean number of elite cases: 6.41
Count of perfect (error zero) individuals by case: (0 284 0 906 317 0 0 317 284 303)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_min in1 print_integer exec_pop ())
Errors: [1 0 1 0 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 4
Size: 6
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.589
Median total errors in population: 7
Error averages by case: (1.0 0.716 1.0 0.094 0.683 1.0 1.0 0.683 0.716 0.697)
Error minima by case: (1 0 1 0 0 1 1 0 0 0)
Average genome size in population (length): 26.819
Average program size in population (points): 38.779
Average percent parens in population: 0.309
Minimum age in population: 9.0625
Maximum age in population: 14.1953125
Average age in population: 12.2468828125
Median age in population: 12.33984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.557
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2245619
--- Timings ---
Current time: 1559583995783 milliseconds
Total Time:          24.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.8 seconds, 76.6%
Fitness Testing:      4.1 seconds, 16.9%
Report:               1.5 seconds,  6.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 98                 
Correct output: 4                   | Program output: 75                 
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 100                
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 74                 
Correct output: 17                  | Program output: 20                 
Correct output: 22                  | Program output: 86                 
Correct output: 10                  | Program output: 97                 
Correct output: 13                  | Program output: 76                 
Correct output: 19                  | Program output: 32                 
Correct output: 12                  | Program output: 84                 
Correct output: 38                  | Program output: 55                 
Correct output: 18                  | Program output: 84                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -5                 
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: 80                 
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 96                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: 63                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -14                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 50                 
Correct output: -85                 | Program output: 60                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 56                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -21                
Correct output: -39                 | Program output: 45                 
Correct output: -25                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: 67                 
Correct output: -73                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: 83                 
Correct output: -33                 | Program output: -16                
Correct output: -22                 | Program output: 65                 
Correct output: -99                 | Program output: 93                 
Correct output: -87                 | Program output: 20                 
Correct output: -31                 | Program output: 29                 
Correct output: -73                 | Program output: 12                 
Correct output: -34                 | Program output: 44                 
Correct output: -100                | Program output: 80                 
Correct output: -67                 | Program output: -65                
Correct output: -94                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -32                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: 38                 
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -23                
Correct output: -60                 | Program output: 1                  
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_min in1 print_integer exec_pop ())
Lexicase best errors: [1 1 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 6
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_min in1 print_integer exec_pop ())
Zero cases best errors: [1 1 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 6
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (344 181 181 396 181 344 740 1000 1000 396)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (344 181 181 396 181 344 740 0 0 396)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_min in1 print_integer exec_pop ())
Errors: [1 1 1 0 1 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 4
Size: 6
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.237
Median total errors in population: 7
Error averages by case: (0.656 0.819 0.819 0.604 0.819 0.656 0.26 1.0 1.0 0.604)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 23.16
Average program size in population (points): 33.591
Average percent parens in population: 0.311
Minimum age in population: 10.25
Maximum age in population: 15.5859375
Average age in population: 13.74254296875
Median age in population: 13.85546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.002
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2428821
--- Timings ---
Current time: 1559583998349 milliseconds
Total Time:          27.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.0 seconds, 77.4%
Fitness Testing:      4.4 seconds, 16.2%
Report:               1.6 seconds,  6.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: 57                 
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 87                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 92                 
Correct output: 18                  | Program output: 93                 
Correct output: 6                   | Program output: 97                 
Correct output: 40                  | Program output: 53                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 69                 
Correct output: 19                  | Program output: 25                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 85                 
Correct output: -59                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 93                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 42                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: 78                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 92                 
Correct output: -62                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: 3                  
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: 59                 
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: 23                 
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 74                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 92                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -13                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in4 exec_dup (integer_mult boolean_empty in3 exec_when (print_integer exec_s_when_autoconstructing (exec_flush integer_stackdepth boolean_or print_exec () exec_while (exec_stackdepth exec_dup (exec_k (integer_yank integer_gt exec_swap () (integer_add exec_yank integer_div exec_s_when_autoconstructing () () (integer_dup_times) boolean_dup_times in1 boolean_pop) exec_empty exec_if () (boolean_frominteger)) ()))) () ())))
Lexicase best errors: [0 1 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in4 exec_dup (integer_mult boolean_empty in3 exec_when (print_integer exec_s_when_autoconstructing (exec_flush integer_stackdepth boolean_or print_exec () exec_while (exec_stackdepth exec_dup (exec_k (integer_yank integer_gt exec_swap () (integer_add exec_yank integer_div exec_s_when_autoconstructing () () (integer_dup_times) boolean_dup_times in1 boolean_pop) exec_empty exec_if () (boolean_frominteger)) ()))) () ())))
Zero cases best errors: [0 1 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (373 242 315 373 374 1000 242 374 932 374)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (373 242 315 373 374 0 242 374 932 374)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_dup})
Best program: (exec_dup (integer_mult boolean_empty in3 exec_when (print_integer exec_s_when_autoconstructing (exec_flush integer_stackdepth boolean_or print_exec () exec_while (exec_stackdepth exec_dup (exec_k (in1) (exec_k_when_autoconstructing (boolean_and integer_eq) (boolean_not integer_swap) integer_shove) boolean_eq boolean_rot integer_gt)) exec_do*count (exec_yank exec_flush exec_s (exec_while () boolean_shove integer_max boolean_invert_first_then_and in3) (boolean_frominteger integer_stackdepth boolean_yankdup exec_do*range () boolean_eq) (exec_s_when_autoconstructing () () (exec_y (integer_shove) boolean_dup)))) () ())))
Errors: [0 1 1 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 66
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 6.401
Median total errors in population: 7
Error averages by case: (0.627 0.758 0.685 0.627 0.626 1.0 0.758 0.626 0.068 0.626)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 25.515
Average program size in population (points): 36.683
Average percent parens in population: 0.306
Minimum age in population: 11.25
Maximum age in population: 17.16015625
Average age in population: 15.23086328125
Median age in population: 15.322265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 2649613
--- Timings ---
Current time: 1559584000862 milliseconds
Total Time:          29.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.1 seconds, 78.1%
Fitness Testing:      4.6 seconds, 15.7%
Report:               1.7 seconds,  5.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: 57                 
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 87                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 92                 
Correct output: 18                  | Program output: 93                 
Correct output: 6                   | Program output: 97                 
Correct output: 40                  | Program output: 53                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 69                 
Correct output: 19                  | Program output: 25                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 85                 
Correct output: -59                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 93                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 42                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: 78                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 92                 
Correct output: -62                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: 3                  
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: 59                 
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: 23                 
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 74                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 92                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -13                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s})
Lexicase best program: (in4 integer_lte integer_shove in3 integer_inc exec_empty in3 print_integer exec_s_when_autoconstructing (integer_gte integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) (in4) exec_s_when_autoconstructing (exec_pop (exec_stackdepth exec_if (integer_mult integer_swap) (boolean_flush) exec_k_when_autoconstructing (boolean_and integer_eq) (boolean_not integer_swap) integer_shove) boolean_eq boolean_rot integer_gt) () (exec_do*count (exec_yank exec_flush exec_s () () ())))
Lexicase best errors: [0 0 0 1 0 1 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 59
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s})
Zero cases best program: (in4 integer_lte integer_shove in3 integer_inc exec_empty in3 print_integer exec_s_when_autoconstructing (integer_gte integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) (in4) exec_s_when_autoconstructing (exec_pop (exec_stackdepth exec_if (integer_mult integer_swap) (boolean_flush) exec_k_when_autoconstructing (boolean_and integer_eq) (boolean_not integer_swap) integer_shove) boolean_eq boolean_rot integer_gt) () (exec_do*count (exec_yank exec_flush exec_s () () ())))
Zero cases best errors: [0 0 0 1 0 1 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 59
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (589 589 920 194 921 1000 1000 1000 136 136)
Population mean number of elite cases: 6.49
Count of perfect (error zero) individuals by case: (589 589 920 194 921 0 0 0 136 136)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y})
Best program: (in3 integer_inc exec_empty in3 print_integer exec_do*count (integer_gte integer_dec integer_dec integer_yank boolean_empty) integer_sub boolean_eq exec_when (in1 boolean_stackdepth) exec_y_when_autoconstructing (integer_dup_times exec_s_when_autoconstructing (boolean_invert_first_then_and) (boolean_swap in1) (exec_k_when_autoconstructing (boolean_and integer_eq) (boolean_not integer_swap) integer_shove) boolean_eq boolean_rot integer_gt) exec_do*count (exec_yank exec_flush boolean_frominteger exec_while () boolean_shove in2 boolean_invert_first_then_and in3) boolean_frominteger integer_stackdepth in3 integer_gte boolean_eq exec_s_when_autoconstructing () () (exec_y ()))
Errors: [0 0 0 1 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 47
Size: 62
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.515
Median total errors in population: 6
Error averages by case: (0.411 0.411 0.08 0.806 0.079 1.0 1.0 1.0 0.864 0.864)
Error minima by case: (0 0 0 0 0 1 1 1 0 0)
Average genome size in population (length): 29.065
Average program size in population (points): 41.737
Average percent parens in population: 0.302
Minimum age in population: 13.625
Maximum age in population: 18.8017578125
Average age in population: 16.720455078125
Median age in population: 16.8056640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 2949186
--- Timings ---
Current time: 1559584003986 milliseconds
Total Time:          32.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.4 seconds, 78.5%
Fitness Testing:      5.0 seconds, 15.3%
Report:               1.9 seconds,  5.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 98                 
Correct output: 4                   | Program output: 75                 
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 100                
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 74                 
Correct output: 17                  | Program output: 20                 
Correct output: 22                  | Program output: 86                 
Correct output: 10                  | Program output: 97                 
Correct output: 13                  | Program output: 76                 
Correct output: 19                  | Program output: 32                 
Correct output: 12                  | Program output: 84                 
Correct output: 38                  | Program output: 55                 
Correct output: 18                  | Program output: 84                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -5                 
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: 80                 
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 96                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: 63                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -14                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 50                 
Correct output: -85                 | Program output: 60                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 56                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -21                
Correct output: -39                 | Program output: 45                 
Correct output: -25                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: 67                 
Correct output: -73                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: 83                 
Correct output: -33                 | Program output: -16                
Correct output: -22                 | Program output: 65                 
Correct output: -99                 | Program output: 93                 
Correct output: -87                 | Program output: 20                 
Correct output: -31                 | Program output: 29                 
Correct output: -73                 | Program output: 12                 
Correct output: -34                 | Program output: 44                 
Correct output: -100                | Program output: 80                 
Correct output: -67                 | Program output: -65                
Correct output: -94                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -32                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: 38                 
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -23                
Correct output: -60                 | Program output: 1                  
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap})
Lexicase best program: (in3 boolean_not exec_do*while () exec_rot () (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_swap) ())
Lexicase best errors: [1 0 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap})
Zero cases best program: (in3 boolean_not exec_do*while () exec_rot () (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_swap) ())
Zero cases best errors: [1 0 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (166 370 370 1000 370 929 393 393 393 166)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (166 370 370 0 370 929 393 393 393 166)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_min in1 print_integer exec_pop ())
Errors: [1 1 1 1 1 0 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 4
Size: 6
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.45
Median total errors in population: 6
Error averages by case: (0.834 0.63 0.63 1.0 0.63 0.071 0.607 0.607 0.607 0.834)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 22.476
Average program size in population (points): 32.037
Average percent parens in population: 0.299
Minimum age in population: 14.625
Maximum age in population: 20.3271484375
Average age in population: 18.205572265625
Median age in population: 18.29443359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3188759
--- Timings ---
Current time: 1559584006378 milliseconds
Total Time:          35.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.5 seconds, 78.1%
Fitness Testing:      5.2 seconds, 14.9%
Report:               2.4 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 29                 
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 36                 
Correct output: 60                  | Program output: 65                 
Correct output: 4                   | Program output: 87                 
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 62                 
Correct output: 48                  | Program output: 59                 
Correct output: 23                  | Program output: 25                 
Correct output: 19                  | Program output: 76                 
Correct output: 4                   | Program output: 30                 
Correct output: 17                  | Program output: 91                 
Correct output: 22                  | Program output: 44                 
Correct output: 10                  | Program output: 61                 
Correct output: 13                  | Program output: 89                 
Correct output: 19                  | Program output: 50                 
Correct output: 12                  | Program output: 38                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 13                 
Correct output: -97                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: 77                 
Correct output: -2                  | Program output: 100                
Correct output: -47                 | Program output: -19                
Correct output: -44                 | Program output: 95                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 93                 
Correct output: -38                 | Program output: -38                
Correct output: -56                 | Program output: 4                  
Correct output: -77                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -44                
Correct output: -67                 | Program output: -33                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -85                
Correct output: -62                 | Program output: 92                 
Correct output: -95                 | Program output: 25                 
Correct output: -97                 | Program output: -28                
Correct output: -91                 | Program output: -15                
Correct output: -85                 | Program output: -42                
Correct output: -85                 | Program output: -44                
Correct output: -66                 | Program output: -21                
Correct output: -72                 | Program output: 44                 
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: 91                 
Correct output: -99                 | Program output: -56                
Correct output: -39                 | Program output: -24                
Correct output: -25                 | Program output: 14                 
Correct output: -53                 | Program output: 21                 
Correct output: -100                | Program output: -29                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 2                  
Correct output: -41                 | Program output: 44                 
Correct output: -88                 | Program output: -66                
Correct output: -46                 | Program output: 69                 
Correct output: -33                 | Program output: -17                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -37                
Correct output: -87                 | Program output: 40                 
Correct output: -31                 | Program output: 26                 
Correct output: -73                 | Program output: -55                
Correct output: -34                 | Program output: 43                 
Correct output: -100                | Program output: -44                
Correct output: -67                 | Program output: 73                 
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -20                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 68                 
Correct output: -90                 | Program output: -76                
Correct output: -54                 | Program output: 68                 
Correct output: -67                 | Program output: 37                 
Correct output: -100                | Program output: 93                 
Correct output: -77                 | Program output: -62                
Correct output: -36                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in3 boolean_not exec_do*while () exec_rot () (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times integer_mod boolean_flush integer_sub tag_boolean_280) (in4) exec_s_when_autoconstructing (exec_pop (integer_swap) boolean_flush) (integer_lt boolean_pop) (exec_empty exec_if () (boolean_frominteger)))
Lexicase best errors: [1 0 1 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 40
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in3 boolean_not exec_do*while () exec_rot () (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times integer_mod boolean_flush integer_sub tag_boolean_280) (in4) exec_s_when_autoconstructing (exec_pop (integer_swap) boolean_flush) (integer_lt boolean_pop) (exec_empty exec_if () (boolean_frominteger)))
Zero cases best errors: [1 0 1 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 40
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (384 228 1000 229 1000 228 328 385 1000 328)
Population mean number of elite cases: 5.11
Count of perfect (error zero) individuals by case: (384 228 0 229 0 228 328 385 0 328)
Population mean number of perfect (error zero) cases: 2.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Best program: (in3 boolean_not exec_do*while () exec_rot () (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) (in4) exec_s_when_autoconstructing (exec_pop (exec_stackdepth exec_if (integer_mult integer_swap) (boolean_flush) integer_lt boolean_pop) exec_empty exec_if () (boolean_frominteger)) () ())
Errors: [1 0 1 0 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 30
Size: 45
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.89
Median total errors in population: 8
Error averages by case: (0.616 0.772 1.0 0.771 1.0 0.772 0.672 0.615 1.0 0.672)
Error minima by case: (0 0 1 0 1 0 0 0 1 0)
Average genome size in population (length): 23.382
Average program size in population (points): 33.333
Average percent parens in population: 0.297
Minimum age in population: 16.494140625
Maximum age in population: 22.091064453125
Average age in population: 19.7373984375
Median age in population: 19.831298828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 3441579
--- Timings ---
Current time: 1559584009016 milliseconds
Total Time:          37.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.6 seconds, 78.6%
Fitness Testing:      5.5 seconds, 14.6%
Report:               2.5 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: 81                 
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 98                 
Correct output: 4                   | Program output: 75                 
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 100                
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 74                 
Correct output: 17                  | Program output: 20                 
Correct output: 22                  | Program output: 86                 
Correct output: 10                  | Program output: 97                 
Correct output: 13                  | Program output: 76                 
Correct output: 19                  | Program output: 32                 
Correct output: 12                  | Program output: 84                 
Correct output: 38                  | Program output: 55                 
Correct output: 18                  | Program output: 84                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -64                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -5                 
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: 80                 
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 96                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: 63                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -14                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 50                 
Correct output: -85                 | Program output: 60                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 56                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -21                
Correct output: -39                 | Program output: 45                 
Correct output: -25                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: 67                 
Correct output: -73                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: 83                 
Correct output: -33                 | Program output: -16                
Correct output: -22                 | Program output: 65                 
Correct output: -99                 | Program output: 93                 
Correct output: -87                 | Program output: 20                 
Correct output: -31                 | Program output: 29                 
Correct output: -73                 | Program output: 12                 
Correct output: -34                 | Program output: 44                 
Correct output: -100                | Program output: 80                 
Correct output: -67                 | Program output: -65                
Correct output: -94                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -32                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: 38                 
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -23                
Correct output: -60                 | Program output: 1                  
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_eq in1 integer_gt boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (print_integer) (integer_mult integer_swap) ())
Lexicase best errors: [1 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 13
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_eq in1 integer_gt boolean_invert_first_then_and integer_yankdup exec_s_when_autoconstructing (print_integer) (integer_mult integer_swap) ())
Zero cases best errors: [1 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 13
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 288 413 214 288 320 214 915 288)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (0 0 288 413 214 288 320 214 915 288)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop})
Best program: (integer_min in1 print_integer exec_pop ())
Errors: [1 1 0 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 4
Size: 6
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.06
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.712 0.587 0.786 0.712 0.68 0.786 0.085 0.712)
Error minima by case: (1 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.456
Average program size in population (points): 32.226
Average percent parens in population: 0.302
Minimum age in population: 17.7734375
Maximum age in population: 23.3905029296875
Average age in population: 21.10268933105469
Median age in population: 21.20526123046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 3628228
--- Timings ---
Current time: 1559584011384 milliseconds
Total Time:          40.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        31.7 seconds, 78.8%
Fitness Testing:      5.8 seconds, 14.3%
Report:               2.6 seconds,  6.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0
                 
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: 57                 
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 87                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 92                 
Correct output: 18                  | Program output: 93                 
Correct output: 6                   | Program output: 97                 
Correct output: 40                  | Program output: 53                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 69                 
Correct output: 19                  | Program output: 25                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 85                 
Correct output: -59                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 93                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 42                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: 78                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 92                 
Correct output: -62                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: 3                  
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: 59                 
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: 23                 
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 74                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 92                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -13                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 2, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in3 boolean_not exec_do*while () exec_rot () (exec_k () () integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) (print_integer integer_dup_times exec_s (integer_yank integer_sub tag_boolean_280) (in4 integer_dup exec_pop (exec_stackdepth exec_if (integer_mult integer_swap) (boolean_flush) integer_lt boolean_pop) exec_empty exec_if (boolean_frominteger) ()) ()))
Lexicase best errors: [0 0 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 2, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in3 boolean_not exec_do*while () exec_rot () (exec_k () () integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) (print_integer integer_dup_times exec_s (integer_yank integer_sub tag_boolean_280) (in4 integer_dup exec_pop (exec_stackdepth exec_if (integer_mult integer_swap) (boolean_flush) integer_lt boolean_pop) exec_empty exec_if (boolean_frominteger) ()) ()))
Zero cases best errors: [0 0 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (314 313 225 380 380 314 225 380 1000 314)
Population mean number of elite cases: 3.85
Count of perfect (error zero) individuals by case: (314 313 225 380 380 314 225 380 0 314)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_frominteger})
Best program: (exec_dup (integer_mult boolean_empty in3) integer_inc exec_empty in3 print_integer exec_do*count (integer_gte exec_eq integer_dec integer_yank boolean_empty) integer_sub boolean_eq exec_when (in1 exec_y_when_autoconstructing (exec_if (exec_s_when_autoconstructing (integer_mult integer_swap) (boolean_flush) (integer_lt boolean_pop) exec_empty print_newline) (boolean_frominteger))))
Errors: [0 0 1 1 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 29
Size: 39
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.155
Median total errors in population: 7
Error averages by case: (0.686 0.687 0.775 0.62 0.62 0.686 0.775 0.62 1.0 0.686)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 21.037
Average program size in population (points): 30.061
Average percent parens in population: 0.301
Minimum age in population: 19.677734375
Maximum age in population: 24.70172119140625
Average age in population: 22.70376531982422
Median age in population: 22.80450439453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 3827242
--- Timings ---
Current time: 1559584014535 milliseconds
Total Time:          43.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.2 seconds, 79.5%
Fitness Testing:      6.0 seconds, 13.9%
Report:               2.8 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: 57                 
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 87                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 92                 
Correct output: 18                  | Program output: 93                 
Correct output: 6                   | Program output: 97                 
Correct output: 40                  | Program output: 53                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 69                 
Correct output: 19                  | Program output: 25                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 85                 
Correct output: -59                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 93                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 42                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: 78                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 92                 
Correct output: -62                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: 3                  
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: 59                 
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: 23                 
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 74                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 92                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -13                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_280} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in3 integer_inc exec_empty in3 print_integer exec_do*count (boolean_dup_items exec_eq integer_dec integer_yank tag_boolean_280 in4) exec_s_when_autoconstructing (integer_add exec_stackdepth exec_if (integer_mult integer_swap boolean_flush) (integer_lt) boolean_pop exec_empty exec_if () (boolean_frominteger)) () ())
Lexicase best errors: [0 1 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_280} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in3 integer_inc exec_empty in3 print_integer exec_do*count (boolean_dup_items exec_eq integer_dec integer_yank tag_boolean_280 in4) exec_s_when_autoconstructing (integer_add exec_stackdepth exec_if (integer_mult integer_swap boolean_flush) (integer_lt) boolean_pop exec_empty exec_if () (boolean_frominteger)) () ())
Zero cases best errors: [0 1 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (413 1000 322 1000 322 414 322 915 414 179)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (413 0 322 0 322 414 322 915 414 179)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 1, :instruction exec_while})
Best program: (in4 integer_lte integer_shove in3 integer_inc exec_empty in3 print_integer boolean_xor integer_gte exec_eq integer_dec integer_yank boolean_empty integer_sub boolean_eq boolean_stackdepth exec_y_when_autoconstructing () integer_dup_times exec_s_when_autoconstructing (boolean_invert_first_then_and) (boolean_swap in1) (exec_k_when_autoconstructing (integer_gte integer_eq) (boolean_pop integer_swap) integer_shove) boolean_eq boolean_rot integer_gt exec_do*count (exec_dup_items exec_flush exec_s (exec_while ()) () ()))
Errors: [0 1 1 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 37
Size: 49
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 6.699
Median total errors in population: 6
Error averages by case: (0.587 1.0 0.678 1.0 0.678 0.586 0.678 0.085 0.586 0.821)
Error minima by case: (0 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 21.59
Average program size in population (points): 30.773
Average percent parens in population: 0.298
Minimum age in population: 20.677734375
Maximum age in population: 26.20114135742188
Average age in population: 24.23706597900391
Median age in population: 24.30659484863281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 4016841
--- Timings ---
Current time: 1559584017227 milliseconds
Total Time:          45.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.4 seconds, 79.3%
Fitness Testing:      6.2 seconds, 13.6%
Report:               3.2 seconds,  6.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: 57                 
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 87                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 92                 
Correct output: 18                  | Program output: 93                 
Correct output: 6                   | Program output: 97                 
Correct output: 40                  | Program output: 53                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 69                 
Correct output: 19                  | Program output: 25                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 96                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 85                 
Correct output: -59                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 93                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 42                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: 78                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: 92                 
Correct output: -62                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: 3                  
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: 59                 
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: 23                 
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 74                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 92                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -13                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_div} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_473} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_517} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div})
Lexicase best program: (exec_dup (integer_mult boolean_empty in3 exec_when (print_integer exec_s_when_autoconstructing (exec_flush integer_stackdepth boolean_or print_exec () exec_while (exec_stackdepth) exec_dup () exec_k (integer_yank integer_gt exec_swap (integer_add exec_yank integer_div) (in4) integer_dup_times) (exec_y (in1 exec_stackdepth) boolean_shove boolean_xor integer_dup_items exec_yankdup integer_mult boolean_xor exec_s (integer_fromboolean print_integer exec_do*while (tagged_473 integer_add integer_add exec_if (exec_s_when_autoconstructing (integer_swap exec_eq tag_integer_517 boolean_not) () (integer_max integer_div)) ())) () ())) () ())))
Lexicase best errors: [0 1 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 70
Percent parens: 0.329
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_div} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_473} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_517} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div})
Zero cases best program: (exec_dup (integer_mult boolean_empty in3 exec_when (print_integer exec_s_when_autoconstructing (exec_flush integer_stackdepth boolean_or print_exec () exec_while (exec_stackdepth) exec_dup () exec_k (integer_yank integer_gt exec_swap (integer_add exec_yank integer_div) (in4) integer_dup_times) (exec_y (in1 exec_stackdepth) boolean_shove boolean_xor integer_dup_items exec_yankdup integer_mult boolean_xor exec_s (integer_fromboolean print_integer exec_do*while (tagged_473 integer_add integer_add exec_if (exec_s_when_autoconstructing (integer_swap exec_eq tag_integer_517 boolean_not) () (integer_max integer_div)) ())) () ())) () ())))
Zero cases best errors: [0 1 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 70
Percent parens: 0.329
--- Lexicase Population Statistics ---
Count of elite individuals by case: (415 407 407 1 415 407 412 415 1 407)
Population mean number of elite cases: 3.29
Count of perfect (error zero) individuals by case: (415 407 407 1 415 407 412 415 1 407)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop})
Best program: (in3 integer_inc boolean_yankdup in3 print_integer exec_do*count (integer_gte) exec_eq exec_k (integer_yank integer_gt exec_rot () (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap exec_empty integer_sub tag_boolean_280) (in4) exec_s_when_autoconstructing (integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (in4) exec_s_when_autoconstructing (exec_pop ()) () ()) ())
Errors: [0 1 1 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 51
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 6.713
Median total errors in population: 6
Error averages by case: (0.585 0.593 0.593 0.999 0.585 0.593 0.588 0.585 0.999 0.593)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.152
Average program size in population (points): 28.532
Average percent parens in population: 0.291
Minimum age in population: 22.81317138671875
Maximum age in population: 27.58323669433594
Average age in population: 25.68534214782715
Median age in population: 25.70032501220703
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 4218607
--- Timings ---
Current time: 1559584019845 milliseconds
Total Time:          48.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.5 seconds, 79.5%
Fitness Testing:      6.5 seconds, 13.3%
Report:               3.4 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 602
Test mean error for best: 0.60200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 29                 
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: 57                 
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 36                 
Correct output: 60                  | Program output: 65                 
Correct output: 4                   | Program output:                    
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 62                 
Correct output: 48                  | Program output: 59                 
Correct output: 23                  | Program output: 25                 
Correct output: 19                  | Program output: 76                 
Correct output: 4                   | Program output:                    
Correct output: 17                  | Program output: 91                 
Correct output: 22                  | Program output: 44                 
Correct output: 10                  | Program output: 61                 
Correct output: 13                  | Program output: 89                 
Correct output: 19                  | Program output: 50                 
Correct output: 12                  | Program output: 38                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -38                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 93                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 93                 
Correct output: -38                 | Program output: -38                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: 92                 
Correct output: -62                 | Program output: 92                 
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -28                
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: 23                 
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -20                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 68                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -13                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction in4})
Lexicase best program: (in3 exec_yank exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and) integer_inc integer_yank) (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () in4)
Lexicase best errors: [1 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction in4})
Zero cases best program: (in3 exec_yank exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and) integer_inc integer_yank) (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () in4)
Zero cases best errors: [1 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (370 403 370 5 778 408 403 403 142 4)
Population mean number of elite cases: 3.29
Count of perfect (error zero) individuals by case: (370 403 370 5 778 408 403 403 142 4)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction in4})
Best program: (in3 exec_yank exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and) integer_inc integer_yank) (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () in4)
Errors: [1 0 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.714
Median total errors in population: 7
Error averages by case: (0.63 0.597 0.63 0.995 0.222 0.592 0.597 0.597 0.858 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.283
Average program size in population (points): 26.971
Average percent parens in population: 0.282
Minimum age in population: 23.81317138671875
Maximum age in population: 28.99062347412109
Average age in population: 27.03225814819336
Median age in population: 27.097900390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.525
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 4380070
--- Timings ---
Current time: 1559584022393 milliseconds
Total Time:          51.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.6 seconds, 79.5%
Fitness Testing:      6.7 seconds, 13.0%
Report:               3.7 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: 54                 
Correct output: 29                  | Program output: 29                 
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: 57                 
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 36                 
Correct output: 60                  | Program output: 65                 
Correct output: 4                   | Program output:                    
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 62                 
Correct output: 48                  | Program output: 59                 
Correct output: 23                  | Program output: 25                 
Correct output: 19                  | Program output: 76                 
Correct output: 4                   | Program output:                    
Correct output: 17                  | Program output: 91                 
Correct output: 22                  | Program output: 44                 
Correct output: 10                  | Program output: 61                 
Correct output: 13                  | Program output: 89                 
Correct output: 19                  | Program output: 50                 
Correct output: 12                  | Program output: 38                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 13                 
Correct output: -97                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 93                 
Correct output: -47                 | Program output: -24                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 93                 
Correct output: -38                 | Program output: -38                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -44                
Correct output: -67                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: 92                 
Correct output: -62                 | Program output: 92                 
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 54                 
Correct output: -85                 | Program output: 42                 
Correct output: -66                 | Program output: -13                
Correct output: -72                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: 33                 
Correct output: -99                 | Program output: 73                 
Correct output: -39                 | Program output: -28                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: 16                 
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: 23                 
Correct output: -88                 | Program output: 80                 
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: 48                 
Correct output: -22                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -66                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -20                
Correct output: -67                 | Program output: -50                
Correct output: -97                 | Program output: 68                 
Correct output: -90                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: 89                 
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: 50                 
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction in4})
Lexicase best program: (in3 exec_yank exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and) integer_inc integer_yank print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (in4))
Lexicase best errors: [1 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction in4})
Zero cases best program: (in3 exec_yank exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and) integer_inc integer_yank print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (in4))
Zero cases best errors: [1 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (152 916 203 713 77 545 706 504 202 908)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (152 916 203 713 77 545 706 504 202 908)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction in4})
Best program: (in3 exec_yank exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and) integer_inc integer_yank) (print_integer integer_dup_times boolean_swap exec_dup (integer_sub tag_boolean_280)) (in4))
Errors: [1 0 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 5.074
Median total errors in population: 5
Error averages by case: (0.848 0.084 0.797 0.287 0.923 0.455 0.294 0.496 0.798 0.092)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.9
Average program size in population (points): 25.175
Average percent parens in population: 0.254
Minimum age in population: 25.65408325195312
Maximum age in population: 30.22029876708984
Average age in population: 27.83301580047607
Median age in population: 28.097900390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 425
Genome diversity (% unique genomes):	 0.34
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 430
Syntactic diversity (% unique Push programs):	 0.32
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 4543303
--- Timings ---
Current time: 1559584024897 milliseconds
Total Time:          53.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.7 seconds, 79.7%
Fitness Testing:      6.9 seconds, 12.8%
Report:               3.9 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: 54                 
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 85                 
Correct output: 40                  | Program output: 42                 
Correct output: 55                  | Program output: 73                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 43                 
Correct output: 22                  | Program output: 87                 
Correct output: 10                  | Program output: 79                 
Correct output: 13                  | Program output: 36                 
Correct output: 19                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -58                
Correct output: -96                 | Program output: 80                 
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: 2                  
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -24                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: 1                  
Correct output: -56                 | Program output: 83                 
Correct output: -77                 | Program output: 31                 
Correct output: -100                | Program output: 45                 
Correct output: -82                 | Program output: 61                 
Correct output: -67                 | Program output: -61                
Correct output: -32                 | Program output: 56                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: 25                 
Correct output: -97                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 54                 
Correct output: -85                 | Program output: 42                 
Correct output: -66                 | Program output: -13                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: 28                 
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: 73                 
Correct output: -39                 | Program output: -28                
Correct output: -25                 | Program output: 39                 
Correct output: -53                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: 16                 
Correct output: -79                 | Program output: 77                 
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: 80                 
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: 48                 
Correct output: -22                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -37                
Correct output: -31                 | Program output: 85                 
Correct output: -73                 | Program output: -66                
Correct output: -34                 | Program output: 51                 
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 34                 
Correct output: -94                 | Program output: 15                 
Correct output: -61                 | Program output: 52                 
Correct output: -67                 | Program output: -50                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: 73                 
Correct output: -54                 | Program output: 7                  
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -98                
Correct output: -77                 | Program output: 89                 
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: 50                 
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -37                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 0, :instruction in4})
Lexicase best program: (in3 exec_yank exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and) integer_inc integer_yank) () (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) in4)
Lexicase best errors: [1 0 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 0, :instruction in4})
Zero cases best program: (in3 exec_yank exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and) integer_inc integer_yank) () (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) in4)
Zero cases best errors: [1 0 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 504 351 267 333 181 66 244 2 2)
Population mean number of elite cases: 2.28
Count of perfect (error zero) individuals by case: (333 504 351 267 333 181 66 244 2 2)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction in4})
Best program: (in3 exec_yank exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and) integer_inc integer_yank) () (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) in4)
Errors: [1 0 1 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.717
Median total errors in population: 8
Error averages by case: (0.667 0.496 0.649 0.733 0.667 0.819 0.934 0.756 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.273
Average program size in population (points): 25.579
Average percent parens in population: 0.252
Minimum age in population: 27.88304138183594
Maximum age in population: 31.50067520141602
Average age in population: 29.21812464523315
Median age in population: 29.09841346740723
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.363
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.345
Total error diversity:				 0.005
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 4759511
--- Timings ---
Current time: 1559584027306 milliseconds
Total Time:          56.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.7 seconds, 79.8%
Fitness Testing:      7.1 seconds, 12.7%
Report:               4.1 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: 54                 
Correct output: 29                  | Program output: 29                 
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: 57                 
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 36                 
Correct output: 60                  | Program output: 65                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 62                 
Correct output: 48                  | Program output: 59                 
Correct output: 23                  | Program output: 25                 
Correct output: 19                  | Program output: 76                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 91                 
Correct output: 22                  | Program output: 44                 
Correct output: 10                  | Program output: 61                 
Correct output: 13                  | Program output: 89                 
Correct output: 19                  | Program output: 50                 
Correct output: 12                  | Program output: 38                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 13                 
Correct output: -97                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 93                 
Correct output: -47                 | Program output: -24                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 93                 
Correct output: -38                 | Program output: -38                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 35                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -44                
Correct output: -67                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: 92                 
Correct output: -62                 | Program output: 92                 
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output:                    
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 54                 
Correct output: -85                 | Program output: 42                 
Correct output: -66                 | Program output: -13                
Correct output: -72                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: 33                 
Correct output: -99                 | Program output: 73                 
Correct output: -39                 | Program output: -28                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: 16                 
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: 23                 
Correct output: -88                 | Program output: 80                 
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: 48                 
Correct output: -22                 | Program output: 57                 
Correct output: -99                 | Program output:                    
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -66                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -20                
Correct output: -67                 | Program output: -50                
Correct output: -97                 | Program output: 68                 
Correct output: -90                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: 89                 
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: 50                 
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction in4})
Lexicase best program: (in3 exec_yank exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and) integer_inc integer_yank print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (in4))
Lexicase best errors: [0 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction in4})
Zero cases best program: (in3 exec_yank exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and) integer_inc integer_yank print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (in4))
Zero cases best errors: [0 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (304 107 101 271 228 107 144 782 484 27)
Population mean number of elite cases: 2.56
Count of perfect (error zero) individuals by case: (304 107 101 271 228 107 144 782 484 27)
Population mean number of perfect (error zero) cases: 2.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction in4})
Best program: (in3 exec_yank exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and) integer_inc integer_yank print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (in4))
Errors: [0 1 1 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.445
Median total errors in population: 7
Error averages by case: (0.696 0.893 0.899 0.729 0.772 0.893 0.856 0.218 0.516 0.973)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.67
Average program size in population (points): 28.679
Average percent parens in population: 0.241
Minimum age in population: 29.097900390625
Maximum age in population: 32.4765739440918
Average age in population: 30.6672546787262
Median age in population: 30.73262786865234
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.333
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.317
Total error diversity:				 0.006
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 4947517
--- Timings ---
Current time: 1559584029736 milliseconds
Total Time:          58.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.7 seconds, 79.9%
Fitness Testing:      7.4 seconds, 12.6%
Report:               4.3 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not boolean_yankdup) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not boolean_yankdup) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 378 226 69 2 248 749 239 503 507)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (232 378 226 69 2 248 749 239 503 507)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not boolean_yankdup) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 6.847
Median total errors in population: 7
Error averages by case: (0.768 0.622 0.774 0.931 0.998 0.752 0.251 0.761 0.497 0.493)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.969
Average program size in population (points): 29.696
Average percent parens in population: 0.225
Minimum age in population: 30.097900390625
Maximum age in population: 33.63493251800537
Average age in population: 32.23403914737701
Median age in population: 32.29026412963867
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 178
Genome diversity (% unique genomes):	 0.316
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.299
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 5150582
--- Timings ---
Current time: 1559584032219 milliseconds
Total Time:          60.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.8 seconds, 80.0%
Fitness Testing:      7.6 seconds, 12.5%
Report:               4.4 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [0 1 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [0 1 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (840 214 839 868 509 147 853 147 509 914)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (840 214 839 868 509 147 853 147 509 914)
Population mean number of perfect (error zero) cases: 5.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not boolean_yankdup) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 1 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 4.16
Median total errors in population: 3
Error averages by case: (0.16 0.786 0.161 0.132 0.491 0.853 0.147 0.853 0.491 0.086)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.9
Average program size in population (points): 30.947
Average percent parens in population: 0.228
Minimum age in population: 32.29026412963867
Maximum age in population: 35.34078693389893
Average age in population: 34.10503669118881
Median age in population: 34.16526412963867
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 402
Genome diversity (% unique genomes):	 0.311
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 409
Syntactic diversity (% unique Push programs):	 0.294
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 5341885
--- Timings ---
Current time: 1559584034583 milliseconds
Total Time:          63.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.7 seconds, 80.1%
Fitness Testing:      7.9 seconds, 12.4%
Report:               4.6 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 29                 
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 36                 
Correct output: 60                  | Program output: 65                 
Correct output: 4                   | Program output: 75                 
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 59                 
Correct output: 23                  | Program output: 25                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 30                 
Correct output: 17                  | Program output: 20                 
Correct output: 22                  | Program output: 44                 
Correct output: 10                  | Program output: 61                 
Correct output: 13                  | Program output: 76                 
Correct output: 19                  | Program output: 32                 
Correct output: 12                  | Program output: 38                 
Correct output: 38                  | Program output: 55                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 13                 
Correct output: -97                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: -5                 
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: 80                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 93                 
Correct output: -38                 | Program output: -38                
Correct output: -56                 | Program output: 4                  
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -33                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -85                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -15                
Correct output: -85                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -56                
Correct output: -39                 | Program output: -24                
Correct output: -25                 | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -29                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: 69                 
Correct output: -33                 | Program output: -17                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -37                
Correct output: -87                 | Program output: 20                 
Correct output: -31                 | Program output: 26                 
Correct output: -73                 | Program output: -55                
Correct output: -34                 | Program output: 43                 
Correct output: -100                | Program output: -44                
Correct output: -67                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -32                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: 38                 
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and boolean_not in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [0 0 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and boolean_not in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [0 0 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (382 880 926 216 362 317 314 218 364 802)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (382 880 926 216 362 317 314 218 364 802)
Population mean number of perfect (error zero) cases: 4.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and boolean_not in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 0 0 1 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.219
Median total errors in population: 5
Error averages by case: (0.618 0.12 0.074 0.784 0.638 0.683 0.686 0.782 0.636 0.198)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.181
Average program size in population (points): 31.269
Average percent parens in population: 0.226
Minimum age in population: 33.29026412963867
Maximum age in population: 37.15328693389893
Average age in population: 35.6709623196125
Median age in population: 35.70380973815918
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.381
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 210
Syntactic diversity (% unique Push programs):	 0.364
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 5539358
--- Timings ---
Current time: 1559584037007 milliseconds
Total Time:          65.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.7 seconds, 80.2%
Fitness Testing:      8.1 seconds, 12.3%
Report:               4.8 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not boolean_yankdup) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [1 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not boolean_yankdup) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [1 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (402 280 548 494 899 548 548 279 280 548)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (402 280 548 494 899 548 548 279 280 548)
Population mean number of perfect (error zero) cases: 4.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not boolean_yankdup) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 5.174
Median total errors in population: 4
Error averages by case: (0.598 0.72 0.452 0.506 0.101 0.452 0.452 0.721 0.72 0.452)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.128
Average program size in population (points): 29.818
Average percent parens in population: 0.224
Minimum age in population: 35.35762786865234
Maximum age in population: 38.54269599914551
Average age in population: 37.05447280669212
Median age in population: 37.17373013496399
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.4
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.377
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 5721271
--- Timings ---
Current time: 1559584039400 milliseconds
Total Time:          68.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.7 seconds, 80.3%
Fitness Testing:      8.3 seconds, 12.2%
Report:               4.9 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 85                 
Correct output: 40                  | Program output: 42                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 80                 
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (boolean_invert_first_then_and integer_yankdup exec_do*while (integer_eq in1) boolean_yankdup) boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (boolean_invert_first_then_and integer_yankdup exec_do*while (integer_eq in1) boolean_yankdup) boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (602 601 240 604 601 236 899 603 889 762)
Population mean number of elite cases: 6.04
Count of perfect (error zero) individuals by case: (602 601 240 604 601 236 899 603 889 762)
Population mean number of perfect (error zero) cases: 6.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq exec_k () (boolean_yankdup) boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add integer_yankdup integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush boolean_shove tag_boolean_280) () (integer_min))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 33
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 3.963
Median total errors in population: 2
Error averages by case: (0.398 0.399 0.76 0.396 0.399 0.764 0.101 0.397 0.111 0.238)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.641
Average program size in population (points): 30.637
Average percent parens in population: 0.228
Minimum age in population: 36.48262786865234
Maximum age in population: 40.35273784399033
Average age in population: 38.5007722415328
Median age in population: 38.54269599914551
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 5905701
--- Timings ---
Current time: 1559584041744 milliseconds
Total Time:          70.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 80.4%
Fitness Testing:      8.6 seconds, 12.2%
Report:               5.1 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 85                 
Correct output: 40                  | Program output: 42                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 80                 
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (boolean_invert_first_then_and integer_yankdup exec_do*while (integer_eq in1) boolean_yankdup) boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (boolean_invert_first_then_and integer_yankdup exec_do*while (integer_eq in1) boolean_yankdup) boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (27 739 747 864 902 738 740 914 596 351)
Population mean number of elite cases: 6.62
Count of perfect (error zero) individuals by case: (27 739 747 864 902 738 740 914 596 351)
Population mean number of perfect (error zero) cases: 6.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq exec_swap () (boolean_yankdup) boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_dup_times integer_inc integer_lt) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [1 0 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 24
Size: 33
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 3.382
Median total errors in population: 2
Error averages by case: (0.973 0.261 0.253 0.136 0.098 0.262 0.26 0.086 0.404 0.649)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.067
Average program size in population (points): 32.5
Average percent parens in population: 0.228
Minimum age in population: 37.70380973815918
Maximum age in population: 41.72477945685387
Average age in population: 40.04206954553723
Median age in population: 40.10305473208427
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.421
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 6113432
--- Timings ---
Current time: 1559584044148 milliseconds
Total Time:          72.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.6 seconds, 80.5%
Fitness Testing:      8.8 seconds, 12.1%
Report:               5.3 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in4) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [1 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in4) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [1 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (351 350 353 736 315 346 741 314 316 739)
Population mean number of elite cases: 4.56
Count of perfect (error zero) individuals by case: (351 350 353 736 315 346 741 314 316 739)
Population mean number of perfect (error zero) cases: 4.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Best program: (integer_eq integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not boolean_rot) exec_rot (exec_k () (integer_div integer_add integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_pop boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 0 0 1 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 25
Size: 32
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 5.439
Median total errors in population: 4
Error averages by case: (0.649 0.65 0.647 0.264 0.685 0.654 0.259 0.686 0.684 0.261)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.168
Average program size in population (points): 31.341
Average percent parens in population: 0.229
Minimum age in population: 38.70380973815918
Maximum age in population: 43.17457178235054
Average age in population: 41.66980600203574
Median age in population: 41.74069419503212
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 6315163
--- Timings ---
Current time: 1559584046520 milliseconds
Total Time:          75.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.6 seconds, 80.6%
Fitness Testing:      9.1 seconds, 12.0%
Report:               5.5 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not exec_empty) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not exec_empty) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (514 911 506 516 214 513 513 797 516 503)
Population mean number of elite cases: 5.50
Count of perfect (error zero) individuals by case: (514 911 506 516 214 513 513 797 516 503)
Population mean number of perfect (error zero) cases: 5.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not exec_empty exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min)))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 25
Size: 32
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 4.497
Median total errors in population: 4
Error averages by case: (0.486 0.089 0.494 0.484 0.786 0.487 0.487 0.203 0.484 0.497)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.899
Average program size in population (points): 30.954
Average percent parens in population: 0.227
Minimum age in population: 39.70380973815918
Maximum age in population: 44.81960448622704
Average age in population: 43.04595209613442
Median age in population: 43.16602689400315
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 6505408
--- Timings ---
Current time: 1559584048921 milliseconds
Total Time:          77.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.6 seconds, 80.6%
Fitness Testing:      9.3 seconds, 12.0%
Report:               5.6 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup boolean_dup_times in3 boolean_not in2 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [1 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 33
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup boolean_dup_times in3 boolean_not in2 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [1 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 33
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 248 704 709 249 709 710 497 501 903)
Population mean number of elite cases: 5.49
Count of perfect (error zero) individuals by case: (265 248 704 709 249 709 710 497 501 903)
Population mean number of perfect (error zero) cases: 5.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_372} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 tag_exec_372 (in2) exec_rot (print_integer integer_dup_times print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min)))
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 25
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 4.505
Median total errors in population: 3
Error averages by case: (0.735 0.752 0.296 0.291 0.751 0.291 0.29 0.503 0.499 0.097)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.828
Average program size in population (points): 30.83
Average percent parens in population: 0.227
Minimum age in population: 40.92499160766602
Maximum age in population: 46.36070267111063
Average age in population: 44.6038423586227
Median age in population: 44.66976502165198
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.501
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 6702645
--- Timings ---
Current time: 1559584051280 milliseconds
Total Time:          80.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.5 seconds, 80.7%
Fitness Testing:      9.5 seconds, 11.9%
Report:               5.8 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 85                 
Correct output: 40                  | Program output: 42                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 80                 
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq integer_min boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (print_integer) (integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) (integer_min))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 22
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq integer_min boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (print_integer) (integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) (integer_min))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 22
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (410 410 441 904 639 410 640 413 238 237)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (410 410 441 904 639 410 640 413 238 237)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Best program: (exec_swap (in1) (boolean_yankdup) boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 1 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 5.258
Median total errors in population: 5
Error averages by case: (0.59 0.59 0.559 0.096 0.361 0.59 0.36 0.587 0.762 0.763)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.094
Average program size in population (points): 31.197
Average percent parens in population: 0.228
Minimum age in population: 43.1047211587429
Maximum age in population: 48.16059944406152
Average age in population: 46.16912086638808
Median age in population: 46.22961161471903
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 6900702
--- Timings ---
Current time: 1559584053686 milliseconds
Total Time:          82.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.5 seconds, 80.7%
Fitness Testing:      9.8 seconds, 11.9%
Report:               6.0 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 85                 
Correct output: 40                  | Program output: 42                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 80                 
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) boolean_not in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) boolean_not in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (631 404 634 881 403 432 431 634 887 632)
Population mean number of elite cases: 5.97
Count of perfect (error zero) individuals by case: (631 404 634 881 403 432 431 634 887 632)
Population mean number of perfect (error zero) cases: 5.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 4.031
Median total errors in population: 4
Error averages by case: (0.369 0.596 0.366 0.119 0.597 0.568 0.569 0.366 0.113 0.368)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.064
Average program size in population (points): 32.634
Average percent parens in population: 0.231
Minimum age in population: 44.565230935812
Maximum age in population: 49.80087380763143
Average age in population: 47.67207049757801
Median age in population: 47.74014231329784
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 7108815
--- Timings ---
Current time: 1559584056059 milliseconds
Total Time:          84.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.5 seconds, 80.8%
Fitness Testing:     10.0 seconds, 11.8%
Report:               6.2 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 85                 
Correct output: 40                  | Program output: 42                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 80                 
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2 exec_rot (exec_k () (integer_div integer_lte integer_add integer_yankdup integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush boolean_shove tag_boolean_280) () (integer_min)))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2 exec_rot (exec_k () (integer_div integer_lte integer_add integer_yankdup integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush boolean_shove tag_boolean_280) () (integer_min)))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (485 24 489 899 485 27 687 687 484 898)
Population mean number of elite cases: 5.16
Count of perfect (error zero) individuals by case: (485 24 489 899 485 27 687 687 484 898)
Population mean number of perfect (error zero) cases: 5.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup integer_yankdup exec_do*while (in3 exec_noop in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 33
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 4.835
Median total errors in population: 6
Error averages by case: (0.515 0.976 0.511 0.101 0.515 0.973 0.313 0.313 0.516 0.102)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.586
Average program size in population (points): 33.428
Average percent parens in population: 0.234
Minimum age in population: 45.87082099914551
Maximum age in population: 51.03048274060711
Average age in population: 49.09964848287823
Median age in population: 49.12461400171742
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 7318891
--- Timings ---
Current time: 1559584058621 milliseconds
Total Time:          87.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.6 seconds, 80.8%
Fitness Testing:     10.3 seconds, 11.8%
Report:               6.4 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 85                 
Correct output: 40                  | Program output: 42                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 80                 
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup boolean_eq in3 boolean_not in2 exec_rot (exec_k () (integer_div boolean_not exec_empty) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min)) () ())
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 40
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup boolean_eq in3 boolean_not in2 exec_rot (exec_k () (integer_div boolean_not exec_empty) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min)) () ())
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 40
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (691 698 538 697 1 1 694 697 699 913)
Population mean number of elite cases: 5.63
Count of perfect (error zero) individuals by case: (691 698 538 697 1 1 694 697 699 913)
Population mean number of perfect (error zero) cases: 5.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup boolean_dup_times in3 boolean_not in2 exec_rot (exec_k () (integer_div integer_lte integer_add integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times integer_fromboolean boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 25
Size: 31
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 4.371
Median total errors in population: 3
Error averages by case: (0.309 0.302 0.462 0.303 0.999 0.999 0.306 0.303 0.301 0.087)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.441
Average program size in population (points): 33.592
Average percent parens in population: 0.245
Minimum age in population: 46.87082099914551
Maximum age in population: 52.56518450751901
Average age in population: 50.51431271184492
Median age in population: 50.57704542030115
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 7540656
--- Timings ---
Current time: 1559584061044 milliseconds
Total Time:          89.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.6 seconds, 80.9%
Fitness Testing:     10.5 seconds, 11.7%
Report:               6.5 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 455
Test mean error for best: 0.45500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 29                 
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 36                 
Correct output: 60                  | Program output: 65                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 62                 
Correct output: 48                  | Program output: 59                 
Correct output: 23                  | Program output: 25                 
Correct output: 19                  | Program output: 25                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 38                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 93                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: -38                
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -44                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -85                
Correct output: -62                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -28                
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: 44                 
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -29                
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: 23                 
Correct output: -88                 | Program output: -66                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -37                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -20                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 68                 
Correct output: -90                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -62                
Correct output: -36                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup boolean_dup_times in3 boolean_not boolean_not in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 31
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup boolean_dup_times in3 boolean_not boolean_not in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 31
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 194 627 194 837 883 837 192 634 627)
Population mean number of elite cases: 5.22
Count of perfect (error zero) individuals by case: (194 194 627 194 837 883 837 192 634 627)
Population mean number of perfect (error zero) cases: 5.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Best program: (integer_eq in1 boolean_flush boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (exec_k_when_autoconstructing () (integer_div integer_lte integer_add integer_div in3 boolean_not in4) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min)) () ())
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 45
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 4.781
Median total errors in population: 4
Error averages by case: (0.806 0.806 0.373 0.806 0.163 0.117 0.163 0.808 0.366 0.373)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.45
Average program size in population (points): 32.687
Average percent parens in population: 0.222
Minimum age in population: 49.76988278096542
Maximum age in population: 53.82575068739243
Average age in population: 51.95436855785875
Median age in population: 52.02400115830824
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.523
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.494
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 7754690
--- Timings ---
Current time: 1559584063604 milliseconds
Total Time:          92.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.6 seconds, 80.9%
Fitness Testing:     10.8 seconds, 11.7%
Report:               6.7 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 29                 
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 69                 
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 62                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 30                 
Correct output: 17                  | Program output: 43                 
Correct output: 22                  | Program output: 44                 
Correct output: 10                  | Program output: 61                 
Correct output: 13                  | Program output: 36                 
Correct output: 19                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: 2                  
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -24                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: -38                
Correct output: -56                 | Program output: 4                  
Correct output: -77                 | Program output: 31                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -44                
Correct output: -67                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: 25                 
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -42                
Correct output: -85                 | Program output: -44                
Correct output: -66                 | Program output: -21                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: -56                
Correct output: -39                 | Program output: -28                
Correct output: -25                 | Program output: 14                 
Correct output: -53                 | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 2                  
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -66                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -17                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -37                
Correct output: -31                 | Program output: 26                 
Correct output: -73                 | Program output: -66                
Correct output: -34                 | Program output: 43                 
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 34                 
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -20                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: -76                
Correct output: -54                 | Program output: 7                  
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -98                
Correct output: -77                 | Program output: -62                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -68                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -37                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (integer_dec in3 boolean_not in2) boolean_not in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 34
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (integer_dec in3 boolean_not in2) boolean_not in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 34
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (686 475 688 902 689 560 475 477 689 558)
Population mean number of elite cases: 6.20
Count of perfect (error zero) individuals by case: (686 475 688 902 689 560 475 477 689 558)
Population mean number of perfect (error zero) cases: 6.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 exec_noop in2) in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 25
Size: 32
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 3.801
Median total errors in population: 3
Error averages by case: (0.314 0.525 0.312 0.098 0.311 0.44 0.525 0.523 0.311 0.442)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.564
Average program size in population (points): 35.58
Average percent parens in population: 0.221
Minimum age in population: 51.35031797736883
Maximum age in population: 54.92095026950119
Average age in population: 53.44161420054507
Median age in population: 53.37989180407021
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 173
Genome diversity (% unique genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.447
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 7983812
--- Timings ---
Current time: 1559584066068 milliseconds
Total Time:          94.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.6 seconds, 80.8%
Fitness Testing:     11.1 seconds, 11.7%
Report:               7.0 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 85                 
Correct output: 40                  | Program output: 42                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 80                 
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Lexicase best program: (integer_eq integer_rot boolean_yankdup boolean_invert_first_then_and integer_yankdup boolean_dup_times in3 boolean_not in2 boolean_pop exec_rot (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [0 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Zero cases best program: (integer_eq integer_rot boolean_yankdup boolean_invert_first_then_and integer_yankdup boolean_dup_times in3 boolean_not in2 boolean_pop exec_rot (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [0 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (614 407 691 597 408 10 407 604 9 11)
Population mean number of elite cases: 3.76
Count of perfect (error zero) individuals by case: (614 407 691 597 408 10 407 604 9 11)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup boolean_dup_times in3 boolean_not in2 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_add boolean_invert_first_then_and integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 26
Size: 32
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 6.242
Median total errors in population: 6
Error averages by case: (0.386 0.593 0.309 0.403 0.592 0.99 0.593 0.396 0.991 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.489
Average program size in population (points): 35.336
Average percent parens in population: 0.219
Minimum age in population: 52.35031797736883
Maximum age in population: 56.562338636606
Average age in population: 54.88697060782948
Median age in population: 54.99575772529352
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 190
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 209
Syntactic diversity (% unique Push programs):	 0.502
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 8212957
--- Timings ---
Current time: 1559584068621 milliseconds
Total Time:          97.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.7 seconds, 80.8%
Fitness Testing:     11.4 seconds, 11.7%
Report:               7.2 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 85                 
Correct output: 40                  | Program output: 42                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 80                 
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Lexicase best program: (exec_swap (in1) (exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_yankdup integer_min boolean_dup_times boolean_not boolean_pop) exec_rot (print_integer integer_dup_times boolean_swap boolean_flush boolean_stackdepth tag_boolean_280) () (integer_min)) () ()))
Lexicase best errors: [0 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 35
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Zero cases best program: (exec_swap (in1) (exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (integer_div integer_lte integer_yankdup integer_min boolean_dup_times boolean_not boolean_pop) exec_rot (print_integer integer_dup_times boolean_swap boolean_flush boolean_stackdepth tag_boolean_280) () (integer_min)) () ()))
Zero cases best errors: [0 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 35
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (405 676 519 209 808 384 358 358 384 385)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (405 676 519 209 808 384 358 358 384 385)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup integer_stackdepth in3 integer_dup in2 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_swap integer_yank) print_integer integer_dup_times exec_yank boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 0 1 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 24
Size: 30
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.514
Median total errors in population: 5
Error averages by case: (0.595 0.324 0.481 0.791 0.192 0.616 0.642 0.642 0.616 0.615)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.873
Average program size in population (points): 32.928
Average percent parens in population: 0.214
Minimum age in population: 54.07592704892159
Maximum age in population: 58.08579422248295
Average age in population: 56.46896916696717
Median age in population: 56.52739679707884
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.447
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 8422913
--- Timings ---
Current time: 1559584071159 milliseconds
Total Time:          99.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.8 seconds, 80.9%
Fitness Testing:     11.6 seconds, 11.6%
Report:               7.3 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 29                 
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 69                 
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 62                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 30                 
Correct output: 17                  | Program output: 43                 
Correct output: 22                  | Program output: 44                 
Correct output: 10                  | Program output: 61                 
Correct output: 13                  | Program output: 36                 
Correct output: 19                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: 2                  
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -24                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: -38                
Correct output: -56                 | Program output: 4                  
Correct output: -77                 | Program output: 31                 
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -44                
Correct output: -67                 | Program output: -61                
Correct output: -32                 | Program output: -32                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: 25                 
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -42                
Correct output: -85                 | Program output: -44                
Correct output: -66                 | Program output: -21                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: -39                
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: -56                
Correct output: -39                 | Program output: -28                
Correct output: -25                 | Program output: 14                 
Correct output: -53                 | Program output: 21                 
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -79                 | Program output: 2                  
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -66                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -17                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -37                
Correct output: -31                 | Program output: 26                 
Correct output: -73                 | Program output: -66                
Correct output: -34                 | Program output: 43                 
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 34                 
Correct output: -94                 | Program output: -94                
Correct output: -61                 | Program output: -20                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: -76                
Correct output: -54                 | Program output: 7                  
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -98                
Correct output: -77                 | Program output: -62                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -68                
Correct output: -60                 | Program output: -60                
Correct output: -84                 | Program output: -37                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq boolean_not in2 boolean_not in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq boolean_not in2 boolean_not in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 448 660 901 613 442 660 902 314 446)
Population mean number of elite cases: 5.70
Count of perfect (error zero) individuals by case: (312 448 660 901 613 442 660 902 314 446)
Population mean number of perfect (error zero) cases: 5.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (integer_dec in3 boolean_not in2) boolean_xor in4 exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 1 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 27
Size: 34
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 4.302
Median total errors in population: 3
Error averages by case: (0.688 0.552 0.34 0.099 0.387 0.558 0.34 0.098 0.686 0.554)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.153
Average program size in population (points): 34.075
Average percent parens in population: 0.230
Minimum age in population: 55.37085941922851
Maximum age in population: 59.6154938491236
Average age in population: 58.02675352509992
Median age in population: 58.12055885916561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 8642774
--- Timings ---
Current time: 1559584073615 milliseconds
Total Time:         102.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.8 seconds, 80.9%
Fitness Testing:     11.9 seconds, 11.6%
Report:               7.5 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -73                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 85                 
Correct output: 40                  | Program output: 42                 
Correct output: 55                  | Program output: 68                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: 80                 
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: 1                  
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: 11                 
Correct output: -100                | Program output: 7                  
Correct output: -82                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -83                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -48                
Correct output: -66                 | Program output: -31                
Correct output: -72                 | Program output: -57                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -4                 
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -17                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -9                 
Correct output: -41                 | Program output: -40                
Correct output: -88                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: 52                 
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 43                 
Correct output: -90                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -30                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -56                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (boolean_dup_times boolean_or integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap integer_rot integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [1 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (exec_k () (boolean_dup_times boolean_or integer_lte integer_add boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap integer_rot integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [1 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 618 470 654 619 12 617 15 622 453)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (14 618 470 654 619 12 617 15 622 453)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Best program: (exec_swap (in1) (boolean_yankdup) boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not in2) exec_rot (print_integer integer_dup_times boolean_swap integer_dup integer_sub tag_boolean_280) () (integer_min))
Errors: [1 0 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 5.906
Median total errors in population: 5
Error averages by case: (0.986 0.382 0.53 0.346 0.381 0.988 0.383 0.985 0.378 0.547)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.032
Average program size in population (points): 34.772
Average percent parens in population: 0.220
Minimum age in population: 56.37085941922851
Maximum age in population: 61.3372801823607
Average age in population: 59.45414522111006
Median age in population: 59.56349647104071
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 8867775
--- Timings ---
Current time: 1559584076035 milliseconds
Total Time:         104.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.7 seconds, 80.9%
Fitness Testing:     12.2 seconds, 11.6%
Report:               7.7 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 397
Test mean error for best: 0.39700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 69                 
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 67                 
Correct output: 17                  | Program output: 20                 
Correct output: 22                  | Program output: 86                 
Correct output: 10                  | Program output: 79                 
Correct output: 13                  | Program output: 36                 
Correct output: 19                  | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -64                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -5                 
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: 63                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -61                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 28                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -21                
Correct output: -39                 | Program output: -28                
Correct output: -25                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -16                
Correct output: -22                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -37                
Correct output: -31                 | Program output: 29                 
Correct output: -73                 | Program output: -66                
Correct output: -34                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -65                
Correct output: -94                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -32                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -98                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -23                
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 exec_noop in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc) integer_yank) (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () integer_min)
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and integer_yankdup exec_do*while (in3 exec_noop in2) exec_rot (exec_k () (integer_div integer_lte integer_add boolean_invert_first_then_and integer_div integer_lte integer_add boolean_invert_first_then_and integer_inc) integer_yank) (print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () integer_min)
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (288 288 875 471 288 358 880 358 468 534)
Population mean number of elite cases: 4.81
Count of perfect (error zero) individuals by case: (288 288 875 471 288 358 880 358 468 534)
Population mean number of perfect (error zero) cases: 4.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and boolean_invert_first_then_and integer_yankdup exec_do*while (integer_gt boolean_not in2) exec_rot (exec_k () (integer_div boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 5.192
Median total errors in population: 4
Error averages by case: (0.712 0.712 0.125 0.529 0.712 0.642 0.12 0.642 0.532 0.466)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.964
Average program size in population (points): 33.579
Average percent parens in population: 0.225
Minimum age in population: 57.37085941922851
Maximum age in population: 62.75175184774707
Average age in population: 61.05219572468745
Median age in population: 61.10608676517586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 9076428
--- Timings ---
Current time: 1559584078561 milliseconds
Total Time:         107.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.8 seconds, 80.9%
Fitness Testing:     12.4 seconds, 11.6%
Report:               7.9 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 397
Test mean error for best: 0.39700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 69                 
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 67                 
Correct output: 17                  | Program output: 20                 
Correct output: 22                  | Program output: 86                 
Correct output: 10                  | Program output: 79                 
Correct output: 13                  | Program output: 36                 
Correct output: 19                  | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -64                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -5                 
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: 63                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -61                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 28                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -21                
Correct output: -39                 | Program output: -28                
Correct output: -25                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -16                
Correct output: -22                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -37                
Correct output: -31                 | Program output: 29                 
Correct output: -73                 | Program output: -66                
Correct output: -34                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -65                
Correct output: -94                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -32                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -98                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -23                
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and boolean_invert_first_then_and integer_yankdup exec_do*while (integer_gt boolean_not in2) exec_rot (exec_k () (integer_div boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and boolean_invert_first_then_and integer_yankdup exec_do*while (integer_gt boolean_not in2) exec_rot (exec_k () (integer_div boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (503 505 671 503 920 1 715 720 503 499)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (503 505 671 503 920 1 715 720 503 499)
Population mean number of perfect (error zero) cases: 5.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and boolean_invert_first_then_and integer_yankdup exec_do*while (integer_gt boolean_not in2) exec_rot (exec_k () (integer_div boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 4.46
Median total errors in population: 4
Error averages by case: (0.497 0.495 0.329 0.497 0.08 0.999 0.285 0.28 0.497 0.501)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.67
Average program size in population (points): 31.102
Average percent parens in population: 0.240
Minimum age in population: 59.95576322406123
Maximum age in population: 64.10713493433013
Average age in population: 62.37905185530082
Median age in population: 62.51407070164714
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 260
Genome diversity (% unique genomes):	 0.408
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 281
Syntactic diversity (% unique Push programs):	 0.385
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 9281841
--- Timings ---
Current time: 1559584081005 milliseconds
Total Time:         109.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.8 seconds, 81.0%
Fitness Testing:     12.7 seconds, 11.5%
Report:               8.1 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 397
Test mean error for best: 0.39700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 34                 
Correct output: 60                  | Program output: 60                 
Correct output: 4                   | Program output: 69                 
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 48                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 67                 
Correct output: 17                  | Program output: 20                 
Correct output: 22                  | Program output: 86                 
Correct output: 10                  | Program output: 79                 
Correct output: 13                  | Program output: 36                 
Correct output: 19                  | Program output: 32                 
Correct output: 12                  | Program output: 12                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: -97                 | Program output: -64                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -50                
Correct output: -26                 | Program output: -5                 
Correct output: -2                  | Program output: -2                 
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: 63                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -61                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 54                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 28                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -21                
Correct output: -39                 | Program output: -28                
Correct output: -25                 | Program output: 35                 
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: -46                
Correct output: -33                 | Program output: -16                
Correct output: -22                 | Program output: 57                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -37                
Correct output: -31                 | Program output: 29                 
Correct output: -73                 | Program output: -66                
Correct output: -34                 | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -65                
Correct output: -94                 | Program output: 13                 
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -32                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -98                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -68                 | Program output: -23                
Correct output: -60                 | Program output: -40                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Lexicase best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and boolean_invert_first_then_and integer_yankdup exec_do*while (integer_gt boolean_not in2) exec_rot (exec_k () (integer_div boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [0 0 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Zero cases best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and boolean_invert_first_then_and integer_yankdup exec_do*while (integer_gt boolean_not in2) exec_rot (exec_k () (integer_div boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [0 0 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (721 713 525 95 95 720 525 356 94 526)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (721 713 525 95 95 720 525 356 94 526)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 1, :instruction integer_min})
Best program: (integer_eq in1 boolean_yankdup boolean_invert_first_then_and boolean_invert_first_then_and integer_yankdup exec_do*while (integer_gt boolean_not in2) exec_rot (exec_k () (integer_div boolean_invert_first_then_and integer_inc integer_yank) print_integer integer_dup_times boolean_swap boolean_flush integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 0 1 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 5.63
Median total errors in population: 6
Error averages by case: (0.279 0.287 0.475 0.905 0.905 0.28 0.475 0.644 0.906 0.474)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.244
Average program size in population (points): 31.759
Average percent parens in population: 0.237
Minimum age in population: 61.28618185278901
Maximum age in population: 65.63156397941202
Average age in population: 63.70725289387373
Median age in population: 63.76836036347299
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 292
Genome diversity (% unique genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 321
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 9493807
--- Timings ---
Current time: 1559584083545 milliseconds
Total Time:         112.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.0 seconds, 81.0%
Fitness Testing:     12.9 seconds, 11.5%
Report:               8.3 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 417
Test mean error for best: 0.41700
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -84                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Lexicase best program: (exec_swap (in1) (boolean_yankdup) boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 24
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Zero cases best program: (exec_swap (in1) (boolean_yankdup) boolean_invert_first_then_and integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 24
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (417 271 267 903 269 271 768 268 413 406)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (417 271 267 903 269 271 768 268 413 406)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 2, :instruction tag_boolean_280} {:close 0, :instruction integer_min})
Best program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 5.747
Median total errors in population: 5
Error averages by case: (0.583 0.729 0.733 0.097 0.731 0.729 0.232 0.732 0.587 0.594)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.565
Average program size in population (points): 35.695
Average percent parens in population: 0.255
Minimum age in population: 62.98698641257033
Maximum age in population: 66.78298109818525
Average age in population: 65.01580156533794
Median age in population: 65.10150047278876
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.447
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 9726804
--- Timings ---
Current time: 1559584086100 milliseconds
Total Time:         114.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.0 seconds, 81.0%
Fitness Testing:     13.2 seconds, 11.5%
Report:               8.5 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 44
Successful program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 24


Auto-simplifying with starting size: 24
step: 0
program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 500
program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 1000
program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 1500
program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 2000
program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 2500
program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 3000
program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 3500
program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 4000
program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 4500
program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 5000
program: (exec_swap (in1) (boolean_yankdup) integer_mod integer_yankdup exec_do*while (in3 boolean_not exec_noop) exec_rot (print_integer integer_dup_times in1 boolean_swap integer_sub tag_boolean_280) () (integer_min))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 417
Test mean error for best: 0.41700
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -51                 | Program output: -51                
Correct output: 29                  | Program output: 100                
Correct output: 37                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: -86                 | Program output: -86                
Correct output: -5                  | Program output: 34                 
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -78                
Correct output: 26                  | Program output: 26                 
Correct output: 55                  | Program output: 55                 
Correct output: 21                  | Program output: 21                 
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: 34                  | Program output: 48                 
Correct output: 60                  | Program output: 73                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 38                 
Correct output: 18                  | Program output: 32                 
Correct output: 6                   | Program output: 66                 
Correct output: 40                  | Program output: 40                 
Correct output: 55                  | Program output: 55                 
Correct output: 48                  | Program output: 71                 
Correct output: 23                  | Program output: 30                 
Correct output: 19                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 38                  | Program output: 50                 
Correct output: 18                  | Program output: 44                 
Correct output: 9                   | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -55                
Correct output: -59                 | Program output: -42                
Correct output: -26                 | Program output: -26                
Correct output: -2                  | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -44                 | Program output: -34                
Correct output: -22                 | Program output: 36                 
Correct output: 22                  | Program output: 67                 
Correct output: -38                 | Program output: -9                 
Correct output: -56                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -43                
Correct output: -82                 | Program output: -82                
Correct output: -67                 | Program output: -67                
Correct output: -32                 | Program output: -4                 
Correct output: -98                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -57                
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -72                 | Program output: -72                
Correct output: -39                 | Program output: 22                 
Correct output: -45                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -39                 | Program output: -39                
Correct output: -25                 | Program output: -25                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -21                
Correct output: -73                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -41                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -46                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -22                 | Program output: -14                
Correct output: -99                 | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -31                 | Program output: -31                
Correct output: -73                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -100                | Program output: -91                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 8                  
Correct output: -61                 | Program output: -61                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -20                
Correct output: -68                 | Program output: -39                
Correct output: -60                 | Program output: -17                
Correct output: -84                 | Program output: -84                
;;******************************
