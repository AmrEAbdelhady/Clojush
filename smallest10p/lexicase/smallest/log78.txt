Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-68 -90 -90 -90] -90] [[99 34 99 99] 34] [[-11 -11 -21 -11] -21] [[-66 -66 -66 50] -66] [[-55 -55 -55 -78] -78] [[-66 72 72 72] -66] [[-62 -62 -62 -51] -62] [[15 -96 -96 -96] -96] [[91 91 91 -41] -41] [[-28 -15 -28 -28] -28] [(36 36 36 36) 36] [(9 9 9 9) 9] [(43 43 43 43) 43] [(72 72 72 72) 72] [(41 41 41 41) 41] [(16 97 24 63) 16] [(23 38 10 76) 10] [(62 71 18 70) 18] [(55 26 65 1) 1] [(80 68 83 60) 60] [(5 40 22 12) 5] [(1 4 26 17) 1] [(60 64 82 29) 29] [(63 13 71 64) 13] [(50 54 56 94) 50] [(57 17 13 49) 13] [(10 76 65 30) 10] [(68 15 84 99) 15] [(26 89 22 61) 22] [(85 100 90 7) 7] [(13 64 96 4) 4] [(60 85 28 100) 28] [(97 53 28 59) 28] [(15 81 72 100) 15] [(64 96 47 21) 21] [(31 81 89 -3) -3] [(27 27 49 -40) -40] [(77 -91 -18 -84) -91] [(33 48 58 51) 33] [(79 -36 37 13) -36] [(-78 -40 -57 43) -78] [(80 13 -61 81) -61] [(-41 -92 -85 -92) -92] [(-45 73 -100 -94) -100] [(60 -26 -47 9) -47] [(51 14 82 97) 14] [(81 -78 93 -93) -93] [(-20 -92 54 98) -92] [(30 14 -19 -83) -83] [(-71 3 42 23) -71] [(-90 31 87 87) -90] [(-55 80 35 -56) -56] [(28 95 -82 16) -82] [(11 19 -68 -44) -68] [(-68 -41 -68 66) -68] [(-88 10 22 -80) -88] [(-44 -79 4 59) -79] [(-16 -100 -26 19) -100] [(17 -90 98 41) -90] [(91 65 36 86) 36] [(-7 -45 -64 73) -64] [(-64 18 -80 18) -80] [(47 -61 -35 34) -61] [(-11 68 38 -28) -28] [(13 -68 -66 -62) -68] [(-30 19 59 54) -30] [(26 93 -34 -70) -70] [(67 -2 -43 14) -43] [(27 93 -78 56) -78] [(68 43 16 59) 16] [(-80 32 60 68) -80] [(76 -75 32 -26) -75] [(67 95 -74 -9) -74] [(48 61 22 -11) -11] [(84 -11 8 -18) -18] [(8 -41 80 18) -41] [(-44 85 6 -24) -44] [(98 -83 -57 94) -83] [(-60 6 -37 2) -60] [(82 22 6 100) 6] [(6 91 -71 58) -71] [(90 -36 -44 -67) -67] [(-94 -53 87 20) -94] [(-23 20 86 10) -23] [(-91 25 -73 33) -91] [(88 -73 50 -2) -73] [(-59 34 -44 58) -59] [(90 39 -99 11) -99] [(-90 -15 -74 -15) -90] [(39 -71 -92 -98) -98] [(83 -86 36 84) -86] [(49 45 64 29) 29] [(74 77 16 47) 16] [(27 -68 -31 -97) -97] [(95 51 -96 -88) -96])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-68 -90 -90 -90] -90]
Train Case:   6 | Input/Output: [[99 34 99 99] 34]
Train Case:   7 | Input/Output: [[-11 -11 -21 -11] -21]
Train Case:   8 | Input/Output: [[-66 -66 -66 50] -66]
Train Case:   9 | Input/Output: [[-55 -55 -55 -78] -78]
Train Case:  10 | Input/Output: [[-66 72 72 72] -66]
Train Case:  11 | Input/Output: [[-62 -62 -62 -51] -62]
Train Case:  12 | Input/Output: [[15 -96 -96 -96] -96]
Train Case:  13 | Input/Output: [[91 91 91 -41] -41]
Train Case:  14 | Input/Output: [[-28 -15 -28 -28] -28]
Train Case:  15 | Input/Output: [(36 36 36 36) 36]
Train Case:  16 | Input/Output: [(9 9 9 9) 9]
Train Case:  17 | Input/Output: [(43 43 43 43) 43]
Train Case:  18 | Input/Output: [(72 72 72 72) 72]
Train Case:  19 | Input/Output: [(41 41 41 41) 41]
Train Case:  20 | Input/Output: [(16 97 24 63) 16]
Train Case:  21 | Input/Output: [(23 38 10 76) 10]
Train Case:  22 | Input/Output: [(62 71 18 70) 18]
Train Case:  23 | Input/Output: [(55 26 65 1) 1]
Train Case:  24 | Input/Output: [(80 68 83 60) 60]
Train Case:  25 | Input/Output: [(5 40 22 12) 5]
Train Case:  26 | Input/Output: [(1 4 26 17) 1]
Train Case:  27 | Input/Output: [(60 64 82 29) 29]
Train Case:  28 | Input/Output: [(63 13 71 64) 13]
Train Case:  29 | Input/Output: [(50 54 56 94) 50]
Train Case:  30 | Input/Output: [(57 17 13 49) 13]
Train Case:  31 | Input/Output: [(10 76 65 30) 10]
Train Case:  32 | Input/Output: [(68 15 84 99) 15]
Train Case:  33 | Input/Output: [(26 89 22 61) 22]
Train Case:  34 | Input/Output: [(85 100 90 7) 7]
Train Case:  35 | Input/Output: [(13 64 96 4) 4]
Train Case:  36 | Input/Output: [(60 85 28 100) 28]
Train Case:  37 | Input/Output: [(97 53 28 59) 28]
Train Case:  38 | Input/Output: [(15 81 72 100) 15]
Train Case:  39 | Input/Output: [(64 96 47 21) 21]
Train Case:  40 | Input/Output: [(31 81 89 -3) -3]
Train Case:  41 | Input/Output: [(27 27 49 -40) -40]
Train Case:  42 | Input/Output: [(77 -91 -18 -84) -91]
Train Case:  43 | Input/Output: [(33 48 58 51) 33]
Train Case:  44 | Input/Output: [(79 -36 37 13) -36]
Train Case:  45 | Input/Output: [(-78 -40 -57 43) -78]
Train Case:  46 | Input/Output: [(80 13 -61 81) -61]
Train Case:  47 | Input/Output: [(-41 -92 -85 -92) -92]
Train Case:  48 | Input/Output: [(-45 73 -100 -94) -100]
Train Case:  49 | Input/Output: [(60 -26 -47 9) -47]
Train Case:  50 | Input/Output: [(51 14 82 97) 14]
Train Case:  51 | Input/Output: [(81 -78 93 -93) -93]
Train Case:  52 | Input/Output: [(-20 -92 54 98) -92]
Train Case:  53 | Input/Output: [(30 14 -19 -83) -83]
Train Case:  54 | Input/Output: [(-71 3 42 23) -71]
Train Case:  55 | Input/Output: [(-90 31 87 87) -90]
Train Case:  56 | Input/Output: [(-55 80 35 -56) -56]
Train Case:  57 | Input/Output: [(28 95 -82 16) -82]
Train Case:  58 | Input/Output: [(11 19 -68 -44) -68]
Train Case:  59 | Input/Output: [(-68 -41 -68 66) -68]
Train Case:  60 | Input/Output: [(-88 10 22 -80) -88]
Train Case:  61 | Input/Output: [(-44 -79 4 59) -79]
Train Case:  62 | Input/Output: [(-16 -100 -26 19) -100]
Train Case:  63 | Input/Output: [(17 -90 98 41) -90]
Train Case:  64 | Input/Output: [(91 65 36 86) 36]
Train Case:  65 | Input/Output: [(-7 -45 -64 73) -64]
Train Case:  66 | Input/Output: [(-64 18 -80 18) -80]
Train Case:  67 | Input/Output: [(47 -61 -35 34) -61]
Train Case:  68 | Input/Output: [(-11 68 38 -28) -28]
Train Case:  69 | Input/Output: [(13 -68 -66 -62) -68]
Train Case:  70 | Input/Output: [(-30 19 59 54) -30]
Train Case:  71 | Input/Output: [(26 93 -34 -70) -70]
Train Case:  72 | Input/Output: [(67 -2 -43 14) -43]
Train Case:  73 | Input/Output: [(27 93 -78 56) -78]
Train Case:  74 | Input/Output: [(68 43 16 59) 16]
Train Case:  75 | Input/Output: [(-80 32 60 68) -80]
Train Case:  76 | Input/Output: [(76 -75 32 -26) -75]
Train Case:  77 | Input/Output: [(67 95 -74 -9) -74]
Train Case:  78 | Input/Output: [(48 61 22 -11) -11]
Train Case:  79 | Input/Output: [(84 -11 8 -18) -18]
Train Case:  80 | Input/Output: [(8 -41 80 18) -41]
Train Case:  81 | Input/Output: [(-44 85 6 -24) -44]
Train Case:  82 | Input/Output: [(98 -83 -57 94) -83]
Train Case:  83 | Input/Output: [(-60 6 -37 2) -60]
Train Case:  84 | Input/Output: [(82 22 6 100) 6]
Train Case:  85 | Input/Output: [(6 91 -71 58) -71]
Train Case:  86 | Input/Output: [(90 -36 -44 -67) -67]
Train Case:  87 | Input/Output: [(-94 -53 87 20) -94]
Train Case:  88 | Input/Output: [(-23 20 86 10) -23]
Train Case:  89 | Input/Output: [(-91 25 -73 33) -91]
Train Case:  90 | Input/Output: [(88 -73 50 -2) -73]
Train Case:  91 | Input/Output: [(-59 34 -44 58) -59]
Train Case:  92 | Input/Output: [(90 39 -99 11) -99]
Train Case:  93 | Input/Output: [(-90 -15 -74 -15) -90]
Train Case:  94 | Input/Output: [(39 -71 -92 -98) -98]
Train Case:  95 | Input/Output: [(83 -86 36 84) -86]
Train Case:  96 | Input/Output: [(49 45 64 29) 29]
Train Case:  97 | Input/Output: [(74 77 16 47) 16]
Train Case:  98 | Input/Output: [(27 -68 -31 -97) -97]
Train Case:  99 | Input/Output: [(95 51 -96 -88) -96]
Test Case:   0 | Input/Output: [[67 -43 67 67] -43]
Test Case:   1 | Input/Output: [[38 80 38 38] 38]
Test Case:   2 | Input/Output: [[2 82 2 2] 2]
Test Case:   3 | Input/Output: [[-91 -91 -91 -21] -91]
Test Case:   4 | Input/Output: [[-22 67 67 67] -22]
Test Case:   5 | Input/Output: [[-85 4 -85 -85] -85]
Test Case:   6 | Input/Output: [[33 20 20 20] 20]
Test Case:   7 | Input/Output: [[72 72 72 84] 72]
Test Case:   8 | Input/Output: [[-52 -81 -81 -81] -81]
Test Case:   9 | Input/Output: [[-62 -22 -62 -62] -62]
Test Case:  10 | Input/Output: [[72 72 39 72] 39]
Test Case:  11 | Input/Output: [[12 -1 -1 -1] -1]
Test Case:  12 | Input/Output: [[-97 -97 -97 31] -97]
Test Case:  13 | Input/Output: [[67 -56 67 67] -56]
Test Case:  14 | Input/Output: [[26 26 -7 26] -7]
Test Case:  15 | Input/Output: [[-90 -9 -90 -90] -90]
Test Case:  16 | Input/Output: [[-58 -64 -58 -58] -64]
Test Case:  17 | Input/Output: [[-95 94 94 94] -95]
Test Case:  18 | Input/Output: [[11 11 -92 11] -92]
Test Case:  19 | Input/Output: [[28 28 28 -52] -52]
Test Case:  20 | Input/Output: [[-89 74 -89 -89] -89]
Test Case:  21 | Input/Output: [[49 49 -99 49] -99]
Test Case:  22 | Input/Output: [[60 60 -7 60] -7]
Test Case:  23 | Input/Output: [[-55 22 22 22] -55]
Test Case:  24 | Input/Output: [[-88 80 -88 -88] -88]
Test Case:  25 | Input/Output: [[-87 -87 -87 -77] -87]
Test Case:  26 | Input/Output: [[59 59 1 59] 1]
Test Case:  27 | Input/Output: [[35 53 53 53] 35]
Test Case:  28 | Input/Output: [[-14 27 -14 -14] -14]
Test Case:  29 | Input/Output: [[19 80 19 19] 19]
Test Case:  30 | Input/Output: [[-96 -64 -64 -64] -96]
Test Case:  31 | Input/Output: [[-65 -65 -3 -65] -65]
Test Case:  32 | Input/Output: [[77 36 36 36] 36]
Test Case:  33 | Input/Output: [[-70 86 -70 -70] -70]
Test Case:  34 | Input/Output: [[70 15 15 15] 15]
Test Case:  35 | Input/Output: [[-53 -53 -79 -53] -79]
Test Case:  36 | Input/Output: [[55 -9 55 55] -9]
Test Case:  37 | Input/Output: [[0 0 0 44] 0]
Test Case:  38 | Input/Output: [[79 -94 79 79] -94]
Test Case:  39 | Input/Output: [[79 12 12 12] 12]
Test Case:  40 | Input/Output: [[66 66 66 4] 4]
Test Case:  41 | Input/Output: [[65 65 65 -24] -24]
Test Case:  42 | Input/Output: [[-21 -91 -21 -21] -91]
Test Case:  43 | Input/Output: [[-25 -25 -65 -25] -65]
Test Case:  44 | Input/Output: [[31 79 31 31] 31]
Test Case:  45 | Input/Output: [[70 70 -50 70] -50]
Test Case:  46 | Input/Output: [[-8 -10 -8 -8] -10]
Test Case:  47 | Input/Output: [[-65 -61 -61 -61] -65]
Test Case:  48 | Input/Output: [[48 -36 48 48] -36]
Test Case:  49 | Input/Output: [[-43 -52 -43 -43] -52]
Test Case:  50 | Input/Output: [[73 73 45 73] 45]
Test Case:  51 | Input/Output: [[-60 -60 -60 67] -60]
Test Case:  52 | Input/Output: [[81 36 36 36] 36]
Test Case:  53 | Input/Output: [[22 22 22 52] 22]
Test Case:  54 | Input/Output: [[48 58 48 48] 48]
Test Case:  55 | Input/Output: [[-40 -14 -14 -14] -40]
Test Case:  56 | Input/Output: [[39 39 71 39] 39]
Test Case:  57 | Input/Output: [[70 -55 70 70] -55]
Test Case:  58 | Input/Output: [[-23 76 76 76] -23]
Test Case:  59 | Input/Output: [[-67 84 -67 -67] -67]
Test Case:  60 | Input/Output: [[-45 100 -45 -45] -45]
Test Case:  61 | Input/Output: [[-30 -30 -30 -85] -85]
Test Case:  62 | Input/Output: [[33 -32 33 33] -32]
Test Case:  63 | Input/Output: [[-49 -49 -49 59] -49]
Test Case:  64 | Input/Output: [[55 55 55 78] 55]
Test Case:  65 | Input/Output: [[-44 -44 44 -44] -44]
Test Case:  66 | Input/Output: [[79 -67 79 79] -67]
Test Case:  67 | Input/Output: [[43 -97 -97 -97] -97]
Test Case:  68 | Input/Output: [[48 48 48 69] 48]
Test Case:  69 | Input/Output: [[9 91 91 91] 9]
Test Case:  70 | Input/Output: [[54 54 91 54] 54]
Test Case:  71 | Input/Output: [[-37 -37 97 -37] -37]
Test Case:  72 | Input/Output: [[49 49 -95 49] -95]
Test Case:  73 | Input/Output: [[79 79 79 -53] -53]
Test Case:  74 | Input/Output: [[39 45 39 39] 39]
Test Case:  75 | Input/Output: [[-92 -92 -92 2] -92]
Test Case:  76 | Input/Output: [[-86 33 33 33] -86]
Test Case:  77 | Input/Output: [[-22 -46 -46 -46] -46]
Test Case:  78 | Input/Output: [[-9 -9 -9 25] -9]
Test Case:  79 | Input/Output: [[62 10 10 10] 10]
Test Case:  80 | Input/Output: [[-32 40 40 40] -32]
Test Case:  81 | Input/Output: [[65 65 65 -75] -75]
Test Case:  82 | Input/Output: [[66 66 66 44] 44]
Test Case:  83 | Input/Output: [[9 -70 9 9] -70]
Test Case:  84 | Input/Output: [[-35 -35 55 -35] -35]
Test Case:  85 | Input/Output: [[66 66 -4 66] -4]
Test Case:  86 | Input/Output: [[78 78 78 2] 2]
Test Case:  87 | Input/Output: [[70 -98 70 70] -98]
Test Case:  88 | Input/Output: [[59 -41 -41 -41] -41]
Test Case:  89 | Input/Output: [[-35 -35 -35 -76] -76]
Test Case:  90 | Input/Output: [[-8 -88 -88 -88] -88]
Test Case:  91 | Input/Output: [[84 84 100 84] 84]
Test Case:  92 | Input/Output: [[-21 -21 -54 -21] -54]
Test Case:  93 | Input/Output: [[88 88 -48 88] -48]
Test Case:  94 | Input/Output: [[29 -61 -61 -61] -61]
Test Case:  95 | Input/Output: [[-94 -94 -94 54] -94]
Test Case:  96 | Input/Output: [[-70 -70 -70 -70] -70]
Test Case:  97 | Input/Output: [[85 85 85 -10] -10]
Test Case:  98 | Input/Output: [[94 94 94 2] 2]
Test Case:  99 | Input/Output: [[33 33 -77 33] -77]
Test Case: 100 | Input/Output: [(12 12 12 12) 12]
Test Case: 101 | Input/Output: [(80 80 80 80) 80]
Test Case: 102 | Input/Output: [(1 1 1 1) 1]
Test Case: 103 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 104 | Input/Output: [(12 12 12 12) 12]
Test Case: 105 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 106 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 107 | Input/Output: [(85 85 85 85) 85]
Test Case: 108 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 109 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 110 | Input/Output: [(95 95 95 95) 95]
Test Case: 111 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 112 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 113 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 114 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 115 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 116 | Input/Output: [(2 2 2 2) 2]
Test Case: 117 | Input/Output: [(79 79 79 79) 79]
Test Case: 118 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 119 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 120 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 121 | Input/Output: [(86 86 86 86) 86]
Test Case: 122 | Input/Output: [(54 54 54 54) 54]
Test Case: 123 | Input/Output: [(11 11 11 11) 11]
Test Case: 124 | Input/Output: [(20 20 20 20) 20]
Test Case: 125 | Input/Output: [(85 85 85 85) 85]
Test Case: 126 | Input/Output: [(84 84 84 84) 84]
Test Case: 127 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 128 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 129 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 130 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 131 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 132 | Input/Output: [(39 39 39 39) 39]
Test Case: 133 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 134 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 135 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 136 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 137 | Input/Output: [(23 23 23 23) 23]
Test Case: 138 | Input/Output: [(92 92 92 92) 92]
Test Case: 139 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 140 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 141 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 142 | Input/Output: [(75 75 75 75) 75]
Test Case: 143 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 144 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 145 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 146 | Input/Output: [(82 82 82 82) 82]
Test Case: 147 | Input/Output: [(90 90 90 90) 90]
Test Case: 148 | Input/Output: [(25 25 25 25) 25]
Test Case: 149 | Input/Output: [(7 7 7 7) 7]
Test Case: 150 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 151 | Input/Output: [(41 41 41 41) 41]
Test Case: 152 | Input/Output: [(61 61 61 61) 61]
Test Case: 153 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 154 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 155 | Input/Output: [(61 61 61 61) 61]
Test Case: 156 | Input/Output: [(63 63 63 63) 63]
Test Case: 157 | Input/Output: [(5 5 5 5) 5]
Test Case: 158 | Input/Output: [(90 90 90 90) 90]
Test Case: 159 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 160 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 161 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 162 | Input/Output: [(41 41 41 41) 41]
Test Case: 163 | Input/Output: [(92 92 92 92) 92]
Test Case: 164 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 165 | Input/Output: [(33 33 33 33) 33]
Test Case: 166 | Input/Output: [(17 17 17 17) 17]
Test Case: 167 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 168 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 169 | Input/Output: [(97 97 97 97) 97]
Test Case: 170 | Input/Output: [(34 34 34 34) 34]
Test Case: 171 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 172 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 173 | Input/Output: [(28 28 28 28) 28]
Test Case: 174 | Input/Output: [(51 51 51 51) 51]
Test Case: 175 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 176 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 177 | Input/Output: [(77 77 77 77) 77]
Test Case: 178 | Input/Output: [(71 71 71 71) 71]
Test Case: 179 | Input/Output: [(7 7 7 7) 7]
Test Case: 180 | Input/Output: [(56 56 56 56) 56]
Test Case: 181 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 182 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 183 | Input/Output: [(26 26 26 26) 26]
Test Case: 184 | Input/Output: [(91 91 91 91) 91]
Test Case: 185 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 186 | Input/Output: [(60 60 60 60) 60]
Test Case: 187 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 188 | Input/Output: [(93 93 93 93) 93]
Test Case: 189 | Input/Output: [(68 68 68 68) 68]
Test Case: 190 | Input/Output: [(90 90 90 90) 90]
Test Case: 191 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 192 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 193 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 194 | Input/Output: [(96 96 96 96) 96]
Test Case: 195 | Input/Output: [(95 95 95 95) 95]
Test Case: 196 | Input/Output: [(3 3 3 3) 3]
Test Case: 197 | Input/Output: [(26 26 26 26) 26]
Test Case: 198 | Input/Output: [(54 54 54 54) 54]
Test Case: 199 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 200 | Input/Output: [(22 93 3 4) 3]
Test Case: 201 | Input/Output: [(37 21 77 0) 0]
Test Case: 202 | Input/Output: [(87 74 51 1) 1]
Test Case: 203 | Input/Output: [(1 14 88 44) 1]
Test Case: 204 | Input/Output: [(30 67 69 41) 30]
Test Case: 205 | Input/Output: [(87 38 76 18) 18]
Test Case: 206 | Input/Output: [(33 65 33 97) 33]
Test Case: 207 | Input/Output: [(12 94 91 6) 6]
Test Case: 208 | Input/Output: [(20 85 94 49) 20]
Test Case: 209 | Input/Output: [(73 30 55 86) 30]
Test Case: 210 | Input/Output: [(25 8 98 38) 8]
Test Case: 211 | Input/Output: [(16 77 48 73) 16]
Test Case: 212 | Input/Output: [(39 38 62 98) 38]
Test Case: 213 | Input/Output: [(7 11 0 77) 0]
Test Case: 214 | Input/Output: [(91 46 52 70) 46]
Test Case: 215 | Input/Output: [(18 42 50 29) 18]
Test Case: 216 | Input/Output: [(75 8 41 3) 3]
Test Case: 217 | Input/Output: [(39 57 4 79) 4]
Test Case: 218 | Input/Output: [(59 20 94 93) 20]
Test Case: 219 | Input/Output: [(2 1 7 28) 1]
Test Case: 220 | Input/Output: [(60 36 77 5) 5]
Test Case: 221 | Input/Output: [(3 91 86 43) 3]
Test Case: 222 | Input/Output: [(89 100 51 91) 51]
Test Case: 223 | Input/Output: [(24 68 75 60) 24]
Test Case: 224 | Input/Output: [(88 29 78 19) 19]
Test Case: 225 | Input/Output: [(35 64 41 87) 35]
Test Case: 226 | Input/Output: [(28 69 57 31) 28]
Test Case: 227 | Input/Output: [(61 9 14 69) 9]
Test Case: 228 | Input/Output: [(1 29 17 43) 1]
Test Case: 229 | Input/Output: [(74 92 45 84) 45]
Test Case: 230 | Input/Output: [(18 37 50 77) 18]
Test Case: 231 | Input/Output: [(67 19 91 6) 6]
Test Case: 232 | Input/Output: [(12 25 11 62) 11]
Test Case: 233 | Input/Output: [(31 42 78 54) 31]
Test Case: 234 | Input/Output: [(41 23 54 88) 23]
Test Case: 235 | Input/Output: [(45 57 60 74) 45]
Test Case: 236 | Input/Output: [(85 82 53 79) 53]
Test Case: 237 | Input/Output: [(1 47 20 59) 1]
Test Case: 238 | Input/Output: [(54 18 27 24) 18]
Test Case: 239 | Input/Output: [(95 79 57 65) 57]
Test Case: 240 | Input/Output: [(10 67 78 41) 10]
Test Case: 241 | Input/Output: [(78 32 16 6) 6]
Test Case: 242 | Input/Output: [(81 65 76 16) 16]
Test Case: 243 | Input/Output: [(2 54 31 16) 2]
Test Case: 244 | Input/Output: [(41 86 97 99) 41]
Test Case: 245 | Input/Output: [(53 35 74 56) 35]
Test Case: 246 | Input/Output: [(46 93 43 56) 43]
Test Case: 247 | Input/Output: [(60 28 82 45) 28]
Test Case: 248 | Input/Output: [(57 87 45 24) 24]
Test Case: 249 | Input/Output: [(68 49 80 45) 45]
Test Case: 250 | Input/Output: [(73 52 100 29) 29]
Test Case: 251 | Input/Output: [(55 96 53 27) 27]
Test Case: 252 | Input/Output: [(68 74 83 6) 6]
Test Case: 253 | Input/Output: [(91 94 14 56) 14]
Test Case: 254 | Input/Output: [(15 32 5 23) 5]
Test Case: 255 | Input/Output: [(32 22 11 67) 11]
Test Case: 256 | Input/Output: [(87 77 71 63) 63]
Test Case: 257 | Input/Output: [(94 5 98 62) 5]
Test Case: 258 | Input/Output: [(25 31 39 78) 25]
Test Case: 259 | Input/Output: [(97 2 36 54) 2]
Test Case: 260 | Input/Output: [(94 11 87 49) 11]
Test Case: 261 | Input/Output: [(1 43 52 27) 1]
Test Case: 262 | Input/Output: [(9 79 2 88) 2]
Test Case: 263 | Input/Output: [(59 17 68 2) 2]
Test Case: 264 | Input/Output: [(94 71 55 93) 55]
Test Case: 265 | Input/Output: [(81 18 49 83) 18]
Test Case: 266 | Input/Output: [(77 24 61 30) 24]
Test Case: 267 | Input/Output: [(29 90 60 4) 4]
Test Case: 268 | Input/Output: [(93 58 77 37) 37]
Test Case: 269 | Input/Output: [(12 49 15 92) 12]
Test Case: 270 | Input/Output: [(76 9 7 73) 7]
Test Case: 271 | Input/Output: [(87 13 48 30) 13]
Test Case: 272 | Input/Output: [(15 20 77 26) 15]
Test Case: 273 | Input/Output: [(57 48 99 98) 48]
Test Case: 274 | Input/Output: [(73 99 14 10) 10]
Test Case: 275 | Input/Output: [(11 42 96 74) 11]
Test Case: 276 | Input/Output: [(98 0 50 8) 0]
Test Case: 277 | Input/Output: [(100 10 38 46) 10]
Test Case: 278 | Input/Output: [(5 75 3 56) 3]
Test Case: 279 | Input/Output: [(76 83 29 19) 19]
Test Case: 280 | Input/Output: [(51 33 57 75) 33]
Test Case: 281 | Input/Output: [(22 6 20 77) 6]
Test Case: 282 | Input/Output: [(29 20 79 8) 8]
Test Case: 283 | Input/Output: [(48 26 14 23) 14]
Test Case: 284 | Input/Output: [(50 10 91 19) 10]
Test Case: 285 | Input/Output: [(75 19 68 90) 19]
Test Case: 286 | Input/Output: [(39 61 66 41) 39]
Test Case: 287 | Input/Output: [(88 72 60 63) 60]
Test Case: 288 | Input/Output: [(50 17 9 97) 9]
Test Case: 289 | Input/Output: [(56 99 83 3) 3]
Test Case: 290 | Input/Output: [(11 74 71 43) 11]
Test Case: 291 | Input/Output: [(4 92 19 22) 4]
Test Case: 292 | Input/Output: [(53 85 53 64) 53]
Test Case: 293 | Input/Output: [(97 66 5 3) 3]
Test Case: 294 | Input/Output: [(55 69 29 31) 29]
Test Case: 295 | Input/Output: [(25 99 97 30) 25]
Test Case: 296 | Input/Output: [(18 4 87 77) 4]
Test Case: 297 | Input/Output: [(5 59 97 92) 5]
Test Case: 298 | Input/Output: [(97 96 16 32) 16]
Test Case: 299 | Input/Output: [(29 70 32 89) 29]
Test Case: 300 | Input/Output: [(60 95 17 41) 17]
Test Case: 301 | Input/Output: [(81 34 18 28) 18]
Test Case: 302 | Input/Output: [(64 30 75 68) 30]
Test Case: 303 | Input/Output: [(34 29 85 55) 29]
Test Case: 304 | Input/Output: [(71 88 33 86) 33]
Test Case: 305 | Input/Output: [(100 55 3 99) 3]
Test Case: 306 | Input/Output: [(87 84 52 65) 52]
Test Case: 307 | Input/Output: [(60 7 94 39) 7]
Test Case: 308 | Input/Output: [(1 49 31 56) 1]
Test Case: 309 | Input/Output: [(94 56 19 5) 5]
Test Case: 310 | Input/Output: [(8 50 12 35) 8]
Test Case: 311 | Input/Output: [(56 49 19 34) 19]
Test Case: 312 | Input/Output: [(25 65 72 17) 17]
Test Case: 313 | Input/Output: [(2 100 25 58) 2]
Test Case: 314 | Input/Output: [(45 54 89 18) 18]
Test Case: 315 | Input/Output: [(58 74 69 8) 8]
Test Case: 316 | Input/Output: [(19 43 2 3) 2]
Test Case: 317 | Input/Output: [(27 17 75 67) 17]
Test Case: 318 | Input/Output: [(13 38 100 22) 13]
Test Case: 319 | Input/Output: [(59 42 84 18) 18]
Test Case: 320 | Input/Output: [(8 44 38 5) 5]
Test Case: 321 | Input/Output: [(24 54 6 78) 6]
Test Case: 322 | Input/Output: [(20 1 80 92) 1]
Test Case: 323 | Input/Output: [(26 75 19 24) 19]
Test Case: 324 | Input/Output: [(56 78 70 56) 56]
Test Case: 325 | Input/Output: [(9 6 36 15) 6]
Test Case: 326 | Input/Output: [(64 10 44 94) 10]
Test Case: 327 | Input/Output: [(12 49 36 99) 12]
Test Case: 328 | Input/Output: [(21 23 3 32) 3]
Test Case: 329 | Input/Output: [(38 54 94 31) 31]
Test Case: 330 | Input/Output: [(66 1 90 27) 1]
Test Case: 331 | Input/Output: [(76 19 58 57) 19]
Test Case: 332 | Input/Output: [(36 34 28 51) 28]
Test Case: 333 | Input/Output: [(92 95 26 5) 5]
Test Case: 334 | Input/Output: [(35 73 43 20) 20]
Test Case: 335 | Input/Output: [(77 36 37 91) 36]
Test Case: 336 | Input/Output: [(99 9 72 53) 9]
Test Case: 337 | Input/Output: [(20 91 76 22) 20]
Test Case: 338 | Input/Output: [(12 27 85 8) 8]
Test Case: 339 | Input/Output: [(81 87 36 24) 24]
Test Case: 340 | Input/Output: [(14 64 68 46) 14]
Test Case: 341 | Input/Output: [(99 4 19 58) 4]
Test Case: 342 | Input/Output: [(62 53 59 53) 53]
Test Case: 343 | Input/Output: [(40 68 74 17) 17]
Test Case: 344 | Input/Output: [(78 60 19 17) 17]
Test Case: 345 | Input/Output: [(9 60 44 95) 9]
Test Case: 346 | Input/Output: [(89 21 51 11) 11]
Test Case: 347 | Input/Output: [(78 75 50 40) 40]
Test Case: 348 | Input/Output: [(93 81 54 57) 54]
Test Case: 349 | Input/Output: [(52 91 27 8) 8]
Test Case: 350 | Input/Output: [(9 13 25 64) 9]
Test Case: 351 | Input/Output: [(80 61 36 77) 36]
Test Case: 352 | Input/Output: [(8 96 31 95) 8]
Test Case: 353 | Input/Output: [(99 34 72 56) 34]
Test Case: 354 | Input/Output: [(70 4 2 84) 2]
Test Case: 355 | Input/Output: [(21 54 42 53) 21]
Test Case: 356 | Input/Output: [(45 83 77 62) 45]
Test Case: 357 | Input/Output: [(45 47 53 68) 45]
Test Case: 358 | Input/Output: [(73 3 21 92) 3]
Test Case: 359 | Input/Output: [(67 47 40 4) 4]
Test Case: 360 | Input/Output: [(55 65 59 21) 21]
Test Case: 361 | Input/Output: [(44 31 24 97) 24]
Test Case: 362 | Input/Output: [(32 19 30 59) 19]
Test Case: 363 | Input/Output: [(23 22 55 45) 22]
Test Case: 364 | Input/Output: [(86 82 49 42) 42]
Test Case: 365 | Input/Output: [(43 28 80 82) 28]
Test Case: 366 | Input/Output: [(89 95 28 15) 15]
Test Case: 367 | Input/Output: [(38 62 17 33) 17]
Test Case: 368 | Input/Output: [(8 11 7 78) 7]
Test Case: 369 | Input/Output: [(10 39 66 26) 10]
Test Case: 370 | Input/Output: [(85 24 4 63) 4]
Test Case: 371 | Input/Output: [(52 24 37 94) 24]
Test Case: 372 | Input/Output: [(55 52 36 14) 14]
Test Case: 373 | Input/Output: [(86 53 66 16) 16]
Test Case: 374 | Input/Output: [(54 56 51 38) 38]
Test Case: 375 | Input/Output: [(42 51 32 48) 32]
Test Case: 376 | Input/Output: [(11 59 17 88) 11]
Test Case: 377 | Input/Output: [(37 61 32 56) 32]
Test Case: 378 | Input/Output: [(32 53 58 2) 2]
Test Case: 379 | Input/Output: [(48 68 52 53) 48]
Test Case: 380 | Input/Output: [(75 49 12 16) 12]
Test Case: 381 | Input/Output: [(85 90 99 44) 44]
Test Case: 382 | Input/Output: [(28 21 62 1) 1]
Test Case: 383 | Input/Output: [(92 14 5 20) 5]
Test Case: 384 | Input/Output: [(97 36 64 18) 18]
Test Case: 385 | Input/Output: [(13 50 27 72) 13]
Test Case: 386 | Input/Output: [(52 42 83 72) 42]
Test Case: 387 | Input/Output: [(34 1 45 99) 1]
Test Case: 388 | Input/Output: [(29 36 50 31) 29]
Test Case: 389 | Input/Output: [(51 65 80 3) 3]
Test Case: 390 | Input/Output: [(87 85 90 7) 7]
Test Case: 391 | Input/Output: [(43 98 36 59) 36]
Test Case: 392 | Input/Output: [(87 42 78 7) 7]
Test Case: 393 | Input/Output: [(40 42 27 62) 27]
Test Case: 394 | Input/Output: [(87 24 86 80) 24]
Test Case: 395 | Input/Output: [(39 28 47 25) 25]
Test Case: 396 | Input/Output: [(14 55 34 12) 12]
Test Case: 397 | Input/Output: [(37 83 9 56) 9]
Test Case: 398 | Input/Output: [(45 26 33 42) 26]
Test Case: 399 | Input/Output: [(90 39 71 7) 7]
Test Case: 400 | Input/Output: [(-32 45 58 88) -32]
Test Case: 401 | Input/Output: [(67 99 -90 -83) -90]
Test Case: 402 | Input/Output: [(42 -19 73 93) -19]
Test Case: 403 | Input/Output: [(37 92 -16 -29) -29]
Test Case: 404 | Input/Output: [(-15 94 -49 -47) -49]
Test Case: 405 | Input/Output: [(-49 -6 -38 -86) -86]
Test Case: 406 | Input/Output: [(-91 -85 68 96) -91]
Test Case: 407 | Input/Output: [(39 -81 -53 55) -81]
Test Case: 408 | Input/Output: [(-83 91 -79 42) -83]
Test Case: 409 | Input/Output: [(93 59 -15 -71) -71]
Test Case: 410 | Input/Output: [(-77 -73 -70 18) -77]
Test Case: 411 | Input/Output: [(42 -54 -65 -7) -65]
Test Case: 412 | Input/Output: [(72 -84 94 34) -84]
Test Case: 413 | Input/Output: [(-43 37 -89 68) -89]
Test Case: 414 | Input/Output: [(-56 -17 -59 -37) -59]
Test Case: 415 | Input/Output: [(25 58 -29 -73) -73]
Test Case: 416 | Input/Output: [(67 -33 39 -28) -33]
Test Case: 417 | Input/Output: [(60 -91 -47 27) -91]
Test Case: 418 | Input/Output: [(30 -93 53 96) -93]
Test Case: 419 | Input/Output: [(13 -5 -83 -22) -83]
Test Case: 420 | Input/Output: [(-70 65 5 71) -70]
Test Case: 421 | Input/Output: [(-23 -94 60 43) -94]
Test Case: 422 | Input/Output: [(-39 78 -3 16) -39]
Test Case: 423 | Input/Output: [(14 -21 35 66) -21]
Test Case: 424 | Input/Output: [(-79 -25 91 77) -79]
Test Case: 425 | Input/Output: [(-61 -72 -78 -2) -78]
Test Case: 426 | Input/Output: [(-58 -72 -12 73) -72]
Test Case: 427 | Input/Output: [(-57 17 26 -53) -57]
Test Case: 428 | Input/Output: [(-74 -4 84 7) -74]
Test Case: 429 | Input/Output: [(44 -26 68 58) -26]
Test Case: 430 | Input/Output: [(-35 48 -54 -47) -54]
Test Case: 431 | Input/Output: [(8 71 -15 -53) -53]
Test Case: 432 | Input/Output: [(55 25 7 -80) -80]
Test Case: 433 | Input/Output: [(50 29 69 93) 29]
Test Case: 434 | Input/Output: [(31 35 -18 -6) -18]
Test Case: 435 | Input/Output: [(85 -19 -41 14) -41]
Test Case: 436 | Input/Output: [(3 72 -36 28) -36]
Test Case: 437 | Input/Output: [(-66 -6 89 87) -66]
Test Case: 438 | Input/Output: [(-36 -56 21 79) -56]
Test Case: 439 | Input/Output: [(-1 -1 85 85) -1]
Test Case: 440 | Input/Output: [(-92 2 90 -10) -92]
Test Case: 441 | Input/Output: [(-89 -44 -17 -53) -89]
Test Case: 442 | Input/Output: [(-4 10 -96 12) -96]
Test Case: 443 | Input/Output: [(75 -85 -8 19) -85]
Test Case: 444 | Input/Output: [(-78 14 46 -62) -78]
Test Case: 445 | Input/Output: [(6 -30 74 -84) -84]
Test Case: 446 | Input/Output: [(-47 -18 -78 -43) -78]
Test Case: 447 | Input/Output: [(78 22 -53 52) -53]
Test Case: 448 | Input/Output: [(14 30 25 -29) -29]
Test Case: 449 | Input/Output: [(54 1 74 -71) -71]
Test Case: 450 | Input/Output: [(42 13 1 11) 1]
Test Case: 451 | Input/Output: [(-34 66 -64 84) -64]
Test Case: 452 | Input/Output: [(97 61 -15 78) -15]
Test Case: 453 | Input/Output: [(-52 88 48 98) -52]
Test Case: 454 | Input/Output: [(29 -75 54 1) -75]
Test Case: 455 | Input/Output: [(-48 -81 -68 -46) -81]
Test Case: 456 | Input/Output: [(-99 -14 -51 -48) -99]
Test Case: 457 | Input/Output: [(-6 -45 95 9) -45]
Test Case: 458 | Input/Output: [(-46 29 -91 55) -91]
Test Case: 459 | Input/Output: [(-21 -53 -42 -30) -53]
Test Case: 460 | Input/Output: [(45 65 -66 21) -66]
Test Case: 461 | Input/Output: [(-10 46 96 80) -10]
Test Case: 462 | Input/Output: [(56 29 -22 -93) -93]
Test Case: 463 | Input/Output: [(1 -88 -33 -60) -88]
Test Case: 464 | Input/Output: [(31 -1 -7 -1) -7]
Test Case: 465 | Input/Output: [(-24 -89 17 25) -89]
Test Case: 466 | Input/Output: [(57 54 -50 69) -50]
Test Case: 467 | Input/Output: [(-75 -41 -49 77) -75]
Test Case: 468 | Input/Output: [(10 46 -57 82) -57]
Test Case: 469 | Input/Output: [(35 -39 -80 61) -80]
Test Case: 470 | Input/Output: [(46 79 -73 -11) -73]
Test Case: 471 | Input/Output: [(-50 0 -63 69) -63]
Test Case: 472 | Input/Output: [(-86 -88 61 -61) -88]
Test Case: 473 | Input/Output: [(-82 -55 -92 13) -92]
Test Case: 474 | Input/Output: [(-92 -77 68 38) -92]
Test Case: 475 | Input/Output: [(19 -100 63 -80) -100]
Test Case: 476 | Input/Output: [(-33 81 94 40) -33]
Test Case: 477 | Input/Output: [(-19 -12 -91 40) -91]
Test Case: 478 | Input/Output: [(41 -51 33 5) -51]
Test Case: 479 | Input/Output: [(77 97 76 -98) -98]
Test Case: 480 | Input/Output: [(82 -67 18 78) -67]
Test Case: 481 | Input/Output: [(-38 63 42 70) -38]
Test Case: 482 | Input/Output: [(31 60 -98 -10) -98]
Test Case: 483 | Input/Output: [(-86 -78 -78 44) -86]
Test Case: 484 | Input/Output: [(100 -100 41 -84) -100]
Test Case: 485 | Input/Output: [(-22 -91 77 73) -91]
Test Case: 486 | Input/Output: [(87 93 -86 65) -86]
Test Case: 487 | Input/Output: [(84 -43 29 -60) -60]
Test Case: 488 | Input/Output: [(-46 55 47 -63) -63]
Test Case: 489 | Input/Output: [(-6 87 -43 10) -43]
Test Case: 490 | Input/Output: [(29 -19 -19 -46) -46]
Test Case: 491 | Input/Output: [(48 13 -69 -66) -69]
Test Case: 492 | Input/Output: [(-11 -36 -76 23) -76]
Test Case: 493 | Input/Output: [(-57 46 -53 -13) -57]
Test Case: 494 | Input/Output: [(-9 16 -50 83) -50]
Test Case: 495 | Input/Output: [(78 -93 -86 38) -93]
Test Case: 496 | Input/Output: [(77 28 -39 -20) -39]
Test Case: 497 | Input/Output: [(-87 58 -60 -90) -90]
Test Case: 498 | Input/Output: [(-68 -3 -8 87) -68]
Test Case: 499 | Input/Output: [(85 -15 -21 -69) -69]
Test Case: 500 | Input/Output: [(-61 -42 77 -90) -90]
Test Case: 501 | Input/Output: [(-24 -28 -97 81) -97]
Test Case: 502 | Input/Output: [(63 -28 28 -90) -90]
Test Case: 503 | Input/Output: [(14 -94 18 59) -94]
Test Case: 504 | Input/Output: [(78 -77 13 51) -77]
Test Case: 505 | Input/Output: [(-68 42 -4 6) -68]
Test Case: 506 | Input/Output: [(73 -100 -57 -66) -100]
Test Case: 507 | Input/Output: [(3 -86 -43 20) -86]
Test Case: 508 | Input/Output: [(-65 -74 28 -51) -74]
Test Case: 509 | Input/Output: [(-33 -56 -32 -73) -73]
Test Case: 510 | Input/Output: [(40 84 -53 -51) -53]
Test Case: 511 | Input/Output: [(74 58 -56 51) -56]
Test Case: 512 | Input/Output: [(-44 -44 33 24) -44]
Test Case: 513 | Input/Output: [(-45 20 -30 14) -45]
Test Case: 514 | Input/Output: [(-21 -41 -33 76) -41]
Test Case: 515 | Input/Output: [(-2 -80 -58 -69) -80]
Test Case: 516 | Input/Output: [(79 -93 9 86) -93]
Test Case: 517 | Input/Output: [(-34 -2 31 71) -34]
Test Case: 518 | Input/Output: [(88 1 -73 -48) -73]
Test Case: 519 | Input/Output: [(35 -2 17 -56) -56]
Test Case: 520 | Input/Output: [(-79 -86 76 -34) -86]
Test Case: 521 | Input/Output: [(-22 -20 -24 -88) -88]
Test Case: 522 | Input/Output: [(-73 -57 -16 -91) -91]
Test Case: 523 | Input/Output: [(-68 95 98 88) -68]
Test Case: 524 | Input/Output: [(-79 -79 -75 50) -79]
Test Case: 525 | Input/Output: [(-4 -78 -54 64) -78]
Test Case: 526 | Input/Output: [(65 -100 88 20) -100]
Test Case: 527 | Input/Output: [(-7 -14 -73 34) -73]
Test Case: 528 | Input/Output: [(-11 -61 75 16) -61]
Test Case: 529 | Input/Output: [(-48 -82 31 -40) -82]
Test Case: 530 | Input/Output: [(86 46 20 -22) -22]
Test Case: 531 | Input/Output: [(-49 -5 -43 -97) -97]
Test Case: 532 | Input/Output: [(67 -48 -23 -93) -93]
Test Case: 533 | Input/Output: [(78 73 72 -6) -6]
Test Case: 534 | Input/Output: [(-83 -86 36 -74) -86]
Test Case: 535 | Input/Output: [(-58 63 -87 -98) -98]
Test Case: 536 | Input/Output: [(32 -28 17 -33) -33]
Test Case: 537 | Input/Output: [(-88 38 -96 98) -96]
Test Case: 538 | Input/Output: [(-99 89 -93 60) -99]
Test Case: 539 | Input/Output: [(68 6 -81 32) -81]
Test Case: 540 | Input/Output: [(97 44 -95 66) -95]
Test Case: 541 | Input/Output: [(-27 -50 -38 -26) -50]
Test Case: 542 | Input/Output: [(34 -53 -85 -49) -85]
Test Case: 543 | Input/Output: [(-35 96 8 -16) -35]
Test Case: 544 | Input/Output: [(3 -8 20 3) -8]
Test Case: 545 | Input/Output: [(-98 -6 -75 -10) -98]
Test Case: 546 | Input/Output: [(-19 30 25 -69) -69]
Test Case: 547 | Input/Output: [(84 4 -23 -70) -70]
Test Case: 548 | Input/Output: [(96 53 43 -85) -85]
Test Case: 549 | Input/Output: [(-15 63 -83 81) -83]
Test Case: 550 | Input/Output: [(47 -91 40 -45) -91]
Test Case: 551 | Input/Output: [(35 -62 -2 64) -62]
Test Case: 552 | Input/Output: [(97 74 28 -59) -59]
Test Case: 553 | Input/Output: [(22 -46 69 -73) -73]
Test Case: 554 | Input/Output: [(77 -41 71 74) -41]
Test Case: 555 | Input/Output: [(5 66 93 -71) -71]
Test Case: 556 | Input/Output: [(-63 17 -67 47) -67]
Test Case: 557 | Input/Output: [(-89 -95 30 -53) -95]
Test Case: 558 | Input/Output: [(13 16 -69 28) -69]
Test Case: 559 | Input/Output: [(-54 -14 -32 -81) -81]
Test Case: 560 | Input/Output: [(-61 36 -50 -55) -61]
Test Case: 561 | Input/Output: [(-70 56 -46 76) -70]
Test Case: 562 | Input/Output: [(84 70 63 6) 6]
Test Case: 563 | Input/Output: [(-17 8 -53 90) -53]
Test Case: 564 | Input/Output: [(-45 -25 58 -85) -85]
Test Case: 565 | Input/Output: [(-87 -43 88 8) -87]
Test Case: 566 | Input/Output: [(-14 -48 -61 -39) -61]
Test Case: 567 | Input/Output: [(49 35 -93 19) -93]
Test Case: 568 | Input/Output: [(-5 84 -12 68) -12]
Test Case: 569 | Input/Output: [(-12 2 67 58) -12]
Test Case: 570 | Input/Output: [(-33 -13 8 -24) -33]
Test Case: 571 | Input/Output: [(73 -25 95 -97) -97]
Test Case: 572 | Input/Output: [(-12 -75 28 16) -75]
Test Case: 573 | Input/Output: [(-34 69 -57 -78) -78]
Test Case: 574 | Input/Output: [(43 -55 -50 -98) -98]
Test Case: 575 | Input/Output: [(85 61 -96 -57) -96]
Test Case: 576 | Input/Output: [(-91 38 50 -3) -91]
Test Case: 577 | Input/Output: [(-63 90 50 -81) -81]
Test Case: 578 | Input/Output: [(-14 53 -92 -37) -92]
Test Case: 579 | Input/Output: [(-4 9 62 -52) -52]
Test Case: 580 | Input/Output: [(-96 -79 15 -11) -96]
Test Case: 581 | Input/Output: [(-33 -82 -33 -46) -82]
Test Case: 582 | Input/Output: [(-57 6 -56 90) -57]
Test Case: 583 | Input/Output: [(-73 5 72 85) -73]
Test Case: 584 | Input/Output: [(-87 -33 55 37) -87]
Test Case: 585 | Input/Output: [(-81 -62 78 74) -81]
Test Case: 586 | Input/Output: [(-30 -48 -82 -71) -82]
Test Case: 587 | Input/Output: [(-97 -56 -14 26) -97]
Test Case: 588 | Input/Output: [(-75 2 -99 -5) -99]
Test Case: 589 | Input/Output: [(23 29 -6 -11) -11]
Test Case: 590 | Input/Output: [(34 99 36 -84) -84]
Test Case: 591 | Input/Output: [(-35 -94 0 -9) -94]
Test Case: 592 | Input/Output: [(45 22 59 -34) -34]
Test Case: 593 | Input/Output: [(-62 75 -21 74) -62]
Test Case: 594 | Input/Output: [(68 41 61 98) 41]
Test Case: 595 | Input/Output: [(-34 72 44 53) -34]
Test Case: 596 | Input/Output: [(68 -43 31 -49) -49]
Test Case: 597 | Input/Output: [(50 9 -5 55) -5]
Test Case: 598 | Input/Output: [(70 -94 45 -55) -94]
Test Case: 599 | Input/Output: [(32 3 90 87) 3]
Test Case: 600 | Input/Output: [(77 -1 12 -70) -70]
Test Case: 601 | Input/Output: [(-50 -58 12 -33) -58]
Test Case: 602 | Input/Output: [(87 -72 7 -11) -72]
Test Case: 603 | Input/Output: [(14 -58 -66 91) -66]
Test Case: 604 | Input/Output: [(-38 5 -26 43) -38]
Test Case: 605 | Input/Output: [(-80 90 99 26) -80]
Test Case: 606 | Input/Output: [(-90 -32 90 63) -90]
Test Case: 607 | Input/Output: [(-40 -13 -58 83) -58]
Test Case: 608 | Input/Output: [(-44 80 60 64) -44]
Test Case: 609 | Input/Output: [(51 82 -41 34) -41]
Test Case: 610 | Input/Output: [(27 -86 76 24) -86]
Test Case: 611 | Input/Output: [(25 69 69 75) 25]
Test Case: 612 | Input/Output: [(-2 -42 -100 -94) -100]
Test Case: 613 | Input/Output: [(1 -35 -19 87) -35]
Test Case: 614 | Input/Output: [(-8 25 1 29) -8]
Test Case: 615 | Input/Output: [(-5 -39 -79 -17) -79]
Test Case: 616 | Input/Output: [(34 51 3 42) 3]
Test Case: 617 | Input/Output: [(100 -51 85 22) -51]
Test Case: 618 | Input/Output: [(-90 82 -99 -45) -99]
Test Case: 619 | Input/Output: [(-40 -5 -76 -66) -76]
Test Case: 620 | Input/Output: [(-86 2 -47 -42) -86]
Test Case: 621 | Input/Output: [(71 92 -7 -86) -86]
Test Case: 622 | Input/Output: [(-17 -59 -12 51) -59]
Test Case: 623 | Input/Output: [(98 26 86 -8) -8]
Test Case: 624 | Input/Output: [(46 16 95 -84) -84]
Test Case: 625 | Input/Output: [(96 7 37 67) 7]
Test Case: 626 | Input/Output: [(-25 62 25 54) -25]
Test Case: 627 | Input/Output: [(57 -8 -4 -28) -28]
Test Case: 628 | Input/Output: [(-34 65 92 60) -34]
Test Case: 629 | Input/Output: [(78 34 -99 -55) -99]
Test Case: 630 | Input/Output: [(-32 -53 -28 -82) -82]
Test Case: 631 | Input/Output: [(-73 29 72 35) -73]
Test Case: 632 | Input/Output: [(21 -41 -65 14) -65]
Test Case: 633 | Input/Output: [(31 -51 -16 -37) -51]
Test Case: 634 | Input/Output: [(37 55 -61 19) -61]
Test Case: 635 | Input/Output: [(-65 91 -71 -34) -71]
Test Case: 636 | Input/Output: [(-13 -52 -73 13) -73]
Test Case: 637 | Input/Output: [(82 22 -91 -52) -91]
Test Case: 638 | Input/Output: [(99 61 46 1) 1]
Test Case: 639 | Input/Output: [(-45 -86 2 98) -86]
Test Case: 640 | Input/Output: [(79 29 15 -40) -40]
Test Case: 641 | Input/Output: [(85 48 62 63) 48]
Test Case: 642 | Input/Output: [(-48 -77 29 74) -77]
Test Case: 643 | Input/Output: [(-84 -12 43 -38) -84]
Test Case: 644 | Input/Output: [(54 75 89 7) 7]
Test Case: 645 | Input/Output: [(-61 9 83 -60) -61]
Test Case: 646 | Input/Output: [(1 32 70 -77) -77]
Test Case: 647 | Input/Output: [(-11 61 66 -69) -69]
Test Case: 648 | Input/Output: [(88 87 -48 -51) -51]
Test Case: 649 | Input/Output: [(-10 -78 -36 -55) -78]
Test Case: 650 | Input/Output: [(-79 -14 -45 -94) -94]
Test Case: 651 | Input/Output: [(70 54 46 -60) -60]
Test Case: 652 | Input/Output: [(83 27 -46 -74) -74]
Test Case: 653 | Input/Output: [(84 87 -59 -49) -59]
Test Case: 654 | Input/Output: [(-70 68 7 -39) -70]
Test Case: 655 | Input/Output: [(63 96 -78 67) -78]
Test Case: 656 | Input/Output: [(-96 -60 -26 -24) -96]
Test Case: 657 | Input/Output: [(-66 56 -89 -18) -89]
Test Case: 658 | Input/Output: [(99 99 4 -70) -70]
Test Case: 659 | Input/Output: [(-69 20 21 -77) -77]
Test Case: 660 | Input/Output: [(-50 11 3 58) -50]
Test Case: 661 | Input/Output: [(-12 -66 21 -59) -66]
Test Case: 662 | Input/Output: [(61 -42 -69 -42) -69]
Test Case: 663 | Input/Output: [(-58 16 -50 6) -58]
Test Case: 664 | Input/Output: [(-47 51 76 100) -47]
Test Case: 665 | Input/Output: [(-25 33 82 90) -25]
Test Case: 666 | Input/Output: [(25 7 -80 -63) -80]
Test Case: 667 | Input/Output: [(-56 -78 19 -71) -78]
Test Case: 668 | Input/Output: [(-65 -22 24 66) -65]
Test Case: 669 | Input/Output: [(12 -97 -85 -44) -97]
Test Case: 670 | Input/Output: [(-74 58 30 -76) -76]
Test Case: 671 | Input/Output: [(48 34 92 65) 34]
Test Case: 672 | Input/Output: [(70 82 65 2) 2]
Test Case: 673 | Input/Output: [(-8 88 -48 13) -48]
Test Case: 674 | Input/Output: [(-99 -83 -31 94) -99]
Test Case: 675 | Input/Output: [(100 16 -47 -35) -47]
Test Case: 676 | Input/Output: [(-85 -11 96 -99) -99]
Test Case: 677 | Input/Output: [(-55 89 92 54) -55]
Test Case: 678 | Input/Output: [(14 -48 98 20) -48]
Test Case: 679 | Input/Output: [(31 -91 -10 -94) -94]
Test Case: 680 | Input/Output: [(10 82 64 -94) -94]
Test Case: 681 | Input/Output: [(-52 12 -82 -48) -82]
Test Case: 682 | Input/Output: [(24 10 -9 -10) -10]
Test Case: 683 | Input/Output: [(-53 -31 98 92) -53]
Test Case: 684 | Input/Output: [(-17 -10 -18 70) -18]
Test Case: 685 | Input/Output: [(-24 -16 10 -46) -46]
Test Case: 686 | Input/Output: [(50 -83 54 -33) -83]
Test Case: 687 | Input/Output: [(-62 27 67 39) -62]
Test Case: 688 | Input/Output: [(-53 -70 -27 33) -70]
Test Case: 689 | Input/Output: [(79 -98 9 -81) -98]
Test Case: 690 | Input/Output: [(23 -35 -77 73) -77]
Test Case: 691 | Input/Output: [(71 -6 51 -89) -89]
Test Case: 692 | Input/Output: [(85 -10 95 -87) -87]
Test Case: 693 | Input/Output: [(94 11 -33 -5) -33]
Test Case: 694 | Input/Output: [(41 -87 -58 2) -87]
Test Case: 695 | Input/Output: [(8 -55 -38 -98) -98]
Test Case: 696 | Input/Output: [(96 63 51 -88) -88]
Test Case: 697 | Input/Output: [(63 82 -76 -53) -76]
Test Case: 698 | Input/Output: [(5 -97 63 -60) -97]
Test Case: 699 | Input/Output: [(39 66 63 82) 39]
Test Case: 700 | Input/Output: [(-13 -13 -73 3) -73]
Test Case: 701 | Input/Output: [(-79 57 61 -64) -79]
Test Case: 702 | Input/Output: [(-71 60 -51 1) -71]
Test Case: 703 | Input/Output: [(50 23 1 98) 1]
Test Case: 704 | Input/Output: [(-4 -1 -32 -42) -42]
Test Case: 705 | Input/Output: [(58 31 -39 -99) -99]
Test Case: 706 | Input/Output: [(15 -100 -58 -10) -100]
Test Case: 707 | Input/Output: [(-92 1 46 -38) -92]
Test Case: 708 | Input/Output: [(-63 -59 27 -30) -63]
Test Case: 709 | Input/Output: [(45 6 41 -98) -98]
Test Case: 710 | Input/Output: [(97 88 8 43) 8]
Test Case: 711 | Input/Output: [(-24 -82 -72 62) -82]
Test Case: 712 | Input/Output: [(43 -90 -66 -31) -90]
Test Case: 713 | Input/Output: [(92 29 65 23) 23]
Test Case: 714 | Input/Output: [(2 23 -56 61) -56]
Test Case: 715 | Input/Output: [(31 41 100 100) 31]
Test Case: 716 | Input/Output: [(-1 99 -66 -65) -66]
Test Case: 717 | Input/Output: [(-5 13 31 -38) -38]
Test Case: 718 | Input/Output: [(-20 -17 -76 -84) -84]
Test Case: 719 | Input/Output: [(-14 -17 10 48) -17]
Test Case: 720 | Input/Output: [(-100 -1 -96 8) -100]
Test Case: 721 | Input/Output: [(-38 -54 -40 87) -54]
Test Case: 722 | Input/Output: [(84 -99 -97 -14) -99]
Test Case: 723 | Input/Output: [(66 -4 -98 52) -98]
Test Case: 724 | Input/Output: [(-3 -62 59 33) -62]
Test Case: 725 | Input/Output: [(-98 -98 -32 -2) -98]
Test Case: 726 | Input/Output: [(-94 -71 -5 -94) -94]
Test Case: 727 | Input/Output: [(59 -20 -7 -77) -77]
Test Case: 728 | Input/Output: [(36 6 -36 -62) -62]
Test Case: 729 | Input/Output: [(90 20 52 69) 20]
Test Case: 730 | Input/Output: [(-61 -52 38 27) -61]
Test Case: 731 | Input/Output: [(-48 4 -82 -71) -82]
Test Case: 732 | Input/Output: [(83 36 23 -21) -21]
Test Case: 733 | Input/Output: [(34 -64 -2 23) -64]
Test Case: 734 | Input/Output: [(81 100 63 96) 63]
Test Case: 735 | Input/Output: [(25 -5 97 58) -5]
Test Case: 736 | Input/Output: [(61 -71 19 73) -71]
Test Case: 737 | Input/Output: [(58 53 94 -98) -98]
Test Case: 738 | Input/Output: [(1 -56 -92 56) -92]
Test Case: 739 | Input/Output: [(28 -97 -72 23) -97]
Test Case: 740 | Input/Output: [(65 85 21 32) 21]
Test Case: 741 | Input/Output: [(55 53 2 -79) -79]
Test Case: 742 | Input/Output: [(95 -100 -84 96) -100]
Test Case: 743 | Input/Output: [(88 92 -67 -33) -67]
Test Case: 744 | Input/Output: [(-66 -77 -59 89) -77]
Test Case: 745 | Input/Output: [(31 77 -45 -87) -87]
Test Case: 746 | Input/Output: [(62 1 -24 -28) -28]
Test Case: 747 | Input/Output: [(11 100 97 -17) -17]
Test Case: 748 | Input/Output: [(7 -86 32 88) -86]
Test Case: 749 | Input/Output: [(8 36 -58 -32) -58]
Test Case: 750 | Input/Output: [(73 -30 44 -69) -69]
Test Case: 751 | Input/Output: [(-99 50 83 -17) -99]
Test Case: 752 | Input/Output: [(-63 98 40 56) -63]
Test Case: 753 | Input/Output: [(31 -42 2 -2) -42]
Test Case: 754 | Input/Output: [(65 -49 -4 -89) -89]
Test Case: 755 | Input/Output: [(89 -78 -79 -46) -79]
Test Case: 756 | Input/Output: [(48 68 53 -8) -8]
Test Case: 757 | Input/Output: [(39 36 -58 -20) -58]
Test Case: 758 | Input/Output: [(-83 -100 79 58) -100]
Test Case: 759 | Input/Output: [(93 48 95 -39) -39]
Test Case: 760 | Input/Output: [(63 42 -34 -25) -34]
Test Case: 761 | Input/Output: [(96 -78 57 -16) -78]
Test Case: 762 | Input/Output: [(72 89 -60 -42) -60]
Test Case: 763 | Input/Output: [(5 -90 -77 42) -90]
Test Case: 764 | Input/Output: [(-60 -14 -33 91) -60]
Test Case: 765 | Input/Output: [(-44 72 -91 -50) -91]
Test Case: 766 | Input/Output: [(-85 -32 -83 -17) -85]
Test Case: 767 | Input/Output: [(40 -55 3 -39) -55]
Test Case: 768 | Input/Output: [(-43 84 20 25) -43]
Test Case: 769 | Input/Output: [(-85 26 28 -97) -97]
Test Case: 770 | Input/Output: [(-92 -69 32 61) -92]
Test Case: 771 | Input/Output: [(97 -13 -15 64) -15]
Test Case: 772 | Input/Output: [(-15 -24 -72 -21) -72]
Test Case: 773 | Input/Output: [(-89 -19 80 16) -89]
Test Case: 774 | Input/Output: [(-8 74 -1 47) -8]
Test Case: 775 | Input/Output: [(-31 -76 52 40) -76]
Test Case: 776 | Input/Output: [(-75 76 41 14) -75]
Test Case: 777 | Input/Output: [(-69 93 -57 -95) -95]
Test Case: 778 | Input/Output: [(-87 72 -76 26) -87]
Test Case: 779 | Input/Output: [(50 -49 -65 66) -65]
Test Case: 780 | Input/Output: [(-19 -25 -3 -31) -31]
Test Case: 781 | Input/Output: [(-98 72 92 80) -98]
Test Case: 782 | Input/Output: [(-67 10 72 -10) -67]
Test Case: 783 | Input/Output: [(-9 68 18 3) -9]
Test Case: 784 | Input/Output: [(-76 -62 -89 -73) -89]
Test Case: 785 | Input/Output: [(77 70 54 -61) -61]
Test Case: 786 | Input/Output: [(-3 9 29 38) -3]
Test Case: 787 | Input/Output: [(13 48 -24 33) -24]
Test Case: 788 | Input/Output: [(7 -47 23 61) -47]
Test Case: 789 | Input/Output: [(36 -88 -36 73) -88]
Test Case: 790 | Input/Output: [(33 -85 2 93) -85]
Test Case: 791 | Input/Output: [(-74 17 39 52) -74]
Test Case: 792 | Input/Output: [(-49 -97 44 -2) -97]
Test Case: 793 | Input/Output: [(-99 28 54 -38) -99]
Test Case: 794 | Input/Output: [(-98 -40 92 -61) -98]
Test Case: 795 | Input/Output: [(96 -67 81 1) -67]
Test Case: 796 | Input/Output: [(-59 64 50 92) -59]
Test Case: 797 | Input/Output: [(-44 -57 -92 -96) -96]
Test Case: 798 | Input/Output: [(83 0 -91 -2) -91]
Test Case: 799 | Input/Output: [(33 -11 31 -26) -26]
Test Case: 800 | Input/Output: [(16 -85 -97 20) -97]
Test Case: 801 | Input/Output: [(50 32 80 39) 32]
Test Case: 802 | Input/Output: [(17 66 0 35) 0]
Test Case: 803 | Input/Output: [(-18 -2 -100 -69) -100]
Test Case: 804 | Input/Output: [(-98 -42 0 7) -98]
Test Case: 805 | Input/Output: [(57 -39 -54 58) -54]
Test Case: 806 | Input/Output: [(25 -18 44 -67) -67]
Test Case: 807 | Input/Output: [(-46 -46 -83 86) -83]
Test Case: 808 | Input/Output: [(41 -45 -66 -64) -66]
Test Case: 809 | Input/Output: [(-59 56 -19 79) -59]
Test Case: 810 | Input/Output: [(7 63 25 12) 7]
Test Case: 811 | Input/Output: [(68 20 -93 -42) -93]
Test Case: 812 | Input/Output: [(85 -89 74 7) -89]
Test Case: 813 | Input/Output: [(58 -47 -58 64) -58]
Test Case: 814 | Input/Output: [(-5 30 11 26) -5]
Test Case: 815 | Input/Output: [(-23 100 79 4) -23]
Test Case: 816 | Input/Output: [(62 79 61 -2) -2]
Test Case: 817 | Input/Output: [(39 56 -79 -65) -79]
Test Case: 818 | Input/Output: [(-3 -21 -18 83) -21]
Test Case: 819 | Input/Output: [(93 -51 -76 9) -76]
Test Case: 820 | Input/Output: [(-49 59 44 -88) -88]
Test Case: 821 | Input/Output: [(-15 18 2 27) -15]
Test Case: 822 | Input/Output: [(-15 -55 56 2) -55]
Test Case: 823 | Input/Output: [(-97 11 -22 -10) -97]
Test Case: 824 | Input/Output: [(14 -96 -23 42) -96]
Test Case: 825 | Input/Output: [(38 -19 -71 -47) -71]
Test Case: 826 | Input/Output: [(-34 -39 -25 -30) -39]
Test Case: 827 | Input/Output: [(-19 76 79 -56) -56]
Test Case: 828 | Input/Output: [(-28 -7 -34 -36) -36]
Test Case: 829 | Input/Output: [(-33 -20 -26 -35) -35]
Test Case: 830 | Input/Output: [(69 -71 -94 8) -94]
Test Case: 831 | Input/Output: [(71 -45 -16 67) -45]
Test Case: 832 | Input/Output: [(11 73 -67 -12) -67]
Test Case: 833 | Input/Output: [(4 -35 -12 -55) -55]
Test Case: 834 | Input/Output: [(-21 -51 -85 17) -85]
Test Case: 835 | Input/Output: [(20 -98 27 89) -98]
Test Case: 836 | Input/Output: [(62 44 65 -96) -96]
Test Case: 837 | Input/Output: [(-69 -42 -81 -57) -81]
Test Case: 838 | Input/Output: [(38 0 99 56) 0]
Test Case: 839 | Input/Output: [(90 15 -47 99) -47]
Test Case: 840 | Input/Output: [(-8 -34 64 -33) -34]
Test Case: 841 | Input/Output: [(-46 94 53 -84) -84]
Test Case: 842 | Input/Output: [(6 81 26 -64) -64]
Test Case: 843 | Input/Output: [(51 6 21 25) 6]
Test Case: 844 | Input/Output: [(-6 -86 -48 -44) -86]
Test Case: 845 | Input/Output: [(-48 -39 65 9) -48]
Test Case: 846 | Input/Output: [(-6 -73 -57 -72) -73]
Test Case: 847 | Input/Output: [(-90 -76 97 67) -90]
Test Case: 848 | Input/Output: [(60 2 42 8) 2]
Test Case: 849 | Input/Output: [(-61 -79 0 91) -79]
Test Case: 850 | Input/Output: [(-39 0 -56 6) -56]
Test Case: 851 | Input/Output: [(98 67 -93 73) -93]
Test Case: 852 | Input/Output: [(-92 -56 99 9) -92]
Test Case: 853 | Input/Output: [(33 -39 44 -72) -72]
Test Case: 854 | Input/Output: [(31 -48 1 7) -48]
Test Case: 855 | Input/Output: [(15 29 6 36) 6]
Test Case: 856 | Input/Output: [(38 30 51 -92) -92]
Test Case: 857 | Input/Output: [(2 49 -97 -72) -97]
Test Case: 858 | Input/Output: [(-86 -9 -67 -16) -86]
Test Case: 859 | Input/Output: [(94 61 24 -48) -48]
Test Case: 860 | Input/Output: [(-100 -12 53 -96) -100]
Test Case: 861 | Input/Output: [(-64 -72 29 19) -72]
Test Case: 862 | Input/Output: [(-73 66 59 -97) -97]
Test Case: 863 | Input/Output: [(54 -100 71 55) -100]
Test Case: 864 | Input/Output: [(90 61 -50 -1) -50]
Test Case: 865 | Input/Output: [(-1 77 -30 5) -30]
Test Case: 866 | Input/Output: [(-26 91 47 9) -26]
Test Case: 867 | Input/Output: [(-68 -34 1 -60) -68]
Test Case: 868 | Input/Output: [(-56 -79 -70 -78) -79]
Test Case: 869 | Input/Output: [(-44 8 24 36) -44]
Test Case: 870 | Input/Output: [(-42 78 -19 24) -42]
Test Case: 871 | Input/Output: [(35 -14 -20 38) -20]
Test Case: 872 | Input/Output: [(99 23 -15 -39) -39]
Test Case: 873 | Input/Output: [(44 83 51 -91) -91]
Test Case: 874 | Input/Output: [(74 -70 11 37) -70]
Test Case: 875 | Input/Output: [(-79 1 83 84) -79]
Test Case: 876 | Input/Output: [(47 59 73 -72) -72]
Test Case: 877 | Input/Output: [(-21 67 -14 97) -21]
Test Case: 878 | Input/Output: [(-55 -72 -27 50) -72]
Test Case: 879 | Input/Output: [(-76 68 -13 87) -76]
Test Case: 880 | Input/Output: [(98 38 10 65) 10]
Test Case: 881 | Input/Output: [(-21 14 -82 -34) -82]
Test Case: 882 | Input/Output: [(-89 75 13 -93) -93]
Test Case: 883 | Input/Output: [(-64 78 64 49) -64]
Test Case: 884 | Input/Output: [(80 -100 41 -96) -100]
Test Case: 885 | Input/Output: [(31 80 -13 -43) -43]
Test Case: 886 | Input/Output: [(-15 -43 -65 -8) -65]
Test Case: 887 | Input/Output: [(70 -61 83 -67) -67]
Test Case: 888 | Input/Output: [(-71 31 97 97) -71]
Test Case: 889 | Input/Output: [(-36 -70 54 60) -70]
Test Case: 890 | Input/Output: [(16 -10 -53 11) -53]
Test Case: 891 | Input/Output: [(-62 -88 -26 -24) -88]
Test Case: 892 | Input/Output: [(96 57 -80 -2) -80]
Test Case: 893 | Input/Output: [(-81 -16 -42 23) -81]
Test Case: 894 | Input/Output: [(70 -73 -2 53) -73]
Test Case: 895 | Input/Output: [(5 15 81 13) 5]
Test Case: 896 | Input/Output: [(39 7 69 94) 7]
Test Case: 897 | Input/Output: [(12 -50 -71 18) -71]
Test Case: 898 | Input/Output: [(62 -50 -93 -66) -93]
Test Case: 899 | Input/Output: [(-37 30 30 46) -37]
Test Case: 900 | Input/Output: [(86 10 -99 80) -99]
Test Case: 901 | Input/Output: [(-39 -56 78 -66) -66]
Test Case: 902 | Input/Output: [(-90 66 -19 62) -90]
Test Case: 903 | Input/Output: [(22 -65 55 -68) -68]
Test Case: 904 | Input/Output: [(-54 48 -66 -28) -66]
Test Case: 905 | Input/Output: [(13 -51 10 4) -51]
Test Case: 906 | Input/Output: [(-30 -69 27 -71) -71]
Test Case: 907 | Input/Output: [(68 -71 -81 27) -81]
Test Case: 908 | Input/Output: [(51 76 -35 -75) -75]
Test Case: 909 | Input/Output: [(-20 70 -12 75) -20]
Test Case: 910 | Input/Output: [(78 -23 -5 82) -23]
Test Case: 911 | Input/Output: [(-10 5 100 -91) -91]
Test Case: 912 | Input/Output: [(85 -61 46 85) -61]
Test Case: 913 | Input/Output: [(66 -24 89 -24) -24]
Test Case: 914 | Input/Output: [(73 -18 -68 42) -68]
Test Case: 915 | Input/Output: [(-34 -86 -24 59) -86]
Test Case: 916 | Input/Output: [(-92 -94 75 -24) -94]
Test Case: 917 | Input/Output: [(20 16 64 -43) -43]
Test Case: 918 | Input/Output: [(79 -99 -27 45) -99]
Test Case: 919 | Input/Output: [(79 -99 94 -81) -99]
Test Case: 920 | Input/Output: [(32 -52 1 -93) -93]
Test Case: 921 | Input/Output: [(93 5 34 93) 5]
Test Case: 922 | Input/Output: [(98 83 -57 47) -57]
Test Case: 923 | Input/Output: [(-69 69 47 54) -69]
Test Case: 924 | Input/Output: [(-31 34 27 16) -31]
Test Case: 925 | Input/Output: [(-64 -57 -69 5) -69]
Test Case: 926 | Input/Output: [(59 8 75 84) 8]
Test Case: 927 | Input/Output: [(-8 68 -62 -39) -62]
Test Case: 928 | Input/Output: [(-77 -90 -33 -39) -90]
Test Case: 929 | Input/Output: [(-64 -70 -48 -100) -100]
Test Case: 930 | Input/Output: [(-89 -67 -88 -3) -89]
Test Case: 931 | Input/Output: [(93 -100 37 77) -100]
Test Case: 932 | Input/Output: [(77 -40 92 80) -40]
Test Case: 933 | Input/Output: [(48 9 91 -65) -65]
Test Case: 934 | Input/Output: [(-15 93 98 -14) -15]
Test Case: 935 | Input/Output: [(66 -46 21 -56) -56]
Test Case: 936 | Input/Output: [(85 55 39 -96) -96]
Test Case: 937 | Input/Output: [(-92 -98 -78 -67) -98]
Test Case: 938 | Input/Output: [(4 29 62 -95) -95]
Test Case: 939 | Input/Output: [(-45 0 36 46) -45]
Test Case: 940 | Input/Output: [(-23 -26 23 -88) -88]
Test Case: 941 | Input/Output: [(-14 -52 22 47) -52]
Test Case: 942 | Input/Output: [(9 60 -42 75) -42]
Test Case: 943 | Input/Output: [(-7 -5 62 32) -7]
Test Case: 944 | Input/Output: [(-5 19 87 -42) -42]
Test Case: 945 | Input/Output: [(-3 -48 -61 16) -61]
Test Case: 946 | Input/Output: [(82 -14 -17 -98) -98]
Test Case: 947 | Input/Output: [(-47 76 83 58) -47]
Test Case: 948 | Input/Output: [(-25 95 0 28) -25]
Test Case: 949 | Input/Output: [(48 -41 95 48) -41]
Test Case: 950 | Input/Output: [(-6 40 98 12) -6]
Test Case: 951 | Input/Output: [(-75 -98 -38 10) -98]
Test Case: 952 | Input/Output: [(-57 50 81 -18) -57]
Test Case: 953 | Input/Output: [(88 78 100 11) 11]
Test Case: 954 | Input/Output: [(32 31 60 -76) -76]
Test Case: 955 | Input/Output: [(13 14 59 -79) -79]
Test Case: 956 | Input/Output: [(44 -55 -95 61) -95]
Test Case: 957 | Input/Output: [(-45 -82 -22 27) -82]
Test Case: 958 | Input/Output: [(-1 -71 -29 56) -71]
Test Case: 959 | Input/Output: [(-54 41 17 -79) -79]
Test Case: 960 | Input/Output: [(-49 -22 -19 -81) -81]
Test Case: 961 | Input/Output: [(-28 -6 -32 -86) -86]
Test Case: 962 | Input/Output: [(1 44 52 22) 1]
Test Case: 963 | Input/Output: [(-97 55 -98 -98) -98]
Test Case: 964 | Input/Output: [(32 -48 -58 -89) -89]
Test Case: 965 | Input/Output: [(-56 26 94 34) -56]
Test Case: 966 | Input/Output: [(-51 -69 19 65) -69]
Test Case: 967 | Input/Output: [(97 -65 66 90) -65]
Test Case: 968 | Input/Output: [(53 83 67 44) 44]
Test Case: 969 | Input/Output: [(20 24 -57 67) -57]
Test Case: 970 | Input/Output: [(7 -96 86 -20) -96]
Test Case: 971 | Input/Output: [(-32 21 -59 89) -59]
Test Case: 972 | Input/Output: [(-75 -68 -57 -37) -75]
Test Case: 973 | Input/Output: [(62 13 -98 -35) -98]
Test Case: 974 | Input/Output: [(77 40 35 -89) -89]
Test Case: 975 | Input/Output: [(73 -34 -28 -75) -75]
Test Case: 976 | Input/Output: [(-77 -86 -15 -59) -86]
Test Case: 977 | Input/Output: [(-27 37 -28 91) -28]
Test Case: 978 | Input/Output: [(-70 84 -69 75) -70]
Test Case: 979 | Input/Output: [(-7 -9 80 -92) -92]
Test Case: 980 | Input/Output: [(86 -12 69 57) -12]
Test Case: 981 | Input/Output: [(-93 -70 -26 -93) -93]
Test Case: 982 | Input/Output: [(-6 -68 -16 -45) -68]
Test Case: 983 | Input/Output: [(-69 98 51 -3) -69]
Test Case: 984 | Input/Output: [(-40 -79 -98 -13) -98]
Test Case: 985 | Input/Output: [(-23 37 33 -23) -23]
Test Case: 986 | Input/Output: [(-49 -41 -85 14) -85]
Test Case: 987 | Input/Output: [(65 -28 -49 -71) -71]
Test Case: 988 | Input/Output: [(75 86 16 -65) -65]
Test Case: 989 | Input/Output: [(-49 37 -76 -76) -76]
Test Case: 990 | Input/Output: [(17 -19 24 81) -19]
Test Case: 991 | Input/Output: [(22 -95 -64 -84) -95]
Test Case: 992 | Input/Output: [(-74 74 92 34) -74]
Test Case: 993 | Input/Output: [(-7 99 -92 40) -92]
Test Case: 994 | Input/Output: [(28 -42 63 92) -42]
Test Case: 995 | Input/Output: [(-59 4 20 -10) -59]
Test Case: 996 | Input/Output: [(-78 34 16 -60) -78]
Test Case: 997 | Input/Output: [(27 36 -46 -57) -57]
Test Case: 998 | Input/Output: [(-94 42 70 -72) -94]
Test Case: 999 | Input/Output: [(61 -69 96 45) -69]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 16 46 117 32 -9 -23 18 14 -20 109 42 84 -7 -33 -83 -53
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-68 -90 -90 -90] -90] [[99 34 99 99] 34] [[-11 -11 -21 -11] -21] [[-66 -66 -66 50] -66] [[-55 -55 -55 -78] -78] [[-66 72 72 72] -66] [[-62 -62 -62 -51] -62] [[15 -96 -96 -96] -96] [[91 91 91 -41] -41] [[-28 -15 -28 -28] -28] [(36 36 36 36) 36] [(9 9 9 9) 9] [(43 43 43 43) 43] [(72 72 72 72) 72] [(41 41 41 41) 41] [(16 97 24 63) 16] [(23 38 10 76) 10] [(62 71 18 70) 18] [(55 26 65 1) 1] [(80 68 83 60) 60] [(5 40 22 12) 5] [(1 4 26 17) 1] [(60 64 82 29) 29] [(63 13 71 64) 13] [(50 54 56 94) 50] [(57 17 13 49) 13] [(10 76 65 30) 10] [(68 15 84 99) 15] [(26 89 22 61) 22] [(85 100 90 7) 7] [(13 64 96 4) 4] [(60 85 28 100) 28] [(97 53 28 59) 28] [(15 81 72 100) 15] [(64 96 47 21) 21] [(31 81 89 -3) -3] [(27 27 49 -40) -40] [(77 -91 -18 -84) -91] [(33 48 58 51) 33] [(79 -36 37 13) -36] [(-78 -40 -57 43) -78] [(80 13 -61 81) -61] [(-41 -92 -85 -92) -92] [(-45 73 -100 -94) -100] [(60 -26 -47 9) -47] [(51 14 82 97) 14] [(81 -78 93 -93) -93] [(-20 -92 54 98) -92] [(30 14 -19 -83) -83] [(-71 3 42 23) -71] [(-90 31 87 87) -90] [(-55 80 35 -56) -56] [(28 95 -82 16) -82] [(11 19 -68 -44) -68] [(-68 -41 -68 66) -68] [(-88 10 22 -80) -88] [(-44 -79 4 59) -79] [(-16 -100 -26 19) -100] [(17 -90 98 41) -90] [(91 65 36 86) 36] [(-7 -45 -64 73) -64] [(-64 18 -80 18) -80] [(47 -61 -35 34) -61] [(-11 68 38 -28) -28] [(13 -68 -66 -62) -68] [(-30 19 59 54) -30] [(26 93 -34 -70) -70] [(67 -2 -43 14) -43] [(27 93 -78 56) -78] [(68 43 16 59) 16] [(-80 32 60 68) -80] [(76 -75 32 -26) -75] [(67 95 -74 -9) -74] [(48 61 22 -11) -11] [(84 -11 8 -18) -18] [(8 -41 80 18) -41] [(-44 85 6 -24) -44] [(98 -83 -57 94) -83] [(-60 6 -37 2) -60] [(82 22 6 100) 6] [(6 91 -71 58) -71] [(90 -36 -44 -67) -67] [(-94 -53 87 20) -94] [(-23 20 86 10) -23] [(-91 25 -73 33) -91] [(88 -73 50 -2) -73] [(-59 34 -44 58) -59] [(90 39 -99 11) -99] [(-90 -15 -74 -15) -90] [(39 -71 -92 -98) -98] [(83 -86 36 84) -86] [(49 45 64 29) 29] [(74 77 16 47) 16] [(27 -68 -31 -97) -97] [(95 51 -96 -88) -96])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 65                 
Correct output: 60                  | Program output: 83                 
Correct output: 5                   | Program output: 22                 
Correct output: 1                   | Program output: 26                 
Correct output: 29                  | Program output: 82                 
Correct output: 13                  | Program output: 71                 
Correct output: 50                  | Program output: 56                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 84                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 90                 
Correct output: 4                   | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 72                 
Correct output: 21                  | Program output: 47                 
Correct output: -3                  | Program output: 89                 
Correct output: -40                 | Program output: 49                 
Correct output: -91                 | Program output: -18                
Correct output: 33                  | Program output: 58                 
Correct output: -36                 | Program output: 37                 
Correct output: -78                 | Program output: -57                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: 14                  | Program output: 82                 
Correct output: -93                 | Program output: 93                 
Correct output: -92                 | Program output: 54                 
Correct output: -83                 | Program output: -19                
Correct output: -71                 | Program output: 42                 
Correct output: -90                 | Program output: 87                 
Correct output: -56                 | Program output: 35                 
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 22                 
Correct output: -79                 | Program output: 4                  
Correct output: -100                | Program output: -26                
Correct output: -90                 | Program output: 98                 
Correct output: 36                  | Program output: 36                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -61                 | Program output: -35                
Correct output: -28                 | Program output: 38                 
Correct output: -68                 | Program output: -66                
Correct output: -30                 | Program output: 59                 
Correct output: -70                 | Program output: -34                
Correct output: -43                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: 16                  | Program output: 16                 
Correct output: -80                 | Program output: 60                 
Correct output: -75                 | Program output: 32                 
Correct output: -74                 | Program output: -74                
Correct output: -11                 | Program output: 22                 
Correct output: -18                 | Program output: 8                  
Correct output: -41                 | Program output: 80                 
Correct output: -44                 | Program output: 6                  
Correct output: -83                 | Program output: -57                
Correct output: -60                 | Program output: -37                
Correct output: 6                   | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -44                
Correct output: -94                 | Program output: 87                 
Correct output: -23                 | Program output: 86                 
Correct output: -91                 | Program output: -73                
Correct output: -73                 | Program output: 50                 
Correct output: -59                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -74                
Correct output: -98                 | Program output: -92                
Correct output: -86                 | Program output: 36                 
Correct output: 29                  | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -97                 | Program output: -31                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_lte} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_287} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 1, :instruction print_exec} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_379} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup})
Lexicase best program: (integer_lte exec_shove () exec_pop (print_newline boolean_dup) exec_if () (boolean_and) integer_dup_items boolean_dup_items in3 print_integer boolean_shove integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (boolean_stackdepth integer_add) (boolean_dup_items exec_dup_times (integer_swap integer_dup_items integer_rot exec_do*count (exec_k_when_autoconstructing (boolean_shove boolean_and in2 integer_fromboolean integer_fromboolean) (exec_stackdepth) integer_shove exec_noop exec_do*while (integer_mult tag_integer_287 boolean_frominteger exec_pop ()) boolean_swap) in2 boolean_not) print_exec () exec_yank) boolean_or boolean_dup integer_min integer_yankdup exec_pop (integer_dec exec_flush print_boolean) integer_flush tagged_379 exec_s_when_autoconstructing (in1) () (integer_gt integer_sub integer_mult integer_dup boolean_dup_times) integer_dup)
Lexicase best errors: [0 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 83
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_lte} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_287} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 1, :instruction print_exec} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_379} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup})
Zero cases best program: (integer_lte exec_shove () exec_pop (print_newline boolean_dup) exec_if () (boolean_and) integer_dup_items boolean_dup_items in3 print_integer boolean_shove integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (boolean_stackdepth integer_add) (boolean_dup_items exec_dup_times (integer_swap integer_dup_items integer_rot exec_do*count (exec_k_when_autoconstructing (boolean_shove boolean_and in2 integer_fromboolean integer_fromboolean) (exec_stackdepth) integer_shove exec_noop exec_do*while (integer_mult tag_integer_287 boolean_frominteger exec_pop ()) boolean_swap) in2 boolean_not) print_exec () exec_yank) boolean_or boolean_dup integer_min integer_yankdup exec_pop (integer_dec exec_flush print_boolean) integer_flush tagged_379 exec_s_when_autoconstructing (in1) () (integer_gt integer_sub integer_mult integer_dup boolean_dup_times) integer_dup)
Zero cases best errors: [0 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 83
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 1 1000 6 2 4 2 3 2 2)
Population mean number of elite cases: 1.02
Count of perfect (error zero) individuals by case: (3 1 0 6 2 4 2 3 2 2)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_lte} {:close 0, :instruction boolean_yank})
Best program: (in3 boolean_and exec_k (boolean_yankdup print_integer exec_empty integer_dup_items integer_rot boolean_dup_items integer_lte) () boolean_yank)
Errors: [0 1 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 11
Size: 14
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 9.975
Median total errors in population: 10
Error averages by case: (0.997 0.999 1.0 0.994 0.998 0.996 0.998 0.997 0.998 0.998)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 50.802
Average program size in population (points): 69.655
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 490967
--- Timings ---
Current time: 1559584276159 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.9 seconds, 33.5%
Fitness Testing:      1.6 seconds, 62.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 65                 
Correct output: 60                  | Program output: 83                 
Correct output: 5                   | Program output: 22                 
Correct output: 1                   | Program output: 26                 
Correct output: 29                  | Program output: 82                 
Correct output: 13                  | Program output: 71                 
Correct output: 50                  | Program output: 56                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 84                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 90                 
Correct output: 4                   | Program output: 96                 
Correct output: 28                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 72                 
Correct output: 21                  | Program output: 47                 
Correct output: -3                  | Program output: 89                 
Correct output: -40                 | Program output: 49                 
Correct output: -91                 | Program output: -18                
Correct output: 33                  | Program output: 58                 
Correct output: -36                 | Program output: 37                 
Correct output: -78                 | Program output: -57                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: 14                  | Program output: 82                 
Correct output: -93                 | Program output: 93                 
Correct output: -92                 | Program output: 54                 
Correct output: -83                 | Program output: -19                
Correct output: -71                 | Program output: 42                 
Correct output: -90                 | Program output: 87                 
Correct output: -56                 | Program output: 35                 
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 22                 
Correct output: -79                 | Program output: 4                  
Correct output: -100                | Program output: -26                
Correct output: -90                 | Program output: 98                 
Correct output: 36                  | Program output: 36                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -61                 | Program output: -35                
Correct output: -28                 | Program output: 38                 
Correct output: -68                 | Program output: -66                
Correct output: -30                 | Program output: 59                 
Correct output: -70                 | Program output: -34                
Correct output: -43                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: 16                  | Program output: 16                 
Correct output: -80                 | Program output: 60                 
Correct output: -75                 | Program output: 32                 
Correct output: -74                 | Program output: -74                
Correct output: -11                 | Program output: 22                 
Correct output: -18                 | Program output: 8                  
Correct output: -41                 | Program output: 80                 
Correct output: -44                 | Program output: 6                  
Correct output: -83                 | Program output: -57                
Correct output: -60                 | Program output: -37                
Correct output: 6                   | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -44                
Correct output: -94                 | Program output: 87                 
Correct output: -23                 | Program output: 86                 
Correct output: -91                 | Program output: -73                
Correct output: -73                 | Program output: 50                 
Correct output: -59                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -74                
Correct output: -98                 | Program output: -92                
Correct output: -86                 | Program output: 36                 
Correct output: 29                  | Program output: 64                 
Correct output: 16                  | Program output: 16                 
Correct output: -97                 | Program output: -31                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_lte} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_287} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 1, :instruction print_exec} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_379} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup})
Lexicase best program: (integer_lte exec_shove () exec_pop (print_newline boolean_dup) exec_if () (boolean_and) integer_dup_items boolean_dup_items in3 print_integer boolean_shove integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (boolean_stackdepth integer_add) (boolean_dup_items exec_dup_times (integer_swap integer_dup_items integer_rot exec_do*count (exec_k_when_autoconstructing (boolean_shove boolean_and in2 integer_fromboolean integer_fromboolean) (exec_stackdepth) integer_shove exec_noop exec_do*while (integer_mult tag_integer_287 boolean_frominteger exec_pop ()) boolean_swap) in2 boolean_not) print_exec () exec_yank) boolean_or boolean_dup integer_min integer_yankdup exec_pop (integer_dec exec_flush print_boolean) integer_flush tagged_379 exec_s_when_autoconstructing (in1) () (integer_gt integer_sub integer_mult integer_dup boolean_dup_times) integer_dup)
Lexicase best errors: [0 1 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 83
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_lte} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_287} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 1, :instruction print_exec} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_379} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup})
Zero cases best program: (integer_lte exec_shove () exec_pop (print_newline boolean_dup) exec_if () (boolean_and) integer_dup_items boolean_dup_items in3 print_integer boolean_shove integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (boolean_stackdepth integer_add) (boolean_dup_items exec_dup_times (integer_swap integer_dup_items integer_rot exec_do*count (exec_k_when_autoconstructing (boolean_shove boolean_and in2 integer_fromboolean integer_fromboolean) (exec_stackdepth) integer_shove exec_noop exec_do*while (integer_mult tag_integer_287 boolean_frominteger exec_pop ()) boolean_swap) in2 boolean_not) print_exec () exec_yank) boolean_or boolean_dup integer_min integer_yankdup exec_pop (integer_dec exec_flush print_boolean) integer_flush tagged_379 exec_s_when_autoconstructing (in1) () (integer_gt integer_sub integer_mult integer_dup boolean_dup_times) integer_dup)
Zero cases best errors: [0 1 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 83
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (530 3 98 432 100 378 531 432 377 3)
Population mean number of elite cases: 2.88
Count of perfect (error zero) individuals by case: (530 3 98 432 100 378 531 432 377 3)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_lte} {:close 0, :instruction boolean_yank})
Best program: (in3 boolean_and exec_k (boolean_yankdup print_integer exec_empty integer_dup_items integer_rot boolean_dup_items integer_lte) () boolean_yank)
Errors: [0 1 1 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 11
Size: 14
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.116
Median total errors in population: 6
Error averages by case: (0.47 0.997 0.902 0.568 0.9 0.622 0.469 0.568 0.623 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.701
Average program size in population (points): 38.409
Average percent parens in population: 0.310
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.497
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 333
Genome diversity (% unique genomes):	 0.34
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 335
Syntactic diversity (% unique Push programs):	 0.334
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 751266
--- Timings ---
Current time: 1559584278366 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         2.4 seconds, 50.1%
Fitness Testing:      2.0 seconds, 40.7%
Report:               0.3 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 99                 
Correct output: -21                 | Program output: -11                
Correct output: -66                 | Program output: 50                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: 72                 
Correct output: -62                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: -41                
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 63                 
Correct output: 10                  | Program output: 76                 
Correct output: 18                  | Program output: 70                 
Correct output: 1                   | Program output: 1                  
Correct output: 60                  | Program output: 60                 
Correct output: 5                   | Program output: 12                 
Correct output: 1                   | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 13                  | Program output: 64                 
Correct output: 50                  | Program output: 94                 
Correct output: 13                  | Program output: 49                 
Correct output: 10                  | Program output: 30                 
Correct output: 15                  | Program output: 99                 
Correct output: 22                  | Program output: 61                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 100                
Correct output: 28                  | Program output: 59                 
Correct output: 15                  | Program output: 100                
Correct output: 21                  | Program output: 21                 
Correct output: -3                  | Program output: -3                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: 33                  | Program output: 51                 
Correct output: -36                 | Program output: 13                 
Correct output: -78                 | Program output: 43                 
Correct output: -61                 | Program output: 81                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -94                
Correct output: -47                 | Program output: 9                  
Correct output: 14                  | Program output: 97                 
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: 98                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 23                 
Correct output: -90                 | Program output: 87                 
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: 16                 
Correct output: -68                 | Program output: -44                
Correct output: -68                 | Program output: 66                 
Correct output: -88                 | Program output: -80                
Correct output: -79                 | Program output: 59                 
Correct output: -100                | Program output: 19                 
Correct output: -90                 | Program output: 41                 
Correct output: 36                  | Program output: 86                 
Correct output: -64                 | Program output: 73                 
Correct output: -80                 | Program output: 18                 
Correct output: -61                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -68                 | Program output: -62                
Correct output: -30                 | Program output: 54                 
Correct output: -70                 | Program output: -70                
Correct output: -43                 | Program output: 14                 
Correct output: -78                 | Program output: 56                 
Correct output: 16                  | Program output: 59                 
Correct output: -80                 | Program output: 68                 
Correct output: -75                 | Program output: -26                
Correct output: -74                 | Program output: -9                 
Correct output: -11                 | Program output: -11                
Correct output: -18                 | Program output: -18                
Correct output: -41                 | Program output: 18                 
Correct output: -44                 | Program output: -24                
Correct output: -83                 | Program output: 94                 
Correct output: -60                 | Program output: 2                  
Correct output: 6                   | Program output: 100                
Correct output: -71                 | Program output: 58                 
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 20                 
Correct output: -23                 | Program output: 10                 
Correct output: -91                 | Program output: 33                 
Correct output: -73                 | Program output: -2                 
Correct output: -59                 | Program output: 58                 
Correct output: -99                 | Program output: 11                 
Correct output: -90                 | Program output: -15                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: 84                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 47                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_287} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 1, :instruction print_exec} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_379} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup})
Lexicase best program: (in4 exec_eq integer_lt exec_y_when_autoconstructing (boolean_pop boolean_swap integer_max) exec_s_when_autoconstructing (exec_eq integer_pop in3 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (boolean_stackdepth integer_add) (boolean_dup_items exec_dup_times (integer_swap integer_dup_items integer_rot exec_do*count (exec_k_when_autoconstructing (boolean_shove boolean_and in2 integer_fromboolean integer_fromboolean) (exec_stackdepth) integer_shove exec_noop exec_do*while (integer_mult tag_integer_287 boolean_frominteger exec_pop ()) boolean_swap) in2 boolean_not) print_exec () exec_yank) boolean_or boolean_dup integer_min integer_yankdup exec_pop (integer_dec boolean_flush print_boolean) integer_flush) (tagged_379 exec_s_when_autoconstructing (in1) () (integer_gt integer_sub integer_mult integer_dup boolean_dup_times) integer_dup) ())
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 82
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_287} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 1, :instruction print_exec} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_379} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup})
Zero cases best program: (in4 exec_eq integer_lt exec_y_when_autoconstructing (boolean_pop boolean_swap integer_max) exec_s_when_autoconstructing (exec_eq integer_pop in3 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (boolean_stackdepth integer_add) (boolean_dup_items exec_dup_times (integer_swap integer_dup_items integer_rot exec_do*count (exec_k_when_autoconstructing (boolean_shove boolean_and in2 integer_fromboolean integer_fromboolean) (exec_stackdepth) integer_shove exec_noop exec_do*while (integer_mult tag_integer_287 boolean_frominteger exec_pop ()) boolean_swap) in2 boolean_not) print_exec () exec_yank) boolean_or boolean_dup integer_min integer_yankdup exec_pop (integer_dec boolean_flush print_boolean) integer_flush) (tagged_379 exec_s_when_autoconstructing (in1) () (integer_gt integer_sub integer_mult integer_dup boolean_dup_times) integer_dup) ())
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 82
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (301 902 278 150 177 301 277 906 150 150)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (301 902 278 150 177 301 277 906 150 150)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_287} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 1, :instruction print_exec} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_379} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup})
Best program: (in4 exec_eq integer_lt exec_y_when_autoconstructing (boolean_pop boolean_swap integer_max) exec_s_when_autoconstructing (exec_eq print_integer boolean_shove integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_s (exec_k (boolean_stackdepth integer_add) (boolean_dup_items exec_dup_times (integer_swap integer_dup_items integer_rot exec_do*count (exec_k_when_autoconstructing (boolean_shove boolean_and in2 integer_fromboolean integer_fromboolean) (boolean_dup_items exec_dup_times (integer_swap integer_dup_items integer_rot exec_do*count (exec_k_when_autoconstructing (boolean_shove boolean_and in2 integer_fromboolean integer_fromboolean) (exec_stackdepth) integer_shove exec_noop exec_do*while (integer_mult tag_integer_287 boolean_frominteger exec_pop ()) boolean_swap) in2 boolean_not) print_exec () exec_yank) boolean_or boolean_dup integer_min integer_yankdup exec_pop (integer_dec exec_flush print_boolean) integer_flush) tagged_379 exec_s_when_autoconstructing (in1) () (integer_gt integer_sub integer_mult integer_dup boolean_dup_times) integer_dup))) () ()) () ())
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 76
Size: 101
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 6.408
Median total errors in population: 6
Error averages by case: (0.699 0.098 0.722 0.85 0.823 0.699 0.723 0.094 0.85 0.85)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.37
Average program size in population (points): 45.984
Average percent parens in population: 0.284
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.104
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1085206
--- Timings ---
Current time: 1559584281469 milliseconds
Total Time:           7.9 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.8 seconds, 60.6%
Fitness Testing:      2.5 seconds, 31.1%
Report:               0.5 seconds,  6.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -11                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -15                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 97                 
Correct output: 10                  | Program output: 38                 
Correct output: 18                  | Program output: 71                 
Correct output: 1                   | Program output: 26                 
Correct output: 60                  | Program output: 68                 
Correct output: 5                   | Program output: 40                 
Correct output: 1                   | Program output: 4                  
Correct output: 29                  | Program output: 64                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 17                 
Correct output: 10                  | Program output: 76                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 89                 
Correct output: 7                   | Program output: 100                
Correct output: 4                   | Program output: 64                 
Correct output: 28                  | Program output: 85                 
Correct output: 28                  | Program output: 53                 
Correct output: 15                  | Program output: 81                 
Correct output: 21                  | Program output: 96                 
Correct output: -3                  | Program output: 81                 
Correct output: -40                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 48                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -40                
Correct output: -61                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: 73                 
Correct output: -47                 | Program output: -26                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: 14                 
Correct output: -71                 | Program output: 3                  
Correct output: -90                 | Program output: 31                 
Correct output: -56                 | Program output: 80                 
Correct output: -82                 | Program output: 95                 
Correct output: -68                 | Program output: 19                 
Correct output: -68                 | Program output: -41                
Correct output: -88                 | Program output: 10                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 65                 
Correct output: -64                 | Program output: -45                
Correct output: -80                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: 68                 
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: 19                 
Correct output: -70                 | Program output: 93                 
Correct output: -43                 | Program output: -2                 
Correct output: -78                 | Program output: 93                 
Correct output: 16                  | Program output: 43                 
Correct output: -80                 | Program output: 32                 
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: 95                 
Correct output: -11                 | Program output: 61                 
Correct output: -18                 | Program output: -11                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: 85                 
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: 6                  
Correct output: 6                   | Program output: 22                 
Correct output: -71                 | Program output: 91                 
Correct output: -67                 | Program output: -36                
Correct output: -94                 | Program output: -53                
Correct output: -23                 | Program output: 20                 
Correct output: -91                 | Program output: 25                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 34                 
Correct output: -99                 | Program output: 39                 
Correct output: -90                 | Program output: -15                
Correct output: -98                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 77                 
Correct output: -97                 | Program output: -68                
Correct output: -96                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_852} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_do*range (in2) exec_dup (print_integer exec_dup_times (tagged_852 exec_s (exec_swap (exec_noop boolean_yankdup boolean_or integer_fromboolean) ()) () ())))
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 21
Percent parens: 0.429
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_852} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_do*range (in2) exec_dup (print_integer exec_dup_times (tagged_852 exec_s (exec_swap (exec_noop boolean_yankdup boolean_or integer_fromboolean) ()) () ())))
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 21
Percent parens: 0.429
--- Lexicase Population Statistics ---
Count of elite individuals by case: (917 346 917 231 110 686 346 573 918 110)
Population mean number of elite cases: 5.15
Count of perfect (error zero) individuals by case: (917 346 917 231 110 686 346 573 918 110)
Population mean number of perfect (error zero) cases: 5.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_852} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean})
Best program: (exec_do*range (in2) exec_dup (print_integer exec_dup_times (tagged_852 exec_s (exec_swap (exec_noop boolean_yankdup boolean_or integer_fromboolean) ()) () ())))
Errors: [0 1 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 12
Size: 21
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 4.846
Median total errors in population: 5
Error averages by case: (0.083 0.654 0.083 0.769 0.89 0.314 0.654 0.427 0.082 0.89)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.548
Average program size in population (points): 42.838
Average percent parens in population: 0.267
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.65325
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1364888
--- Timings ---
Current time: 1559584284513 milliseconds
Total Time:          11.0 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         7.2 seconds, 65.7%
Fitness Testing:      2.9 seconds, 26.1%
Report:               0.8 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: -41                
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 60                  | Program output: 60                 
Correct output: 5                   | Program output: 12                 
Correct output: 1                   | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 13                  | Program output: 64                 
Correct output: 50                  | Program output: 56                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 30                 
Correct output: 15                  | Program output: 84                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 72                 
Correct output: 21                  | Program output: 21                 
Correct output: -3                  | Program output: -3                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: 33                  | Program output: 51                 
Correct output: -36                 | Program output: 13                 
Correct output: -78                 | Program output: -57                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: 14                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: 54                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 23                 
Correct output: -90                 | Program output: 87                 
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: -80                
Correct output: -79                 | Program output: 4                  
Correct output: -100                | Program output: -26                
Correct output: -90                 | Program output: 41                 
Correct output: 36                  | Program output: 36                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -61                 | Program output: -35                
Correct output: -28                 | Program output: -28                
Correct output: -68                 | Program output: -66                
Correct output: -30                 | Program output: 54                 
Correct output: -70                 | Program output: -70                
Correct output: -43                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: 16                  | Program output: 16                 
Correct output: -80                 | Program output: 60                 
Correct output: -75                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -11                 | Program output: -11                
Correct output: -18                 | Program output: -18                
Correct output: -41                 | Program output: 18                 
Correct output: -44                 | Program output: -24                
Correct output: -83                 | Program output: -57                
Correct output: -60                 | Program output: -37                
Correct output: 6                   | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: 20                 
Correct output: -23                 | Program output: 10                 
Correct output: -91                 | Program output: -73                
Correct output: -73                 | Program output: -2                 
Correct output: -59                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -74                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: 36                 
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction -19} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc})
Lexicase best program: (in4 exec_eq integer_lt exec_y_when_autoconstructing (boolean_pop boolean_swap integer_max) exec_eq exec_eq integer_pop in3 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or exec_do*range (integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 -19 integer_pop boolean_dup_items) integer_yankdup in4 integer_shove exec_shove () integer_max boolean_eq exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger boolean_frominteger exec_swap (integer_stackdepth integer_inc) ())) () ()) () ()) ()))) ())
Lexicase best errors: [0 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction -19} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc})
Zero cases best program: (in4 exec_eq integer_lt exec_y_when_autoconstructing (boolean_pop boolean_swap integer_max) exec_eq exec_eq integer_pop in3 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or exec_do*range (integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 -19 integer_pop boolean_dup_items) integer_yankdup in4 integer_shove exec_shove () integer_max boolean_eq exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger boolean_frominteger exec_swap (integer_stackdepth integer_inc) ())) () ()) () ()) ()))) ())
Zero cases best errors: [0 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (320 321 146 146 440 146 321 321 440 321)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (320 321 146 146 440 146 321 321 440 321)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction in1})
Best program: (in4 exec_eq integer_lt exec_y_when_autoconstructing (boolean_pop boolean_swap integer_max) exec_eq exec_eq integer_pop in3 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or exec_do*range (integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) integer_yankdup in4 integer_shove exec_shove () integer_max boolean_eq exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger boolean_frominteger exec_swap (integer_stackdepth integer_inc) (integer_min exec_k_when_autoconstructing (integer_yankdup) () integer_lte integer_lte in1))) () ()) () ()) ()))) ())
Errors: [0 0 1 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 70
Size: 94
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.078
Median total errors in population: 8
Error averages by case: (0.68 0.679 0.854 0.854 0.56 0.854 0.679 0.679 0.56 0.679)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.654
Average program size in population (points): 51.759
Average percent parens in population: 0.331
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.263625
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 213
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1993965
--- Timings ---
Current time: 1559584290262 milliseconds
Total Time:          14.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.6 seconds, 65.6%
Fitness Testing:      3.9 seconds, 26.6%
Report:               1.0 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 26                 
Correct output: 60                  | Program output: 68                 
Correct output: 5                   | Program output: 22                 
Correct output: 1                   | Program output: 4                  
Correct output: 29                  | Program output: 64                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 90                 
Correct output: 4                   | Program output: 64                 
Correct output: 28                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 72                 
Correct output: 21                  | Program output: 47                 
Correct output: -3                  | Program output: 81                 
Correct output: -40                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 48                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -57                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -19                
Correct output: -71                 | Program output: 3                  
Correct output: -90                 | Program output: 31                 
Correct output: -56                 | Program output: 35                 
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 10                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 36                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: 38                 
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: 19                 
Correct output: -70                 | Program output: -34                
Correct output: -43                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: 16                  | Program output: 16                 
Correct output: -80                 | Program output: 32                 
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: -74                
Correct output: -11                 | Program output: 22                 
Correct output: -18                 | Program output: -11                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: 6                  
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -37                
Correct output: 6                   | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -44                
Correct output: -94                 | Program output: -53                
Correct output: -23                 | Program output: 20                 
Correct output: -91                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -74                
Correct output: -98                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 16                 
Correct output: -97                 | Program output: -68                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in3 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or exec_do*range (integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) integer_yankdup integer_add integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ()) ()))) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 75
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in3 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or exec_do*range (integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) integer_yankdup integer_add integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ()) ()))) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 75
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (627 898 625 626 627 273 322 321 274 322)
Population mean number of elite cases: 4.91
Count of perfect (error zero) individuals by case: (627 898 625 626 627 273 322 321 274 322)
Population mean number of perfect (error zero) cases: 4.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in3 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or exec_do*range (integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ()) ()))) ())
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 55
Size: 75
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 5.085
Median total errors in population: 5
Error averages by case: (0.373 0.102 0.375 0.374 0.373 0.727 0.678 0.679 0.726 0.678)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.518
Average program size in population (points): 73.2
Average percent parens in population: 0.271
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 8.0935625
Median age in population: 8.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2993485
--- Timings ---
Current time: 1559584296088 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.8 seconds, 56.7%
Fitness Testing:      5.5 seconds, 26.6%
Report:               3.4 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 26                 
Correct output: 60                  | Program output: 68                 
Correct output: 5                   | Program output: 22                 
Correct output: 1                   | Program output: 4                  
Correct output: 29                  | Program output: 64                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 90                 
Correct output: 4                   | Program output: 64                 
Correct output: 28                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 72                 
Correct output: 21                  | Program output: 47                 
Correct output: -3                  | Program output: 81                 
Correct output: -40                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 48                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -57                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -19                
Correct output: -71                 | Program output: 3                  
Correct output: -90                 | Program output: 31                 
Correct output: -56                 | Program output: 35                 
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: 10                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 36                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: 38                 
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: 19                 
Correct output: -70                 | Program output: -34                
Correct output: -43                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: 16                  | Program output: 16                 
Correct output: -80                 | Program output: 32                 
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: -74                
Correct output: -11                 | Program output: 22                 
Correct output: -18                 | Program output: -11                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: 6                  
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -37                
Correct output: 6                   | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -44                
Correct output: -94                 | Program output: -53                
Correct output: -23                 | Program output: 20                 
Correct output: -91                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -74                
Correct output: -98                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 16                 
Correct output: -97                 | Program output: -68                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in3 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_pop exec_dup_times () integer_inc in1 boolean_or exec_do*range (integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ()) ()))) ())
Lexicase best errors: [1 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 75
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in3 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_pop exec_dup_times () integer_inc in1 boolean_or exec_do*range (integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ()) ()))) ())
Zero cases best errors: [1 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 75
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 890 889 891 893 1000 560 561 561 916)
Population mean number of elite cases: 7.49
Count of perfect (error zero) individuals by case: (334 890 889 891 893 0 560 561 561 916)
Population mean number of perfect (error zero) cases: 6.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in3 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (in3 integer_dup_times) boolean_shove integer_inc exec_k_when_autoconstructing (exec_yankdup exec_k (integer_dup_items exec_when (integer_stackdepth)) (exec_eq)) ()) () ()))) ())
Errors: [1 0 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 31
Size: 46
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 3.505
Median total errors in population: 2
Error averages by case: (0.666 0.11 0.111 0.109 0.107 1.0 0.44 0.439 0.439 0.084)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 59.153
Average program size in population (points): 81.011
Average percent parens in population: 0.269
Minimum age in population: 8.3125
Maximum age in population: 11.21875
Average age in population: 9.87875
Median age in population: 10.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4195498
--- Timings ---
Current time: 1559584301603 milliseconds
Total Time:          26.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.7 seconds, 51.2%
Fitness Testing:      7.6 seconds, 28.2%
Report:               5.4 seconds, 20.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -11                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 23                 
Correct output: 18                  | Program output: 62                 
Correct output: 1                   | Program output: 26                 
Correct output: 60                  | Program output: 68                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 29                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 17                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 26                 
Correct output: 7                   | Program output: 85                 
Correct output: 4                   | Program output: 13                 
Correct output: 28                  | Program output: 60                 
Correct output: 28                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 21                  | Program output: 64                 
Correct output: -3                  | Program output: 31                 
Correct output: -40                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 33                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -45                
Correct output: -47                 | Program output: -26                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: 14                 
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -55                
Correct output: -82                 | Program output: 28                 
Correct output: -68                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 65                 
Correct output: -64                 | Program output: -45                
Correct output: -80                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: -11                
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: 26                 
Correct output: -43                 | Program output: -2                 
Correct output: -78                 | Program output: 27                 
Correct output: 16                  | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: 67                 
Correct output: -11                 | Program output: 48                 
Correct output: -18                 | Program output: -11                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 22                 
Correct output: -71                 | Program output: 6                  
Correct output: -67                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 74                 
Correct output: -97                 | Program output: -68                
Correct output: -96                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ())))) ())
Lexicase best errors: [0 0 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 74
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ())))) ())
Zero cases best errors: [0 0 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 74
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (743 920 1000 743 1000 1000 291 291 1000 743)
Population mean number of elite cases: 7.73
Count of perfect (error zero) individuals by case: (743 920 0 743 0 0 291 291 0 743)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ())))) ())
Errors: [0 0 1 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 74
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 6.269
Median total errors in population: 6
Error averages by case: (0.257 0.08 1.0 0.257 1.0 1.0 0.709 0.709 1.0 0.257)
Error minima by case: (0 0 1 0 1 1 0 0 1 0)
Average genome size in population (length): 57.091
Average program size in population (points): 77.834
Average percent parens in population: 0.266
Minimum age in population: 9.5625
Maximum age in population: 12.78125
Average age in population: 11.39678125
Median age in population: 11.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5358363
--- Timings ---
Current time: 1559584307223 milliseconds
Total Time:          32.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.5 seconds, 48.5%
Fitness Testing:      9.5 seconds, 29.6%
Report:               6.9 seconds, 21.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -11                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 23                 
Correct output: 18                  | Program output: 62                 
Correct output: 1                   | Program output: 26                 
Correct output: 60                  | Program output: 68                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 29                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 17                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 26                 
Correct output: 7                   | Program output: 85                 
Correct output: 4                   | Program output: 13                 
Correct output: 28                  | Program output: 60                 
Correct output: 28                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 21                  | Program output: 64                 
Correct output: -3                  | Program output: 31                 
Correct output: -40                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 33                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -45                
Correct output: -47                 | Program output: -26                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: 14                 
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -55                
Correct output: -82                 | Program output: 28                 
Correct output: -68                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 65                 
Correct output: -64                 | Program output: -45                
Correct output: -80                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: -11                
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: 26                 
Correct output: -43                 | Program output: -2                 
Correct output: -78                 | Program output: 27                 
Correct output: 16                  | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: 67                 
Correct output: -11                 | Program output: 48                 
Correct output: -18                 | Program output: -11                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 22                 
Correct output: -71                 | Program output: 6                  
Correct output: -67                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 74                 
Correct output: -97                 | Program output: -68                
Correct output: -96                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (in4 exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline) integer_flush exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ()))
Lexicase best errors: [0 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 71
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (in4 exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline) integer_flush exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ()))
Zero cases best errors: [0 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 71
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (923 943 1000 1000 920 920 1000 915 1000 911)
Population mean number of elite cases: 9.53
Count of perfect (error zero) individuals by case: (923 943 0 0 920 920 0 915 0 911)
Population mean number of perfect (error zero) cases: 5.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ())))) ())
Errors: [0 0 1 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 74
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 4.468
Median total errors in population: 4
Error averages by case: (0.077 0.057 1.0 1.0 0.08 0.08 1.0 0.085 1.0 0.089)
Error minima by case: (0 0 1 1 0 0 1 0 1 0)
Average genome size in population (length): 55.958
Average program size in population (points): 75.483
Average percent parens in population: 0.258
Minimum age in population: 11.34375
Maximum age in population: 14.4296875
Average age in population: 12.991265625
Median age in population: 13.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 195
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6547352
--- Timings ---
Current time: 1559584313337 milliseconds
Total Time:          38.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.8 seconds, 46.7%
Fitness Testing:     11.4 seconds, 29.9%
Report:               8.8 seconds, 23.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -11                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 23                 
Correct output: 18                  | Program output: 62                 
Correct output: 1                   | Program output: 26                 
Correct output: 60                  | Program output: 68                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 29                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 17                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 26                 
Correct output: 7                   | Program output: 85                 
Correct output: 4                   | Program output: 13                 
Correct output: 28                  | Program output: 60                 
Correct output: 28                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 21                  | Program output: 64                 
Correct output: -3                  | Program output: 31                 
Correct output: -40                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 33                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -45                
Correct output: -47                 | Program output: -26                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: 14                 
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -55                
Correct output: -82                 | Program output: 28                 
Correct output: -68                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 65                 
Correct output: -64                 | Program output: -45                
Correct output: -80                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: -11                
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: 26                 
Correct output: -43                 | Program output: -2                 
Correct output: -78                 | Program output: 27                 
Correct output: 16                  | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: 67                 
Correct output: -11                 | Program output: 48                 
Correct output: -18                 | Program output: -11                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 22                 
Correct output: -71                 | Program output: 6                  
Correct output: -67                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 74                 
Correct output: -97                 | Program output: -68                
Correct output: -96                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup boolean_rot in1 exec_noop integer_pop boolean_dup_items) (exec_noop boolean_empty boolean_dup_items integer_flush in2) exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ()))) ())
Lexicase best errors: [0 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 69
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup boolean_rot in1 exec_noop integer_pop boolean_dup_items) (exec_noop boolean_empty boolean_dup_items integer_flush in2) exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ()))) ())
Zero cases best errors: [0 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 69
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (915 1000 914 901 912 1 929 1 915 915)
Population mean number of elite cases: 7.40
Count of perfect (error zero) individuals by case: (915 0 914 901 912 1 929 1 915 915)
Population mean number of perfect (error zero) cases: 6.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer integer_add exec_k (print_integer exec_y (exec_dup_items exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ())
Errors: [0 1 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 47
Size: 61
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 3.597
Median total errors in population: 3
Error averages by case: (0.085 1.0 0.086 0.099 0.088 0.999 0.071 0.999 0.085 0.085)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.951
Average program size in population (points): 75.414
Average percent parens in population: 0.257
Minimum age in population: 12.625
Maximum age in population: 16.12890625
Average age in population: 14.49947265625
Median age in population: 14.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.008
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 7707581
--- Timings ---
Current time: 1559584318041 milliseconds
Total Time:          43.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.4 seconds, 44.6%
Fitness Testing:     13.2 seconds, 30.4%
Report:              10.8 seconds, 24.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -11                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 23                 
Correct output: 18                  | Program output: 62                 
Correct output: 1                   | Program output: 26                 
Correct output: 60                  | Program output: 68                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 29                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 17                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 26                 
Correct output: 7                   | Program output: 85                 
Correct output: 4                   | Program output: 13                 
Correct output: 28                  | Program output: 60                 
Correct output: 28                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 21                  | Program output: 64                 
Correct output: -3                  | Program output: 31                 
Correct output: -40                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 33                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -45                
Correct output: -47                 | Program output: -26                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: 14                 
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -55                
Correct output: -82                 | Program output: 28                 
Correct output: -68                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 65                 
Correct output: -64                 | Program output: -45                
Correct output: -80                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: -11                
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: 26                 
Correct output: -43                 | Program output: -2                 
Correct output: -78                 | Program output: 27                 
Correct output: 16                  | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: 67                 
Correct output: -11                 | Program output: 48                 
Correct output: -18                 | Program output: -11                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60

              
Correct output: 6                   | Program output: 22                 
Correct output: -71                 | Program output: 6                  
Correct output: -67                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 74                 
Correct output: -97                 | Program output: -68                
Correct output: -96                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty) (boolean_dup_items integer_flush exec_k () (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ()))))) ())
Lexicase best errors: [0 0 1 1 0 1 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 76
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty) (boolean_dup_items integer_flush exec_k () (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ()))))) ())
Zero cases best errors: [0 0 1 1 0 1 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 76
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (678 675 1000 229 674 1000 1000 1000 1000 229)
Population mean number of elite cases: 7.49
Count of perfect (error zero) individuals by case: (678 675 0 229 674 0 0 0 0 229)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot integer_div) (boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) boolean_rot exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) ())
Errors: [0 0 1 1 0 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 72
Size: 89
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 7.515
Median total errors in population: 7
Error averages by case: (0.322 0.325 1.0 0.771 0.326 1.0 1.0 1.0 1.0 0.771)
Error minima by case: (0 0 1 0 0 1 1 1 1 0)
Average genome size in population (length): 55.867
Average program size in population (points): 75.264
Average percent parens in population: 0.256
Minimum age in population: 13.6875
Maximum age in population: 17.802734375
Average age in population: 16.022431640625
Median age in population: 16.0244140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 8827219
--- Timings ---
Current time: 1559584323594 milliseconds
Total Time:          48.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.0 seconds, 43.5%
Fitness Testing:     15.1 seconds, 31.4%
Report:              12.0 seconds, 24.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -11                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 23                 
Correct output: 18                  | Program output: 62                 
Correct output: 1                   | Program output: 26                 
Correct output: 60                  | Program output: 68                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 29                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 17                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 26                 
Correct output: 7                   | Program output: 85                 
Correct output: 4                   | Program output: 13                 
Correct output: 28                  | Program output: 60                 
Correct output: 28                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 21                  | Program output: 64                 
Correct output: -3                  | Program output: 31                 
Correct output: -40                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 33                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -45                
Correct output: -47                 | Program output: -26                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: 14                 
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -55                
Correct output: -82                 | Program output: 28                 
Correct output: -68                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 65                 
Correct output: -64                 | Program output: -45                
Correct output: -80                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: -11                
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: 26                 
Correct output: -43                 | Program output: -2                 
Correct output: -78                 | Program output: 27                 
Correct output: 16                  | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: 67                 
Correct output: -11                 | Program output: 48                 
Correct output: -18                 | Program output: -11                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 22                 
Correct output: -71                 | Program output: 6                  
Correct output: -67                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 74                 
Correct output: -97                 | Program output: -68                
Correct output: -96                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_do*range () in2 exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop in4 print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_while (tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove integer_yankdup in4 integer_shove exec_shove ()) (integer_max boolean_invert_first_then_and exec_dup_times (boolean_frominteger)))))) ())
Lexicase best errors: [1 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_do*range () in2 exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop in4 print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_while (tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove integer_yankdup in4 integer_shove exec_shove ()) (integer_max boolean_invert_first_then_and exec_dup_times (boolean_frominteger)))))) ())
Zero cases best errors: [1 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (538 540 378 378 378 1 378 528 926 529)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (538 540 378 378 378 1 378 528 926 529)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (boolean_invert_second_then_and boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) (integer_dup_times in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items boolean_flush in2) exec_s (boolean_dup_times exec_dup_times (boolean_frominteger)) () ()))) ())
Errors: [0 0 1 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 70
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.426
Median total errors in population: 5
Error averages by case: (0.462 0.46 0.622 0.622 0.622 0.999 0.622 0.472 0.074 0.471)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.704
Average program size in population (points): 75.178
Average percent parens in population: 0.258
Minimum age in population: 15.125
Maximum age in population: 19.2158203125
Average age in population: 17.5204580078125
Median age in population: 17.609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9897683
--- Timings ---
Current time: 1559584328993 milliseconds
Total Time:          53.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.7 seconds, 42.1%
Fitness Testing:     17.0 seconds, 31.6%
Report:              14.1 seconds, 26.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -11                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 23                 
Correct output: 18                  | Program output: 62                 
Correct output: 1                   | Program output: 26                 
Correct output: 60                  | Program output: 68                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 29                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 17                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 26                 
Correct output: 7                   | Program output: 85                 
Correct output: 4                   | Program output: 13                 
Correct output: 28                  | Program output: 60                 
Correct output: 28                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 21                  | Program output: 64                 
Correct output: -3                  | Program output: 31                 
Correct output: -40                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 33                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: 13                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -45                
Correct output: -47                 | Program output: -26                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: 14                 
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -55                
Correct output: -82                 | Program output: 28                 
Correct output: -68                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 65                 
Correct output: -64                 | Program output: -45                
Correct output: -80                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: -11                
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: 26                 
Correct output: -43                 | Program output: -2                 
Correct output: -78                 | Program output: 27                 
Correct output: 16                  | Program output: 43                 
Correct output: -80                 | Program output: -80                
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: 67                 
Correct output: -11                 | Program output: 48                 
Correct output: -18                 | Program output: -11                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 22                 
Correct output: -71                 | Program output: 6                  
Correct output: -67                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 39                 
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 74                 
Correct output: -97                 | Program output: -68                
Correct output: -96                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and exec_k (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times (integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) integer_yankdup in4 integer_shove exec_shove (integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ())) ())) () ()))) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 89
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and exec_k (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times (integer_inc in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) integer_yankdup in4 integer_shove exec_shove (integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ())) ())) () ()))) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 89
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (927 516 352 524 516 516 354 161 353 515)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (927 516 352 524 516 516 354 161 353 515)
Population mean number of perfect (error zero) cases: 4.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_767} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger})
Best program: (exec_do*range (in2) exec_eq exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_767 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush boolean_dup print_newline integer_flush exec_dup_times () exec_yankdup in1 boolean_or integer_min integer_mod boolean_yankdup exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2) (exec_s (exec_s_when_autoconstructing (exec_dup_times (boolean_frominteger)) () ()) () ())))) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 55
Size: 74
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 5.266
Median total errors in population: 3
Error averages by case: (0.073 0.484 0.648 0.476 0.484 0.484 0.646 0.839 0.647 0.485)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.607
Average program size in population (points): 76.028
Average percent parens in population: 0.254
Minimum age in population: 16.55859375
Maximum age in population: 20.6962890625
Average age in population: 19.0079169921875
Median age in population: 19.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 10968428
--- Timings ---
Current time: 1559584334599 milliseconds
Total Time:          59.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.5 seconds, 41.2%
Fitness Testing:     18.9 seconds, 31.9%
Report:              15.9 seconds, 26.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 55                 
Correct output: 60                  | Program output: 80                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 29                  | Program output: 60                 
Correct output: 13                  | Program output: 63                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 68                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 85                 
Correct output: 4                   | Program output: 13                 
Correct output: 28                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 15                 
Correct output: 21                  | Program output: 47                 
Correct output: -3                  | Program output: 31                 
Correct output: -40                 | Program output: 27                 
Correct output: -91                 | Program output: -18                
Correct output: 33                  | Program output: 33                 
Correct output: -36                 | Program output: 37                 
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: 14                  | Program output: 51                 
Correct output: -93                 | Program output: 81                 
Correct output: -92                 | Program output: -20                
Correct output: -83                 | Program output: -19                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -55                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -44                
Correct output: -100                | Program output: -26                
Correct output: -90                 | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -61                 | Program output: -35                
Correct output: -28                 | Program output: -11                
Correct output: -68                 | Program output: -66                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -34                
Correct output: -43                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: 16                  | Program output: 16                 
Correct output: -80                 | Program output: -80                
Correct output: -75                 | Program output: 32                 
Correct output: -74                 | Program output: -74                
Correct output: -11                 | Program output: 22                 
Correct output: -18                 | Program output: 8                  
Correct output: -41                 | Program output: 8                  
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -92                
Correct output: -86                 | Program output: 36                 
Correct output: 29                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: -97                 | Program output: -31                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_689} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_noop in2 in3 integer_swap integer_pop in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline exec_k (exec_dup_times () exec_do*count (in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in1 exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ()))) () ()))) ())
Lexicase best errors: [1 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 82
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_689} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_noop in2 in3 integer_swap integer_pop in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline exec_k (exec_dup_times () exec_do*count (in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in1 exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ()))) () ()))) ())
Zero cases best errors: [1 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 82
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (783 1 714 1 312 711 311 904 900 711)
Population mean number of elite cases: 5.35
Count of perfect (error zero) individuals by case: (783 1 714 1 312 711 311 904 900 711)
Population mean number of perfect (error zero) cases: 5.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_689} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty})
Best program: (exec_noop in2 in3 integer_swap integer_pop in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in1 exec_empty in4 integer_div) boolean_rot in1 exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty) ()))) ())
Errors: [1 1 0 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 54
Size: 65
Percent parens: 0.169
--- Population Statistics ---
Average total errors in population: 4.652
Median total errors in population: 4
Error averages by case: (0.217 0.999 0.286 0.999 0.688 0.289 0.689 0.096 0.1 0.289)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.191
Average program size in population (points): 75.943
Average percent parens in population: 0.246
Minimum age in population: 17.55859375
Maximum age in population: 22.21826171875
Average age in population: 20.66122973632812
Median age in population: 20.786865234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 12096256
--- Timings ---
Current time: 1559584339920 milliseconds
Total Time:          65.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.3 seconds, 40.5%
Fitness Testing:     20.7 seconds, 31.9%
Report:              17.8 seconds, 27.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 215
Test mean error for best: 0.21500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 26                 
Correct output: 60                  | Program output: 68                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 29                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 85                 
Correct output: 4                   | Program output: 13                 
Correct output: 28                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 15                 
Correct output: 21                  | Program output: 47                 
Correct output: -3                  | Program output: 31                 
Correct output: -40                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 33                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -19                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -55                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 36                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: -11                
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -34                
Correct output: -43                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: 16                  | Program output: 16                 
Correct output: -80                 | Program output: -80                
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: -74                
Correct output: -11                 | Program output: 22                 
Correct output: -18                 | Program output: -11                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 16                 
Correct output: -97                 | Program output: -68                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_689} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_do*range (in2) in3 exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ()) ()))) ())
Lexicase best errors: [1 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 89
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_689} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_do*range (in2) in3 exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ()) ()))) ())
Zero cases best errors: [1 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 89
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 518 519 520 583 208 514 208 513 519)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (209 518 519 520 583 208 514 208 513 519)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_689} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop})
Best program: (exec_do*range (in2) in3 exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ()) ()))) ())
Errors: [1 0 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 70
Size: 89
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 5.689
Median total errors in population: 5
Error averages by case: (0.791 0.482 0.481 0.48 0.417 0.792 0.486 0.792 0.487 0.481)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.132
Average program size in population (points): 73.649
Average percent parens in population: 0.222
Minimum age in population: 19.224609375
Maximum age in population: 23.7752685546875
Average age in population: 22.2510595703125
Median age in population: 22.3505859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 13122886
--- Timings ---
Current time: 1559584345325 milliseconds
Total Time:          70.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.2 seconds, 40.3%
Fitness Testing:     22.2 seconds, 31.7%
Report:              19.5 seconds, 27.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 215
Test mean error for best: 0.21500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -55                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: 91                 
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 26                 
Correct output: 60                  | Program output: 68                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 29                  | Program output: 60                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 85                 
Correct output: 4                   | Program output: 13                 
Correct output: 28                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 15                 
Correct output: 21                  | Program output: 47                 
Correct output: -3                  | Program output: 31                 
Correct output: -40                 | Program output: 27                 
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 33                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -19                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -55                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 36                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: -11                
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -34                
Correct output: -43                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: 16                  | Program output: 16                 
Correct output: -80                 | Program output: -80                
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: -74                
Correct output: -11                 | Program output: 22                 
Correct output: -18                 | Program output: -11                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 45                 
Correct output: 16                  | Program output: 16                 
Correct output: -97                 | Program output: -68                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_689} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_do*range (in2) in3 exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ()) ()))) ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 89
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_689} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_do*range (in2) in3 exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ()) ()))) ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 89
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (340 913 541 540 912 551 340 924 927 549)
Population mean number of elite cases: 6.54
Count of perfect (error zero) individuals by case: (340 913 541 540 912 551 340 924 927 549)
Population mean number of perfect (error zero) cases: 6.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_689} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop})
Best program: (exec_do*range (in2) in3 exec_eq integer_pop in1 integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ()) ()))) ())
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 70
Size: 89
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 3.463
Median total errors in population: 2
Error averages by case: (0.66 0.087 0.459 0.46 0.088 0.449 0.66 0.076 0.073 0.451)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.535
Average program size in population (points): 78.762
Average percent parens in population: 0.205
Minimum age in population: 21.7353515625
Maximum age in population: 25.06201171875
Average age in population: 23.35593493652344
Median age in population: 23.59234619140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 225
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 227
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 14102007
--- Timings ---
Current time: 1559584350641 milliseconds
Total Time:          75.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.2 seconds, 40.0%
Fitness Testing:     23.5 seconds, 31.2%
Report:              21.5 seconds, 28.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: -41                
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 60                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 29                  | Program output: 29                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 15                 
Correct output: 21                  | Program output: 21                 
Correct output: -3                  | Program output: -3                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 33                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 36                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -70                
Correct output: -43                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: 16                  | Program output: 16                 
Correct output: -80                 | Program output: -80                
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: -74                
Correct output: -11                 | Program output: -11                
Correct output: -18                 | Program output: -18                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_689} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop})
Lexicase best program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ()) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 92
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_689} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop})
Zero cases best program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_while (boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ()) ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 92
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (474 892 885 884 892 893 887 407 884 892)
Population mean number of elite cases: 7.99
Count of perfect (error zero) individuals by case: (474 892 885 884 892 893 887 407 884 892)
Population mean number of perfect (error zero) cases: 7.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_689} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop})
Best program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 74
Size: 92
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 2.01
Median total errors in population: 1
Error averages by case: (0.526 0.108 0.115 0.116 0.108 0.107 0.113 0.593 0.116 0.108)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.713
Average program size in population (points): 84.18
Average percent parens in population: 0.193
Minimum age in population: 23.58551025390625
Maximum age in population: 26.40728759765625
Average age in population: 24.77334805297852
Median age in population: 24.8341064453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 15143537
--- Timings ---
Current time: 1559584356009 milliseconds
Total Time:          80.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.1 seconds, 39.7%
Fitness Testing:     25.0 seconds, 31.0%
Report:              23.5 seconds, 29.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 16
Successful program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 92


Auto-simplifying with starting size: 92
step: 0
program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 500
program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 1000
program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 1500
program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 2000
program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 2500
program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 3000
program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 3500
program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 4000
program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 4500
program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 5000
program: (exec_do*range (in2) in3 exec_eq exec_eq integer_pop in4 integer_rot integer_min integer_rot integer_min boolean_pop integer_shove print_boolean in1 integer_rot integer_min boolean_pop integer_shove integer_min print_integer exec_dup_items exec_k (print_integer exec_y (exec_dup_items tag_exec_689 (exec_s_when_autoconstructing (exec_stackdepth boolean_invert_first_then_and integer_flush integer_flush boolean_dup print_newline integer_flush exec_dup_times () integer_inc in1 boolean_or integer_yank integer_mod boolean_yankdup exec_empty in4 integer_div boolean_rot in4 integer_div boolean_rot in1 exec_empty in4 integer_div) (boolean_rot integer_flush exec_noop integer_pop boolean_dup_items) (integer_yankdup in4 integer_shove exec_shove () integer_max integer_max boolean_invert_first_then_and exec_noop boolean_empty boolean_dup_items integer_flush in2 exec_s (exec_s_when_autoconstructing (exec_dup_times (integer_pop)) () ()) () ())))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 34                  | Program output: 34                 
Correct output: -21                 | Program output: -21                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -41                 | Program output: -41                
Correct output: -28                 | Program output: -28                
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 43                 
Correct output: 72                  | Program output: 72                 
Correct output: 41                  | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 60                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 29                  | Program output: 29                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 28                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 15                  | Program output: 15                 
Correct output: 21                  | Program output: 21                 
Correct output: -3                  | Program output: -3                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -91                
Correct output: 33                  | Program output: 33                 
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -47                 | Program output: -47                
Correct output: 14                  | Program output: 14                 
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 36                  | Program output: 36                 
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -61                 | Program output: -61                
Correct output: -28                 | Program output: -28                
Correct output: -68                 | Program output: -68                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -70                
Correct output: -43                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: 16                  | Program output: 16                 
Correct output: -80                 | Program output: -80                
Correct output: -75                 | Program output: -75                
Correct output: -74                 | Program output: -74                
Correct output: -11                 | Program output: -11                
Correct output: -18                 | Program output: -18                
Correct output: -41                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: 6                   | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: 29                  | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
;;******************************
