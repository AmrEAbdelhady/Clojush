Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[87 -19 -19 -19] -19] [[8 8 43 8] 8] [[58 58 58 76] 58] [[-64 -64 -81 -64] -81] [[43 44 44 44] 43] [[93 93 93 -66] -66] [[38 38 38 10] 10] [[34 34 34 -16] -16] [[6 6 6 100] 6] [[-57 -10 -57 -57] -57] [(-46 -46 -46 -46) -46] [(89 89 89 89) 89] [(-28 -28 -28 -28) -28] [(30 30 30 30) 30] [(-94 -94 -94 -94) -94] [(16 87 31 40) 16] [(46 27 3 22) 3] [(25 72 41 29) 25] [(44 56 38 55) 38] [(4 76 19 76) 4] [(35 7 44 58) 7] [(68 4 97 100) 4] [(47 35 22 41) 22] [(58 54 7 73) 7] [(10 56 34 52) 10] [(80 29 60 66) 29] [(31 66 56 12) 12] [(5 11 49 37) 5] [(54 83 0 8) 0] [(38 73 93 91) 38] [(16 67 57 41) 16] [(28 19 0 12) 0] [(52 59 54 40) 40] [(67 72 57 26) 26] [(97 4 51 37) 4] [(57 73 60 41) 41] [(61 84 77 72) 61] [(-54 -6 98 -28) -54] [(27 100 -91 -16) -91] [(-29 98 -59 63) -59] [(-99 3 6 -2) -99] [(60 15 86 -33) -33] [(97 14 43 -47) -47] [(70 -60 89 -41) -60] [(-57 33 -71 74) -71] [(34 47 -42 -67) -67] [(77 34 36 -43) -43] [(97 -92 48 15) -92] [(-64 22 -43 82) -64] [(84 70 99 43) 43] [(-36 -37 14 -12) -37] [(-13 -98 57 8) -98] [(86 -60 -65 -42) -65] [(42 28 -20 89) -20] [(90 92 -24 70) -24] [(-14 7 -57 43) -57] [(-95 -41 -3 24) -95] [(-7 92 -16 -100) -100] [(30 25 94 -22) -22] [(86 -78 42 74) -78] [(-24 62 -66 -63) -66] [(74 22 66 100) 22] [(35 -46 67 77) -46] [(-94 -12 32 67) -94] [(63 -81 75 -22) -81] [(-62 -87 -56 91) -87] [(16 47 30 -73) -73] [(-55 78 -94 -86) -94] [(38 -45 -69 15) -69] [(-53 24 -1 74) -53] [(39 -71 32 45) -71] [(-78 72 32 4) -78] [(98 -98 5 36) -98] [(39 38 85 56) 38] [(79 -47 -43 -43) -47] [(-9 74 -95 52) -95] [(-33 -10 17 -93) -93] [(-60 -45 -64 -80) -80] [(33 -3 -30 85) -30] [(-38 6 83 -11) -38] [(-71 -90 33 -64) -90] [(-72 66 -33 56) -72] [(80 -48 29 15) -48] [(83 -34 5 99) -34] [(35 -34 32 -36) -36] [(40 -18 -14 27) -18] [(-89 -94 54 11) -94] [(91 5 -13 88) -13] [(61 20 -96 87) -96] [(63 79 2 -79) -79] [(35 99 -24 -32) -32] [(74 42 -96 44) -96] [(52 -22 -94 -31) -94] [(-28 7 69 22) -28] [(-79 90 0 -41) -79])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[87 -19 -19 -19] -19]
Train Case:   6 | Input/Output: [[8 8 43 8] 8]
Train Case:   7 | Input/Output: [[58 58 58 76] 58]
Train Case:   8 | Input/Output: [[-64 -64 -81 -64] -81]
Train Case:   9 | Input/Output: [[43 44 44 44] 43]
Train Case:  10 | Input/Output: [[93 93 93 -66] -66]
Train Case:  11 | Input/Output: [[38 38 38 10] 10]
Train Case:  12 | Input/Output: [[34 34 34 -16] -16]
Train Case:  13 | Input/Output: [[6 6 6 100] 6]
Train Case:  14 | Input/Output: [[-57 -10 -57 -57] -57]
Train Case:  15 | Input/Output: [(-46 -46 -46 -46) -46]
Train Case:  16 | Input/Output: [(89 89 89 89) 89]
Train Case:  17 | Input/Output: [(-28 -28 -28 -28) -28]
Train Case:  18 | Input/Output: [(30 30 30 30) 30]
Train Case:  19 | Input/Output: [(-94 -94 -94 -94) -94]
Train Case:  20 | Input/Output: [(16 87 31 40) 16]
Train Case:  21 | Input/Output: [(46 27 3 22) 3]
Train Case:  22 | Input/Output: [(25 72 41 29) 25]
Train Case:  23 | Input/Output: [(44 56 38 55) 38]
Train Case:  24 | Input/Output: [(4 76 19 76) 4]
Train Case:  25 | Input/Output: [(35 7 44 58) 7]
Train Case:  26 | Input/Output: [(68 4 97 100) 4]
Train Case:  27 | Input/Output: [(47 35 22 41) 22]
Train Case:  28 | Input/Output: [(58 54 7 73) 7]
Train Case:  29 | Input/Output: [(10 56 34 52) 10]
Train Case:  30 | Input/Output: [(80 29 60 66) 29]
Train Case:  31 | Input/Output: [(31 66 56 12) 12]
Train Case:  32 | Input/Output: [(5 11 49 37) 5]
Train Case:  33 | Input/Output: [(54 83 0 8) 0]
Train Case:  34 | Input/Output: [(38 73 93 91) 38]
Train Case:  35 | Input/Output: [(16 67 57 41) 16]
Train Case:  36 | Input/Output: [(28 19 0 12) 0]
Train Case:  37 | Input/Output: [(52 59 54 40) 40]
Train Case:  38 | Input/Output: [(67 72 57 26) 26]
Train Case:  39 | Input/Output: [(97 4 51 37) 4]
Train Case:  40 | Input/Output: [(57 73 60 41) 41]
Train Case:  41 | Input/Output: [(61 84 77 72) 61]
Train Case:  42 | Input/Output: [(-54 -6 98 -28) -54]
Train Case:  43 | Input/Output: [(27 100 -91 -16) -91]
Train Case:  44 | Input/Output: [(-29 98 -59 63) -59]
Train Case:  45 | Input/Output: [(-99 3 6 -2) -99]
Train Case:  46 | Input/Output: [(60 15 86 -33) -33]
Train Case:  47 | Input/Output: [(97 14 43 -47) -47]
Train Case:  48 | Input/Output: [(70 -60 89 -41) -60]
Train Case:  49 | Input/Output: [(-57 33 -71 74) -71]
Train Case:  50 | Input/Output: [(34 47 -42 -67) -67]
Train Case:  51 | Input/Output: [(77 34 36 -43) -43]
Train Case:  52 | Input/Output: [(97 -92 48 15) -92]
Train Case:  53 | Input/Output: [(-64 22 -43 82) -64]
Train Case:  54 | Input/Output: [(84 70 99 43) 43]
Train Case:  55 | Input/Output: [(-36 -37 14 -12) -37]
Train Case:  56 | Input/Output: [(-13 -98 57 8) -98]
Train Case:  57 | Input/Output: [(86 -60 -65 -42) -65]
Train Case:  58 | Input/Output: [(42 28 -20 89) -20]
Train Case:  59 | Input/Output: [(90 92 -24 70) -24]
Train Case:  60 | Input/Output: [(-14 7 -57 43) -57]
Train Case:  61 | Input/Output: [(-95 -41 -3 24) -95]
Train Case:  62 | Input/Output: [(-7 92 -16 -100) -100]
Train Case:  63 | Input/Output: [(30 25 94 -22) -22]
Train Case:  64 | Input/Output: [(86 -78 42 74) -78]
Train Case:  65 | Input/Output: [(-24 62 -66 -63) -66]
Train Case:  66 | Input/Output: [(74 22 66 100) 22]
Train Case:  67 | Input/Output: [(35 -46 67 77) -46]
Train Case:  68 | Input/Output: [(-94 -12 32 67) -94]
Train Case:  69 | Input/Output: [(63 -81 75 -22) -81]
Train Case:  70 | Input/Output: [(-62 -87 -56 91) -87]
Train Case:  71 | Input/Output: [(16 47 30 -73) -73]
Train Case:  72 | Input/Output: [(-55 78 -94 -86) -94]
Train Case:  73 | Input/Output: [(38 -45 -69 15) -69]
Train Case:  74 | Input/Output: [(-53 24 -1 74) -53]
Train Case:  75 | Input/Output: [(39 -71 32 45) -71]
Train Case:  76 | Input/Output: [(-78 72 32 4) -78]
Train Case:  77 | Input/Output: [(98 -98 5 36) -98]
Train Case:  78 | Input/Output: [(39 38 85 56) 38]
Train Case:  79 | Input/Output: [(79 -47 -43 -43) -47]
Train Case:  80 | Input/Output: [(-9 74 -95 52) -95]
Train Case:  81 | Input/Output: [(-33 -10 17 -93) -93]
Train Case:  82 | Input/Output: [(-60 -45 -64 -80) -80]
Train Case:  83 | Input/Output: [(33 -3 -30 85) -30]
Train Case:  84 | Input/Output: [(-38 6 83 -11) -38]
Train Case:  85 | Input/Output: [(-71 -90 33 -64) -90]
Train Case:  86 | Input/Output: [(-72 66 -33 56) -72]
Train Case:  87 | Input/Output: [(80 -48 29 15) -48]
Train Case:  88 | Input/Output: [(83 -34 5 99) -34]
Train Case:  89 | Input/Output: [(35 -34 32 -36) -36]
Train Case:  90 | Input/Output: [(40 -18 -14 27) -18]
Train Case:  91 | Input/Output: [(-89 -94 54 11) -94]
Train Case:  92 | Input/Output: [(91 5 -13 88) -13]
Train Case:  93 | Input/Output: [(61 20 -96 87) -96]
Train Case:  94 | Input/Output: [(63 79 2 -79) -79]
Train Case:  95 | Input/Output: [(35 99 -24 -32) -32]
Train Case:  96 | Input/Output: [(74 42 -96 44) -96]
Train Case:  97 | Input/Output: [(52 -22 -94 -31) -94]
Train Case:  98 | Input/Output: [(-28 7 69 22) -28]
Train Case:  99 | Input/Output: [(-79 90 0 -41) -79]
Test Case:   0 | Input/Output: [[-29 -29 -67 -29] -67]
Test Case:   1 | Input/Output: [[-82 -82 -30 -82] -82]
Test Case:   2 | Input/Output: [[75 4 75 75] 4]
Test Case:   3 | Input/Output: [[-7 -31 -31 -31] -31]
Test Case:   4 | Input/Output: [[-73 -73 -73 51] -73]
Test Case:   5 | Input/Output: [[-9 -9 -9 -6] -9]
Test Case:   6 | Input/Output: [[-37 -37 14 -37] -37]
Test Case:   7 | Input/Output: [[6 -30 6 6] -30]
Test Case:   8 | Input/Output: [[25 -67 25 25] -67]
Test Case:   9 | Input/Output: [[-86 -86 -69 -86] -86]
Test Case:  10 | Input/Output: [[-52 -52 -55 -52] -55]
Test Case:  11 | Input/Output: [[-69 15 15 15] -69]
Test Case:  12 | Input/Output: [[18 20 20 20] 18]
Test Case:  13 | Input/Output: [[-70 -63 -70 -70] -70]
Test Case:  14 | Input/Output: [[-41 -41 -29 -41] -41]
Test Case:  15 | Input/Output: [[10 10 10 -100] -100]
Test Case:  16 | Input/Output: [[88 68 68 68] 68]
Test Case:  17 | Input/Output: [[28 28 28 38] 28]
Test Case:  18 | Input/Output: [[70 28 70 70] 28]
Test Case:  19 | Input/Output: [[-76 -99 -76 -76] -99]
Test Case:  20 | Input/Output: [[47 47 47 36] 36]
Test Case:  21 | Input/Output: [[-23 -7 -23 -23] -23]
Test Case:  22 | Input/Output: [[-95 -95 -95 -50] -95]
Test Case:  23 | Input/Output: [[-81 -81 -81 -95] -95]
Test Case:  24 | Input/Output: [[7 7 7 56] 7]
Test Case:  25 | Input/Output: [[36 -51 -51 -51] -51]
Test Case:  26 | Input/Output: [[2 2 -43 2] -43]
Test Case:  27 | Input/Output: [[22 -83 -83 -83] -83]
Test Case:  28 | Input/Output: [[54 53 54 54] 53]
Test Case:  29 | Input/Output: [[66 14 14 14] 14]
Test Case:  30 | Input/Output: [[96 96 96 2] 2]
Test Case:  31 | Input/Output: [[-42 94 -42 -42] -42]
Test Case:  32 | Input/Output: [[-30 -30 -30 -3] -30]
Test Case:  33 | Input/Output: [[-70 -70 69 -70] -70]
Test Case:  34 | Input/Output: [[3 3 74 3] 3]
Test Case:  35 | Input/Output: [[83 -2 -2 -2] -2]
Test Case:  36 | Input/Output: [[5 55 5 5] 5]
Test Case:  37 | Input/Output: [[-27 31 31 31] -27]
Test Case:  38 | Input/Output: [[3 -49 3 3] -49]
Test Case:  39 | Input/Output: [[57 57 57 -42] -42]
Test Case:  40 | Input/Output: [[-58 -58 5 -58] -58]
Test Case:  41 | Input/Output: [[-4 30 30 30] -4]
Test Case:  42 | Input/Output: [[-33 36 -33 -33] -33]
Test Case:  43 | Input/Output: [[10 47 47 47] 10]
Test Case:  44 | Input/Output: [[48 48 48 -98] -98]
Test Case:  45 | Input/Output: [[87 -35 87 87] -35]
Test Case:  46 | Input/Output: [[-85 -85 -8 -85] -85]
Test Case:  47 | Input/Output: [[10 -19 -19 -19] -19]
Test Case:  48 | Input/Output: [[71 71 71 -77] -77]
Test Case:  49 | Input/Output: [[-52 -14 -14 -14] -52]
Test Case:  50 | Input/Output: [[76 76 76 -86] -86]
Test Case:  51 | Input/Output: [[8 8 8 35] 8]
Test Case:  52 | Input/Output: [[17 17 17 39] 17]
Test Case:  53 | Input/Output: [[-81 10 -81 -81] -81]
Test Case:  54 | Input/Output: [[-40 -40 -40 2] -40]
Test Case:  55 | Input/Output: [[-100 -100 97 -100] -100]
Test Case:  56 | Input/Output: [[94 -60 94 94] -60]
Test Case:  57 | Input/Output: [[18 -95 -95 -95] -95]
Test Case:  58 | Input/Output: [[-77 -77 -41 -77] -77]
Test Case:  59 | Input/Output: [[91 61 61 61] 61]
Test Case:  60 | Input/Output: [[49 49 10 49] 10]
Test Case:  61 | Input/Output: [[10 10 10 65] 10]
Test Case:  62 | Input/Output: [[-49 20 20 20] -49]
Test Case:  63 | Input/Output: [[34 43 34 34] 34]
Test Case:  64 | Input/Output: [[-72 -72 -72 -75] -75]
Test Case:  65 | Input/Output: [[-39 -39 -86 -39] -86]
Test Case:  66 | Input/Output: [[-91 -91 -40 -91] -91]
Test Case:  67 | Input/Output: [[-70 -10 -70 -70] -70]
Test Case:  68 | Input/Output: [[41 41 -47 41] -47]
Test Case:  69 | Input/Output: [[-25 -25 3 -25] -25]
Test Case:  70 | Input/Output: [[-100 -100 -100 -89] -100]
Test Case:  71 | Input/Output: [[-79 -5 -79 -79] -79]
Test Case:  72 | Input/Output: [[17 38 38 38] 17]
Test Case:  73 | Input/Output: [[6 -21 -21 -21] -21]
Test Case:  74 | Input/Output: [[79 79 62 79] 62]
Test Case:  75 | Input/Output: [[81 81 81 94] 81]
Test Case:  76 | Input/Output: [[36 -13 -13 -13] -13]
Test Case:  77 | Input/Output: [[-11 -11 -79 -11] -79]
Test Case:  78 | Input/Output: [[-91 -91 -91 52] -91]
Test Case:  79 | Input/Output: [[6 -57 -57 -57] -57]
Test Case:  80 | Input/Output: [[21 -84 -84 -84] -84]
Test Case:  81 | Input/Output: [[-1 -1 -53 -1] -53]
Test Case:  82 | Input/Output: [[-8 -8 -8 -80] -80]
Test Case:  83 | Input/Output: [[45 45 6 45] 6]
Test Case:  84 | Input/Output: [[29 29 29 -18] -18]
Test Case:  85 | Input/Output: [[-4 13 -4 -4] -4]
Test Case:  86 | Input/Output: [[63 -31 -31 -31] -31]
Test Case:  87 | Input/Output: [[69 69 81 69] 69]
Test Case:  88 | Input/Output: [[-92 -92 -51 -92] -92]
Test Case:  89 | Input/Output: [[-87 -90 -87 -87] -90]
Test Case:  90 | Input/Output: [[81 81 -58 81] -58]
Test Case:  91 | Input/Output: [[-23 -23 -100 -23] -100]
Test Case:  92 | Input/Output: [[-35 11 11 11] -35]
Test Case:  93 | Input/Output: [[-9 -9 -65 -9] -65]
Test Case:  94 | Input/Output: [[6 6 -40 6] -40]
Test Case:  95 | Input/Output: [[57 57 13 57] 13]
Test Case:  96 | Input/Output: [[15 7 15 15] 7]
Test Case:  97 | Input/Output: [[92 92 92 20] 20]
Test Case:  98 | Input/Output: [[-47 -47 -47 -93] -93]
Test Case:  99 | Input/Output: [[-82 -82 8 -82] -82]
Test Case: 100 | Input/Output: [(25 25 25 25) 25]
Test Case: 101 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 102 | Input/Output: [(72 72 72 72) 72]
Test Case: 103 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 104 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 105 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 106 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 107 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 108 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 109 | Input/Output: [(46 46 46 46) 46]
Test Case: 110 | Input/Output: [(77 77 77 77) 77]
Test Case: 111 | Input/Output: [(7 7 7 7) 7]
Test Case: 112 | Input/Output: [(9 9 9 9) 9]
Test Case: 113 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 114 | Input/Output: [(78 78 78 78) 78]
Test Case: 115 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 116 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 117 | Input/Output: [(70 70 70 70) 70]
Test Case: 118 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 119 | Input/Output: [(82 82 82 82) 82]
Test Case: 120 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 121 | Input/Output: [(46 46 46 46) 46]
Test Case: 122 | Input/Output: [(18 18 18 18) 18]
Test Case: 123 | Input/Output: [(22 22 22 22) 22]
Test Case: 124 | Input/Output: [(65 65 65 65) 65]
Test Case: 125 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 126 | Input/Output: [(60 60 60 60) 60]
Test Case: 127 | Input/Output: [(4 4 4 4) 4]
Test Case: 128 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 129 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 130 | Input/Output: [(81 81 81 81) 81]
Test Case: 131 | Input/Output: [(65 65 65 65) 65]
Test Case: 132 | Input/Output: [(76 76 76 76) 76]
Test Case: 133 | Input/Output: [(69 69 69 69) 69]
Test Case: 134 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 135 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 136 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 137 | Input/Output: [(87 87 87 87) 87]
Test Case: 138 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 139 | Input/Output: [(79 79 79 79) 79]
Test Case: 140 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 141 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 142 | Input/Output: [(45 45 45 45) 45]
Test Case: 143 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 144 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 145 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 146 | Input/Output: [(77 77 77 77) 77]
Test Case: 147 | Input/Output: [(27 27 27 27) 27]
Test Case: 148 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 149 | Input/Output: [(59 59 59 59) 59]
Test Case: 150 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 151 | Input/Output: [(54 54 54 54) 54]
Test Case: 152 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 153 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 154 | Input/Output: [(72 72 72 72) 72]
Test Case: 155 | Input/Output: [(43 43 43 43) 43]
Test Case: 156 | Input/Output: [(6 6 6 6) 6]
Test Case: 157 | Input/Output: [(0 0 0 0) 0]
Test Case: 158 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 159 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 160 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 161 | Input/Output: [(72 72 72 72) 72]
Test Case: 162 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 163 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 164 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 165 | Input/Output: [(63 63 63 63) 63]
Test Case: 166 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 167 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 168 | Input/Output: [(16 16 16 16) 16]
Test Case: 169 | Input/Output: [(86 86 86 86) 86]
Test Case: 170 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 171 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 172 | Input/Output: [(58 58 58 58) 58]
Test Case: 173 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 174 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 175 | Input/Output: [(35 35 35 35) 35]
Test Case: 176 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 177 | Input/Output: [(91 91 91 91) 91]
Test Case: 178 | Input/Output: [(9 9 9 9) 9]
Test Case: 179 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 180 | Input/Output: [(95 95 95 95) 95]
Test Case: 181 | Input/Output: [(57 57 57 57) 57]
Test Case: 182 | Input/Output: [(55 55 55 55) 55]
Test Case: 183 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 184 | Input/Output: [(55 55 55 55) 55]
Test Case: 185 | Input/Output: [(55 55 55 55) 55]
Test Case: 186 | Input/Output: [(41 41 41 41) 41]
Test Case: 187 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 188 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 189 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 190 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 191 | Input/Output: [(61 61 61 61) 61]
Test Case: 192 | Input/Output: [(60 60 60 60) 60]
Test Case: 193 | Input/Output: [(47 47 47 47) 47]
Test Case: 194 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 195 | Input/Output: [(91 91 91 91) 91]
Test Case: 196 | Input/Output: [(19 19 19 19) 19]
Test Case: 197 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 198 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 199 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 200 | Input/Output: [(71 91 64 24) 24]
Test Case: 201 | Input/Output: [(6 81 65 82) 6]
Test Case: 202 | Input/Output: [(14 41 58 90) 14]
Test Case: 203 | Input/Output: [(21 0 31 80) 0]
Test Case: 204 | Input/Output: [(30 94 64 62) 30]
Test Case: 205 | Input/Output: [(58 2 47 18) 2]
Test Case: 206 | Input/Output: [(17 49 23 25) 17]
Test Case: 207 | Input/Output: [(24 5 83 31) 5]
Test Case: 208 | Input/Output: [(46 35 96 32) 32]
Test Case: 209 | Input/Output: [(22 34 88 89) 22]
Test Case: 210 | Input/Output: [(36 65 49 46) 36]
Test Case: 211 | Input/Output: [(12 37 73 65) 12]
Test Case: 212 | Input/Output: [(8 12 59 56) 8]
Test Case: 213 | Input/Output: [(32 60 15 90) 15]
Test Case: 214 | Input/Output: [(41 99 26 4) 4]
Test Case: 215 | Input/Output: [(59 4 34 30) 4]
Test Case: 216 | Input/Output: [(90 45 66 29) 29]
Test Case: 217 | Input/Output: [(71 100 47 37) 37]
Test Case: 218 | Input/Output: [(26 56 24 74) 24]
Test Case: 219 | Input/Output: [(70 88 67 96) 67]
Test Case: 220 | Input/Output: [(98 5 31 17) 5]
Test Case: 221 | Input/Output: [(24 97 16 1) 1]
Test Case: 222 | Input/Output: [(45 61 55 5) 5]
Test Case: 223 | Input/Output: [(60 99 27 12) 12]
Test Case: 224 | Input/Output: [(81 23 24 62) 23]
Test Case: 225 | Input/Output: [(63 51 43 28) 28]
Test Case: 226 | Input/Output: [(67 50 37 23) 23]
Test Case: 227 | Input/Output: [(41 54 17 97) 17]
Test Case: 228 | Input/Output: [(61 45 95 31) 31]
Test Case: 229 | Input/Output: [(6 16 43 60) 6]
Test Case: 230 | Input/Output: [(77 11 21 7) 7]
Test Case: 231 | Input/Output: [(85 10 76 45) 10]
Test Case: 232 | Input/Output: [(8 18 53 27) 8]
Test Case: 233 | Input/Output: [(92 34 99 67) 34]
Test Case: 234 | Input/Output: [(61 90 32 16) 16]
Test Case: 235 | Input/Output: [(89 21 59 88) 21]
Test Case: 236 | Input/Output: [(88 83 44 79) 44]
Test Case: 237 | Input/Output: [(83 100 73 66) 66]
Test Case: 238 | Input/Output: [(85 93 67 57) 57]
Test Case: 239 | Input/Output: [(72 91 35 27) 27]
Test Case: 240 | Input/Output: [(0 0 99 15) 0]
Test Case: 241 | Input/Output: [(90 11 44 40) 11]
Test Case: 242 | Input/Output: [(74 45 44 12) 12]
Test Case: 243 | Input/Output: [(14 68 48 29) 14]
Test Case: 244 | Input/Output: [(92 51 73 14) 14]
Test Case: 245 | Input/Output: [(3 49 78 37) 3]
Test Case: 246 | Input/Output: [(63 30 61 75) 30]
Test Case: 247 | Input/Output: [(94 5 51 100) 5]
Test Case: 248 | Input/Output: [(72 61 32 7) 7]
Test Case: 249 | Input/Output: [(50 15 79 43) 15]
Test Case: 250 | Input/Output: [(96 2 84 86) 2]
Test Case: 251 | Input/Output: [(4 37 99 60) 4]
Test Case: 252 | Input/Output: [(68 95 39 50) 39]
Test Case: 253 | Input/Output: [(47 89 82 78) 47]
Test Case: 254 | Input/Output: [(51 87 97 51) 51]
Test Case: 255 | Input/Output: [(19 72 25 65) 19]
Test Case: 256 | Input/Output: [(69 36 36 43) 36]
Test Case: 257 | Input/Output: [(1 49 3 51) 1]
Test Case: 258 | Input/Output: [(76 89 2 46) 2]
Test Case: 259 | Input/Output: [(73 85 51 68) 51]
Test Case: 260 | Input/Output: [(61 77 89 20) 20]
Test Case: 261 | Input/Output: [(15 40 82 65) 15]
Test Case: 262 | Input/Output: [(88 41 36 50) 36]
Test Case: 263 | Input/Output: [(60 25 37 72) 25]
Test Case: 264 | Input/Output: [(2 84 31 14) 2]
Test Case: 265 | Input/Output: [(54 84 77 38) 38]
Test Case: 266 | Input/Output: [(32 94 3 5) 3]
Test Case: 267 | Input/Output: [(27 30 35 56) 27]
Test Case: 268 | Input/Output: [(98 98 49 63) 49]
Test Case: 269 | Input/Output: [(69 73 80 85) 69]
Test Case: 270 | Input/Output: [(37 39 50 65) 37]
Test Case: 271 | Input/Output: [(25 34 64 72) 25]
Test Case: 272 | Input/Output: [(6 94 8 61) 6]
Test Case: 273 | Input/Output: [(33 9 95 38) 9]
Test Case: 274 | Input/Output: [(73 36 10 10) 10]
Test Case: 275 | Input/Output: [(55 24 90 12) 12]
Test Case: 276 | Input/Output: [(61 53 72 31) 31]
Test Case: 277 | Input/Output: [(61 14 89 10) 10]
Test Case: 278 | Input/Output: [(85 70 19 85) 19]
Test Case: 279 | Input/Output: [(64 55 95 80) 55]
Test Case: 280 | Input/Output: [(87 25 41 92) 25]
Test Case: 281 | Input/Output: [(65 21 33 66) 21]
Test Case: 282 | Input/Output: [(13 57 72 56) 13]
Test Case: 283 | Input/Output: [(4 59 4 12) 4]
Test Case: 284 | Input/Output: [(45 9 94 71) 9]
Test Case: 285 | Input/Output: [(81 78 32 29) 29]
Test Case: 286 | Input/Output: [(36 17 95 48) 17]
Test Case: 287 | Input/Output: [(64 41 50 12) 12]
Test Case: 288 | Input/Output: [(69 82 68 1) 1]
Test Case: 289 | Input/Output: [(52 2 95 9) 2]
Test Case: 290 | Input/Output: [(47 94 99 99) 47]
Test Case: 291 | Input/Output: [(52 92 56 18) 18]
Test Case: 292 | Input/Output: [(57 11 57 78) 11]
Test Case: 293 | Input/Output: [(50 98 2 85) 2]
Test Case: 294 | Input/Output: [(38 0 83 45) 0]
Test Case: 295 | Input/Output: [(45 38 91 8) 8]
Test Case: 296 | Input/Output: [(23 8 44 9) 8]
Test Case: 297 | Input/Output: [(28 75 70 9) 9]
Test Case: 298 | Input/Output: [(30 6 46 55) 6]
Test Case: 299 | Input/Output: [(59 19 37 0) 0]
Test Case: 300 | Input/Output: [(83 71 35 25) 25]
Test Case: 301 | Input/Output: [(2 74 65 97) 2]
Test Case: 302 | Input/Output: [(91 23 33 40) 23]
Test Case: 303 | Input/Output: [(15 9 68 27) 9]
Test Case: 304 | Input/Output: [(55 84 35 33) 33]
Test Case: 305 | Input/Output: [(42 34 66 75) 34]
Test Case: 306 | Input/Output: [(33 79 62 73) 33]
Test Case: 307 | Input/Output: [(2 5 38 38) 2]
Test Case: 308 | Input/Output: [(87 65 87 74) 65]
Test Case: 309 | Input/Output: [(69 74 94 67) 67]
Test Case: 310 | Input/Output: [(29 2 0 15) 0]
Test Case: 311 | Input/Output: [(62 97 73 61) 61]
Test Case: 312 | Input/Output: [(92 44 24 92) 24]
Test Case: 313 | Input/Output: [(30 9 12 43) 9]
Test Case: 314 | Input/Output: [(65 12 87 32) 12]
Test Case: 315 | Input/Output: [(32 77 96 17) 17]
Test Case: 316 | Input/Output: [(88 36 11 85) 11]
Test Case: 317 | Input/Output: [(16 6 33 74) 6]
Test Case: 318 | Input/Output: [(30 90 89 4) 4]
Test Case: 319 | Input/Output: [(55 48 85 25) 25]
Test Case: 320 | Input/Output: [(33 73 58 94) 33]
Test Case: 321 | Input/Output: [(77 83 96 18) 18]
Test Case: 322 | Input/Output: [(72 1 12 41) 1]
Test Case: 323 | Input/Output: [(37 47 23 57) 23]
Test Case: 324 | Input/Output: [(55 36 1 94) 1]
Test Case: 325 | Input/Output: [(98 44 9 46) 9]
Test Case: 326 | Input/Output: [(28 61 27 16) 16]
Test Case: 327 | Input/Output: [(30 82 72 33) 30]
Test Case: 328 | Input/Output: [(13 67 43 88) 13]
Test Case: 329 | Input/Output: [(12 99 7 0) 0]
Test Case: 330 | Input/Output: [(24 49 19 72) 19]
Test Case: 331 | Input/Output: [(8 23 7 75) 7]
Test Case: 332 | Input/Output: [(23 85 46 64) 23]
Test Case: 333 | Input/Output: [(75 73 88 100) 73]
Test Case: 334 | Input/Output: [(66 23 91 4) 4]
Test Case: 335 | Input/Output: [(20 4 66 85) 4]
Test Case: 336 | Input/Output: [(59 87 18 63) 18]
Test Case: 337 | Input/Output: [(49 43 65 11) 11]
Test Case: 338 | Input/Output: [(57 1 29 29) 1]
Test Case: 339 | Input/Output: [(58 62 44 29) 29]
Test Case: 340 | Input/Output: [(70 34 86 22) 22]
Test Case: 341 | Input/Output: [(70 31 23 8) 8]
Test Case: 342 | Input/Output: [(51 55 38 23) 23]
Test Case: 343 | Input/Output: [(35 32 24 83) 24]
Test Case: 344 | Input/Output: [(67 29 72 73) 29]
Test Case: 345 | Input/Output: [(67 52 71 87) 52]
Test Case: 346 | Input/Output: [(39 45 81 34) 34]
Test Case: 347 | Input/Output: [(75 76 47 6) 6]
Test Case: 348 | Input/Output: [(70 83 29 46) 29]
Test Case: 349 | Input/Output: [(57 72 11 65) 11]
Test Case: 350 | Input/Output: [(54 58 98 5) 5]
Test Case: 351 | Input/Output: [(5 3 19 62) 3]
Test Case: 352 | Input/Output: [(16 16 91 75) 16]
Test Case: 353 | Input/Output: [(87 22 61 84) 22]
Test Case: 354 | Input/Output: [(25 33 66 11) 11]
Test Case: 355 | Input/Output: [(53 56 97 14) 14]
Test Case: 356 | Input/Output: [(87 2 94 72) 2]
Test Case: 357 | Input/Output: [(99 6 76 49) 6]
Test Case: 358 | Input/Output: [(32 15 18 81) 15]
Test Case: 359 | Input/Output: [(16 58 53 52) 16]
Test Case: 360 | Input/Output: [(69 3 98 65) 3]
Test Case: 361 | Input/Output: [(31 71 13 88) 13]
Test Case: 362 | Input/Output: [(61 91 16 25) 16]
Test Case: 363 | Input/Output: [(46 100 51 59) 46]
Test Case: 364 | Input/Output: [(5 98 55 100) 5]
Test Case: 365 | Input/Output: [(26 81 95 66) 26]
Test Case: 366 | Input/Output: [(33 20 83 39) 20]
Test Case: 367 | Input/Output: [(24 72 39 17) 17]
Test Case: 368 | Input/Output: [(88 25 38 60) 25]
Test Case: 369 | Input/Output: [(5 16 5 20) 5]
Test Case: 370 | Input/Output: [(12 13 31 91) 12]
Test Case: 371 | Input/Output: [(86 77 34 34) 34]
Test Case: 372 | Input/Output: [(25 67 90 20) 20]
Test Case: 373 | Input/Output: [(68 88 10 4) 4]
Test Case: 374 | Input/Output: [(57 38 67 80) 38]
Test Case: 375 | Input/Output: [(5 14 10 43) 5]
Test Case: 376 | Input/Output: [(76 34 88 20) 20]
Test Case: 377 | Input/Output: [(82 85 19 77) 19]
Test Case: 378 | Input/Output: [(98 89 70 54) 54]
Test Case: 379 | Input/Output: [(18 68 30 68) 18]
Test Case: 380 | Input/Output: [(83 45 2 61) 2]
Test Case: 381 | Input/Output: [(37 42 88 73) 37]
Test Case: 382 | Input/Output: [(62 87 38 1) 1]
Test Case: 383 | Input/Output: [(95 14 94 43) 14]
Test Case: 384 | Input/Output: [(28 6 90 99) 6]
Test Case: 385 | Input/Output: [(65 29 19 39) 19]
Test Case: 386 | Input/Output: [(53 86 41 84) 41]
Test Case: 387 | Input/Output: [(76 27 54 65) 27]
Test Case: 388 | Input/Output: [(42 100 21 75) 21]
Test Case: 389 | Input/Output: [(32 67 57 72) 32]
Test Case: 390 | Input/Output: [(0 6 19 24) 0]
Test Case: 391 | Input/Output: [(3 39 97 58) 3]
Test Case: 392 | Input/Output: [(2 38 97 50) 2]
Test Case: 393 | Input/Output: [(13 2 24 61) 2]
Test Case: 394 | Input/Output: [(24 98 74 36) 24]
Test Case: 395 | Input/Output: [(89 64 32 88) 32]
Test Case: 396 | Input/Output: [(1 67 0 69) 0]
Test Case: 397 | Input/Output: [(16 90 19 61) 16]
Test Case: 398 | Input/Output: [(59 5 78 41) 5]
Test Case: 399 | Input/Output: [(30 18 88 29) 18]
Test Case: 400 | Input/Output: [(-99 -19 93 -48) -99]
Test Case: 401 | Input/Output: [(-55 5 83 -6) -55]
Test Case: 402 | Input/Output: [(-78 -75 -96 -97) -97]
Test Case: 403 | Input/Output: [(42 73 -19 95) -19]
Test Case: 404 | Input/Output: [(-47 62 -46 34) -47]
Test Case: 405 | Input/Output: [(-50 78 26 -31) -50]
Test Case: 406 | Input/Output: [(76 92 32 -22) -22]
Test Case: 407 | Input/Output: [(-25 -94 -74 86) -94]
Test Case: 408 | Input/Output: [(-33 -75 69 82) -75]
Test Case: 409 | Input/Output: [(-25 -32 89 -16) -32]
Test Case: 410 | Input/Output: [(93 82 68 81) 68]
Test Case: 411 | Input/Output: [(24 -67 99 54) -67]
Test Case: 412 | Input/Output: [(55 -11 -86 86) -86]
Test Case: 413 | Input/Output: [(21 -70 83 89) -70]
Test Case: 414 | Input/Output: [(-44 30 -20 -10) -44]
Test Case: 415 | Input/Output: [(-82 -8 -48 73) -82]
Test Case: 416 | Input/Output: [(-74 37 62 -1) -74]
Test Case: 417 | Input/Output: [(-21 19 2 -3) -21]
Test Case: 418 | Input/Output: [(48 -77 -30 -55) -77]
Test Case: 419 | Input/Output: [(-91 -86 -91 60) -91]
Test Case: 420 | Input/Output: [(-66 -9 50 63) -66]
Test Case: 421 | Input/Output: [(25 36 -84 23) -84]
Test Case: 422 | Input/Output: [(23 86 -91 62) -91]
Test Case: 423 | Input/Output: [(78 41 22 61) 22]
Test Case: 424 | Input/Output: [(-87 -25 -10 -90) -90]
Test Case: 425 | Input/Output: [(89 -100 -70 -13) -100]
Test Case: 426 | Input/Output: [(-53 -56 -2 -39) -56]
Test Case: 427 | Input/Output: [(45 -82 75 -74) -82]
Test Case: 428 | Input/Output: [(57 1 62 54) 1]
Test Case: 429 | Input/Output: [(16 -49 55 17) -49]
Test Case: 430 | Input/Output: [(37 -87 98 0) -87]
Test Case: 431 | Input/Output: [(27 -98 -12 -76) -98]
Test Case: 432 | Input/Output: [(92 58 60 -6) -6]
Test Case: 433 | Input/Output: [(31 -3 45 87) -3]
Test Case: 434 | Input/Output: [(-46 -89 -24 -94) -94]
Test Case: 435 | Input/Output: [(-66 36 67 -86) -86]
Test Case: 436 | Input/Output: [(-13 20 -54 3) -54]
Test Case: 437 | Input/Output: [(62 19 39 -55) -55]
Test Case: 438 | Input/Output: [(-27 14 -64 -98) -98]
Test Case: 439 | Input/Output: [(-38 -4 -73 49) -73]
Test Case: 440 | Input/Output: [(-42 -8 39 -76) -76]
Test Case: 441 | Input/Output: [(8 60 -24 79) -24]
Test Case: 442 | Input/Output: [(16 16 -36 -56) -56]
Test Case: 443 | Input/Output: [(-61 30 36 -45) -61]
Test Case: 444 | Input/Output: [(-91 85 -75 45) -91]
Test Case: 445 | Input/Output: [(-66 -51 82 -52) -66]
Test Case: 446 | Input/Output: [(-65 -92 89 -89) -92]
Test Case: 447 | Input/Output: [(-34 -58 -46 -22) -58]
Test Case: 448 | Input/Output: [(-56 83 -32 -11) -56]
Test Case: 449 | Input/Output: [(26 -52 -44 77) -52]
Test Case: 450 | Input/Output: [(32 35 -89 -66) -89]
Test Case: 451 | Input/Output: [(97 67 72 -71) -71]
Test Case: 452 | Input/Output: [(-11 -62 -11 21) -62]
Test Case: 453 | Input/Output: [(16 -24 17 -40) -40]
Test Case: 454 | Input/Output: [(0 79 49 -14) -14]
Test Case: 455 | Input/Output: [(-91 77 -45 81) -91]
Test Case: 456 | Input/Output: [(-93 -51 -28 -64) -93]
Test Case: 457 | Input/Output: [(-18 96 -54 -65) -65]
Test Case: 458 | Input/Output: [(-44 -40 -47 -48) -48]
Test Case: 459 | Input/Output: [(-78 24 -41 -13) -78]
Test Case: 460 | Input/Output: [(62 15 -27 -94) -94]
Test Case: 461 | Input/Output: [(26 100 6 28) 6]
Test Case: 462 | Input/Output: [(-90 -98 19 -13) -98]
Test Case: 463 | Input/Output: [(55 -55 -77 -37) -77]
Test Case: 464 | Input/Output: [(16 -33 87 14) -33]
Test Case: 465 | Input/Output: [(21 -60 16 73) -60]
Test Case: 466 | Input/Output: [(34 66 -11 54) -11]
Test Case: 467 | Input/Output: [(-24 -9 -1 36) -24]
Test Case: 468 | Input/Output: [(-6 -88 -68 -4) -88]
Test Case: 469 | Input/Output: [(-42 74 56 91) -42]
Test Case: 470 | Input/Output: [(17 43 -20 59) -20]
Test Case: 471 | Input/Output: [(80 46 -62 58) -62]
Test Case: 472 | Input/Output: [(14 53 -89 15) -89]
Test Case: 473 | Input/Output: [(-9 -40 -75 100) -75]
Test Case: 474 | Input/Output: [(38 -39 53 -60) -60]
Test Case: 475 | Input/Output: [(-14 -58 -56 9) -58]
Test Case: 476 | Input/Output: [(89 -85 95 1) -85]
Test Case: 477 | Input/Output: [(-48 49 58 -92) -92]
Test Case: 478 | Input/Output: [(85 13 -71 -32) -71]
Test Case: 479 | Input/Output: [(-71 27 -75 96) -75]
Test Case: 480 | Input/Output: [(-95 -8 81 45) -95]
Test Case: 481 | Input/Output: [(85 46 -75 40) -75]
Test Case: 482 | Input/Output: [(-56 -40 95 -43) -56]
Test Case: 483 | Input/Output: [(-47 -81 -65 -78) -81]
Test Case: 484 | Input/Output: [(36 81 -50 -73) -73]
Test Case: 485 | Input/Output: [(-18 22 -37 34) -37]
Test Case: 486 | Input/Output: [(-75 -5 95 11) -75]
Test Case: 487 | Input/Output: [(-98 13 -15 13) -98]
Test Case: 488 | Input/Output: [(6 -85 -40 -7) -85]
Test Case: 489 | Input/Output: [(-68 59 -71 -33) -71]
Test Case: 490 | Input/Output: [(-33 -95 -66 49) -95]
Test Case: 491 | Input/Output: [(27 48 55 -18) -18]
Test Case: 492 | Input/Output: [(-48 55 63 58) -48]
Test Case: 493 | Input/Output: [(78 -8 -67 96) -67]
Test Case: 494 | Input/Output: [(35 -59 -61 82) -61]
Test Case: 495 | Input/Output: [(99 -98 74 -74) -98]
Test Case: 496 | Input/Output: [(11 46 -3 -29) -29]
Test Case: 497 | Input/Output: [(-85 5 -84 84) -85]
Test Case: 498 | Input/Output: [(75 -41 -69 60) -69]
Test Case: 499 | Input/Output: [(-95 79 -71 -1) -95]
Test Case: 500 | Input/Output: [(-28 91 12 -71) -71]
Test Case: 501 | Input/Output: [(13 99 88 99) 13]
Test Case: 502 | Input/Output: [(-24 69 41 20) -24]
Test Case: 503 | Input/Output: [(-9 -41 74 37) -41]
Test Case: 504 | Input/Output: [(50 65 -58 0) -58]
Test Case: 505 | Input/Output: [(37 -86 -40 3) -86]
Test Case: 506 | Input/Output: [(15 27 -25 -41) -41]
Test Case: 507 | Input/Output: [(17 16 -43 50) -43]
Test Case: 508 | Input/Output: [(63 -41 64 47) -41]
Test Case: 509 | Input/Output: [(22 -18 98 58) -18]
Test Case: 510 | Input/Output: [(81 44 -68 80) -68]
Test Case: 511 | Input/Output: [(3 87 61 92) 3]
Test Case: 512 | Input/Output: [(71 -83 -82 80) -83]
Test Case: 513 | Input/Output: [(31 -91 -62 -70) -91]
Test Case: 514 | Input/Output: [(-51 27 -81 -52) -81]
Test Case: 515 | Input/Output: [(-61 32 -21 -46) -61]
Test Case: 516 | Input/Output: [(-35 -56 -57 100) -57]
Test Case: 517 | Input/Output: [(12 -61 -36 -75) -75]
Test Case: 518 | Input/Output: [(-6 -41 63 -14) -41]
Test Case: 519 | Input/Output: [(34 -72 -87 41) -87]
Test Case: 520 | Input/Output: [(62 70 -36 72) -36]
Test Case: 521 | Input/Output: [(-63 91 -99 -70) -99]
Test Case: 522 | Input/Output: [(-54 -15 29 -79) -79]
Test Case: 523 | Input/Output: [(35 1 -80 -97) -97]
Test Case: 524 | Input/Output: [(-93 30 -5 -5) -93]
Test Case: 525 | Input/Output: [(-4 97 13 89) -4]
Test Case: 526 | Input/Output: [(37 -93 -56 -33) -93]
Test Case: 527 | Input/Output: [(-54 87 -20 16) -54]
Test Case: 528 | Input/Output: [(35 16 -5 -85) -85]
Test Case: 529 | Input/Output: [(-79 92 72 -24) -79]
Test Case: 530 | Input/Output: [(76 25 -24 -72) -72]
Test Case: 531 | Input/Output: [(-44 65 -14 65) -44]
Test Case: 532 | Input/Output: [(-65 15 30 -43) -65]
Test Case: 533 | Input/Output: [(79 -75 40 -59) -75]
Test Case: 534 | Input/Output: [(-63 91 -25 54) -63]
Test Case: 535 | Input/Output: [(-62 1 -83 -74) -83]
Test Case: 536 | Input/Output: [(40 -58 87 -89) -89]
Test Case: 537 | Input/Output: [(98 -42 -7 15) -42]
Test Case: 538 | Input/Output: [(-9 -87 -20 -77) -87]
Test Case: 539 | Input/Output: [(-13 -58 -84 56) -84]
Test Case: 540 | Input/Output: [(96 92 -66 -87) -87]
Test Case: 541 | Input/Output: [(-74 -78 -91 -98) -98]
Test Case: 542 | Input/Output: [(-53 -89 -14 -93) -93]
Test Case: 543 | Input/Output: [(-96 45 64 -67) -96]
Test Case: 544 | Input/Output: [(54 90 38 48) 38]
Test Case: 545 | Input/Output: [(-81 4 -48 27) -81]
Test Case: 546 | Input/Output: [(51 -89 -11 -84) -89]
Test Case: 547 | Input/Output: [(93 3 36 31) 3]
Test Case: 548 | Input/Output: [(-28 74 54 -32) -32]
Test Case: 549 | Input/Output: [(1 -91 94 -16) -91]
Test Case: 550 | Input/Output: [(-60 39 -8 77) -60]
Test Case: 551 | Input/Output: [(-74 -51 3 -94) -94]
Test Case: 552 | Input/Output: [(20 -19 -21 -21) -21]
Test Case: 553 | Input/Output: [(100 9 -42 22) -42]
Test Case: 554 | Input/Output: [(-15 58 91 81) -15]
Test Case: 555 | Input/Output: [(-18 -7 29 -97) -97]
Test Case: 556 | Input/Output: [(-29 -52 88 -2) -52]
Test Case: 557 | Input/Output: [(-32 44 -23 50) -32]
Test Case: 558 | Input/Output: [(-43 97 -67 69) -67]
Test Case: 559 | Input/Output: [(79 -53 36 15) -53]
Test Case: 560 | Input/Output: [(-51 -86 39 -94) -94]
Test Case: 561 | Input/Output: [(73 79 -98 -44) -98]
Test Case: 562 | Input/Output: [(11 67 51 19) 11]
Test Case: 563 | Input/Output: [(20 -23 75 -76) -76]
Test Case: 564 | Input/Output: [(12 -16 54 -37) -37]
Test Case: 565 | Input/Output: [(-3 -45 -57 82) -57]
Test Case: 566 | Input/Output: [(45 -94 -16 64) -94]
Test Case: 567 | Input/Output: [(-67 -98 23 56) -98]
Test Case: 568 | Input/Output: [(81 74 -39 1) -39]
Test Case: 569 | Input/Output: [(-83 62 21 68) -83]
Test Case: 570 | Input/Output: [(83 -19 -35 -57) -57]
Test Case: 571 | Input/Output: [(85 14 88 -35) -35]
Test Case: 572 | Input/Output: [(-80 54 -52 -87) -87]
Test Case: 573 | Input/Output: [(45 -35 38 -87) -87]
Test Case: 574 | Input/Output: [(1 33 -17 41) -17]
Test Case: 575 | Input/Output: [(60 59 -67 86) -67]
Test Case: 576 | Input/Output: [(-78 33 97 -58) -78]
Test Case: 577 | Input/Output: [(11 -68 57 -53) -68]
Test Case: 578 | Input/Output: [(-46 89 -48 -41) -48]
Test Case: 579 | Input/Output: [(-26 94 73 4) -26]
Test Case: 580 | Input/Output: [(-23 -95 -55 -98) -98]
Test Case: 581 | Input/Output: [(-58 32 100 -28) -58]
Test Case: 582 | Input/Output: [(81 -17 -18 10) -18]
Test Case: 583 | Input/Output: [(30 36 64 -83) -83]
Test Case: 584 | Input/Output: [(-35 -4 -41 54) -41]
Test Case: 585 | Input/Output: [(-16 25 70 2) -16]
Test Case: 586 | Input/Output: [(75 -43 67 -46) -46]
Test Case: 587 | Input/Output: [(-66 66 97 59) -66]
Test Case: 588 | Input/Output: [(68 -92 -71 -60) -92]
Test Case: 589 | Input/Output: [(19 17 -68 79) -68]
Test Case: 590 | Input/Output: [(-47 -97 -42 80) -97]
Test Case: 591 | Input/Output: [(-29 67 3 -12) -29]
Test Case: 592 | Input/Output: [(-9 83 -96 1) -96]
Test Case: 593 | Input/Output: [(-98 -96 90 76) -98]
Test Case: 594 | Input/Output: [(-44 -19 -80 -75) -80]
Test Case: 595 | Input/Output: [(-94 -40 -50 -98) -98]
Test Case: 596 | Input/Output: [(88 -82 86 -35) -82]
Test Case: 597 | Input/Output: [(-59 51 -31 -51) -59]
Test Case: 598 | Input/Output: [(-28 -73 27 24) -73]
Test Case: 599 | Input/Output: [(-76 -16 -13 -23) -76]
Test Case: 600 | Input/Output: [(32 82 12 41) 12]
Test Case: 601 | Input/Output: [(3 44 -17 -26) -26]
Test Case: 602 | Input/Output: [(-74 -48 -4 96) -74]
Test Case: 603 | Input/Output: [(44 -65 46 -73) -73]
Test Case: 604 | Input/Output: [(-55 -74 10 90) -74]
Test Case: 605 | Input/Output: [(57 57 82 -41) -41]
Test Case: 606 | Input/Output: [(89 93 -88 -56) -88]
Test Case: 607 | Input/Output: [(-32 46 7 25) -32]
Test Case: 608 | Input/Output: [(32 78 -67 50) -67]
Test Case: 609 | Input/Output: [(61 -48 92 -73) -73]
Test Case: 610 | Input/Output: [(44 -26 -24 89) -26]
Test Case: 611 | Input/Output: [(50 -47 59 -73) -73]
Test Case: 612 | Input/Output: [(76 56 47 13) 13]
Test Case: 613 | Input/Output: [(75 -74 -16 -72) -74]
Test Case: 614 | Input/Output: [(-50 -36 80 -58) -58]
Test Case: 615 | Input/Output: [(-3 -11 -94 85) -94]
Test Case: 616 | Input/Output: [(-67 78 42 21) -67]
Test Case: 617 | Input/Output: [(-22 38 -92 50) -92]
Test Case: 618 | Input/Output: [(-82 56 -94 -91) -94]
Test Case: 619 | Input/Output: [(13 -100 -27 -88) -100]
Test Case: 620 | Input/Output: [(-8 85 55 89) -8]
Test Case: 621 | Input/Output: [(-86 97 -94 38) -94]
Test Case: 622 | Input/Output: [(-79 -82 -29 40) -82]
Test Case: 623 | Input/Output: [(-15 73 61 -18) -18]
Test Case: 624 | Input/Output: [(-83 -79 8 95) -83]
Test Case: 625 | Input/Output: [(68 -81 65 15) -81]
Test Case: 626 | Input/Output: [(-31 -48 1 -54) -54]
Test Case: 627 | Input/Output: [(-97 -43 83 19) -97]
Test Case: 628 | Input/Output: [(5 -19 95 30) -19]
Test Case: 629 | Input/Output: [(59 -68 57 51) -68]
Test Case: 630 | Input/Output: [(-85 -65 -34 -22) -85]
Test Case: 631 | Input/Output: [(-51 -16 2 82) -51]
Test Case: 632 | Input/Output: [(98 -69 -55 95) -69]
Test Case: 633 | Input/Output: [(55 -84 57 -81) -84]
Test Case: 634 | Input/Output: [(-72 26 -64 30) -72]
Test Case: 635 | Input/Output: [(96 -83 53 47) -83]
Test Case: 636 | Input/Output: [(57 7 4 -57) -57]
Test Case: 637 | Input/Output: [(96 30 70 -98) -98]
Test Case: 638 | Input/Output: [(30 72 83 40) 30]
Test Case: 639 | Input/Output: [(-50 20 73 -49) -50]
Test Case: 640 | Input/Output: [(82 18 4 31) 4]
Test Case: 641 | Input/Output: [(21 -49 81 15) -49]
Test Case: 642 | Input/Output: [(51 -65 67 -47) -65]
Test Case: 643 | Input/Output: [(9 0 6 -49) -49]
Test Case: 644 | Input/Output: [(97 35 -93 95) -93]
Test Case: 645 | Input/Output: [(-41 -73 34 71) -73]
Test Case: 646 | Input/Output: [(-10 -89 -66 85) -89]
Test Case: 647 | Input/Output: [(-30 -18 -38 4) -38]
Test Case: 648 | Input/Output: [(71 20 97 54) 20]
Test Case: 649 | Input/Output: [(-54 59 -59 63) -59]
Test Case: 650 | Input/Output: [(-64 -42 -54 -58) -64]
Test Case: 651 | Input/Output: [(-13 43 -30 -6) -30]
Test Case: 652 | Input/Output: [(-78 56 33 -32) -78]
Test Case: 653 | Input/Output: [(-14 -16 57 -39) -39]
Test Case: 654 | Input/Output: [(-79 48 -79 -29) -79]
Test Case: 655 | Input/Output: [(48 53 -78 -87) -87]
Test Case: 656 | Input/Output: [(81 -15 62 -38) -38]
Test Case: 657 | Input/Output: [(32 -61 -6 -51) -61]
Test Case: 658 | Input/Output: [(-44 80 67 -33) -44]
Test Case: 659 | Input/Output: [(-34 -39 -41 100) -41]
Test Case: 660 | Input/Output: [(-3 -41 19 -88) -88]
Test Case: 661 | Input/Output: [(10 92 -7 -30) -30]
Test Case: 662 | Input/Output: [(-5 -87 30 -31) -87]
Test Case: 663 | Input/Output: [(-32 -15 76 -14) -32]
Test Case: 664 | Input/Output: [(-42 -56 -46 85) -56]
Test Case: 665 | Input/Output: [(-5 -84 -3 -12) -84]
Test Case: 666 | Input/Output: [(82 22 -37 -2) -37]
Test Case: 667 | Input/Output: [(-73 15 89 96) -73]
Test Case: 668 | Input/Output: [(19 -33 -49 -48) -49]
Test Case: 669 | Input/Output: [(57 57 -41 49) -41]
Test Case: 670 | Input/Output: [(-38 -95 -66 63) -95]
Test Case: 671 | Input/Output: [(-65 -34 14 10) -65]
Test Case: 672 | Input/Output: [(49 35 23 -73) -73]
Test Case: 673 | Input/Output: [(14 21 15 -37) -37]
Test Case: 674 | Input/Output: [(100 8 -75 88) -75]
Test Case: 675 | Input/Output: [(40 -67 6 52) -67]
Test Case: 676 | Input/Output: [(6 73 -78 60) -78]
Test Case: 677 | Input/Output: [(64 -33 -7 -32) -33]
Test Case: 678 | Input/Output: [(2 -32 -67 82) -67]
Test Case: 679 | Input/Output: [(-18 98 -32 53) -32]
Test Case: 680 | Input/Output: [(29 -14 65 30) -14]
Test Case: 681 | Input/Output: [(-56 -47 -65 76) -65]
Test Case: 682 | Input/Output: [(0 -68 59 -94) -94]
Test Case: 683 | Input/Output: [(11 -67 75 -32) -67]
Test Case: 684 | Input/Output: [(-65 -60 51 -6) -65]
Test Case: 685 | Input/Output: [(12 52 -50 7) -50]
Test Case: 686 | Input/Output: [(-31 20 53 98) -31]
Test Case: 687 | Input/Output: [(-57 -3 60 90) -57]
Test Case: 688 | Input/Output: [(-8 -69 -55 12) -69]
Test Case: 689 | Input/Output: [(3 48 -1 6) -1]
Test Case: 690 | Input/Output: [(21 90 -20 -55) -55]
Test Case: 691 | Input/Output: [(40 -4 -64 55) -64]
Test Case: 692 | Input/Output: [(-59 50 -93 31) -93]
Test Case: 693 | Input/Output: [(16 68 -96 -53) -96]
Test Case: 694 | Input/Output: [(-35 -48 67 -11) -48]
Test Case: 695 | Input/Output: [(-43 88 21 39) -43]
Test Case: 696 | Input/Output: [(14 -34 -42 -20) -42]
Test Case: 697 | Input/Output: [(72 88 13 42) 13]
Test Case: 698 | Input/Output: [(-19 85 -32 92) -32]
Test Case: 699 | Input/Output: [(42 -69 -10 -49) -69]
Test Case: 700 | Input/Output: [(-53 -60 -23 50) -60]
Test Case: 701 | Input/Output: [(85 -15 -57 -80) -80]
Test Case: 702 | Input/Output: [(-98 -21 43 7) -98]
Test Case: 703 | Input/Output: [(98 -36 -36 -15) -36]
Test Case: 704 | Input/Output: [(-52 -93 -96 5) -96]
Test Case: 705 | Input/Output: [(-65 10 61 -54) -65]
Test Case: 706 | Input/Output: [(17 -72 48 -63) -72]
Test Case: 707 | Input/Output: [(23 84 37 94) 23]
Test Case: 708 | Input/Output: [(-10 87 -28 78) -28]
Test Case: 709 | Input/Output: [(-98 -82 76 -26) -98]
Test Case: 710 | Input/Output: [(-99 73 -1 -88) -99]
Test Case: 711 | Input/Output: [(-28 -77 -60 -3) -77]
Test Case: 712 | Input/Output: [(-70 -42 -1 19) -70]
Test Case: 713 | Input/Output: [(29 -22 -48 -63) -63]
Test Case: 714 | Input/Output: [(3 -37 80 -3) -37]
Test Case: 715 | Input/Output: [(11 41 -28 -46) -46]
Test Case: 716 | Input/Output: [(-7 36 -83 -94) -94]
Test Case: 717 | Input/Output: [(82 -51 91 -98) -98]
Test Case: 718 | Input/Output: [(58 81 -96 29) -96]
Test Case: 719 | Input/Output: [(-98 -50 -31 98) -98]
Test Case: 720 | Input/Output: [(42 68 72 -82) -82]
Test Case: 721 | Input/Output: [(77 87 -4 -7) -7]
Test Case: 722 | Input/Output: [(31 -42 90 50) -42]
Test Case: 723 | Input/Output: [(34 -70 -100 -16) -100]
Test Case: 724 | Input/Output: [(94 82 -28 -94) -94]
Test Case: 725 | Input/Output: [(20 -53 -4 -43) -53]
Test Case: 726 | Input/Output: [(79 2 38 88) 2]
Test Case: 727 | Input/Output: [(13 -16 89 -30) -30]
Test Case: 728 | Input/Output: [(87 10 -2 2) -2]
Test Case: 729 | Input/Output: [(39 6 -63 37) -63]
Test Case: 730 | Input/Output: [(39 28 -96 -51) -96]
Test Case: 731 | Input/Output: [(68 93 82 -21) -21]
Test Case: 732 | Input/Output: [(-63 -45 51 14) -63]
Test Case: 733 | Input/Output: [(57 36 -100 -63) -100]
Test Case: 734 | Input/Output: [(-84 94 84 -7) -84]
Test Case: 735 | Input/Output: [(5 92 13 13) 5]
Test Case: 736 | Input/Output: [(-53 -4 -91 -37) -91]
Test Case: 737 | Input/Output: [(90 -92 52 -78) -92]
Test Case: 738 | Input/Output: [(-62 -68 -72 -56) -72]
Test Case: 739 | Input/Output: [(-93 -57 -77 27) -93]
Test Case: 740 | Input/Output: [(63 93 -13 -19) -19]
Test Case: 741 | Input/Output: [(70 94 69 -36) -36]
Test Case: 742 | Input/Output: [(-19 -34 -66 99) -66]
Test Case: 743 | Input/Output: [(28 29 27 -67) -67]
Test Case: 744 | Input/Output: [(66 61 68 33) 33]
Test Case: 745 | Input/Output: [(-56 52 25 -58) -58]
Test Case: 746 | Input/Output: [(58 -5 -79 -93) -93]
Test Case: 747 | Input/Output: [(-89 -97 -41 68) -97]
Test Case: 748 | Input/Output: [(-41 -54 63 -57) -57]
Test Case: 749 | Input/Output: [(-97 -73 89 55) -97]
Test Case: 750 | Input/Output: [(-10 -8 67 66) -10]
Test Case: 751 | Input/Output: [(84 55 -57 -45) -57]
Test Case: 752 | Input/Output: [(-94 -15 69 -37) -94]
Test Case: 753 | Input/Output: [(37 -24 71 7) -24]
Test Case: 754 | Input/Output: [(-30 69 82 17) -30]
Test Case: 755 | Input/Output: [(43 -74 52 76) -74]
Test Case: 756 | Input/Output: [(12 -70 78 47) -70]
Test Case: 757 | Input/Output: [(37 27 60 -39) -39]
Test Case: 758 | Input/Output: [(79 64 53 -72) -72]
Test Case: 759 | Input/Output: [(-36 -26 -37 56) -37]
Test Case: 760 | Input/Output: [(-24 24 -99 70) -99]
Test Case: 761 | Input/Output: [(17 55 38 -81) -81]
Test Case: 762 | Input/Output: [(-71 -57 -80 12) -80]
Test Case: 763 | Input/Output: [(-32 27 -94 28) -94]
Test Case: 764 | Input/Output: [(-33 98 5 88) -33]
Test Case: 765 | Input/Output: [(11 31 97 100) 11]
Test Case: 766 | Input/Output: [(10 62 -21 -96) -96]
Test Case: 767 | Input/Output: [(-7 27 48 -84) -84]
Test Case: 768 | Input/Output: [(-82 71 -18 -65) -82]
Test Case: 769 | Input/Output: [(-87 -98 38 26) -98]
Test Case: 770 | Input/Output: [(-97 -88 71 88) -97]
Test Case: 771 | Input/Output: [(18 91 -62 -15) -62]
Test Case: 772 | Input/Output: [(-40 68 1 -22) -40]
Test Case: 773 | Input/Output: [(56 95 24 -92) -92]
Test Case: 774 | Input/Output: [(32 9 -46 85) -46]
Test Case: 775 | Input/Output: [(58 -55 -53 -66) -66]
Test Case: 776 | Input/Output: [(-49 -67 -81 -93) -93]
Test Case: 777 | Input/Output: [(-86 97 24 -48) -86]
Test Case: 778 | Input/Output: [(-66 -85 18 -14) -85]
Test Case: 779 | Input/Output: [(89 32 -58 -13) -58]
Test Case: 780 | Input/Output: [(23 46 23 69) 23]
Test Case: 781 | Input/Output: [(-41 -100 99 -87) -100]
Test Case: 782 | Input/Output: [(-26 89 -25 21) -26]
Test Case: 783 | Input/Output: [(11 -28 7 79) -28]
Test Case: 784 | Input/Output: [(94 -56 -18 -10) -56]
Test Case: 785 | Input/Output: [(88 -63 -81 50) -81]
Test Case: 786 | Input/Output: [(25 -52 64 -52) -52]
Test Case: 787 | Input/Output: [(69 41 66 -14) -14]
Test Case: 788 | Input/Output: [(-7 -19 51 1) -19]
Test Case: 789 | Input/Output: [(83 -21 55 -23) -23]
Test Case: 790 | Input/Output: [(96 84 -23 -57) -57]
Test Case: 791 | Input/Output: [(40 -60 -54 21) -60]
Test Case: 792 | Input/Output: [(-86 7 25 -2) -86]
Test Case: 793 | Input/Output: [(72 78 86 -86) -86]
Test Case: 794 | Input/Output: [(-14 -33 20 -16) -33]
Test Case: 795 | Input/Output: [(-90 -90 83 -49) -90]
Test Case: 796 | Input/Output: [(-31 41 11 -46) -46]
Test Case: 797 | Input/Output: [(42 61 -79 -22) -79]
Test Case: 798 | Input/Output: [(20 -66 -57 -83) -83]
Test Case: 799 | Input/Output: [(27 35 -96 -69) -96]
Test Case: 800 | Input/Output: [(-3 -5 63 96) -5]
Test Case: 801 | Input/Output: [(-27 -3 4 91) -27]
Test Case: 802 | Input/Output: [(-33 87 -7 83) -33]
Test Case: 803 | Input/Output: [(18 3 33 -62) -62]
Test Case: 804 | Input/Output: [(44 7 39 38) 7]
Test Case: 805 | Input/Output: [(67 12 36 25) 12]
Test Case: 806 | Input/Output: [(35 44 13 88) 13]
Test Case: 807 | Input/Output: [(14 -77 -41 38) -77]
Test Case: 808 | Input/Output: [(61 -15 74 -85) -85]
Test Case: 809 | Input/Output: [(-97 64 -99 -9) -99]
Test Case: 810 | Input/Output: [(62 45 -64 -19) -64]
Test Case: 811 | Input/Output: [(52 -3 88 -40) -40]
Test Case: 812 | Input/Output: [(-65 99 25 34) -65]
Test Case: 813 | Input/Output: [(-1 38 -19 57) -19]
Test Case: 814 | Input/Output: [(0 87 -24 -22) -24]
Test Case: 815 | Input/Output: [(-42 58 56 -21) -42]
Test Case: 816 | Input/Output: [(80 -94 95 15) -94]
Test Case: 817 | Input/Output: [(40 -13 85 -34) -34]
Test Case: 818 | Input/Output: [(67 43 -4 -95) -95]
Test Case: 819 | Input/Output: [(59 33 44 -65) -65]
Test Case: 820 | Input/Output: [(97 64 25 -23) -23]
Test Case: 821 | Input/Output: [(-12 -55 33 -94) -94]
Test Case: 822 | Input/Output: [(-6 -74 -77 -21) -77]
Test Case: 823 | Input/Output: [(-34 -92 69 -36) -92]
Test Case: 824 | Input/Output: [(-73 -56 -52 94) -73]
Test Case: 825 | Input/Output: [(-91 50 2 -90) -91]
Test Case: 826 | Input/Output: [(25 56 86 77) 25]
Test Case: 827 | Input/Output: [(-74 -48 18 -30) -74]
Test Case: 828 | Input/Output: [(-32 20 78 81) -32]
Test Case: 829 | Input/Output: [(34 -75 61 83) -75]
Test Case: 830 | Input/Output: [(-32 76 -77 -25) -77]
Test Case: 831 | Input/Output: [(-50 -94 -70 44) -94]
Test Case: 832 | Input/Output: [(4 85 -43 -81) -81]
Test Case: 833 | Input/Output: [(0 -77 -94 -13) -94]
Test Case: 834 | Input/Output: [(67 -98 87 -11) -98]
Test Case: 835 | Input/Output: [(21 -79 22 -91) -91]
Test Case: 836 | Input/Output: [(39 -53 66 -48) -53]
Test Case: 837 | Input/Output: [(-63 52 -65 -32) -65]
Test Case: 838 | Input/Output: [(47 83 -86 47) -86]
Test Case: 839 | Input/Output: [(45 64 83 -23) -23]
Test Case: 840 | Input/Output: [(-22 -19 -100 85) -100]
Test Case: 841 | Input/Output: [(68 34 -78 -3) -78]
Test Case: 842 | Input/Output: [(10 -34 17 59) -34]
Test Case: 843 | Input/Output: [(-59 -14 15 82) -59]
Test Case: 844 | Input/Output: [(56 -37 2 -96) -96]
Test Case: 845 | Input/Output: [(-51 0 9 -57) -57]
Test Case: 846 | Input/Output: [(-73 -45 -68 56) -73]
Test Case: 847 | Input/Output: [(17 62 -34 -82) -82]
Test Case: 848 | Input/Output: [(48 51 -17 -7) -17]
Test Case: 849 | Input/Output: [(-80 94 0 -11) -80]
Test Case: 850 | Input/Output: [(-35 -18 -32 77) -35]
Test Case: 851 | Input/Output: [(-95 47 -5 -83) -95]
Test Case: 852 | Input/Output: [(-68 -92 -85 -93) -93]
Test Case: 853 | Input/Output: [(6 82 -33 40) -33]
Test Case: 854 | Input/Output: [(-30 -97 0 -24) -97]
Test Case: 855 | Input/Output: [(0 -12 70 47) -12]
Test Case: 856 | Input/Output: [(4 -71 92 -59) -71]
Test Case: 857 | Input/Output: [(61 86 -30 -93) -93]
Test Case: 858 | Input/Output: [(52 69 -88 89) -88]
Test Case: 859 | Input/Output: [(64 -32 -5 -61) -61]
Test Case: 860 | Input/Output: [(4 15 27 -70) -70]
Test Case: 861 | Input/Output: [(-53 26 99 -19) -53]
Test Case: 862 | Input/Output: [(18 -63 -80 2) -80]
Test Case: 863 | Input/Output: [(-86 -91 -49 -79) -91]
Test Case: 864 | Input/Output: [(-76 -72 -51 -91) -91]
Test Case: 865 | Input/Output: [(1 89 -60 -41) -60]
Test Case: 866 | Input/Output: [(30 82 38 -18) -18]
Test Case: 867 | Input/Output: [(-87 -83 -6 63) -87]
Test Case: 868 | Input/Output: [(-94 22 -64 74) -94]
Test Case: 869 | Input/Output: [(24 -56 -3 17) -56]
Test Case: 870 | Input/Output: [(6 -77 -3 37) -77]
Test Case: 871 | Input/Output: [(-94 57 -28 19) -94]
Test Case: 872 | Input/Output: [(-95 61 7 -48) -95]
Test Case: 873 | Input/Output: [(-72 62 -89 -63) -89]
Test Case: 874 | Input/Output: [(-44 41 30 -41) -44]
Test Case: 875 | Input/Output: [(75 30 8 -41) -41]
Test Case: 876 | Input/Output: [(-78 100 82 98) -78]
Test Case: 877 | Input/Output: [(-43 -31 -48 -23) -48]
Test Case: 878 | Input/Output: [(-40 72 -25 92) -40]
Test Case: 879 | Input/Output: [(-50 30 25 -47) -50]
Test Case: 880 | Input/Output: [(-8 -37 -5 -83) -83]
Test Case: 881 | Input/Output: [(-2 88 -80 -93) -93]
Test Case: 882 | Input/Output: [(-53 76 99 57) -53]
Test Case: 883 | Input/Output: [(-79 32 -5 34) -79]
Test Case: 884 | Input/Output: [(87 57 58 38) 38]
Test Case: 885 | Input/Output: [(12 -58 14 -56) -58]
Test Case: 886 | Input/Output: [(34 -14 -69 66) -69]
Test Case: 887 | Input/Output: [(-69 -36 73 74) -69]
Test Case: 888 | Input/Output: [(-49 4 -80 -79) -80]
Test Case: 889 | Input/Output: [(-45 6 -43 -86) -86]
Test Case: 890 | Input/Output: [(-62 41 88 -13) -62]
Test Case: 891 | Input/Output: [(73 -92 -5 -9) -92]
Test Case: 892 | Input/Output: [(14 9 -7 43) -7]
Test Case: 893 | Input/Output: [(-87 1 -19 -99) -99]
Test Case: 894 | Input/Output: [(67 17 85 75) 17]
Test Case: 895 | Input/Output: [(23 -13 -11 15) -13]
Test Case: 896 | Input/Output: [(3 -32 41 90) -32]
Test Case: 897 | Input/Output: [(76 -99 30 -65) -99]
Test Case: 898 | Input/Output: [(99 86 -25 -71) -71]
Test Case: 899 | Input/Output: [(18 -61 31 -36) -61]
Test Case: 900 | Input/Output: [(-69 -67 27 31) -69]
Test Case: 901 | Input/Output: [(-48 16 -96 86) -96]
Test Case: 902 | Input/Output: [(67 79 55 -35) -35]
Test Case: 903 | Input/Output: [(57 53 -4 68) -4]
Test Case: 904 | Input/Output: [(-36 -94 97 1) -94]
Test Case: 905 | Input/Output: [(38 49 64 -88) -88]
Test Case: 906 | Input/Output: [(-58 57 -29 -7) -58]
Test Case: 907 | Input/Output: [(39 27 5 1) 1]
Test Case: 908 | Input/Output: [(-3 13 -57 8) -57]
Test Case: 909 | Input/Output: [(-35 -7 -45 1) -45]
Test Case: 910 | Input/Output: [(33 93 -12 -94) -94]
Test Case: 911 | Input/Output: [(30 22 87 71) 22]
Test Case: 912 | Input/Output: [(67 26 38 -80) -80]
Test Case: 913 | Input/Output: [(72 51 -84 63) -84]
Test Case: 914 | Input/Output: [(-95 32 -96 -95) -96]
Test Case: 915 | Input/Output: [(-53 46 99 -16) -53]
Test Case: 916 | Input/Output: [(-3 56 5 -47) -47]
Test Case: 917 | Input/Output: [(50 -73 -75 -51) -75]
Test Case: 918 | Input/Output: [(-13 26 87 61) -13]
Test Case: 919 | Input/Output: [(-19 25 -14 -5) -19]
Test Case: 920 | Input/Output: [(38 55 -13 48) -13]
Test Case: 921 | Input/Output: [(38 -70 53 78) -70]
Test Case: 922 | Input/Output: [(-8 -90 -71 91) -90]
Test Case: 923 | Input/Output: [(32 19 90 22) 19]
Test Case: 924 | Input/Output: [(-34 98 72 31) -34]
Test Case: 925 | Input/Output: [(88 -70 9 64) -70]
Test Case: 926 | Input/Output: [(-100 -51 64 53) -100]
Test Case: 927 | Input/Output: [(-83 19 80 -74) -83]
Test Case: 928 | Input/Output: [(4 29 7 97) 4]
Test Case: 929 | Input/Output: [(42 -38 17 72) -38]
Test Case: 930 | Input/Output: [(83 99 -56 -60) -60]
Test Case: 931 | Input/Output: [(41 93 27 44) 27]
Test Case: 932 | Input/Output: [(-17 -81 -29 -85) -85]
Test Case: 933 | Input/Output: [(25 18 72 77) 18]
Test Case: 934 | Input/Output: [(39 -89 29 -45) -89]
Test Case: 935 | Input/Output: [(17 63 -82 91) -82]
Test Case: 936 | Input/Output: [(-66 -16 -64 -64) -66]
Test Case: 937 | Input/Output: [(55 88 -96 95) -96]
Test Case: 938 | Input/Output: [(-100 -6 79 16) -100]
Test Case: 939 | Input/Output: [(99 -30 1 -25) -30]
Test Case: 940 | Input/Output: [(25 -77 74 58) -77]
Test Case: 941 | Input/Output: [(10 -53 100 -31) -53]
Test Case: 942 | Input/Output: [(-49 -40 -10 -29) -49]
Test Case: 943 | Input/Output: [(-82 -94 55 -64) -94]
Test Case: 944 | Input/Output: [(15 -66 -56 -6) -66]
Test Case: 945 | Input/Output: [(76 -76 65 -43) -76]
Test Case: 946 | Input/Output: [(54 -70 81 -5) -70]
Test Case: 947 | Input/Output: [(2 -5 79 -22) -22]
Test Case: 948 | Input/Output: [(95 -69 36 8) -69]
Test Case: 949 | Input/Output: [(-2 -36 -91 -73) -91]
Test Case: 950 | Input/Output: [(79 -70 25 -27) -70]
Test Case: 951 | Input/Output: [(84 91 -84 99) -84]
Test Case: 952 | Input/Output: [(-8 -13 94 -59) -59]
Test Case: 953 | Input/Output: [(-55 -26 27 78) -55]
Test Case: 954 | Input/Output: [(29 -49 36 -35) -49]
Test Case: 955 | Input/Output: [(-30 10 96 -5) -30]
Test Case: 956 | Input/Output: [(-44 -28 -6 -11) -44]
Test Case: 957 | Input/Output: [(9 66 54 10) 9]
Test Case: 958 | Input/Output: [(-42 -63 -34 88) -63]
Test Case: 959 | Input/Output: [(-61 60 -91 77) -91]
Test Case: 960 | Input/Output: [(24 18 29 -45) -45]
Test Case: 961 | Input/Output: [(89 23 -10 -56) -56]
Test Case: 962 | Input/Output: [(64 -14 76 18) -14]
Test Case: 963 | Input/Output: [(21 11 -10 -72) -72]
Test Case: 964 | Input/Output: [(-18 18 -47 -83) -83]
Test Case: 965 | Input/Output: [(32 -66 -12 10) -66]
Test Case: 966 | Input/Output: [(-99 3 -65 5) -99]
Test Case: 967 | Input/Output: [(-69 19 -85 -40) -85]
Test Case: 968 | Input/Output: [(-21 -56 -39 89) -56]
Test Case: 969 | Input/Output: [(-78 -63 -22 -76) -78]
Test Case: 970 | Input/Output: [(-3 23 -29 -35) -35]
Test Case: 971 | Input/Output: [(11 57 -10 12) -10]
Test Case: 972 | Input/Output: [(91 56 -61 -96) -96]
Test Case: 973 | Input/Output: [(-73 -61 11 93) -73]
Test Case: 974 | Input/Output: [(86 -25 40 -49) -49]
Test Case: 975 | Input/Output: [(54 -41 27 -14) -41]
Test Case: 976 | Input/Output: [(-22 81 -49 57) -49]
Test Case: 977 | Input/Output: [(-41 -39 -71 -12) -71]
Test Case: 978 | Input/Output: [(-34 -1 -51 53) -51]
Test Case: 979 | Input/Output: [(-72 58 84 65) -72]
Test Case: 980 | Input/Output: [(40 -11 -91 45) -91]
Test Case: 981 | Input/Output: [(38 -3 -24 39) -24]
Test Case: 982 | Input/Output: [(74 99 14 45) 14]
Test Case: 983 | Input/Output: [(-95 51 63 8) -95]
Test Case: 984 | Input/Output: [(-44 -82 -91 18) -91]
Test Case: 985 | Input/Output: [(79 75 19 71) 19]
Test Case: 986 | Input/Output: [(72 -21 -26 58) -26]
Test Case: 987 | Input/Output: [(-58 -78 54 -75) -78]
Test Case: 988 | Input/Output: [(-77 -40 -4 45) -77]
Test Case: 989 | Input/Output: [(-79 25 -77 -92) -92]
Test Case: 990 | Input/Output: [(76 49 -99 98) -99]
Test Case: 991 | Input/Output: [(-20 -22 22 75) -22]
Test Case: 992 | Input/Output: [(-76 -99 -70 -48) -99]
Test Case: 993 | Input/Output: [(4 -30 -36 15) -36]
Test Case: 994 | Input/Output: [(-65 -3 54 -52) -65]
Test Case: 995 | Input/Output: [(-74 83 -60 -87) -87]
Test Case: 996 | Input/Output: [(-45 98 23 46) -45]
Test Case: 997 | Input/Output: [(-49 80 51 -38) -49]
Test Case: 998 | Input/Output: [(92 -92 -27 44) -92]
Test Case: 999 | Input/Output: [(-24 3 -25 -40) -40]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 116 4 -68 124 -82 -83 -46 -50 33 40 -37 -50 85 112 103 -128
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[87 -19 -19 -19] -19] [[8 8 43 8] 8] [[58 58 58 76] 58] [[-64 -64 -81 -64] -81] [[43 44 44 44] 43] [[93 93 93 -66] -66] [[38 38 38 10] 10] [[34 34 34 -16] -16] [[6 6 6 100] 6] [[-57 -10 -57 -57] -57] [(-46 -46 -46 -46) -46] [(89 89 89 89) 89] [(-28 -28 -28 -28) -28] [(30 30 30 30) 30] [(-94 -94 -94 -94) -94] [(16 87 31 40) 16] [(46 27 3 22) 3] [(25 72 41 29) 25] [(44 56 38 55) 38] [(4 76 19 76) 4] [(35 7 44 58) 7] [(68 4 97 100) 4] [(47 35 22 41) 22] [(58 54 7 73) 7] [(10 56 34 52) 10] [(80 29 60 66) 29] [(31 66 56 12) 12] [(5 11 49 37) 5] [(54 83 0 8) 0] [(38 73 93 91) 38] [(16 67 57 41) 16] [(28 19 0 12) 0] [(52 59 54 40) 40] [(67 72 57 26) 26] [(97 4 51 37) 4] [(57 73 60 41) 41] [(61 84 77 72) 61] [(-54 -6 98 -28) -54] [(27 100 -91 -16) -91] [(-29 98 -59 63) -59] [(-99 3 6 -2) -99] [(60 15 86 -33) -33] [(97 14 43 -47) -47] [(70 -60 89 -41) -60] [(-57 33 -71 74) -71] [(34 47 -42 -67) -67] [(77 34 36 -43) -43] [(97 -92 48 15) -92] [(-64 22 -43 82) -64] [(84 70 99 43) 43] [(-36 -37 14 -12) -37] [(-13 -98 57 8) -98] [(86 -60 -65 -42) -65] [(42 28 -20 89) -20] [(90 92 -24 70) -24] [(-14 7 -57 43) -57] [(-95 -41 -3 24) -95] [(-7 92 -16 -100) -100] [(30 25 94 -22) -22] [(86 -78 42 74) -78] [(-24 62 -66 -63) -66] [(74 22 66 100) 22] [(35 -46 67 77) -46] [(-94 -12 32 67) -94] [(63 -81 75 -22) -81] [(-62 -87 -56 91) -87] [(16 47 30 -73) -73] [(-55 78 -94 -86) -94] [(38 -45 -69 15) -69] [(-53 24 -1 74) -53] [(39 -71 32 45) -71] [(-78 72 32 4) -78] [(98 -98 5 36) -98] [(39 38 85 56) 38] [(79 -47 -43 -43) -47] [(-9 74 -95 52) -95] [(-33 -10 17 -93) -93] [(-60 -45 -64 -80) -80] [(33 -3 -30 85) -30] [(-38 6 83 -11) -38] [(-71 -90 33 -64) -90] [(-72 66 -33 56) -72] [(80 -48 29 15) -48] [(83 -34 5 99) -34] [(35 -34 32 -36) -36] [(40 -18 -14 27) -18] [(-89 -94 54 11) -94] [(91 5 -13 88) -13] [(61 20 -96 87) -96] [(63 79 2 -79) -79] [(35 99 -24 -32) -32] [(74 42 -96 44) -96] [(52 -22 -94 -31) -94] [(-28 7 69 22) -28] [(-79 90 0 -41) -79])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 6                  
Correct output: -33                 | Program output: 86                 
Correct output: -47                 | Program output: 43                 
Correct output: -60                 | Program output: 89                 
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 36                 
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: 14                 
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 94                 
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: 75                 
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 32                 
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 17                 
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: 83                 
Correct output: -90                 | Program output: 33                 
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: 32                 
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items})
Lexicase best program: (boolean_shove integer_dec exec_swap () (integer_eq exec_dup_items in3 boolean_not boolean_xor print_integer exec_empty integer_mult boolean_frominteger boolean_yank) exec_while (boolean_dup_items))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 19
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items})
Zero cases best program: (boolean_shove integer_dec exec_swap () (integer_eq exec_dup_items in3 boolean_not boolean_xor print_integer exec_empty integer_mult boolean_frominteger boolean_yank) exec_while (boolean_dup_items))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 19
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 4 4 4 10 4 8 3 11 11)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (4 4 4 4 10 4 8 3 11 11)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_463} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction tagged_737} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction tag_exec_998} {:close 0, :instruction integer_gte} {:close 0, :instruction tag_exec_40} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 99} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_548} {:close 0, :instruction integer_pop} {:close 0, :instruction -63} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_and integer_min integer_add in3 print_integer boolean_frominteger in1 exec_k_when_autoconstructing (boolean_shove tagged_463 integer_empty integer_yank exec_rot () (in2 in3 exec_s (exec_flush) (in4 boolean_yank integer_eq) (exec_y (boolean_xor in2 boolean_invert_first_then_and boolean_or integer_sub) exec_do*range () exec_yankdup print_newline) in4 exec_do*times (integer_mod boolean_invert_first_then_and exec_rot (boolean_shove exec_k () () in4 exec_dup () integer_fromboolean exec_pop (boolean_rot integer_dec boolean_or) integer_yank in1 tagged_737 integer_fromboolean print_boolean exec_dup_items exec_noop) (tag_exec_998 (integer_gte tag_exec_40 (exec_shove (exec_y (integer_swap exec_stackdepth boolean_empty boolean_invert_first_then_and) exec_stackdepth boolean_yankdup 99 exec_stackdepth boolean_yankdup exec_swap (integer_gte integer_dup integer_pop integer_shove integer_stackdepth integer_inc integer_mult boolean_not) (boolean_pop print_exec (exec_shove (tagged_548 integer_pop -63 boolean_shove integer_yankdup) integer_gt in3 exec_swap () (in2) exec_noop boolean_and integer_gt exec_do*range (boolean_invert_second_then_and))))))) ())) ()) ())
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 90
Size: 120
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 9.937
Median total errors in population: 10
Error averages by case: (0.996 0.996 0.996 0.996 0.99 0.996 0.992 0.997 0.989 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.166
Average program size in population (points): 70.268
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 493013
--- Timings ---
Current time: 1559583691706 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 31.6%
Fitness Testing:      1.7 seconds, 64.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 6                  
Correct output: -33                 | Program output: 86                 
Correct output: -47                 | Program output: 43                 
Correct output: -60                 | Program output: 89                 
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 36                 
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: 14                 
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 94                 
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: 75                 
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 32                 
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 17                 
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: 83                 
Correct output: -90                 | Program output: 33                 
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: 32                 
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove})
Lexicase best program: (in3 integer_fromboolean integer_mod print_integer boolean_dup_times boolean_flush boolean_dup exec_dup (boolean_dup_times exec_when (boolean_stackdepth 92 integer_swap integer_yank exec_shove () integer_dup) exec_dup_times (integer_lte) integer_flush) integer_pop boolean_stackdepth exec_dup_items boolean_xor boolean_frominteger integer_shove)
Lexicase best errors: [1 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 30
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove})
Zero cases best program: (in3 integer_fromboolean integer_mod print_integer boolean_dup_times boolean_flush boolean_dup exec_dup (boolean_dup_times exec_when (boolean_stackdepth 92 integer_swap integer_yank exec_shove () integer_dup) exec_dup_times (integer_lte) integer_flush) integer_pop boolean_stackdepth exec_dup_items boolean_xor boolean_frominteger integer_shove)
Zero cases best errors: [1 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 30
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 142 656 655 656 902 903 905 655 1000)
Population mean number of elite cases: 7.47
Count of perfect (error zero) individuals by case: (0 142 656 655 656 902 903 905 655 0)
Population mean number of perfect (error zero) cases: 5.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -10} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_integer_641} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 2, :instruction tagged_646} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction 39} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 1, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_exec})
Best program: (integer_shove integer_dup_items -10 integer_shove in3 exec_pop (boolean_frominteger boolean_dup_times exec_noop) print_integer exec_y_when_autoconstructing (in2 in2 exec_do*while (boolean_dup_times boolean_dup) boolean_frominteger) integer_mult exec_k (boolean_dup_items boolean_or boolean_stackdepth integer_pop) (boolean_frominteger exec_k (exec_s_when_autoconstructing () (integer_stackdepth) (boolean_not integer_min) boolean_invert_first_then_and exec_dup_items exec_dup_times (integer_gte exec_eq integer_shove)) (boolean_yankdup) integer_rot exec_dup_times () integer_sub boolean_yank tag_integer_641) exec_do*range (integer_pop) boolean_or exec_do*count (exec_flush exec_pop (boolean_not boolean_empty integer_rot boolean_flush) boolean_yank exec_stackdepth integer_mult integer_flush tagged_646) in3 boolean_or integer_stackdepth boolean_dup_items integer_dup_times 39 exec_k_when_autoconstructing () (exec_if (integer_dec) (in3 boolean_eq in1 boolean_not integer_dup exec_yank) exec_dup (exec_dup () exec_yankdup boolean_yankdup exec_swap (print_newline integer_empty) (in3) integer_dup boolean_yankdup) in3 print_integer exec_while (exec_while () exec_dup_items exec_noop exec_empty) exec_when (integer_add integer_lte exec_if (exec_stackdepth) (boolean_and boolean_swap boolean_yankdup exec_do*range (print_exec ())))))
Errors: [1 1 0 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 98
Size: 129
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 4.526
Median total errors in population: 3
Error averages by case: (1.0 0.858 0.344 0.345 0.344 0.098 0.097 0.095 0.345 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 47.346
Average program size in population (points): 62.172
Average percent parens in population: 0.226
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.5
Median age in population: 1.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 164
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 841521
--- Timings ---
Current time: 1559583694055 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.4 seconds, 47.2%
Fitness Testing:      2.2 seconds, 42.8%
Report:               0.4 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: 98                 
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: 33                 
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 22                 
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: 92                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: 62                 
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: 78                 
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: 74                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in2 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger) boolean_rot) exec_y_when_autoconstructing (boolean_swap exec_empty print_integer boolean_shove boolean_pop integer_lt) boolean_eq integer_min boolean_yankdup boolean_stackdepth) integer_dup_items) (in3) (exec_y_when_autoconstructing (exec_noop boolean_dup_times exec_flush integer_mult boolean_dup_times) integer_dup_items boolean_pop integer_rot) boolean_yank integer_stackdepth exec_dup (boolean_and) integer_yankdup integer_yankdup boolean_invert_first_then_and) ()))
Lexicase best errors: [1 0 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 90
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in2 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger) boolean_rot) exec_y_when_autoconstructing (boolean_swap exec_empty print_integer boolean_shove boolean_pop integer_lt) boolean_eq integer_min boolean_yankdup boolean_stackdepth) integer_dup_items) (in3) (exec_y_when_autoconstructing (exec_noop boolean_dup_times exec_flush integer_mult boolean_dup_times) integer_dup_items boolean_pop integer_rot) boolean_yank integer_stackdepth exec_dup (boolean_and) integer_yankdup integer_yankdup boolean_invert_first_then_and) ()))
Zero cases best errors: [1 0 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 90
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 193 720 193 195 1000 721 1000 195 719)
Population mean number of elite cases: 5.94
Count of perfect (error zero) individuals by case: (0 193 720 193 195 0 721 0 195 719)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times})
Best program: (integer_dup boolean_or print_boolean integer_dec boolean_rot exec_dup_times (tag_exec_864 () integer_empty boolean_yankdup in2) print_integer integer_lt integer_sub integer_dup_times)
Errors: [1 0 1 0 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 7.064
Median total errors in population: 7
Error averages by case: (1.0 0.807 0.28 0.807 0.805 1.0 0.279 1.0 0.805 0.281)
Error minima by case: (1 0 0 0 0 1 0 1 0 0)
Average genome size in population (length): 42.398
Average program size in population (points): 55.498
Average percent parens in population: 0.221
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0115
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1158220
--- Timings ---
Current time: 1559583697153 milliseconds
Total Time:           8.2 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.8 seconds, 58.8%
Fitness Testing:      2.6 seconds, 31.9%
Report:               0.7 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 6                  
Correct output: -33                 | Program output: 86                 
Correct output: -47                 | Program output: 43                 
Correct output: -60                 | Program output: 89                 
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 36                 
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: 14                 
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 94                 
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: 75                 
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 32                 
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 17                 
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: 83                 
Correct output: -90                 | Program output: 33                 
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: 32                 
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove})
Lexicase best program: (in3 integer_fromboolean integer_mod print_integer boolean_dup_times boolean_flush boolean_dup exec_dup (boolean_dup_times exec_when (boolean_stackdepth 92 in2 integer_yank exec_shove () integer_dup) exec_dup_times () integer_lte) integer_flush integer_pop boolean_stackdepth exec_dup_items boolean_xor boolean_frominteger integer_shove)
Lexicase best errors: [1 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove})
Zero cases best program: (in3 integer_fromboolean integer_mod print_integer boolean_dup_times boolean_flush boolean_dup exec_dup (boolean_dup_times exec_when (boolean_stackdepth 92 in2 integer_yank exec_shove () integer_dup) exec_dup_times () integer_lte) integer_flush integer_pop boolean_stackdepth exec_dup_items boolean_xor boolean_frominteger integer_shove)
Zero cases best errors: [1 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (587 319 319 785 443 586 439 1000 467 909)
Population mean number of elite cases: 5.85
Count of perfect (error zero) individuals by case: (587 319 319 785 443 586 439 0 467 909)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -10} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 2, :instruction tagged_646} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction 39} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 1, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_exec})
Best program: (integer_yank integer_dup_items -10 integer_shove in3 exec_pop (boolean_frominteger boolean_dup_times exec_noop) print_integer exec_y_when_autoconstructing (in2 in2 exec_do*while (boolean_dup_times boolean_dup) boolean_frominteger) integer_mult exec_k (boolean_dup_items boolean_or boolean_stackdepth integer_pop) (boolean_frominteger exec_k (exec_s_when_autoconstructing () (integer_stackdepth) (boolean_not integer_min) boolean_invert_first_then_and exec_dup_items exec_dup_times (integer_gte exec_eq integer_shove)) (exec_dup_items) integer_rot exec_dup_times () integer_sub boolean_yank integer_gt) exec_do*range (integer_pop) integer_mult exec_do*count (exec_flush exec_pop (boolean_not boolean_empty integer_rot boolean_flush) boolean_yank exec_stackdepth integer_mult integer_flush tagged_646) in3 boolean_or integer_stackdepth boolean_dup_items integer_dup_times 39 exec_k_when_autoconstructing () (exec_if (integer_dec) (in3 boolean_eq in1 boolean_not integer_dup exec_yank) exec_dup (exec_dup () exec_yankdup boolean_yankdup exec_swap (print_newline integer_empty) (in3) integer_dup boolean_yankdup) in3 print_integer exec_while (exec_while () exec_dup_items exec_noop exec_empty) exec_when (integer_add integer_lte exec_if (exec_stackdepth) (boolean_and boolean_swap boolean_yankdup exec_do*range (print_exec ())))))
Errors: [1 0 0 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 98
Size: 129
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 5.146
Median total errors in population: 5
Error averages by case: (0.413 0.681 0.681 0.215 0.557 0.414 0.561 1.0 0.533 0.091)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 31.06
Average program size in population (points): 40.488
Average percent parens in population: 0.219
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.59675
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1607011
--- Timings ---
Current time: 1559583700295 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.2 seconds, 63.5%
Fitness Testing:      3.1 seconds, 27.7%
Report:               0.9 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 46                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 47                 
Correct output: 7                   | Program output: 58                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 28                 
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 60                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: 70                 
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: 77                 
Correct output: -92                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: 86                 
Correct output: -20                 | Program output: 42                 
Correct output: -24                 | Program output: 90                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 30                 
Correct output: -78                 | Program output: 86                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 63                 
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 16                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: 38                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 39                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 98                 
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: 79                 
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: 33                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 80                 
Correct output: -34                 | Program output: 83                 
Correct output: -36                 | Program output: 35                 
Correct output: -18                 | Program output: 40                 
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 91                 
Correct output: -96                 | Program output: 61                 
Correct output: -79                 | Program output: 63                 
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: 74                 
Correct output: -94                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Lexicase best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ()))
Lexicase best errors: [0 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Zero cases best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ()))
Zero cases best errors: [0 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 469 637 1 1 1 1 637 468 1)
Population mean number of elite cases: 2.22
Count of perfect (error zero) individuals by case: (1 469 637 1 1 1 1 637 468 1)
Population mean number of perfect (error zero) cases: 2.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ()))
Errors: [0 1 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 7.783
Median total errors in population: 8
Error averages by case: (0.999 0.531 0.363 0.999 0.999 0.999 0.999 0.363 0.532 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.452
Average program size in population (points): 38.245
Average percent parens in population: 0.212
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.085375
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2061676
--- Timings ---
Current time: 1559583703370 milliseconds
Total Time:          14.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.1 seconds, 65.3%
Fitness Testing:      3.6 seconds, 26.0%
Report:               1.1 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 46                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 47                 
Correct output: 7                   | Program output: 58                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 28                 
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 60                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: 70                 
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: 77                 
Correct output: -92                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: 86                 
Correct output: -20                 | Program output: 42                 
Correct output: -24                 | Program output: 90                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 30                 
Correct output: -78                 | Program output: 86                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 63                 
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 16                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: 38                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 39                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 98                 
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: 79                 
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: 33                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 80                 
Correct output: -34                 | Program output: 83                 
Correct output: -36                 | Program output: 35                 
Correct output: -18                 | Program output: 40                 
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 91                 
Correct output: -96                 | Program output: 61                 
Correct output: -79                 | Program output: 63                 
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: 74                 
Correct output: -94                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor})
Lexicase best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor) () ()) ()))
Lexicase best errors: [1 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor})
Zero cases best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor) () ()) ()))
Zero cases best errors: [1 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 915 346 23 5 442 95 443 95 442)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (95 915 346 23 5 442 95 443 95 442)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ()))
Errors: [1 0 1 1 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 7.099
Median total errors in population: 6
Error averages by case: (0.905 0.085 0.654 0.977 0.995 0.558 0.905 0.557 0.905 0.558)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.387
Average program size in population (points): 38.315
Average percent parens in population: 0.228
Minimum age in population: 5.75
Maximum age in population: 9.25
Average age in population: 8.0589375
Median age in population: 7.90625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 267
Genome diversity (% unique genomes):	 0.364
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 273
Syntactic diversity (% unique Push programs):	 0.335
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3120653
--- Timings ---
Current time: 1559583707137 milliseconds
Total Time:          17.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.3 seconds, 63.3%
Fitness Testing:      4.7 seconds, 26.2%
Report:               1.8 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 682
Test mean error for best: 0.68200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output:                    
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output:                    
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output:                    
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output:                    
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output:                    
Correct output: -54                 | Program output:                    
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 6                  
Correct output: -33                 | Program output:                    
Correct output: -47                 | Program output: 43                 
Correct output: -60                 | Program output:                    
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 36                 
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output:                    
Correct output: -37                 | Program output: 14                 
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output:                    
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output:                    
Correct output: -46                 | Program output:                    
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output:                    
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 32                 
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output:                    
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 17                 
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output:                    
Correct output: -90                 | Program output: 33                 
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: 32                 
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output:                    
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Lexicase best program: (boolean_and integer_min integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot exec_dup_times (boolean_dup_times boolean_xor) exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ())
Lexicase best errors: [1 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Zero cases best program: (boolean_and integer_min integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot exec_dup_times (boolean_dup_times boolean_xor) exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ())
Zero cases best errors: [1 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 290 895 314 895 197 291 198 602 197)
Population mean number of elite cases: 4.17
Count of perfect (error zero) individuals by case: (291 290 895 314 895 197 291 198 602 197)
Population mean number of perfect (error zero) cases: 4.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Best program: (boolean_and integer_min integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot exec_dup_times (boolean_dup_times boolean_xor) exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ())
Errors: [1 1 0 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 5.83
Median total errors in population: 6
Error averages by case: (0.709 0.71 0.105 0.686 0.105 0.803 0.709 0.802 0.398 0.803)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.956
Average program size in population (points): 38.49
Average percent parens in population: 0.252
Minimum age in population: 7.25
Maximum age in population: 10.90625
Average age in population: 9.52503125
Median age in population: 9.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3870353
--- Timings ---
Current time: 1559583710363 milliseconds
Total Time:          21.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.2 seconds, 62.8%
Fitness Testing:      5.4 seconds, 25.4%
Report:               2.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 46                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 47                 
Correct output: 7                   | Program output: 58                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 28                 
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 60                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: 70                 
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: 77                 
Correct output: -92                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: 86                 
Correct output: -20                 | Program output: 42                 
Correct output: -24                 | Program output: 90                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 30                 
Correct output: -78                 | Program output: 86                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 63                 
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 16                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: 38                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 39                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 98                 
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: 79                 
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: 33                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 80                 
Correct output: -34                 | Program output: 83                 
Correct output: -36                 | Program output: 35                 
Correct output: -18                 | Program output: 40                 
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 91                 
Correct output: -96                 | Program output: 61                 
Correct output: -79                 | Program output: 63                 
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: 74                 
Correct output: -94                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Lexicase best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ()))
Lexicase best errors: [0 0 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Zero cases best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ()))
Zero cases best errors: [0 0 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (331 753 331 331 342 1000 1000 1000 1000 422)
Population mean number of elite cases: 6.51
Count of perfect (error zero) individuals by case: (331 753 331 331 342 0 0 0 0 422)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ()))
Errors: [0 0 0 0 0 1 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 7.49
Median total errors in population: 8
Error averages by case: (0.669 0.247 0.669 0.669 0.658 1.0 1.0 1.0 1.0 0.578)
Error minima by case: (0 0 0 0 0 1 1 1 1 0)
Average genome size in population (length): 33.523
Average program size in population (points): 47.198
Average percent parens in population: 0.281
Minimum age in population: 8.4375
Maximum age in population: 12.59375
Average age in population: 11.0431875
Median age in population: 11.109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 205
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4963292
--- Timings ---
Current time: 1559583714250 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.5 seconds, 62.4%
Fitness Testing:      6.3 seconds, 25.3%
Report:               3.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: 98                 
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: 33                 
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 22                 
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: 92                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: 62                 
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: 78                 
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: 74                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Lexicase best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in2 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ()))
Lexicase best errors: [1 1 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Zero cases best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in2 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ()))
Zero cases best errors: [1 1 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (139 139 672 1 1000 1 1 671 1 137)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (139 139 672 1 0 1 1 671 1 137)
Population mean number of perfect (error zero) cases: 1.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_frominteger})
Best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in2 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup exec_dup_times (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec boolean_frominteger)))) () ()) ()))
Errors: [1 1 0 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 8.238
Median total errors in population: 8
Error averages by case: (0.861 0.861 0.328 0.999 1.0 0.999 0.999 0.329 0.999 0.863)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 34.952
Average program size in population (points): 49.124
Average percent parens in population: 0.271
Minimum age in population: 10.25
Maximum age in population: 14.4140625
Average age in population: 12.6576875
Median age in population: 12.734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6018379
--- Timings ---
Current time: 1559583717864 milliseconds
Total Time:          28.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.6 seconds, 61.6%
Fitness Testing:      7.3 seconds, 25.5%
Report:               3.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 46                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 47                 
Correct output: 7                   | Program output: 58                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 28                 
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 60                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: 70                 
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: 77                 
Correct output: -92                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: 86                 
Correct output: -20                 | Program output: 42                 
Correct output: -24                 | Program output: 90                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 30                 
Correct output: -78                 | Program output: 86                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 63                 
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 16                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: 38                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 39                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 98                 
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: 79                 
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: 33                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 80                 
Correct output: -34                 | Program output: 83                 
Correct output: -36                 | Program output: 35                 
Correct output: -18                 | Program output: 40                 
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 91                 
Correct output: -96                 | Program output: 61                 
Correct output: -79                 | Program output: 63                 
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: 74                 
Correct output: -94                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_dup_times integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (boolean_yankdup integer_yank print_integer) (boolean_xor) ()) ()))
Lexicase best errors: [1 0 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 33
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_dup_times integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (boolean_yankdup integer_yank print_integer) (boolean_xor) ()) ()))
Zero cases best errors: [1 0 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 33
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 121 122 121 466 1000 304 121 122 896)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (0 121 122 121 466 0 304 121 122 896)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor})
Best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor) () ()) ()))
Errors: [1 0 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.727
Median total errors in population: 8
Error averages by case: (1.0 0.879 0.878 0.879 0.534 1.0 0.696 0.879 0.878 0.104)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 31.597
Average program size in population (points): 43.637
Average percent parens in population: 0.240
Minimum age in population: 11.875
Maximum age in population: 15.71875
Average age in population: 13.8621875
Median age in population: 14.001953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 270
Genome diversity (% unique genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 277
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6915695
--- Timings ---
Current time: 1559583720984 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.3 seconds, 60.9%
Fitness Testing:      8.1 seconds, 25.6%
Report:               4.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 6                  
Correct output: -33                 | Program output: 86                 
Correct output: -47                 | Program output: 43                 
Correct output: -60                 | Program output: 89                 
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 36                 
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: 14                 
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 94                 
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: 75                 
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 32                 
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 17                 
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: 83                 
Correct output: -90                 | Program output: 33                 
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: 32                 
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and integer_min integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot boolean_flush tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_sub integer_dup_times)
Lexicase best errors: [0 1 1 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and integer_min integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot boolean_flush tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_sub integer_dup_times)
Zero cases best errors: [0 1 1 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (139 659 103 655 137 103 1000 1000 136 1000)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (139 659 103 655 137 103 0 0 136 0)
Population mean number of perfect (error zero) cases: 1.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and integer_min integer_add in3 integer_dup boolean_or print_boolean print_integer integer_lt integer_sub integer_dup_times)
Errors: [0 1 1 1 0 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 11
Size: 12
Percent parens: 0.083
--- Population Statistics ---
Average total errors in population: 8.068
Median total errors in population: 8
Error averages by case: (0.861 0.341 0.897 0.345 0.863 0.897 1.0 1.0 0.864 1.0)
Error minima by case: (0 0 0 0 0 0 1 1 0 1)
Average genome size in population (length): 34.624
Average program size in population (points): 48.727
Average percent parens in population: 0.272
Minimum age in population: 12.875
Maximum age in population: 17.41796875
Average age in population: 15.40315234375
Median age in population: 15.49609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.575
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7965254
--- Timings ---
Current time: 1559583724064 milliseconds
Total Time:          35.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.3 seconds, 60.4%
Fitness Testing:      9.0 seconds, 25.7%
Report:               4.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [1 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [1 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (256 229 409 242 414 1000 409 906 242 409)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (256 229 409 242 414 0 409 906 242 409)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 0 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.484
Median total errors in population: 6
Error averages by case: (0.744 0.771 0.591 0.758 0.586 1.0 0.591 0.094 0.758 0.591)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 28.399
Average program size in population (points): 38.728
Average percent parens in population: 0.221
Minimum age in population: 14.4375
Maximum age in population: 18.826171875
Average age in population: 16.881181640625
Median age in population: 16.9423828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.549
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 8745719
--- Timings ---
Current time: 1559583726759 milliseconds
Total Time:          37.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.1 seconds, 60.9%
Fitness Testing:      9.7 seconds, 25.8%
Report:               4.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [1 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [1 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 2 99 791 99 602 789 888 907 602)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (99 2 99 791 99 602 789 888 907 602)
Population mean number of perfect (error zero) cases: 4.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 1 1 0 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 5.122
Median total errors in population: 4
Error averages by case: (0.901 0.998 0.901 0.209 0.901 0.398 0.211 0.112 0.093 0.398)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.744
Average program size in population (points): 23.607
Average percent parens in population: 0.131
Minimum age in population: 16.15234375
Maximum age in population: 20.287109375
Average age in population: 18.78247021484375
Median age in population: 18.548828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 500
Genome diversity (% unique genomes):	 0.357
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 531
Syntactic diversity (% unique Push programs):	 0.319
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 9065537
--- Timings ---
Current time: 1559583729434 milliseconds
Total Time:          40.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.3 seconds, 62.3%
Fitness Testing:     10.1 seconds, 24.8%
Report:               5.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in4 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [1 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in4 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [1 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (387 543 387 334 893 173 4 544 353 173)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (387 543 387 334 893 173 4 544 353 173)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 0 0 1 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.209
Median total errors in population: 5
Error averages by case: (0.613 0.457 0.613 0.666 0.107 0.827 0.996 0.456 0.647 0.827)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.81
Average program size in population (points): 31.888
Average percent parens in population: 0.176
Minimum age in population: 17.38671875
Maximum age in population: 21.724853515625
Average age in population: 20.32675610351562
Median age in population: 20.4892578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 293
Genome diversity (% unique genomes):	 0.421
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 324
Syntactic diversity (% unique Push programs):	 0.391
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 9623770
--- Timings ---
Current time: 1559583731966 milliseconds
Total Time:          43.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.1 seconds, 62.9%
Fitness Testing:     10.6 seconds, 24.6%
Report:               5.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: 67                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_857} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in4 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_857 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [1 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_857} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in4 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_857 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [1 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 267 128 128 325 603 266 151 326 267)
Population mean number of elite cases: 2.47
Count of perfect (error zero) individuals by case: (11 267 128 128 325 603 266 151 326 267)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_857} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in4 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_857 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 0 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 7.528
Median total errors in population: 7
Error averages by case: (0.989 0.733 0.872 0.872 0.675 0.397 0.734 0.849 0.674 0.733)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.743
Average program size in population (points): 26.718
Average percent parens in population: 0.151
Minimum age in population: 19.34814453125
Maximum age in population: 23.5584716796875
Average age in population: 21.99621911621094
Median age in population: 21.9892578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.432
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 205
Syntactic diversity (% unique Push programs):	 0.388
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 10053114
--- Timings ---
Current time: 1559583734391 milliseconds
Total Time:          45.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.9 seconds, 63.6%
Fitness Testing:     11.0 seconds, 24.2%
Report:               5.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 576
Test mean error for best: 0.57600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: 63                 
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: 14                 
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: 67                 
Correct output: -81                 | Program output: 75                 
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: 74                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: 33                 
Correct output: -72                 | Program output: 56                 
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: 32                 
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in4 integer_add integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 14
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in4 integer_add integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 14
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (81 169 462 900 394 897 162 462 178 394)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (81 169 462 900 394 897 162 462 178 394)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and boolean_and in4 integer_add in3 integer_dup boolean_or print_boolean boolean_and in2 integer_add in3 integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 5.901
Median total errors in population: 6
Error averages by case: (0.919 0.831 0.538 0.1 0.606 0.103 0.838 0.538 0.822 0.606)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.244
Average program size in population (points): 25.86
Average percent parens in population: 0.146
Minimum age in population: 20.87841796875
Maximum age in population: 25.27386474609375
Average age in population: 23.32885803222656
Median age in population: 23.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 329
Genome diversity (% unique genomes):	 0.394
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 348
Syntactic diversity (% unique Push programs):	 0.352
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 10440742
--- Timings ---
Current time: 1559583736827 milliseconds
Total Time:          48.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.8 seconds, 64.3%
Fitness Testing:     11.4 seconds, 23.8%
Report:               5.6 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 46                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 47                 
Correct output: 7                   | Program output: 58                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 28                 
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 60                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: 70                 
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: 77                 
Correct output: -92                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: 86                 
Correct output: -20                 | Program output: 42                 
Correct output: -24                 | Program output: 90                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 30                 
Correct output: -78                 | Program output: 86                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 63                 
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 16                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: 38                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 39                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 98                 
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: 79                 
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: 33                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 80                 
Correct output: -34                 | Program output: 83                 
Correct output: -36                 | Program output: 35                 
Correct output: -18                 | Program output: 40                 
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 91                 
Correct output: -96                 | Program output: 61                 
Correct output: -79                 | Program output: 63                 
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: 74                 
Correct output: -94                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec})
Lexicase best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) integer_fromboolean integer_gt integer_pop integer_dup exec_rot (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec))) () ()) () ()) ()))
Lexicase best errors: [1 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec})
Zero cases best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) integer_fromboolean integer_gt integer_pop integer_dup exec_rot (exec_k_when_autoconstructing (boolean_dup_items integer_gt) (exec_dup (exec_k (boolean_shove) (integer_min in1) boolean_not) exec_y_when_autoconstructing (integer_dec))) () ()) () ()) ()))
Zero cases best errors: [1 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (434 186 49 185 201 834 8 7 187 203)
Population mean number of elite cases: 2.29
Count of perfect (error zero) individuals by case: (434 186 49 185 201 834 8 7 187 203)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup})
Best program: (exec_empty integer_empty integer_dec integer_pop exec_y_when_autoconstructing () integer_empty boolean_pop integer_swap boolean_dup_times exec_noop exec_yank boolean_flush exec_k_when_autoconstructing (in1 boolean_dup_times boolean_xor) (exec_k_when_autoconstructing (integer_dup_times boolean_yankdup exec_s_when_autoconstructing (exec_y (integer_yank print_integer) boolean_xor integer_gt integer_pop integer_dup) () ()) ()))
Errors: [1 0 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 7.706
Median total errors in population: 8
Error averages by case: (0.566 0.814 0.951 0.815 0.799 0.166 0.992 0.993 0.813 0.797)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.974
Average program size in population (points): 27.167
Average percent parens in population: 0.157
Minimum age in population: 21.998291015625
Maximum age in population: 26.59332275390625
Average age in population: 24.95570449829102
Median age in population: 24.98870849609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.42
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.385
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 10830337
--- Timings ---
Current time: 1559583739680 milliseconds
Total Time:          50.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.7 seconds, 64.9%
Fitness Testing:     11.8 seconds, 23.5%
Report:               5.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 254 883 10 683 419 347 57 393 207)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (10 254 883 10 683 419 347 57 393 207)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 1 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 17
Size: 19
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 6.737
Median total errors in population: 7
Error averages by case: (0.99 0.746 0.117 0.99 0.317 0.581 0.653 0.943 0.607 0.793)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.271
Average program size in population (points): 34.539
Average percent parens in population: 0.210
Minimum age in population: 22.998291015625
Maximum age in population: 27.8111572265625
Average age in population: 26.12991111755371
Median age in population: 26.14971923828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 11447951
--- Timings ---
Current time: 1559583742433 milliseconds
Total Time:          53.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.7 seconds, 64.8%
Fitness Testing:     12.4 seconds, 23.2%
Report:               6.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 15
Percent parens: 0.067
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 15
Percent parens: 0.067
--- Lexicase Population Statistics ---
Count of elite individuals by case: (704 914 453 449 450 497 29 307 917 307)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (704 914 453 449 450 497 29 307 917 307)
Population mean number of perfect (error zero) cases: 5.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 0 0 0 0 0 1 1 0 1]
Total: 3
Mean: 0.3
Genome size: 17
Size: 19
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 4.973
Median total errors in population: 5
Error averages by case: (0.296 0.086 0.547 0.551 0.55 0.503 0.971 0.693 0.083 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.021
Average program size in population (points): 24.216
Average percent parens in population: 0.139
Minimum age in population: 25.75112915039062
Maximum age in population: 29.424072265625
Average age in population: 27.54185213470459
Median age in population: 27.73094177246094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.335
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 218
Syntactic diversity (% unique Push programs):	 0.309
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 11763339
--- Timings ---
Current time: 1559583744841 milliseconds
Total Time:          56.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.6 seconds, 65.4%
Fitness Testing:     12.7 seconds, 22.8%
Report:               6.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [1 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 19
Percent parens: 0.105
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [1 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 19
Percent parens: 0.105
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 13 1000 469 902 675 141 735 658 470)
Population mean number of elite cases: 6.06
Count of perfect (error zero) individuals by case: (0 13 0 469 902 675 141 735 658 470)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in3 integer_dup boolean_or print_boolean integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 1 1 0 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 19
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 5.937
Median total errors in population: 6
Error averages by case: (1.0 0.987 1.0 0.531 0.098 0.325 0.859 0.265 0.342 0.53)
Error minima by case: (1 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 17.735
Average program size in population (points): 20.138
Average percent parens in population: 0.110
Minimum age in population: 27.2908935546875
Maximum age in population: 30.62674713134766
Average age in population: 29.07708605194092
Median age in population: 29.13717651367188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.317
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.275
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 11942004
--- Timings ---
Current time: 1559583747004 milliseconds
Total Time:          58.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.4 seconds, 66.1%
Fitness Testing:     12.9 seconds, 22.3%
Report:               6.7 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: 67                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and boolean_and in4 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [1 0 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.095
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and boolean_and in4 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [1 0 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.095
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 272 1 797 30 151 797 203 607 1)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (1 272 1 797 30 151 797 203 607 1)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and boolean_and in4 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 0 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 21
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 7.14
Median total errors in population: 7
Error averages by case: (0.999 0.728 0.999 0.203 0.97 0.849 0.203 0.797 0.393 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.012
Average program size in population (points): 17.929
Average percent parens in population: 0.098
Minimum age in population: 28.2908935546875
Maximum age in population: 32.22243118286133
Average age in population: 30.55442248153687
Median age in population: 30.55246257781982
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.276
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.223
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 12103808
--- Timings ---
Current time: 1559583749149 milliseconds
Total Time:          60.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.3 seconds, 66.8%
Fitness Testing:     13.1 seconds, 21.8%
Report:               6.8 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: 67                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in4 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () boolean_dup_items boolean_yankdup integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [1 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.120
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in4 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () boolean_dup_items boolean_yankdup integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [1 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 421 318 182 421 318 798 526 104 182)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (82 421 318 182 421 318 798 526 104 182)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and boolean_and in4 integer_add in3 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 0 0 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 19
Size: 21
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 6.648
Median total errors in population: 7
Error averages by case: (0.918 0.579 0.682 0.818 0.579 0.682 0.202 0.474 0.896 0.818)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.342
Average program size in population (points): 19.342
Average percent parens in population: 0.101
Minimum age in population: 29.3951416015625
Maximum age in population: 33.94256591796875
Average age in population: 32.17206433391571
Median age in population: 32.16397857666016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 238
Genome diversity (% unique genomes):	 0.319
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 247
Syntactic diversity (% unique Push programs):	 0.263
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 12281640
--- Timings ---
Current time: 1559583751359 milliseconds
Total Time:          62.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.1 seconds, 67.4%
Fitness Testing:     13.3 seconds, 21.3%
Report:               6.9 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: 98                 
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 22                 
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: 74                 
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in4 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [1 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in4 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [1 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (335 1000 1000 1000 563 152 935 597 284 564)
Population mean number of elite cases: 6.43
Count of perfect (error zero) individuals by case: (335 0 0 0 563 152 935 597 284 564)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in4 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 1 1 1 0 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.57
Median total errors in population: 7
Error averages by case: (0.665 1.0 1.0 1.0 0.437 0.848 0.065 0.403 0.716 0.436)
Error minima by case: (0 1 1 1 0 0 0 0 0 0)
Average genome size in population (length): 16.911
Average program size in population (points): 18.839
Average percent parens in population: 0.099
Minimum age in population: 30.3951416015625
Maximum age in population: 35.46126174926758
Average age in population: 33.56878935003281
Median age in population: 33.61330652236938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.337
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 216
Syntactic diversity (% unique Push programs):	 0.253
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 12460000
--- Timings ---
Current time: 1559583753633 milliseconds
Total Time:          64.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.0 seconds, 68.0%
Fitness Testing:     13.5 seconds, 20.9%
Report:               7.1 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: 98                 
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 22                 
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: 74                 
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in4 integer_dup boolean_or print_boolean integer_dec integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 1 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in4 integer_dup boolean_or print_boolean integer_dec integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 1 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (606 1000 1 592 1000 604 917 1000 1000 1000)
Population mean number of elite cases: 7.72
Count of perfect (error zero) individuals by case: (606 0 1 592 0 604 917 0 0 0)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in4 integer_dup boolean_or print_boolean integer_dec boolean_rot integer_stackdepth tag_exec_864 () boolean_dup_items boolean_yankdup integer_shove boolean_yankdup exec_while () print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 1 1 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 20
Size: 23
Percent parens: 0.130
--- Population Statistics ---
Average total errors in population: 7.28
Median total errors in population: 7
Error averages by case: (0.394 1.0 0.999 0.408 1.0 0.396 0.083 1.0 1.0 1.0)
Error minima by case: (0 1 0 0 1 0 0 1 1 1)
Average genome size in population (length): 16.892
Average program size in population (points): 19.058
Average percent parens in population: 0.108
Minimum age in population: 32.10287094116211
Maximum age in population: 37.00883817672729
Average age in population: 35.12894593644142
Median age in population: 35.19771909713745
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.32
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.273
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 12630267
--- Timings ---
Current time: 1559583755919 milliseconds
Total Time:          67.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.0 seconds, 68.6%
Fitness Testing:     13.7 seconds, 20.5%
Report:               7.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: 98                 
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: 33                 
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 22                 
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: 92                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: 62                 
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: 78                 
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: 74                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add boolean_dup_times integer_dup boolean_or print_boolean integer_dec integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [1 1 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add boolean_dup_times integer_dup boolean_or print_boolean integer_dec integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [1 1 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 866 1000 695 736 1000 2 1 24)
Population mean number of elite cases: 6.32
Count of perfect (error zero) individuals by case: (0 0 866 0 695 736 0 2 1 24)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in4 exec_s_when_autoconstructing (boolean_or) (print_boolean integer_dec integer_shove) (print_integer integer_lt integer_yank integer_dup_times))
Errors: [1 1 0 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.676
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.134 1.0 0.305 0.264 1.0 0.998 0.999 0.976)
Error minima by case: (1 1 0 1 0 0 1 0 0 0)
Average genome size in population (length): 17.514
Average program size in population (points): 19.697
Average percent parens in population: 0.106
Minimum age in population: 33.71967506408691
Maximum age in population: 38.47601652145386
Average age in population: 36.7609418888092
Median age in population: 36.80429059267044
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.328
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.259
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 12803572
--- Timings ---
Current time: 1559583758433 milliseconds
Total Time:          69.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.2 seconds, 69.2%
Fitness Testing:     13.9 seconds, 20.0%
Report:               7.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: 98                 
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: 33                 
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 22                 
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: 92                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: 62                 
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: 78                 
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: 74                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (boolean_and boolean_and in2 integer_add boolean_dup integer_dup boolean_or print_boolean integer_dec integer_shove print_integer integer_lt integer_yank integer_stackdepth)
Lexicase best errors: [0 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 15
Percent parens: 0.067
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (boolean_and boolean_and in2 integer_add boolean_dup integer_dup boolean_or print_boolean integer_dec integer_shove print_integer integer_lt integer_yank integer_stackdepth)
Zero cases best errors: [0 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 15
Percent parens: 0.067
--- Lexicase Population Statistics ---
Count of elite individuals by case: (604 619 619 620 1000 1000 628 619 628 1000)
Population mean number of elite cases: 7.34
Count of perfect (error zero) individuals by case: (604 619 619 620 0 0 628 619 628 0)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add integer_mult integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 0 0 0 1 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 5.663
Median total errors in population: 3
Error averages by case: (0.396 0.381 0.381 0.38 1.0 1.0 0.372 0.381 0.372 1.0)
Error minima by case: (0 0 0 0 1 1 0 0 0 1)
Average genome size in population (length): 18.689
Average program size in population (points): 21.071
Average percent parens in population: 0.114
Minimum age in population: 35.16345405578613
Maximum age in population: 39.95653939247131
Average age in population: 38.18447161436081
Median age in population: 38.28142690658569
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.281
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.234
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 12982782
--- Timings ---
Current time: 1559583760537 milliseconds
Total Time:          71.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.9 seconds, 69.7%
Fitness Testing:     14.1 seconds, 19.7%
Report:               7.5 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 531
Test mean error for best: 0.53100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 1 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 1 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (891 1000 906 18 29 881 1000 893 1 919)
Population mean number of elite cases: 6.54
Count of perfect (error zero) individuals by case: (891 0 906 18 29 881 0 893 1 919)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 1 0 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 5.462
Median total errors in population: 5
Error averages by case: (0.109 1.0 0.094 0.982 0.971 0.119 1.0 0.107 0.999 0.081)
Error minima by case: (0 1 0 0 0 0 1 0 0 0)
Average genome size in population (length): 16.029
Average program size in population (points): 18.091
Average percent parens in population: 0.114
Minimum age in population: 36.16345405578613
Maximum age in population: 41.68411368131638
Average age in population: 39.69649854046106
Median age in population: 39.78184324502945
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.341
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.273
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 13144888
--- Timings ---
Current time: 1559583762648 milliseconds
Total Time:          73.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.7 seconds, 70.1%
Fitness Testing:     14.3 seconds, 19.4%
Report:               7.6 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 531
Test mean error for best: 0.53100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (687 1000 925 685 647 1000 449 31 925 274)
Population mean number of elite cases: 6.62
Count of perfect (error zero) individuals by case: (687 0 925 685 647 0 449 31 925 274)
Population mean number of perfect (error zero) cases: 4.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 1 0 0 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 5.377
Median total errors in population: 5
Error averages by case: (0.313 1.0 0.075 0.315 0.353 1.0 0.551 0.969 0.075 0.726)
Error minima by case: (0 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 18.028
Average program size in population (points): 20.059
Average percent parens in population: 0.101
Minimum age in population: 39.48542308807373
Maximum age in population: 43.20998245477676
Average age in population: 41.71728854469955
Median age in population: 41.75849951058626
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 268
Genome diversity (% unique genomes):	 0.275
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 334
Syntactic diversity (% unique Push programs):	 0.233
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 13327505
--- Timings ---
Current time: 1559583764749 milliseconds
Total Time:          75.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.5 seconds, 70.4%
Fitness Testing:     14.5 seconds, 19.2%
Report:               7.8 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 535
Test mean error for best: 0.53500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_div integer_yank integer_dup_times)
Lexicase best errors: [1 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_div integer_yank integer_dup_times)
Zero cases best errors: [1 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 599 23 309 1 674 1000 602 934)
Population mean number of elite cases: 6.14
Count of perfect (error zero) individuals by case: (0 0 599 23 309 1 674 0 602 934)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean boolean_shove integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 1 0 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.858
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.401 0.977 0.691 0.999 0.326 1.0 0.398 0.066)
Error minima by case: (1 1 0 0 0 0 0 1 0 0)
Average genome size in population (length): 17.874
Average program size in population (points): 19.897
Average percent parens in population: 0.102
Minimum age in population: 40.48542308807373
Maximum age in population: 44.9654985293746
Average age in population: 43.30899396416545
Median age in population: 43.40125873684883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 189
Genome diversity (% unique genomes):	 0.314
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 257
Syntactic diversity (% unique Push programs):	 0.26
Total error diversity:				 0.005
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 13509264
--- Timings ---
Current time: 1559583766963 milliseconds
Total Time:          78.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.3 seconds, 70.8%
Fitness Testing:     14.7 seconds, 18.9%
Report:               7.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 531
Test mean error for best: 0.53100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 0 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 0 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (677 493 267 514 492 1000 1000 492 781 1000)
Population mean number of elite cases: 6.72
Count of perfect (error zero) individuals by case: (677 493 267 514 492 0 0 492 781 0)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank})
Best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank)
Errors: [0 0 1 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 17
Size: 19
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 6.284
Median total errors in population: 7
Error averages by case: (0.323 0.507 0.733 0.486 0.508 1.0 1.0 0.508 0.219 1.0)
Error minima by case: (0 0 0 0 0 1 1 0 0 1)
Average genome size in population (length): 19.069
Average program size in population (points): 21.174
Average percent parens in population: 0.100
Minimum age in population: 42.02372959256172
Maximum age in population: 46.27022992819548
Average age in population: 44.73915530620143
Median age in population: 44.78351466916502
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 216
Genome diversity (% unique genomes):	 0.339
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 229
Syntactic diversity (% unique Push programs):	 0.273
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 13701341
--- Timings ---
Current time: 1559583769225 milliseconds
Total Time:          80.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.2 seconds, 71.2%
Fitness Testing:     15.0 seconds, 18.6%
Report:               8.1 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 579
Test mean error for best: 0.57900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: 98                 
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 22                 
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: 67                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: 24                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: 74                 
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: 56                 
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in4 integer_dup in1 integer_add boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_dup integer_dup_times)
Lexicase best errors: [0 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.080
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in4 integer_dup in1 integer_add boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_dup integer_dup_times)
Zero cases best errors: [0 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.080
--- Lexicase Population Statistics ---
Count of elite individuals by case: (895 303 587 10 1000 1000 17 897 583 187)
Population mean number of elite cases: 5.48
Count of perfect (error zero) individuals by case: (895 303 587 10 0 0 17 897 583 187)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in4 integer_dup in1 integer_add boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_dup integer_dup_times)
Errors: [0 1 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 25
Percent parens: 0.080
--- Population Statistics ---
Average total errors in population: 6.521
Median total errors in population: 6
Error averages by case: (0.105 0.697 0.413 0.99 1.0 1.0 0.983 0.103 0.417 0.813)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 18.795
Average program size in population (points): 20.946
Average percent parens in population: 0.103
Minimum age in population: 43.028455093503
Maximum age in population: 47.92418567463756
Average age in population: 46.19714295734651
Median age in population: 46.26177641004324
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.385
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 230
Syntactic diversity (% unique Push programs):	 0.316
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 13892031
--- Timings ---
Current time: 1559583771587 milliseconds
Total Time:          82.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.2 seconds, 71.6%
Fitness Testing:     15.2 seconds, 18.3%
Report:               8.2 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_dup integer_dup_times)
Lexicase best errors: [1 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_dup integer_dup_times)
Zero cases best errors: [1 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 690 787 236 787 236 74 1000 236 17)
Population mean number of elite cases: 5.06
Count of perfect (error zero) individuals by case: (0 690 787 236 787 236 74 0 236 17)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 0 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 20
Size: 22
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 6.937
Median total errors in population: 7
Error averages by case: (1.0 0.31 0.213 0.764 0.213 0.764 0.926 1.0 0.764 0.983)
Error minima by case: (1 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 22.001
Average program size in population (points): 24.152
Average percent parens in population: 0.089
Minimum age in population: 45.21621419489384
Maximum age in population: 49.18687631934881
Average age in population: 47.43034751054179
Median age in population: 47.44306844845414
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 377
Genome diversity (% unique genomes):	 0.314
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 406
Syntactic diversity (% unique Push programs):	 0.273
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 14116402
--- Timings ---
Current time: 1559583773889 milliseconds
Total Time:          85.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.1 seconds, 71.9%
Fitness Testing:     15.4 seconds, 18.1%
Report:               8.4 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 534
Test mean error for best: 0.53400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: 15                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 88                 
Correct output: -96                 | Program output: 87                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 in1 integer_dup boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 1 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.091
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 in1 integer_dup boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 1 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.091
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 1 335 319 1000 28 251 811 587 892)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (269 1 335 319 0 28 251 811 587 892)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in4 integer_dup in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_stackdepth boolean_or integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 1 1 0 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 6.507
Median total errors in population: 6
Error averages by case: (0.731 0.999 0.665 0.681 1.0 0.972 0.749 0.189 0.413 0.108)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 21.289
Average program size in population (points): 23.302
Average percent parens in population: 0.087
Minimum age in population: 46.46723932120949
Maximum age in population: 50.89285318925977
Average age in population: 48.93999516956462
Median age in population: 49.09300515637733
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.331
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.294
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 14331885
--- Timings ---
Current time: 1559583776279 milliseconds
Total Time:          87.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.1 seconds, 72.2%
Fitness Testing:     15.6 seconds, 17.9%
Report:               8.6 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 546
Test mean error for best: 0.54600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_sub integer_dup integer_dup_times)
Lexicase best errors: [0 1 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.091
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_sub integer_dup integer_dup_times)
Zero cases best errors: [0 1 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.091
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 444 6 162 409 329 887 15 162 435)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (162 444 6 162 409 329 887 15 162 435)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in3 integer_add in4 integer_dup print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_dup integer_dup_times)
Errors: [0 1 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 20
Size: 22
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 6.989
Median total errors in population: 7
Error averages by case: (0.838 0.556 0.994 0.838 0.591 0.671 0.113 0.985 0.838 0.565)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.78
Average program size in population (points): 22.779
Average percent parens in population: 0.088
Minimum age in population: 47.46723932120949
Maximum age in population: 52.36396978702396
Average age in population: 50.41614621569659
Median age in population: 50.52253991772886
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.388
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.322
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 14547534
--- Timings ---
Current time: 1559583778526 milliseconds
Total Time:          89.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.0 seconds, 72.5%
Fitness Testing:     15.9 seconds, 17.7%
Report:               8.7 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 6                  
Correct output: -33                 | Program output: 86                 
Correct output: -47                 | Program output: 43                 
Correct output: -60                 | Program output: 89                 
Correct output: -71                 | Program output: 74                 
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: 14                 
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: 74                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 32                 
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 17                 
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: 83                 
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: 56                 
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: 32                 
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup print_boolean integer_dec integer_dec print_boolean integer_stackdepth tag_exec_864 () integer_empty integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup print_boolean integer_dec integer_dec print_boolean integer_stackdepth tag_exec_864 () integer_empty integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (455 434 452 305 454 262 913 175 451 433)
Population mean number of elite cases: 4.33
Count of perfect (error zero) individuals by case: (455 434 452 305 454 262 913 175 451 433)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in3 integer_add in4 integer_dup print_boolean integer_dec integer_dec print_boolean integer_stackdepth tag_exec_864 () integer_empty integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 5.666
Median total errors in population: 6
Error averages by case: (0.545 0.566 0.548 0.695 0.546 0.738 0.087 0.825 0.549 0.567)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.93
Average program size in population (points): 22.898
Average percent parens in population: 0.086
Minimum age in population: 49.30215679202229
Maximum age in population: 53.61535827512853
Average age in population: 51.93347104607173
Median age in population: 52.00559157016687
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.36
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.31
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 14760070
--- Timings ---
Current time: 1559583780728 milliseconds
Total Time:          91.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.8 seconds, 72.7%
Fitness Testing:     16.1 seconds, 17.5%
Report:               8.9 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in1 integer_dup boolean_or integer_dec boolean_swap print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_dup integer_dup_times)
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 22
Percent parens: 0.091
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in1 integer_dup boolean_or integer_dec boolean_swap print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_dup integer_dup_times)
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 22
Percent parens: 0.091
--- Lexicase Population Statistics ---
Count of elite individuals by case: (121 121 639 916 639 902 163 916 122 916)
Population mean number of elite cases: 5.45
Count of perfect (error zero) individuals by case: (121 121 639 916 639 902 163 916 122 916)
Population mean number of perfect (error zero) cases: 5.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 20
Size: 22
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 4.545
Median total errors in population: 4
Error averages by case: (0.879 0.879 0.361 0.084 0.361 0.098 0.837 0.084 0.878 0.084)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.883
Average program size in population (points): 20.914
Average percent parens in population: 0.098
Minimum age in population: 51.23572173248976
Maximum age in population: 54.94865499139996
Average age in population: 52.62118797063432
Median age in population: 52.84868085442577
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 545
Genome diversity (% unique genomes):	 0.307
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 575
Syntactic diversity (% unique Push programs):	 0.255
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 14954458
--- Timings ---
Current time: 1559583783042 milliseconds
Total Time:          94.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.7 seconds, 73.0%
Fitness Testing:     16.3 seconds, 17.4%
Report:               9.0 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in3 boolean_and in2 in1 integer_dup boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_dup integer_dup_times)
Lexicase best errors: [1 0 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in3 boolean_and in2 in1 integer_dup boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_dup integer_dup_times)
Zero cases best errors: [1 0 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (34 589 15 587 927 924 598 262 15 598)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (34 589 15 587 927 924 598 262 15 598)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_899} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec integer_dec integer_stackdepth tag_exec_899 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 0 1 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 20
Size: 22
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 5.451
Median total errors in population: 4
Error averages by case: (0.966 0.411 0.985 0.413 0.073 0.076 0.402 0.738 0.985 0.402)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.577
Average program size in population (points): 21.641
Average percent parens in population: 0.096
Minimum age in population: 52.23572173248976
Maximum age in population: 56.09170969444676
Average age in population: 54.33636109447299
Median age in population: 54.3943033774267
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 201
Genome diversity (% unique genomes):	 0.339
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.28
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 15156040
--- Timings ---
Current time: 1559583785286 milliseconds
Total Time:          96.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.6 seconds, 73.2%
Fitness Testing:     16.6 seconds, 17.2%
Report:               9.2 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 in1 integer_dup boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.091
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 in1 integer_dup boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.091
--- Lexicase Population Statistics ---
Count of elite individuals by case: (443 923 922 171 200 256 370 442 21 436)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (443 923 922 171 200 256 370 442 21 436)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in2 in1 integer_dup boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 20
Size: 22
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 5.816
Median total errors in population: 6
Error averages by case: (0.557 0.077 0.078 0.829 0.8 0.744 0.63 0.558 0.979 0.564)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.152
Average program size in population (points): 21.191
Average percent parens in population: 0.096
Minimum age in population: 53.70154525712132
Maximum age in population: 57.51121503120521
Average age in population: 55.94048167970621
Median age in population: 55.94318510661833
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.364
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.294
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 15351116
--- Timings ---
Current time: 1559583787484 milliseconds
Total Time:          98.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.4 seconds, 73.4%
Fitness Testing:     16.8 seconds, 17.0%
Report:               9.3 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 54                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: 98                 
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 60                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 22                 
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 42                 
Correct output: -24                 | Program output: 90                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: 92                 
Correct output: -22                 | Program output: 30                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: 63                 
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: 78                 
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: 24                 
Correct output: -71                 | Program output: 39                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: 33                 
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 63                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_stackdepth tag_exec_864 () integer_empty integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [1 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in2 integer_add in1 integer_dup boolean_or print_boolean integer_stackdepth tag_exec_864 () integer_empty integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [1 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 448 393 268 25 470 267 389 474 389)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (13 448 393 268 25 470 267 389 474 389)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (integer_mod in2 integer_add in1 integer_dup integer_stackdepth tag_exec_864 () integer_empty integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 0 1 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 14
Size: 16
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 6.864
Median total errors in population: 6
Error averages by case: (0.987 0.552 0.607 0.732 0.975 0.53 0.733 0.611 0.526 0.611)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.181
Average program size in population (points): 21.277
Average percent parens in population: 0.098
Minimum age in population: 55.12518279688084
Maximum age in population: 59.00063979141851
Average age in population: 57.23989610050992
Median age in population: 57.38580373011428
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 218
Genome diversity (% unique genomes):	 0.346
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.291
Total error diversity:				 0.006
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 15545887
--- Timings ---
Current time: 1559583789761 milliseconds
Total Time:         100.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.4 seconds, 73.7%
Fitness Testing:     17.0 seconds, 16.8%
Report:               9.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 6                  
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: 14                 
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: 15                 
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: 32                 
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 17                 
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: 85                 
Correct output: -38                 | Program output: 83                 
Correct output: -90                 | Program output: 33                 
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: 32                 
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: 87                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in3 integer_add in4 in1 print_boolean boolean_invert_first_then_and integer_dup_items print_boolean integer_stackdepth tag_exec_864 () integer_empty integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 1 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in3 integer_add in4 in1 print_boolean boolean_invert_first_then_and integer_dup_items print_boolean integer_stackdepth tag_exec_864 () integer_empty integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 1 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 469 2 376 1 2 928 465 924 377)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (13 469 2 376 1 2 928 465 924 377)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in3 integer_add in4 in1 print_boolean boolean_invert_first_then_and integer_dup_items print_boolean integer_stackdepth tag_exec_864 () integer_empty integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 1 0 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 20
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.443
Median total errors in population: 6
Error averages by case: (0.987 0.531 0.998 0.624 0.999 0.998 0.072 0.535 0.076 0.623)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.87
Average program size in population (points): 19.686
Average percent parens in population: 0.093
Minimum age in population: 56.12518279688084
Maximum age in population: 60.70004554335901
Average age in population: 58.68439358759855
Median age in population: 58.7575897611714
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.331
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.279
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 15726796
--- Timings ---
Current time: 1559583791934 milliseconds
Total Time:         103.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.2 seconds, 73.9%
Fitness Testing:     17.2 seconds, 16.7%
Report:               9.6 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 6                  
Correct output: -33                 | Program output: 86                 
Correct output: -47                 | Program output: 43                 
Correct output: -60                 | Program output: 89                 
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 36                 
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: 14                 
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 94                 
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: 75                 
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 32                 
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 17                 
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: 83                 
Correct output: -90                 | Program output: 33                 
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: 32                 
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in3 integer_add integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 20
Percent parens: 0.050
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in3 integer_add integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 20
Percent parens: 0.050
--- Lexicase Population Statistics ---
Count of elite individuals by case: (736 202 485 936 457 918 146 893 193 732)
Population mean number of elite cases: 5.70
Count of perfect (error zero) individuals by case: (736 202 485 936 457 918 146 893 193 732)
Population mean number of perfect (error zero) cases: 5.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in3 integer_add integer_add in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 4.302
Median total errors in population: 5
Error averages by case: (0.264 0.798 0.515 0.064 0.543 0.082 0.854 0.107 0.807 0.268)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.688
Average program size in population (points): 20.691
Average percent parens in population: 0.099
Minimum age in population: 59.46081003590371
Maximum age in population: 62.27950265320942
Average age in population: 60.64161752743311
Median age in population: 60.72678968648688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 267
Genome diversity (% unique genomes):	 0.276
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 276
Syntactic diversity (% unique Push programs):	 0.24
Total error diversity:				 0.01
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 15919518
--- Timings ---
Current time: 1559583794141 milliseconds
Total Time:         105.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.0 seconds, 74.1%
Fitness Testing:     17.4 seconds, 16.6%
Report:               9.7 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 546
Test mean error for best: 0.54600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup print_boolean print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 0 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 23
Percent parens: 0.087
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup print_boolean print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 0 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 23
Percent parens: 0.087
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 861 903 739 1000 1000 1000 734 9 14)
Population mean number of elite cases: 6.45
Count of perfect (error zero) individuals by case: (190 861 903 739 0 0 0 734 9 14)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in3 integer_add in4 integer_dup print_boolean print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 0 0 0 1 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 23
Percent parens: 0.087
--- Population Statistics ---
Average total errors in population: 6.55
Median total errors in population: 6
Error averages by case: (0.81 0.139 0.097 0.261 1.0 1.0 1.0 0.266 0.991 0.986)
Error minima by case: (0 0 0 0 1 1 1 0 0 0)
Average genome size in population (length): 19.2
Average program size in population (points): 20.619
Average percent parens in population: 0.069
Minimum age in population: 60.56312320391589
Maximum age in population: 63.29318254187092
Average age in population: 61.74100062180496
Median age in population: 61.86452613585243
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 463
Genome diversity (% unique genomes):	 0.272
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 495
Syntactic diversity (% unique Push programs):	 0.237
Total error diversity:				 0.006
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 16117387
--- Timings ---
Current time: 1559583796328 milliseconds
Total Time:         107.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.9 seconds, 74.3%
Fitness Testing:     17.6 seconds, 16.4%
Report:               9.9 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: 15                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 88                 
Correct output: -96                 | Program output: 87                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 1 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.063
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 1 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.063
--- Lexicase Population Statistics ---
Count of elite individuals by case: (884 11 298 217 73 207 609 218 73 1000)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (884 11 298 217 73 207 609 218 73 0)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 1 1 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 32
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 7.41
Median total errors in population: 7
Error averages by case: (0.116 0.989 0.702 0.783 0.927 0.793 0.391 0.782 0.927 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 20.35
Average program size in population (points): 22.068
Average percent parens in population: 0.079
Minimum age in population: 61.56312320391589
Maximum age in population: 64.9281528728934
Average age in population: 63.27346041217628
Median age in population: 63.32360951520968
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.299
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 254
Syntactic diversity (% unique Push programs):	 0.249
Total error diversity:				 0.006
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 16334986
--- Timings ---
Current time: 1559583798609 milliseconds
Total Time:         109.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.7 seconds, 74.5%
Fitness Testing:     17.9 seconds, 16.3%
Report:              10.0 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: 15                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 88                 
Correct output: -96                 | Program output: 87                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in3 integer_add integer_add in1 integer_dup integer_dup boolean_or print_boolean integer_dec print_boolean print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 1 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in3 integer_add integer_add in1 integer_dup integer_dup boolean_or print_boolean integer_dec print_boolean print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 1 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (289 450 604 321 1000 604 1000 613 911 1000)
Population mean number of elite cases: 6.79
Count of perfect (error zero) individuals by case: (289 450 604 321 0 604 0 613 911 0)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [1 0 0 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 32
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 6.208
Median total errors in population: 5
Error averages by case: (0.711 0.55 0.396 0.679 1.0 0.396 1.0 0.387 0.089 1.0)
Error minima by case: (0 0 0 0 1 0 1 0 0 1)
Average genome size in population (length): 23.682
Average program size in population (points): 25.712
Average percent parens in population: 0.081
Minimum age in population: 62.56312320391589
Maximum age in population: 66.46451619946993
Average age in population: 64.5527379785276
Median age in population: 64.64247773989246
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.402
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.339
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 16575281
--- Timings ---
Current time: 1559583800911 milliseconds
Total Time:         112.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.6 seconds, 74.6%
Fitness Testing:     18.1 seconds, 16.2%
Report:              10.2 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 100                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: 63                 
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: 74                 
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: 82                 
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: 43                 
Correct output: -95                 | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: 67                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: 91                 
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: 15                 
Correct output: -53                 | Program output: 74                 
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: 52                 
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: 85                 
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: 56                 
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: 88                 
Correct output: -96                 | Program output: 87                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_or tag_exec_864 () integer_empty integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Lexicase best errors: [0 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.091
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_or tag_exec_864 () integer_empty integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Zero cases best errors: [0 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.091
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 1 19 352 348 90 352 897 84 88)
Population mean number of elite cases: 2.58
Count of perfect (error zero) individuals by case: (352 1 19 352 348 90 352 897 84 88)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_or integer_div integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 1 0 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 30
Size: 32
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 7.417
Median total errors in population: 9
Error averages by case: (0.648 0.999 0.981 0.648 0.652 0.91 0.648 0.103 0.916 0.912)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.928
Average program size in population (points): 28.011
Average percent parens in population: 0.077
Minimum age in population: 63.56312320391589
Maximum age in population: 67.81276068372176
Average age in population: 65.86704450714387
Median age in population: 65.98335346571469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.388
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 16840999
--- Timings ---
Current time: 1559583803583 milliseconds
Total Time:         114.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.8 seconds, 74.8%
Fitness Testing:     18.4 seconds, 16.0%
Report:              10.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 100                
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: 98                 
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: 22                 
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: 92                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: 62                 
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: 78                 
Correct output: -69                 | Program output: 15                 
Correct output: -53                 | Program output: 24                 
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: 72                 
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: 74                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: 85                 
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: 66                 
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 88                 
Correct output: -96                 | Program output: 87                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean in1 integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec boolean_dup_times tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt)
Lexicase best errors: [0 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.067
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean in1 integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec boolean_dup_times tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt)
Zero cases best errors: [0 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.067
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 724 9 456 96 21 129 335 413 413)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (9 724 9 456 96 21 129 335 413 413)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean print_boolean in1 integer_dup boolean_or print_boolean integer_dec boolean_or integer_dec integer_mod integer_shove print_integer integer_lt integer_yank integer_dup_times)
Errors: [0 1 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 24
Percent parens: 0.042
--- Population Statistics ---
Average total errors in population: 7.395
Median total errors in population: 8
Error averages by case: (0.991 0.276 0.991 0.544 0.904 0.979 0.871 0.665 0.587 0.587)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.99
Average program size in population (points): 30.037
Average percent parens in population: 0.068
Minimum age in population: 65.1378542605728
Maximum age in population: 69.0103612608159
Average age in population: 67.51684382710131
Median age in population: 67.55315120488831
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.387
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.333
Total error diversity:				 0.006
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 17123346
--- Timings ---
Current time: 1559583805869 milliseconds
Total Time:         117.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.6 seconds, 74.9%
Fitness Testing:     18.7 seconds, 16.0%
Report:              10.6 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 46                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 47                 
Correct output: 7                   | Program output: 58                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 28                 
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: 42                 
Correct output: -24                 | Program output: 90                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 86                 
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: 38                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 39                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 98                 
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: 33                 
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 80                 
Correct output: -34                 | Program output: 83                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: 40                 
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 91                 
Correct output: -96                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 74                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in1 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items in4 integer_dup_items integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_yank integer_dup_times)
Lexicase best errors: [0 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 33
Percent parens: 0.061
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in1 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items in4 integer_dup_items integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_yank integer_dup_times)
Zero cases best errors: [0 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 33
Percent parens: 0.061
--- Lexicase Population Statistics ---
Count of elite individuals by case: (385 393 421 384 847 372 253 909 221 633)
Population mean number of elite cases: 4.82
Count of perfect (error zero) individuals by case: (385 393 421 384 847 372 253 909 221 633)
Population mean number of perfect (error zero) cases: 4.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Best program: (boolean_and in1 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items in4 integer_dup_items integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_yank integer_dup_times)
Errors: [0 0 1 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 33
Percent parens: 0.061
--- Population Statistics ---
Average total errors in population: 5.182
Median total errors in population: 5
Error averages by case: (0.615 0.607 0.579 0.616 0.153 0.628 0.747 0.091 0.779 0.367)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.041
Average program size in population (points): 31.043
Average percent parens in population: 0.064
Minimum age in population: 67.51347393690003
Maximum age in population: 70.45793549689478
Average age in population: 69.04514802000025
Median age in population: 69.09269989481004
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.367
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 17415295
--- Timings ---
Current time: 1559583808198 milliseconds
Total Time:         119.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.4 seconds, 75.0%
Fitness Testing:     19.0 seconds, 15.9%
Report:              10.7 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 560
Test mean error for best: 0.56000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 86                 
Correct output: -47                 | Program output: 43                 
Correct output: -60                 | Program output: 89                 
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 36                 
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 94                 
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 75                 
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 30                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: 32                 
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean in1 integer_swap print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove integer_shove print_integer integer_lt)
Lexicase best errors: [0 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 31
Percent parens: 0.065
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean in1 integer_swap print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove integer_shove print_integer integer_lt)
Zero cases best errors: [0 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 31
Percent parens: 0.065
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 578 12 86 51 87 86 250 7 317)
Population mean number of elite cases: 1.56
Count of perfect (error zero) individuals by case: (86 578 12 86 51 87 86 250 7 317)
Population mean number of perfect (error zero) cases: 1.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean in1 integer_swap print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove integer_shove print_integer integer_lt)
Errors: [0 0 1 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 31
Percent parens: 0.065
--- Population Statistics ---
Average total errors in population: 8.44
Median total errors in population: 8
Error averages by case: (0.914 0.422 0.988 0.914 0.949 0.913 0.914 0.75 0.993 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.233
Average program size in population (points): 31.254
Average percent parens in population: 0.065
Minimum age in population: 68.51347393690003
Maximum age in population: 72.00911476093745
Average age in population: 70.30799169177617
Median age in population: 70.34610332515764
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.489
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 153
Syntactic diversity (% unique Push programs):	 0.406
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 17714987
--- Timings ---
Current time: 1559583810555 milliseconds
Total Time:         121.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.3 seconds, 75.0%
Fitness Testing:     19.3 seconds, 15.9%
Report:              11.0 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 546
Test mean error for best: 0.54600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_yank integer_dup_times)
Lexicase best errors: [1 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.063
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt integer_yank integer_yank integer_dup_times)
Zero cases best errors: [1 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.063
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 912 176 209 38 193 100 912 916 192)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (210 912 176 209 38 193 100 912 916 192)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add in4 integer_dup boolean_or print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove print_integer integer_lt)
Errors: [1 0 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 24
Percent parens: 0.083
--- Population Statistics ---
Average total errors in population: 6.142
Median total errors in population: 6
Error averages by case: (0.79 0.088 0.824 0.791 0.962 0.807 0.9 0.088 0.084 0.808)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.393
Average program size in population (points): 29.811
Average percent parens in population: 0.082
Minimum age in population: 70.57549600914697
Maximum age in population: 73.39093758399984
Average age in population: 72.13677390997975
Median age in population: 72.24040933926109
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 301
Genome diversity (% unique genomes):	 0.354
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 319
Syntactic diversity (% unique Push programs):	 0.316
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 17990426
--- Timings ---
Current time: 1559583812899 milliseconds
Total Time:         124.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.2 seconds, 75.1%
Fitness Testing:     19.6 seconds, 15.8%
Report:              11.1 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 526
Test mean error for best: 0.52600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: 15                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 88                 
Correct output: -96                 | Program output: 87                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean in1 integer_dup integer_dec integer_dec boolean_or print_boolean in1 integer_swap print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove integer_shove print_integer integer_lt)
Lexicase best errors: [0 1 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 30
Percent parens: 0.067
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean in1 integer_dup integer_dec integer_dec boolean_or print_boolean in1 integer_swap print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup integer_shove integer_shove print_integer integer_lt)
Zero cases best errors: [0 1 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 30
Percent parens: 0.067
--- Lexicase Population Statistics ---
Count of elite individuals by case: (340 246 269 246 407 75 838 910 408 381)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (340 246 269 246 407 75 838 910 408 381)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_dup print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [0 1 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 30
Size: 33
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 5.88
Median total errors in population: 5
Error averages by case: (0.66 0.754 0.731 0.754 0.593 0.925 0.162 0.09 0.592 0.619)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.703
Average program size in population (points): 28.257
Average percent parens in population: 0.090
Minimum age in population: 71.57549600914697
Maximum age in population: 75.1578832507923
Average age in population: 73.7862130218132
Median age in population: 73.79132539054721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.403
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.341
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 18246917
--- Timings ---
Current time: 1559583815227 milliseconds
Total Time:         126.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.0 seconds, 75.2%
Fitness Testing:     19.9 seconds, 15.7%
Report:              11.3 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 526
Test mean error for best: 0.52600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: 15                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 88                 
Correct output: -96                 | Program output: 87                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_dup print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 33
Percent parens: 0.091
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_dup print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 33
Percent parens: 0.091
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 519 519 519 538 708 265 919 732 519)
Population mean number of elite cases: 5.50
Count of perfect (error zero) individuals by case: (263 519 519 519 538 708 265 919 732 519)
Population mean number of perfect (error zero) cases: 5.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_dup print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 33
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 4.499
Median total errors in population: 4
Error averages by case: (0.737 0.481 0.481 0.481 0.462 0.292 0.735 0.081 0.268 0.481)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.429
Average program size in population (points): 30.142
Average percent parens in population: 0.090
Minimum age in population: 73.08845701804995
Maximum age in population: 76.96036052411527
Average age in population: 75.34344064841984
Median age in population: 75.47034888806886
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.432
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.366
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 18526247
--- Timings ---
Current time: 1559583817558 milliseconds
Total Time:         128.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        96.9 seconds, 75.3%
Fitness Testing:     20.1 seconds, 15.7%
Report:              11.5 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 526
Test mean error for best: 0.52600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_flush in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean in1 integer_dup boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Lexicase best errors: [1 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.103
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_flush in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean in1 integer_dup boolean_or print_boolean integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Zero cases best errors: [1 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (19 15 43 814 548 548 267 265 54 834)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (19 15 43 814 548 548 267 265 54 834)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [1 1 1 0 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 30
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.593
Median total errors in population: 6
Error averages by case: (0.981 0.985 0.957 0.186 0.452 0.452 0.733 0.735 0.946 0.166)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.003
Average program size in population (points): 32.075
Average percent parens in population: 0.096
Minimum age in population: 74.37763090891349
Maximum age in population: 78.80848091894278
Average age in population: 76.99887236185899
Median age in population: 77.01619585781603
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 331
Genome diversity (% unique genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 388
Syntactic diversity (% unique Push programs):	 0.386
Total error diversity:				 0.005
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 18824407
--- Timings ---
Current time: 1559583819909 milliseconds
Total Time:         131.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.7 seconds, 75.4%
Fitness Testing:     20.5 seconds, 15.6%
Report:              11.7 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_dup () integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Lexicase best errors: [0 1 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 38
Percent parens: 0.105
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_dup () integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Zero cases best errors: [0 1 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 38
Percent parens: 0.105
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 399 420 399 27 287 436 287 287 382)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (216 399 420 399 27 287 436 287 287 382)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_dup () integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [0 1 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 6.86
Median total errors in population: 7
Error averages by case: (0.784 0.601 0.58 0.601 0.973 0.713 0.564 0.713 0.713 0.618)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.551
Average program size in population (points): 30.791
Average percent parens in population: 0.106
Minimum age in population: 75.51343509723844
Maximum age in population: 80.36924694014655
Average age in population: 78.55419209348035
Median age in population: 78.58985529500698
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.409
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 19113019
--- Timings ---
Current time: 1559583822245 milliseconds
Total Time:         133.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.6 seconds, 75.4%
Fitness Testing:     20.8 seconds, 15.6%
Report:              11.9 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 518
Test mean error for best: 0.51800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: 63                 
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: 74                 
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 82                 
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: 74                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: 52                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: 56                 
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 87                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction tagged_718} {:close 2, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty integer_sub tagged_718 integer_shove print_integer integer_lt)
Lexicase best errors: [0 0 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.069
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction tagged_718} {:close 2, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty integer_sub tagged_718 integer_shove print_integer integer_lt)
Zero cases best errors: [0 0 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.069
--- Lexicase Population Statistics ---
Count of elite individuals by case: (557 285 361 468 359 181 104 363 560 402)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (557 285 361 468 359 181 104 363 560 402)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_swap integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [0 0 0 1 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 42
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 6.36
Median total errors in population: 6
Error averages by case: (0.443 0.715 0.639 0.532 0.641 0.819 0.896 0.637 0.44 0.598)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.782
Average program size in population (points): 35.411
Average percent parens in population: 0.102
Minimum age in population: 78.03719023556853
Maximum age in population: 81.93983501043392
Average age in population: 80.02631311718176
Median age in population: 80.09005741655876
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 281
Genome diversity (% unique genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 308
Syntactic diversity (% unique Push programs):	 0.384
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 19440190
--- Timings ---
Current time: 1559583824707 milliseconds
Total Time:         135.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.5 seconds, 75.5%
Fitness Testing:     21.1 seconds, 15.5%
Report:              12.1 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 86                 
Correct output: -47                 | Program output: 43                 
Correct output: -60                 | Program output: 89                 
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 36                 
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 94                 
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 75                 
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 30                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: 32                 
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add integer_mod integer_dup integer_swap boolean_invert_first_then_and exec_do*range (integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_dup) print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Lexicase best errors: [1 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.089
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add integer_mod integer_dup integer_swap boolean_invert_first_then_and exec_do*range (integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_dup) print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Zero cases best errors: [1 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.089
--- Lexicase Population Statistics ---
Count of elite individuals by case: (377 252 180 179 444 25 653 11 874 69)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (377 252 180 179 444 25 653 11 874 69)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add exec_do*range (integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_dup) print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [1 0 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 41
Percent parens: 0.098
--- Population Statistics ---
Average total errors in population: 6.936
Median total errors in population: 6
Error averages by case: (0.623 0.748 0.82 0.821 0.556 0.975 0.347 0.989 0.126 0.931)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.299
Average program size in population (points): 34.717
Average percent parens in population: 0.099
Minimum age in population: 79.4713004281738
Maximum age in population: 82.81828955188318
Average age in population: 81.24715231751877
Median age in population: 81.37232465161156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.402
Total error diversity:				 0.006
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 19762987
--- Timings ---
Current time: 1559583827106 milliseconds
Total Time:         138.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.3 seconds, 75.5%
Fitness Testing:     21.4 seconds, 15.5%
Report:              12.3 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 526
Test mean error for best: 0.52600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 86                 
Correct output: -47                 | Program output: 43                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 36                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 94                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 32                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_swap integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or print_boolean integer_dec boolean_xor integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Lexicase best errors: [0 1 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.077
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_swap integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or print_boolean integer_dec boolean_xor integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Zero cases best errors: [0 1 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.077
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 153 190 197 252 279 349 351 254 256)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (360 153 190 197 252 279 349 351 254 256)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_swap integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or print_boolean integer_dec boolean_xor integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [0 1 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 39
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 7.359
Median total errors in population: 6
Error averages by case: (0.64 0.847 0.81 0.803 0.748 0.721 0.651 0.649 0.746 0.744)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.813
Average program size in population (points): 35.403
Average percent parens in population: 0.102
Minimum age in population: 80.67378073806711
Maximum age in population: 84.61147133980911
Average age in population: 82.99754584731853
Median age in population: 83.08091712981084
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.511
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.006
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 20092595
--- Timings ---
Current time: 1559583829497 milliseconds
Total Time:         140.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       106.2 seconds, 75.5%
Fitness Testing:     21.7 seconds, 15.5%
Report:              12.5 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 536
Test mean error for best: 0.53600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 86                 
Correct output: -47                 | Program output: 43                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 36                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 94                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 32                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: 83                 
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tagged_718} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add exec_do*range (integer_dup integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup boolean_or) print_boolean boolean_dup_times integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth exec_noop integer_empty boolean_yankdup tagged_718 integer_shove print_integer integer_lt)
Lexicase best errors: [0 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 30
Percent parens: 0.067
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tagged_718} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add exec_do*range (integer_dup integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup boolean_or) print_boolean boolean_dup_times integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth exec_noop integer_empty boolean_yankdup tagged_718 integer_shove print_integer integer_lt)
Zero cases best errors: [0 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 30
Percent parens: 0.067
--- Lexicase Population Statistics ---
Count of elite individuals by case: (478 275 474 480 472 418 123 474 320 102)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (478 275 474 480 472 418 123 474 320 102)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tagged_718} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add exec_do*range (integer_dup integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup boolean_or) print_boolean boolean_dup_times integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth exec_noop integer_empty boolean_yankdup tagged_718 integer_shove print_integer integer_lt)
Errors: [0 1 0 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 28
Size: 30
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 6.384
Median total errors in population: 6
Error averages by case: (0.522 0.725 0.526 0.52 0.528 0.582 0.877 0.526 0.68 0.898)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.568
Average program size in population (points): 33.653
Average percent parens in population: 0.092
Minimum age in population: 82.10750032869427
Maximum age in population: 86.17355360224877
Average age in population: 84.43974727014651
Median age in population: 84.59098698709226
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.419
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 20409481
--- Timings ---
Current time: 1559583831827 milliseconds
Total Time:         142.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.0 seconds, 75.6%
Fitness Testing:     22.1 seconds, 15.4%
Report:              12.8 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 551
Test mean error for best: 0.55100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 6                  
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: 67                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and integer_rot print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Lexicase best errors: [0 0 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.086
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and integer_rot print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Zero cases best errors: [0 0 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.086
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 590 485 494 455 225 139 139 139 11)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (279 590 485 494 455 225 139 139 139 11)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and integer_rot print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [0 0 1 0 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 35
Percent parens: 0.086
--- Population Statistics ---
Average total errors in population: 7.044
Median total errors in population: 7
Error averages by case: (0.721 0.41 0.515 0.506 0.545 0.775 0.861 0.861 0.861 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.821
Average program size in population (points): 32.613
Average percent parens in population: 0.085
Minimum age in population: 83.54164512858931
Maximum age in population: 87.72653098845073
Average age in population: 86.08347188427771
Median age in population: 86.12232387725285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.006
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 20719247
--- Timings ---
Current time: 1559583834154 milliseconds
Total Time:         145.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       109.8 seconds, 75.6%
Fitness Testing:     22.4 seconds, 15.4%
Report:              12.9 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 551
Test mean error for best: 0.55100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 6                  
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: 67                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_877} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and integer_rot print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_877 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Lexicase best errors: [1 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 35
Percent parens: 0.086
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_877} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and integer_rot print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_877 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Zero cases best errors: [1 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 35
Percent parens: 0.086
--- Lexicase Population Statistics ---
Count of elite individuals by case: (141 261 762 559 564 552 340 327 111 384)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (141 261 762 559 564 552 340 327 111 384)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and integer_rot print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [1 0 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 35
Percent parens: 0.086
--- Population Statistics ---
Average total errors in population: 5.999
Median total errors in population: 5
Error averages by case: (0.859 0.739 0.238 0.441 0.436 0.448 0.66 0.673 0.889 0.616)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.202
Average program size in population (points): 34.611
Average percent parens in population: 0.098
Minimum age in population: 84.54164512858931
Maximum age in population: 88.96143679413045
Average age in population: 87.45941221715003
Median age in population: 87.41749404949596
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 174
Genome diversity (% unique genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.008
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 21045515
--- Timings ---
Current time: 1559583836521 milliseconds
Total Time:         147.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.7 seconds, 75.7%
Fitness Testing:     22.7 seconds, 15.4%
Report:              13.1 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 546
Test mean error for best: 0.54600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 100                
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: 63                 
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: 74                 
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 82                 
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: 43                 
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: 74                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: 52                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: 56                 
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 88                 
Correct output: -96                 | Program output: 87                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.086
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.086
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 201 791 242 9 548 9 107 9 552)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (9 201 791 242 9 548 9 107 9 552)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup boolean_or in1 integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth integer_eq integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 41
Size: 43
Percent parens: 0.047
--- Population Statistics ---
Average total errors in population: 7.523
Median total errors in population: 7
Error averages by case: (0.991 0.799 0.209 0.758 0.991 0.452 0.991 0.893 0.991 0.448)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.091
Average program size in population (points): 35.441
Average percent parens in population: 0.095
Minimum age in population: 86.12571241852329
Maximum age in population: 90.81110354828829
Average age in population: 88.80923176596117
Median age in population: 88.89055281431247
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 21380598
--- Timings ---
Current time: 1559583838896 milliseconds
Total Time:         150.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.5 seconds, 75.7%
Fitness Testing:     23.0 seconds, 15.4%
Report:              13.4 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 524
Test mean error for best: 0.52400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: 15                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 88                 
Correct output: -96                 | Program output: 87                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_dup print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Lexicase best errors: [0 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.075
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_dup print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Zero cases best errors: [0 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.075
--- Lexicase Population Statistics ---
Count of elite individuals by case: (692 884 38 581 241 233 33 114 26 703)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (692 884 38 581 241 233 33 114 26 703)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 exec_stackdepth in4 integer_dup print_boolean boolean_invert_first_then_and integer_dup_items print_boolean in1 integer_dup boolean_dup print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_dup () integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [0 0 1 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 6.455
Median total errors in population: 6
Error averages by case: (0.308 0.116 0.962 0.419 0.759 0.767 0.967 0.886 0.974 0.297)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.222
Average program size in population (points): 38.284
Average percent parens in population: 0.081
Minimum age in population: 88.30317361421068
Maximum age in population: 92.04570384595333
Average age in population: 90.94159432436753
Median age in population: 90.90294707555454
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.385
Total error diversity:				 0.006
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 21741522
--- Timings ---
Current time: 1559583841348 milliseconds
Total Time:         152.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       115.4 seconds, 75.7%
Fitness Testing:     23.4 seconds, 15.3%
Report:              13.6 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: 98                 
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: 63                 
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: 67                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: 91                 
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: 15                 
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: 52                 
Correct output: -93                 | Program output: 17                 
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: 85                 
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: 56                 
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: 32                 
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 3, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (integer_max in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_div boolean_or in1 integer_dup boolean_or print_boolean integer_dec integer_dec exec_dup (print_boolean integer_dec integer_dec integer_dec integer_dec integer_dec boolean_or) print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth integer_eq integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 44
Percent parens: 0.068
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 3, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (integer_max in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_div boolean_or in1 integer_dup boolean_or print_boolean integer_dec integer_dec exec_dup (print_boolean integer_dec integer_dec integer_dec integer_dec integer_dec boolean_or) print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth integer_eq integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 44
Percent parens: 0.068
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 176 374 278 336 278 166 879 803 901)
Population mean number of elite cases: 4.42
Count of perfect (error zero) individuals by case: (227 176 374 278 336 278 166 879 803 901)
Population mean number of perfect (error zero) cases: 4.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_div boolean_or in1 integer_dup boolean_or print_boolean integer_dec integer_dec exec_dup (print_boolean integer_dec integer_dec integer_dec integer_dec integer_dec boolean_or) print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth integer_eq integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 41
Size: 44
Percent parens: 0.068
--- Population Statistics ---
Average total errors in population: 5.582
Median total errors in population: 5
Error averages by case: (0.773 0.824 0.626 0.722 0.664 0.722 0.834 0.121 0.197 0.099)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.977
Average program size in population (points): 35.368
Average percent parens in population: 0.099
Minimum age in population: 89.30317361421068
Maximum age in population: 93.85922145601394
Average age in population: 92.44169932429668
Median age in population: 92.55357540405907
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.009
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 22075174
--- Timings ---
Current time: 1559583843775 milliseconds
Total Time:         154.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       117.2 seconds, 75.7%
Fitness Testing:     23.7 seconds, 15.3%
Report:              13.8 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 87                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 72                 
Correct output: 38                  | Program output: 56                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 67                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 59                 
Correct output: 26                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 73                 
Correct output: 61                  | Program output: 84                 
Correct output: -54                 | Program output: 98                 
Correct output: -91                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 6                  
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: 47                 
Correct output: -43                 | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 70                 
Correct output: -37                 | Program output: 14                 
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 92                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -16                
Correct output: -22                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: 47                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 32                 
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 17                 
Correct output: -80                 | Program output: -64                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: 83                 
Correct output: -90                 | Program output: 33                 
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: 79                 
Correct output: -32                 | Program output: 99                 
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add boolean_invert_first_then_and in2 print_boolean boolean_flush print_boolean in1 integer_dup boolean_dup print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or integer_empty boolean_yankdup exec_dup (integer_shove) print_integer integer_lt)
Lexicase best errors: [1 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.069
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add boolean_invert_first_then_and in2 print_boolean boolean_flush print_boolean in1 integer_dup boolean_dup print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or integer_empty boolean_yankdup exec_dup (integer_shove) print_integer integer_lt)
Zero cases best errors: [1 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.069
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 43 43 631 877 352 172 220 19 89)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (86 43 43 631 877 352 172 220 19 89)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add boolean_invert_first_then_and in2 print_boolean boolean_flush print_boolean in1 integer_dup boolean_dup print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or integer_empty boolean_yankdup exec_dup (integer_shove) print_integer integer_lt)
Errors: [1 0 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 27
Size: 29
Percent parens: 0.069
--- Population Statistics ---
Average total errors in population: 7.468
Median total errors in population: 7
Error averages by case: (0.914 0.957 0.957 0.369 0.123 0.648 0.828 0.78 0.981 0.911)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.183
Average program size in population (points): 34.635
Average percent parens in population: 0.104
Minimum age in population: 90.30317361421068
Maximum age in population: 95.77811522288087
Average age in population: 94.4062883248781
Median age in population: 94.35035304182874
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 221
Genome diversity (% unique genomes):	 0.41
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 230
Syntactic diversity (% unique Push programs):	 0.366
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 22420416
--- Timings ---
Current time: 1559583846177 milliseconds
Total Time:         157.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       119.1 seconds, 75.7%
Fitness Testing:     24.1 seconds, 15.3%
Report:              14.0 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 547
Test mean error for best: 0.54700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 57                 
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 32                 
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush boolean_or print_boolean integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec exec_if (integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove) (print_integer integer_lt))
Lexicase best errors: [0 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush boolean_or print_boolean integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec exec_if (integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove) (print_integer integer_lt))
Zero cases best errors: [0 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (19 885 19 623 878 339 546 10 411 20)
Population mean number of elite cases: 3.75
Count of perfect (error zero) individuals by case: (19 885 19 623 878 339 546 10 411 20)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 integer_add in4 integer_dup integer_swap boolean_invert_first_then_and integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup exec_dup () integer_shove print_integer integer_lt)
Errors: [0 0 0 1 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.25
Median total errors in population: 6
Error averages by case: (0.981 0.115 0.981 0.377 0.122 0.661 0.454 0.99 0.589 0.98)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.265
Average program size in population (points): 34.192
Average percent parens in population: 0.086
Minimum age in population: 94.04388969378049
Maximum age in population: 97.54997803265117
Average age in population: 95.65047370681613
Median age in population: 95.70494351066223
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.43
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.379
Total error diversity:				 0.008
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 22751077
--- Timings ---
Current time: 1559583848477 milliseconds
Total Time:         159.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       120.9 seconds, 75.7%
Fitness Testing:     24.4 seconds, 15.3%
Report:              14.2 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 522
Test mean error for best: 0.52200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: 67                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_flush integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Lexicase best errors: [0 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.088
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_flush integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Zero cases best errors: [0 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (560 708 571 97 11 390 405 226 7 906)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (560 708 571 97 11 390 405 226 7 906)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_flush integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 6.119
Median total errors in population: 6
Error averages by case: (0.44 0.292 0.429 0.903 0.989 0.61 0.595 0.774 0.993 0.094)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.168
Average program size in population (points): 31.946
Average percent parens in population: 0.089
Minimum age in population: 95.49152936677154
Maximum age in population: 98.82450364037882
Average age in population: 97.67790674855102
Median age in population: 97.5848059690306
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.393
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.331
Total error diversity:				 0.007
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 23057075
--- Timings ---
Current time: 1559583850804 milliseconds
Total Time:         161.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       122.7 seconds, 75.8%
Fitness Testing:     24.7 seconds, 15.3%
Report:              14.4 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 487
Test mean error for best: 0.48700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_and in3 integer_add boolean_invert_first_then_and in2 print_boolean boolean_flush print_boolean in1 integer_dup boolean_dup print_boolean integer_dup integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_flush integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Lexicase best errors: [1 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_and in3 integer_add boolean_invert_first_then_and in2 print_boolean boolean_flush print_boolean in1 integer_dup boolean_dup print_boolean integer_dup integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_flush integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Zero cases best errors: [1 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 391 484 145 161 388 148 324 368 390)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (323 391 484 145 161 388 148 324 368 390)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_flush integer_dup boolean_or in4 print_boolean boolean_flush print_boolean in1 integer_dup boolean_dup in1 integer_dup boolean_dup print_boolean integer_dec boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec boolean_or integer_empty boolean_yankdup exec_dup (integer_shove) print_integer integer_lt)
Errors: [1 0 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 40
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 6.878
Median total errors in population: 7
Error averages by case: (0.677 0.609 0.516 0.855 0.839 0.612 0.852 0.676 0.632 0.61)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.154
Average program size in population (points): 34.17
Average percent parens in population: 0.088
Minimum age in population: 96.70494351066223
Maximum age in population: 100.6316862661088
Average age in population: 99.32149222937066
Median age in population: 99.39773732993996
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 168
Genome diversity (% unique genomes):	 0.431
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.374
Total error diversity:				 0.007
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 23374571
--- Timings ---
Current time: 1559583853169 milliseconds
Total Time:         164.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.6 seconds, 75.8%
Fitness Testing:     25.0 seconds, 15.2%
Report:              14.6 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 57                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 48                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 29                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 69                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 29
Percent parens: 0.103
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 187 479 293 153 893 354 480 311 156)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (534 187 479 293 153 893 354 480 311 156)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_flush integer_dup boolean_or in4 print_boolean integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 35
Size: 38
Percent parens: 0.079
--- Population Statistics ---
Average total errors in population: 6.16
Median total errors in population: 6
Error averages by case: (0.466 0.813 0.521 0.707 0.847 0.107 0.646 0.52 0.689 0.844)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.463
Average program size in population (points): 37.272
Average percent parens in population: 0.076
Minimum age in population: 98.68156153658038
Maximum age in population: 102.2920553640227
Average age in population: 100.6848023291063
Median age in population: 100.7830239269419
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.41
Total error diversity:				 0.009
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 23730402
--- Timings ---
Current time: 1559583855532 milliseconds
Total Time:         166.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       126.4 seconds, 75.8%
Fitness Testing:     25.4 seconds, 15.2%
Report:              14.8 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 520
Test mean error for best: 0.52000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: 63                 
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: 74                 
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 82                 
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 89                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: 74                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: 52                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: 56                 
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 87                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Lexicase best errors: [1 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.088
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Zero cases best errors: [1 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 136 537 482 868 754 136 529 153 135)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (99 136 537 482 868 754 136 529 153 135)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Best program: (boolean_and in3 integer_add in4 integer_dup boolean_and in3 boolean_or in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Errors: [1 0 0 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 39
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 6.171
Median total errors in population: 6
Error averages by case: (0.901 0.864 0.463 0.518 0.132 0.246 0.864 0.471 0.847 0.865)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.956
Average program size in population (points): 38.132
Average percent parens in population: 0.084
Minimum age in population: 100.5168245452504
Maximum age in population: 103.5100383341824
Average age in population: 102.3478107325536
Median age in population: 102.4053829751047
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.404
Total error diversity:				 0.008
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.158
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 24102743
--- Timings ---
Current time: 1559583857964 milliseconds
Total Time:         169.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       128.2 seconds, 75.8%
Fitness Testing:     25.7 seconds, 15.2%
Report:              15.0 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 534
Test mean error for best: 0.53400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 76                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 52                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: 67                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Lexicase best errors: [1 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.103
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Zero cases best errors: [1 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (272 726 273 875 164 179 172 149 871 22)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (272 726 273 875 164 179 172 149 871 22)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean boolean_flush integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_yankdup print_boolean boolean_flush integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Errors: [1 0 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 43
Size: 46
Percent parens: 0.065
--- Population Statistics ---
Average total errors in population: 6.297
Median total errors in population: 6
Error averages by case: (0.728 0.274 0.727 0.125 0.836 0.821 0.828 0.851 0.129 0.978)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.965
Average program size in population (points): 37.287
Average percent parens in population: 0.090
Minimum age in population: 101.5168245452504
Maximum age in population: 105.3177603865049
Average age in population: 103.9300911468635
Median age in population: 104.0372495294329
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.008
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 24455853
--- Timings ---
Current time: 1559583860432 milliseconds
Total Time:         171.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       130.1 seconds, 75.9%
Fitness Testing:     26.1 seconds, 15.2%
Report:              15.2 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Smallest problem report - generation 69
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 23                 
Correct output: 25                  | Program output: 63                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 47                 
Correct output: 7                   | Program output: 58                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 28                 
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 65                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: 60                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: 77                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 42                 
Correct output: -24                 | Program output: 90                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 30                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: 16                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 61                 
Correct output: -79                 | Program output: 63                 
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: 74                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Lexicase best errors: [0 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.088
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap boolean_invert_first_then_and in2 print_boolean boolean_flush integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Zero cases best errors: [0 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (211 79 543 187 44 317 143 143 894 891)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (211 79 543 187 44 317 143 143 894 891)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 boolean_or in4 boolean_and in3 boolean_or in4 integer_dup integer_swap integer_swap boolean_invert_first_then_and integer_dup_items exec_shove (in1 integer_dup boolean_dup) print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () integer_empty boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Errors: [0 1 1 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 53
Size: 56
Percent parens: 0.054
--- Population Statistics ---
Average total errors in population: 6.548
Median total errors in population: 6
Error averages by case: (0.789 0.921 0.457 0.813 0.956 0.683 0.857 0.857 0.106 0.109)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.134
Average program size in population (points): 35.735
Average percent parens in population: 0.103
Minimum age in population: 103.3534850126143
Maximum age in population: 106.8343026649982
Average age in population: 105.7163806523655
Median age in population: 105.6523552203942
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.007
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 24782334
--- Timings ---
Current time: 1559583862918 milliseconds
Total Time:         173.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       131.9 seconds, 75.9%
Fitness Testing:     26.4 seconds, 15.2%
Report:              15.5 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Smallest problem report - generation 70
Test total error for best: 547
Test mean error for best: 0.54700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 47                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 60                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: 70                 
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -42                
Correct output: -43                 | Program output: 77                 
Correct output: -92                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 30                 
Correct output: -78                 | Program output: 86                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: 63                 
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 16                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 39                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 80                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: 35                 
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 2                  
Correct output: -32                 | Program output: -24                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean boolean_flush in1 integer_dup boolean_or integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_invert_second_then_and integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Lexicase best errors: [0 1 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.068
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean boolean_flush in1 integer_dup boolean_or integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_invert_second_then_and integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Zero cases best errors: [0 1 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.068
--- Lexicase Population Statistics ---
Count of elite individuals by case: (23 233 428 587 195 26 537 342 368 876)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (23 233 428 587 195 26 537 342 368 876)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean boolean_flush in1 integer_dup boolean_or integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_invert_second_then_and integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Errors: [0 1 1 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 41
Size: 44
Percent parens: 0.068
--- Population Statistics ---
Average total errors in population: 6.385
Median total errors in population: 6
Error averages by case: (0.977 0.767 0.572 0.413 0.805 0.974 0.463 0.658 0.632 0.124)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.978
Average program size in population (points): 38.375
Average percent parens in population: 0.092
Minimum age in population: 104.9179473230232
Maximum age in population: 108.5082789552108
Average age in population: 107.1937021182627
Median age in population: 107.2346241049477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.409
Total error diversity:				 0.007
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.174
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 25143521
--- Timings ---
Current time: 1559583865365 milliseconds
Total Time:         176.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       133.8 seconds, 75.8%
Fitness Testing:     26.8 seconds, 15.2%
Report:              15.8 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Smallest problem report - generation 71
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 27                 
Correct output: 25                  | Program output: 41                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 66                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 83                 
Correct output: 38                  | Program output: 93                 
Correct output: 16                  | Program output: 57                 
Correct output: 0                   | Program output: 19                 
Correct output: 40                  | Program output: 54                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 51                 
Correct output: 41                  | Program output: 60                 
Correct output: 61                  | Program output: 77                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 60                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: 77                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 30                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: 16                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: 33                 
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 85                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -92                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 63                 
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -33                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap integer_swap boolean_invert_first_then_and integer_dup_items exec_shove (in1 integer_dup boolean_dup) print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 52
Percent parens: 0.058
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap integer_swap boolean_invert_first_then_and integer_dup_items exec_shove (in1 integer_dup boolean_dup) print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 52
Percent parens: 0.058
--- Lexicase Population Statistics ---
Count of elite individuals by case: (321 211 98 302 391 874 287 368 392 404)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (321 211 98 302 391 874 287 368 392 404)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Best program: (boolean_and in3 boolean_and in3 boolean_or in4 integer_dup integer_swap integer_swap boolean_invert_first_then_and integer_dup_items exec_shove (in1 integer_dup boolean_dup) print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dec integer_dec integer_dec integer_dec integer_dec in3 integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth integer_gte exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Errors: [0 0 1 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 42
Size: 45
Percent parens: 0.067
--- Population Statistics ---
Average total errors in population: 6.352
Median total errors in population: 6
Error averages by case: (0.679 0.789 0.902 0.698 0.609 0.126 0.713 0.632 0.608 0.596)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.665
Average program size in population (points): 41.944
Average percent parens in population: 0.082
Minimum age in population: 105.9912943209491
Maximum age in population: 110.2413168812697
Average age in population: 108.7589557561502
Median age in population: 108.8541159089341
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.427
Total error diversity:				 0.008
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 25538654
--- Timings ---
Current time: 1559583867876 milliseconds
Total Time:         178.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       135.6 seconds, 75.8%
Fitness Testing:     27.2 seconds, 15.2%
Report:              16.0 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Smallest problem report - generation 72
Test total error for best: 511
Test mean error for best: 0.51100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 46                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 47                 
Correct output: 7                   | Program output: 58                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 28                 
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 14                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: 77                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 42                 
Correct output: -24                 | Program output: 90                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 30                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 16                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 61                 
Correct output: -79                 | Program output: 63                 
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: 74                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction tag_integer_720} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap integer_swap boolean_invert_first_then_and integer_dup_items exec_shove (in1 integer_dup tag_integer_720) print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_empty boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Lexicase best errors: [0 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 52
Percent parens: 0.058
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction tag_integer_720} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_swap integer_swap boolean_invert_first_then_and integer_dup_items exec_shove (in1 integer_dup tag_integer_720) print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_empty boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Zero cases best errors: [0 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 52
Percent parens: 0.058
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 23 612 612 313 887 19 524 157 232)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (254 23 612 612 313 887 19 524 157 232)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and integer_dec integer_swap boolean_invert_first_then_and integer_dup_items exec_shove (in1 integer_dup boolean_dup) print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_empty boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Errors: [0 1 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 45
Size: 48
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 6.367
Median total errors in population: 6
Error averages by case: (0.746 0.977 0.388 0.388 0.687 0.113 0.981 0.476 0.843 0.768)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.813
Average program size in population (points): 43.947
Average percent parens in population: 0.074
Minimum age in population: 108.4523241272249
Maximum age in population: 111.9694309603619
Average age in population: 110.3302718453745
Median age in population: 110.5207784517085
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.481
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.416
Total error diversity:				 0.008
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.217
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 25959706
--- Timings ---
Current time: 1559583870408 milliseconds
Total Time:         181.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       137.5 seconds, 75.8%
Fitness Testing:     27.6 seconds, 15.2%
Report:              16.3 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Smallest problem report - generation 73
Test total error for best: 467
Test mean error for best: 0.46700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 47                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 86                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 39                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 80                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean boolean_flush in1 integer_dup boolean_or integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_invert_second_then_and integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 44
Percent parens: 0.068
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean boolean_flush in1 integer_dup boolean_or integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_invert_second_then_and integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 44
Percent parens: 0.068
--- Lexicase Population Statistics ---
Count of elite individuals by case: (415 622 611 459 459 542 15 542 863 578)
Population mean number of elite cases: 5.11
Count of perfect (error zero) individuals by case: (415 622 611 459 459 542 15 542 863 578)
Population mean number of perfect (error zero) cases: 5.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean boolean_flush in1 integer_dup boolean_or integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_invert_second_then_and integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 41
Size: 44
Percent parens: 0.068
--- Population Statistics ---
Average total errors in population: 4.894
Median total errors in population: 5
Error averages by case: (0.585 0.378 0.389 0.541 0.541 0.458 0.985 0.458 0.137 0.422)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.512
Average program size in population (points): 43.647
Average percent parens in population: 0.075
Minimum age in population: 109.7246434804487
Maximum age in population: 113.3704673102415
Average age in population: 111.2763794213739
Median age in population: 111.4759162988895
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.419
Total error diversity:				 0.009
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.155
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 26374729
--- Timings ---
Current time: 1559583872956 milliseconds
Total Time:         184.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       139.4 seconds, 75.8%
Fitness Testing:     28.0 seconds, 15.2%
Report:              16.5 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Smallest problem report - generation 74
Test total error for best: 467
Test mean error for best: 0.46700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 47                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 97                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -42                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 86                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: 35                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 39                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 80                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean boolean_flush in1 integer_dup boolean_or integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_invert_second_then_and integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 44
Percent parens: 0.068
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean boolean_flush in1 integer_dup boolean_or integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_invert_second_then_and integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 44
Percent parens: 0.068
--- Lexicase Population Statistics ---
Count of elite individuals by case: (527 447 809 511 652 257 105 555 516 398)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (527 447 809 511 652 257 105 555 516 398)
Population mean number of perfect (error zero) cases: 4.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_exec_864} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup})
Best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean boolean_flush in1 integer_dup boolean_or integer_swap boolean_invert_first_then_and integer_yankdup print_boolean boolean_invert_second_then_and integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_stackdepth tag_exec_864 () exec_empty boolean_yankdup exec_while () integer_shove print_integer integer_dup)
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 41
Size: 44
Percent parens: 0.068
--- Population Statistics ---
Average total errors in population: 5.223
Median total errors in population: 5
Error averages by case: (0.473 0.553 0.191 0.489 0.348 0.743 0.895 0.445 0.484 0.602)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.176
Average program size in population (points): 47.103
Average percent parens in population: 0.062
Minimum age in population: 110.7246434804487
Maximum age in population: 114.5297768357672
Average age in population: 112.4663741066095
Median age in population: 112.5438278727668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.009
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 26822957
--- Timings ---
Current time: 1559583875556 milliseconds
Total Time:         186.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       141.3 seconds, 75.7%
Fitness Testing:     28.4 seconds, 15.2%
Report:              16.8 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Smallest problem report - generation 75
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Lexicase best errors: [0 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.056
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Zero cases best errors: [0 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.056
--- Lexicase Population Statistics ---
Count of elite individuals by case: (602 651 375 317 44 191 261 892 576 236)
Population mean number of elite cases: 4.14
Count of perfect (error zero) individuals by case: (602 651 375 317 44 191 261 892 576 236)
Population mean number of perfect (error zero) cases: 4.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Errors: [0 0 1 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 51
Size: 54
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 5.855
Median total errors in population: 5
Error averages by case: (0.398 0.349 0.625 0.683 0.956 0.809 0.739 0.108 0.424 0.764)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.13
Average program size in population (points): 48.238
Average percent parens in population: 0.064
Minimum age in population: 111.7246434804487
Maximum age in population: 115.7997975161046
Average age in population: 113.9294433032605
Median age in population: 114.051869402882
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.008
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.193
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 27279495
--- Timings ---
Current time: 1559583878192 milliseconds
Total Time:         189.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       143.2 seconds, 75.7%
Fitness Testing:     28.8 seconds, 15.2%
Report:              17.0 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Smallest problem report - generation 76
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 54
Percent parens: 0.056
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 54
Percent parens: 0.056
--- Lexicase Population Statistics ---
Count of elite individuals by case: (465 117 559 463 409 362 856 7 659 464)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (465 117 559 463 409 362 856 7 659 464)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 51
Size: 54
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 5.639
Median total errors in population: 6
Error averages by case: (0.535 0.883 0.441 0.537 0.591 0.638 0.144 0.993 0.341 0.536)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.938
Average program size in population (points): 49.7
Average percent parens in population: 0.056
Minimum age in population: 113.749201449077
Maximum age in population: 117.612229612749
Average age in population: 116.0861224336988
Median age in population: 116.1643674598844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.009
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.192
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 27760566
--- Timings ---
Current time: 1559583880836 milliseconds
Total Time:         191.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       145.1 seconds, 75.6%
Fitness Testing:     29.3 seconds, 15.3%
Report:              17.3 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Smallest problem report - generation 77
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (integer_flush in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Lexicase best errors: [0 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.056
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (integer_flush in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Zero cases best errors: [0 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.056
--- Lexicase Population Statistics ---
Count of elite individuals by case: (469 721 275 244 395 400 9 473 591 461)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (469 721 275 244 395 400 9 473 591 461)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Errors: [0 0 1 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 51
Size: 54
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 5.962
Median total errors in population: 6
Error averages by case: (0.531 0.279 0.725 0.756 0.605 0.6 0.991 0.527 0.409 0.539)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.329
Average program size in population (points): 52.688
Average percent parens in population: 0.064
Minimum age in population: 114.9115881627595
Maximum age in population: 119.268455933231
Average age in population: 117.7492819639891
Median age in population: 117.8682094579779
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.008
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.219
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 28252075
--- Timings ---
Current time: 1559583883459 milliseconds
Total Time:         194.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       147.0 seconds, 75.6%
Fitness Testing:     29.8 seconds, 15.3%
Report:              17.6 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Smallest problem report - generation 78
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 15                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 54
Percent parens: 0.056
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 54
Percent parens: 0.056
--- Lexicase Population Statistics ---
Count of elite individuals by case: (590 532 555 495 396 627 24 658 656 228)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (590 532 555 495 396 627 24 658 656 228)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 51
Size: 54
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 5.239
Median total errors in population: 5
Error averages by case: (0.41 0.468 0.445 0.505 0.604 0.373 0.976 0.342 0.344 0.772)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.173
Average program size in population (points): 54.211
Average percent parens in population: 0.056
Minimum age in population: 116.7497162209857
Maximum age in population: 120.9499661340907
Average age in population: 119.170485133414
Median age in population: 119.266817113199
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.009
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 28770392
--- Timings ---
Current time: 1559583886134 milliseconds
Total Time:         197.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       148.8 seconds, 75.5%
Fitness Testing:     30.3 seconds, 15.4%
Report:              17.9 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Smallest problem report - generation 79
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 43                 
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec exec_while (integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec) exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 55
Percent parens: 0.073
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec exec_while (integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec) exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 55
Percent parens: 0.073
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 503 377 658 36 744 215 79 140 740)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (534 503 377 658 36 744 215 79 140 740)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and in3 boolean_or in4 integer_dup integer_yank integer_swap boolean_invert_first_then_and integer_dup_items print_boolean print_boolean exec_shove () in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec exec_while (integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec) exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 51
Size: 55
Percent parens: 0.073
--- Population Statistics ---
Average total errors in population: 5.974
Median total errors in population: 5
Error averages by case: (0.466 0.497 0.623 0.342 0.964 0.256 0.785 0.921 0.86 0.26)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.632
Average program size in population (points): 56.867
Average percent parens in population: 0.057
Minimum age in population: 117.7497162209857
Maximum age in population: 122.1796884586212
Average age in population: 120.1084282903602
Median age in population: 120.1840722038605
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.525
Total error diversity:				 0.009
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.229
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 29318594
--- Timings ---
Current time: 1559583888814 milliseconds
Total Time:         199.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       150.7 seconds, 75.4%
Fitness Testing:     30.8 seconds, 15.4%
Report:              18.2 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Smallest problem report - generation 80
Test total error for best: 482
Test mean error for best: 0.48200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 76                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 40                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 58                 
Correct output: 4                   | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 73                 
Correct output: 10                  | Program output: 56                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 74                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 100                
Correct output: -46                 | Program output: 77                 
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 45                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 36                 
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 99                 
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean print_boolean boolean_not exec_s_when_autoconstructing (boolean_or) (print_boolean integer_dec integer_dec integer_dec) (print_boolean in1 integer_dup boolean_dup) print_boolean in2 print_boolean boolean_flush integer_mult boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 66
Percent parens: 0.076
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean print_boolean boolean_not exec_s_when_autoconstructing (boolean_or) (print_boolean integer_dec integer_dec integer_dec) (print_boolean in1 integer_dup boolean_dup) print_boolean in2 print_boolean boolean_flush integer_mult boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 66
Percent parens: 0.076
--- Lexicase Population Statistics ---
Count of elite individuals by case: (898 147 499 57 93 896 481 15 432 334)
Population mean number of elite cases: 3.85
Count of perfect (error zero) individuals by case: (898 147 499 57 93 896 481 15 432 334)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 48
Size: 50
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 6.148
Median total errors in population: 6
Error averages by case: (0.102 0.853 0.501 0.943 0.907 0.104 0.519 0.985 0.568 0.666)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.773
Average program size in population (points): 58.384
Average percent parens in population: 0.062
Minimum age in population: 120.3372042345838
Maximum age in population: 123.6322756330335
Average age in population: 121.5497416352212
Median age in population: 121.6810337705797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.01
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 29851150
--- Timings ---
Current time: 1559583891479 milliseconds
Total Time:         202.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       152.6 seconds, 75.4%
Fitness Testing:     31.3 seconds, 15.5%
Report:              18.5 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Smallest problem report - generation 81
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -5                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -12                
Correct output: -98                 | Program output: 8                  
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: 32                 
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -56                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -64                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: 11                 
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 22                 
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_and} {:close 1, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean integer_dup print_boolean boolean_flush integer_dup boolean_or print_boolean print_boolean boolean_not integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean in1 integer_dup boolean_and print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec integer_div integer_dec integer_dec in1 integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 63
Percent parens: 0.032
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_and} {:close 1, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean integer_dup print_boolean boolean_flush integer_dup boolean_or print_boolean print_boolean boolean_not integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean in1 integer_dup boolean_and print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec integer_div integer_dec integer_dec in1 integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 63
Percent parens: 0.032
--- Lexicase Population Statistics ---
Count of elite individuals by case: (699 491 10 162 893 788 484 481 664 767)
Population mean number of elite cases: 5.44
Count of perfect (error zero) individuals by case: (699 491 10 162 893 788 484 481 664 767)
Population mean number of perfect (error zero) cases: 5.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_and} {:close 1, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean integer_dup print_boolean boolean_flush integer_dup boolean_or print_boolean print_boolean boolean_not integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean in1 integer_dup boolean_and print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec integer_div integer_dec integer_dec in1 integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 61
Size: 63
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 4.561
Median total errors in population: 4
Error averages by case: (0.301 0.509 0.99 0.838 0.107 0.212 0.516 0.519 0.336 0.233)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.621
Average program size in population (points): 55.649
Average percent parens in population: 0.054
Minimum age in population: 121.7900500446656
Maximum age in population: 124.2151514095375
Average age in population: 123.4169226232041
Median age in population: 123.2839223274966
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.01
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 30366609
--- Timings ---
Current time: 1559583894166 milliseconds
Total Time:         205.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       154.5 seconds, 75.3%
Fitness Testing:     31.8 seconds, 15.5%
Report:              18.8 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Smallest problem report - generation 82
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: 93                 
Correct output: 10                  | Program output: 38                 
Correct output: -16                 | Program output: 34                 
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 46                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 68                 
Correct output: 22                  | Program output: 47                 
Correct output: 7                   | Program output: 58                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 80                 
Correct output: 12                  | Program output: 31                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 54                 
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 28                 
Correct output: 40                  | Program output: 52                 
Correct output: 26                  | Program output: 67                 
Correct output: 4                   | Program output: 97                 
Correct output: 41                  | Program output: 57                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: 27                 
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: 60                 
Correct output: -47                 | Program output: 97                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: 34                 
Correct output: -43                 | Program output: 77                 
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 84                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 42                 
Correct output: -24                 | Program output: 90                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: 30                 
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: 16                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 91                 
Correct output: -96                 | Program output: 61                 
Correct output: -79                 | Program output: 63                 
Correct output: -32                 | Program output: 35                 
Correct output: -96                 | Program output: 74                 
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 boolean_flush integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean print_boolean boolean_not integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Lexicase best errors: [0 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.020
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 boolean_flush integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean print_boolean boolean_not integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Zero cases best errors: [0 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (19 738 559 56 727 31 610 773 121 19)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (19 738 559 56 727 31 610 773 121 19)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 boolean_flush integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean print_boolean boolean_not integer_dup boolean_or print_boolean integer_dec integer_dec integer_dec print_boolean in1 integer_dup boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 6.347
Median total errors in population: 5
Error averages by case: (0.981 0.262 0.441 0.944 0.273 0.969 0.39 0.227 0.879 0.981)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.611
Average program size in population (points): 60.758
Average percent parens in population: 0.035
Minimum age in population: 122.7900500446656
Maximum age in population: 126.1238457737326
Average age in population: 124.8647328555562
Median age in population: 125.0529306360128
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 278
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 322
Syntactic diversity (% unique Push programs):	 0.531
Total error diversity:				 0.007
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.197
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 30958700
--- Timings ---
Current time: 1559583896831 milliseconds
Total Time:         207.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       156.4 seconds, 75.2%
Fitness Testing:     32.3 seconds, 15.5%
Report:              19.1 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Smallest problem report - generation 83
Test total error for best: 331
Test mean error for best: 0.33100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -10                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -10                
Correct output: -80                 | Program output: -45                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -34                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -22                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec exec_while (integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec) exec_yank tag_exec_864 () integer_gt print_integer integer_lt)
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 54
Percent parens: 0.056
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec exec_while (integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec) exec_yank tag_exec_864 () integer_gt print_integer integer_lt)
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 54
Percent parens: 0.056
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 310 231 114 459 455 329 388 468 398)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (277 310 231 114 459 455 329 388 468 398)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec exec_while (integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec) exec_yank tag_exec_864 () integer_gt print_integer integer_lt)
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 51
Size: 54
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 6.571
Median total errors in population: 7
Error averages by case: (0.723 0.69 0.769 0.886 0.541 0.545 0.671 0.612 0.532 0.602)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.663
Average program size in population (points): 56.052
Average percent parens in population: 0.042
Minimum age in population: 124.7777946103276
Maximum age in population: 127.7038840506146
Average age in population: 126.5180522898443
Median age in population: 126.4761744046256
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.009
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 31500882
--- Timings ---
Current time: 1559583899418 milliseconds
Total Time:         210.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.2 seconds, 75.2%
Fitness Testing:     32.8 seconds, 15.6%
Report:              19.3 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Smallest problem report - generation 84
Test total error for best: 398
Test mean error for best: 0.39800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 44                 
Correct output: 4                   | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -41                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: 15                 
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: 42                 
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: 67                 
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -22                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 32                 
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: 5                  
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: 15                 
Correct output: -34                 | Program output: 5                  
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -14                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min exec_s (boolean_xor) (in2 integer_dup boolean_or) (boolean_pop in1 integer_dup integer_dup boolean_or) print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 43
Percent parens: 0.116
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min exec_s (boolean_xor) (in2 integer_dup boolean_or) (boolean_pop in1 integer_dup integer_dup boolean_or) print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 43
Percent parens: 0.116
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 264 295 544 203 547 675 546 795 237)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (269 264 295 544 203 547 675 546 795 237)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min exec_s (boolean_or) (in2 integer_dup boolean_or) (boolean_pop in1 integer_dup integer_dup boolean_or) print_boolean integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 38
Size: 43
Percent parens: 0.116
--- Population Statistics ---
Average total errors in population: 5.625
Median total errors in population: 5
Error averages by case: (0.731 0.736 0.705 0.456 0.797 0.453 0.325 0.454 0.205 0.763)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.966
Average program size in population (points): 55.889
Average percent parens in population: 0.053
Minimum age in population: 126.2839223274966
Maximum age in population: 129.4501140108053
Average age in population: 128.0476227733643
Median age in population: 128.252724906997
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 225
Genome diversity (% unique genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 260
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.009
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 31990084
--- Timings ---
Current time: 1559583901998 milliseconds
Total Time:         213.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.1 seconds, 75.2%
Fitness Testing:     33.2 seconds, 15.6%
Report:              19.6 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Smallest problem report - generation 85
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 35                 
Correct output: 7                   | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: 3                  
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 28                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: 7                  
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 42                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (integer_sub boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in1 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean integer_dup in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean exec_if (print_boolean boolean_flush integer_dup in2 print_boolean boolean_flush integer_dup boolean_or) (print_boolean integer_dec exec_while (integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec) exec_yank) tag_exec_864 () integer_gt print_integer integer_lt)
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 57
Percent parens: 0.088
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (integer_sub boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in1 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean integer_dup in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean exec_if (print_boolean boolean_flush integer_dup in2 print_boolean boolean_flush integer_dup boolean_or) (print_boolean integer_dec exec_while (integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec) exec_yank) tag_exec_864 () integer_gt print_integer integer_lt)
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 57
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (582 835 171 60 437 866 765 458 365 477)
Population mean number of elite cases: 5.02
Count of perfect (error zero) individuals by case: (582 835 171 60 437 866 765 458 365 477)
Population mean number of perfect (error zero) cases: 5.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in1 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec exec_while (integer_dec exec_eq integer_dec integer_rot integer_dec integer_dec) print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_dup_times boolean_yankdup boolean_rot integer_shove print_integer integer_lt)
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 59
Size: 62
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 4.984
Median total errors in population: 4
Error averages by case: (0.418 0.165 0.829 0.94 0.563 0.134 0.235 0.542 0.635 0.523)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.741
Average program size in population (points): 52.453
Average percent parens in population: 0.074
Minimum age in population: 128.1173712597633
Maximum age in population: 131.2051656889375
Average age in population: 129.8305454432243
Median age in population: 129.8271360486487
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.497
Total error diversity:				 0.01
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 32462327
--- Timings ---
Current time: 1559583904609 milliseconds
Total Time:         215.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.9 seconds, 75.1%
Fitness Testing:     33.7 seconds, 15.6%
Report:              19.9 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Smallest problem report - generation 86
Test total error for best: 245
Test mean error for best: 0.24500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 22                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 35                 
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 41                 
Correct output: 7                   | Program output: 58                 
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 8                  
Correct output: 38                  | Program output: 38                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -16                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -60                
Correct output: -20                 | Program output: 42                 
Correct output: -24                 | Program output: 70                 
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -63                
Correct output: 22                  | Program output: 74                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -86                
Correct output: -69                 | Program output: -45                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 39                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -3                 
Correct output: -38                 | Program output: 6                  
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: 5                  
Correct output: -96                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: 44                 
Correct output: -94                 | Program output: -31                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in1 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean integer_dup in2 print_boolean integer_min integer_dup boolean_or exec_dup () print_boolean in2 print_boolean boolean_flush integer_dup in2 print_boolean boolean_flush boolean_not boolean_or print_boolean integer_dec exec_while (integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec) exec_yank tag_exec_864 () integer_gt print_integer integer_lt)
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 56
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in1 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean integer_dup in2 print_boolean integer_min integer_dup boolean_or exec_dup () print_boolean in2 print_boolean boolean_flush integer_dup in2 print_boolean boolean_flush boolean_not boolean_or print_boolean integer_dec exec_while (integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec) exec_yank tag_exec_864 () integer_gt print_integer integer_lt)
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 56
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (822 87 663 871 798 576 664 663 708 89)
Population mean number of elite cases: 5.94
Count of perfect (error zero) individuals by case: (822 87 663 871 798 576 664 663 708 89)
Population mean number of perfect (error zero) cases: 5.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in1 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean integer_dup in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup in2 print_boolean boolean_flush integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt print_integer integer_lt)
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 42
Size: 44
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 4.059
Median total errors in population: 2
Error averages by case: (0.178 0.913 0.337 0.129 0.202 0.424 0.336 0.337 0.292 0.911)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.868
Average program size in population (points): 57.498
Average percent parens in population: 0.063
Minimum age in population: 129.3106889025416
Maximum age in population: 132.7228944733675
Average age in population: 131.6959535152427
Median age in population: 131.6768245103267
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.009
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 32953554
--- Timings ---
Current time: 1559583907197 milliseconds
Total Time:         218.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.8 seconds, 75.1%
Fitness Testing:     34.1 seconds, 15.6%
Report:              20.2 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Smallest problem report - generation 87
Test total error for best: 242
Test mean error for best: 0.24200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 34                 
Correct output: 29                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 91                 
Correct output: 16                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -43                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -66                
Correct output: 22                  | Program output: 66                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -12                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -87                
Correct output: -73                 | Program output: -73                
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 56                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -11                
Correct output: -90                 | Program output: -90                
Correct output: -72                 | Program output: -33                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: 7                  
Correct output: -79                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup in2 print_boolean boolean_flush exec_swap (boolean_or) (print_boolean integer_dec exec_while (integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec) exec_yank) tag_exec_864 () integer_gt print_integer integer_lt)
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 56
Percent parens: 0.089
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and boolean_and boolean_and in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup in2 print_boolean boolean_flush exec_swap (boolean_or) (print_boolean integer_dec exec_while (integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec) exec_yank) tag_exec_864 () integer_gt print_integer integer_lt)
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 56
Percent parens: 0.089
--- Lexicase Population Statistics ---
Count of elite individuals by case: (652 812 755 274 331 599 433 401 599 361)
Population mean number of elite cases: 5.22
Count of perfect (error zero) individuals by case: (652 812 755 274 331 599 433 401 599 361)
Population mean number of perfect (error zero) cases: 5.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 3, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 1, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and boolean_and boolean_and integer_eq boolean_or in4 boolean_or integer_stackdepth boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean boolean_flush integer_dup in2 print_boolean boolean_flush integer_dup boolean_or print_boolean integer_dec integer_min integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt print_integer integer_lt)
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 51
Size: 53
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 4.783
Median total errors in population: 4
Error averages by case: (0.348 0.188 0.245 0.726 0.669 0.401 0.567 0.599 0.401 0.639)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.733
Average program size in population (points): 59.357
Average percent parens in population: 0.061
Minimum age in population: 130.3106889025416
Maximum age in population: 134.5929190901465
Average age in population: 133.0443084402721
Median age in population: 133.1053520817748
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.009
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 33479701
--- Timings ---
Current time: 1559583909859 milliseconds
Total Time:         220.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.7 seconds, 75.0%
Fitness Testing:     34.6 seconds, 15.7%
Report:              20.4 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Smallest problem report - generation 88
Test total error for best: 263
Test mean error for best: 0.26300
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 16                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 67
Percent parens: 0.030
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 67
Percent parens: 0.030
--- Lexicase Population Statistics ---
Count of elite individuals by case: (567 749 564 769 566 234 330 870 320 636)
Population mean number of elite cases: 5.61
Count of perfect (error zero) individuals by case: (567 749 564 769 566 234 330 870 320 636)
Population mean number of perfect (error zero) cases: 5.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 1, :instruction tag_exec_864} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt})
Best program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 65
Size: 67
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 4.395
Median total errors in population: 4
Error averages by case: (0.433 0.251 0.436 0.231 0.434 0.766 0.67 0.13 0.68 0.364)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.699
Average program size in population (points): 61.074
Average percent parens in population: 0.056
Minimum age in population: 131.3106889025416
Maximum age in population: 136.1759653230592
Average age in population: 134.6027427828099
Median age in population: 134.7094979528962
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.011
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 34039514
--- Timings ---
Current time: 1559583912633 milliseconds
Total Time:         223.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.7 seconds, 75.0%
Fitness Testing:     35.1 seconds, 15.7%
Report:              20.7 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 88
Successful program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 67


Auto-simplifying with starting size: 67
step: 0
program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 500
program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 1000
program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 1500
program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 2000
program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 2500
program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 3000
program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 3500
program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 4000
program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 4500
program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 5000
program: (boolean_and integer_fromboolean in3 boolean_or in4 boolean_or in4 boolean_and in3 boolean_or in4 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 print_boolean integer_min integer_dup boolean_or boolean_dup print_boolean in2 boolean_dup print_boolean in2 integer_dup integer_eq boolean_pop in1 integer_dup boolean_dup integer_rot in2 integer_swap boolean_or boolean_pop in1 integer_dup integer_dup boolean_or print_boolean integer_dec boolean_pop integer_dec print_boolean integer_dec integer_dec integer_dec integer_dec print_boolean integer_dec integer_dec exec_yank tag_exec_864 () integer_gt boolean_yankdup boolean_rot integer_shove boolean_or boolean_flush print_integer integer_lt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 88
Test total error for best: 263
Test mean error for best: 0.26300
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -19                 | Program output: -19                
Correct output: 8                   | Program output: 8                  
Correct output: 58                  | Program output: 58                 
Correct output: -81                 | Program output: -64                
Correct output: 43                  | Program output: 44                 
Correct output: -66                 | Program output: -66                
Correct output: 10                  | Program output: 10                 
Correct output: -16                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: 89                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: 30                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 25                  | Program output: 29                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 10                  | Program output: 10                 
Correct output: 29                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 61                  | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -33                 | Program output: -33                
Correct output: -47                 | Program output: -47                
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: -65                 | Program output: -65                
Correct output: -20                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -57                 | Program output: -14                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -78                 | Program output: -78                
Correct output: -66                 | Program output: -24                
Correct output: 22                  | Program output: 22                 
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -62                
Correct output: -73                 | Program output: 16                 
Correct output: -94                 | Program output: -55                
Correct output: -69                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -98                 | Program output: -98                
Correct output: 38                  | Program output: 38                 
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -9                 
Correct output: -93                 | Program output: -33                
Correct output: -80                 | Program output: -60                
Correct output: -30                 | Program output: -30                
Correct output: -38                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -48                 | Program output: -48                
Correct output: -34                 | Program output: -34                
Correct output: -36                 | Program output: -36                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -89                
Correct output: -13                 | Program output: -13                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -32                 | Program output: -32                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -28                
Correct output: -79                 | Program output: -79                
;;******************************
