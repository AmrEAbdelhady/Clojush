Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[20 20 20 82] 20] [[-43 66 -43 -43] -43] [[96 -4 -4 -4] -4] [[100 100 100 -52] -52] [[-59 -59 -59 -12] -59] [[82 82 62 82] 62] [[-82 -82 -82 93] -82] [[-94 -87 -94 -94] -94] [[92 92 -89 92] -89] [[-85 -85 -85 31] -85] [(6 6 6 6) 6] [(-31 -31 -31 -31) -31] [(-36 -36 -36 -36) -36] [(-98 -98 -98 -98) -98] [(-66 -66 -66 -66) -66] [(17 77 41 77) 17] [(81 6 94 65) 6] [(82 70 26 2) 2] [(1 69 88 3) 1] [(8 2 73 42) 2] [(27 92 42 38) 27] [(42 12 35 83) 12] [(21 77 9 62) 9] [(31 38 38 66) 31] [(53 96 59 77) 53] [(18 0 7 4) 0] [(52 5 90 45) 5] [(11 44 42 85) 11] [(87 17 64 28) 17] [(1 58 47 28) 1] [(6 28 50 9) 6] [(52 38 8 37) 8] [(32 41 100 7) 7] [(79 78 2 54) 2] [(25 53 83 47) 25] [(-29 -70 -51 11) -70] [(-45 -81 -15 -73) -81] [(20 -48 -76 95) -76] [(-59 80 58 95) -59] [(42 49 39 -89) -89] [(12 76 -52 28) -52] [(88 97 -6 58) -6] [(-51 25 14 -12) -51] [(-98 82 44 62) -98] [(60 13 81 0) 0] [(30 72 47 -40) -40] [(-2 -60 0 61) -60] [(97 -62 20 0) -62] [(88 -95 48 -89) -95] [(-42 -92 28 -72) -92] [(-92 17 93 21) -92] [(-87 28 8 23) -87] [(23 -24 100 97) -24] [(90 -62 -25 -69) -69] [(81 32 -66 -76) -76] [(52 -28 -14 -27) -28] [(-26 -27 -48 -58) -58] [(-61 30 -92 57) -92] [(-72 -85 -68 -80) -85] [(-72 95 -15 -67) -72] [(54 -28 60 -62) -62] [(69 88 -98 34) -98] [(51 19 39 -100) -100] [(8 15 -29 -58) -58] [(-86 -82 55 -32) -86] [(-30 -25 -56 -79) -79] [(76 8 26 0) 0] [(-29 80 21 17) -29] [(-32 -12 -86 82) -86] [(54 86 -37 -96) -96] [(8 -32 91 -70) -70] [(-79 -19 71 17) -79] [(-63 72 20 11) -63] [(-50 -62 22 79) -62] [(-55 2 87 -83) -83] [(-76 80 -97 -58) -97] [(42 -53 75 -64) -64] [(-20 79 -67 -6) -67] [(-51 55 -7 -87) -87] [(-36 -4 53 0) -36] [(-5 14 -16 -63) -63] [(-81 22 -98 -38) -98] [(27 8 -22 15) -22] [(-40 19 47 31) -40] [(90 -56 -13 69) -56] [(30 19 42 -70) -70] [(36 -92 13 -9) -92] [(-22 -25 71 78) -25] [(-95 67 64 -85) -95] [(-73 55 -9 44) -73] [(-22 44 59 77) -22] [(54 11 50 -45) -45] [(-27 22 -16 -57) -57] [(71 59 52 70) 52] [(-16 -49 47 6) -49])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[20 20 20 82] 20]
Train Case:   6 | Input/Output: [[-43 66 -43 -43] -43]
Train Case:   7 | Input/Output: [[96 -4 -4 -4] -4]
Train Case:   8 | Input/Output: [[100 100 100 -52] -52]
Train Case:   9 | Input/Output: [[-59 -59 -59 -12] -59]
Train Case:  10 | Input/Output: [[82 82 62 82] 62]
Train Case:  11 | Input/Output: [[-82 -82 -82 93] -82]
Train Case:  12 | Input/Output: [[-94 -87 -94 -94] -94]
Train Case:  13 | Input/Output: [[92 92 -89 92] -89]
Train Case:  14 | Input/Output: [[-85 -85 -85 31] -85]
Train Case:  15 | Input/Output: [(6 6 6 6) 6]
Train Case:  16 | Input/Output: [(-31 -31 -31 -31) -31]
Train Case:  17 | Input/Output: [(-36 -36 -36 -36) -36]
Train Case:  18 | Input/Output: [(-98 -98 -98 -98) -98]
Train Case:  19 | Input/Output: [(-66 -66 -66 -66) -66]
Train Case:  20 | Input/Output: [(17 77 41 77) 17]
Train Case:  21 | Input/Output: [(81 6 94 65) 6]
Train Case:  22 | Input/Output: [(82 70 26 2) 2]
Train Case:  23 | Input/Output: [(1 69 88 3) 1]
Train Case:  24 | Input/Output: [(8 2 73 42) 2]
Train Case:  25 | Input/Output: [(27 92 42 38) 27]
Train Case:  26 | Input/Output: [(42 12 35 83) 12]
Train Case:  27 | Input/Output: [(21 77 9 62) 9]
Train Case:  28 | Input/Output: [(31 38 38 66) 31]
Train Case:  29 | Input/Output: [(53 96 59 77) 53]
Train Case:  30 | Input/Output: [(18 0 7 4) 0]
Train Case:  31 | Input/Output: [(52 5 90 45) 5]
Train Case:  32 | Input/Output: [(11 44 42 85) 11]
Train Case:  33 | Input/Output: [(87 17 64 28) 17]
Train Case:  34 | Input/Output: [(1 58 47 28) 1]
Train Case:  35 | Input/Output: [(6 28 50 9) 6]
Train Case:  36 | Input/Output: [(52 38 8 37) 8]
Train Case:  37 | Input/Output: [(32 41 100 7) 7]
Train Case:  38 | Input/Output: [(79 78 2 54) 2]
Train Case:  39 | Input/Output: [(25 53 83 47) 25]
Train Case:  40 | Input/Output: [(-29 -70 -51 11) -70]
Train Case:  41 | Input/Output: [(-45 -81 -15 -73) -81]
Train Case:  42 | Input/Output: [(20 -48 -76 95) -76]
Train Case:  43 | Input/Output: [(-59 80 58 95) -59]
Train Case:  44 | Input/Output: [(42 49 39 -89) -89]
Train Case:  45 | Input/Output: [(12 76 -52 28) -52]
Train Case:  46 | Input/Output: [(88 97 -6 58) -6]
Train Case:  47 | Input/Output: [(-51 25 14 -12) -51]
Train Case:  48 | Input/Output: [(-98 82 44 62) -98]
Train Case:  49 | Input/Output: [(60 13 81 0) 0]
Train Case:  50 | Input/Output: [(30 72 47 -40) -40]
Train Case:  51 | Input/Output: [(-2 -60 0 61) -60]
Train Case:  52 | Input/Output: [(97 -62 20 0) -62]
Train Case:  53 | Input/Output: [(88 -95 48 -89) -95]
Train Case:  54 | Input/Output: [(-42 -92 28 -72) -92]
Train Case:  55 | Input/Output: [(-92 17 93 21) -92]
Train Case:  56 | Input/Output: [(-87 28 8 23) -87]
Train Case:  57 | Input/Output: [(23 -24 100 97) -24]
Train Case:  58 | Input/Output: [(90 -62 -25 -69) -69]
Train Case:  59 | Input/Output: [(81 32 -66 -76) -76]
Train Case:  60 | Input/Output: [(52 -28 -14 -27) -28]
Train Case:  61 | Input/Output: [(-26 -27 -48 -58) -58]
Train Case:  62 | Input/Output: [(-61 30 -92 57) -92]
Train Case:  63 | Input/Output: [(-72 -85 -68 -80) -85]
Train Case:  64 | Input/Output: [(-72 95 -15 -67) -72]
Train Case:  65 | Input/Output: [(54 -28 60 -62) -62]
Train Case:  66 | Input/Output: [(69 88 -98 34) -98]
Train Case:  67 | Input/Output: [(51 19 39 -100) -100]
Train Case:  68 | Input/Output: [(8 15 -29 -58) -58]
Train Case:  69 | Input/Output: [(-86 -82 55 -32) -86]
Train Case:  70 | Input/Output: [(-30 -25 -56 -79) -79]
Train Case:  71 | Input/Output: [(76 8 26 0) 0]
Train Case:  72 | Input/Output: [(-29 80 21 17) -29]
Train Case:  73 | Input/Output: [(-32 -12 -86 82) -86]
Train Case:  74 | Input/Output: [(54 86 -37 -96) -96]
Train Case:  75 | Input/Output: [(8 -32 91 -70) -70]
Train Case:  76 | Input/Output: [(-79 -19 71 17) -79]
Train Case:  77 | Input/Output: [(-63 72 20 11) -63]
Train Case:  78 | Input/Output: [(-50 -62 22 79) -62]
Train Case:  79 | Input/Output: [(-55 2 87 -83) -83]
Train Case:  80 | Input/Output: [(-76 80 -97 -58) -97]
Train Case:  81 | Input/Output: [(42 -53 75 -64) -64]
Train Case:  82 | Input/Output: [(-20 79 -67 -6) -67]
Train Case:  83 | Input/Output: [(-51 55 -7 -87) -87]
Train Case:  84 | Input/Output: [(-36 -4 53 0) -36]
Train Case:  85 | Input/Output: [(-5 14 -16 -63) -63]
Train Case:  86 | Input/Output: [(-81 22 -98 -38) -98]
Train Case:  87 | Input/Output: [(27 8 -22 15) -22]
Train Case:  88 | Input/Output: [(-40 19 47 31) -40]
Train Case:  89 | Input/Output: [(90 -56 -13 69) -56]
Train Case:  90 | Input/Output: [(30 19 42 -70) -70]
Train Case:  91 | Input/Output: [(36 -92 13 -9) -92]
Train Case:  92 | Input/Output: [(-22 -25 71 78) -25]
Train Case:  93 | Input/Output: [(-95 67 64 -85) -95]
Train Case:  94 | Input/Output: [(-73 55 -9 44) -73]
Train Case:  95 | Input/Output: [(-22 44 59 77) -22]
Train Case:  96 | Input/Output: [(54 11 50 -45) -45]
Train Case:  97 | Input/Output: [(-27 22 -16 -57) -57]
Train Case:  98 | Input/Output: [(71 59 52 70) 52]
Train Case:  99 | Input/Output: [(-16 -49 47 6) -49]
Test Case:   0 | Input/Output: [[-66 19 19 19] -66]
Test Case:   1 | Input/Output: [[-30 -83 -83 -83] -83]
Test Case:   2 | Input/Output: [[83 -81 83 83] -81]
Test Case:   3 | Input/Output: [[37 67 37 37] 37]
Test Case:   4 | Input/Output: [[66 66 66 -76] -76]
Test Case:   5 | Input/Output: [[94 94 55 94] 55]
Test Case:   6 | Input/Output: [[49 49 -56 49] -56]
Test Case:   7 | Input/Output: [[-50 53 53 53] -50]
Test Case:   8 | Input/Output: [[-44 -31 -44 -44] -44]
Test Case:   9 | Input/Output: [[5 5 2 5] 2]
Test Case:  10 | Input/Output: [[8 8 8 -87] -87]
Test Case:  11 | Input/Output: [[56 64 64 64] 56]
Test Case:  12 | Input/Output: [[-99 13 -99 -99] -99]
Test Case:  13 | Input/Output: [[96 89 89 89] 89]
Test Case:  14 | Input/Output: [[46 43 43 43] 43]
Test Case:  15 | Input/Output: [[47 47 47 87] 47]
Test Case:  16 | Input/Output: [[-49 -49 89 -49] -49]
Test Case:  17 | Input/Output: [[20 79 79 79] 20]
Test Case:  18 | Input/Output: [[-86 -86 -16 -86] -86]
Test Case:  19 | Input/Output: [[85 85 -9 85] -9]
Test Case:  20 | Input/Output: [[-73 -73 13 -73] -73]
Test Case:  21 | Input/Output: [[-19 13 13 13] -19]
Test Case:  22 | Input/Output: [[-20 -12 -20 -20] -20]
Test Case:  23 | Input/Output: [[-64 -64 -64 -55] -64]
Test Case:  24 | Input/Output: [[-48 -48 -48 -39] -48]
Test Case:  25 | Input/Output: [[68 -57 68 68] -57]
Test Case:  26 | Input/Output: [[71 -22 71 71] -22]
Test Case:  27 | Input/Output: [[50 50 -15 50] -15]
Test Case:  28 | Input/Output: [[-31 -65 -31 -31] -65]
Test Case:  29 | Input/Output: [[-1 -54 -54 -54] -54]
Test Case:  30 | Input/Output: [[-28 41 -28 -28] -28]
Test Case:  31 | Input/Output: [[73 73 70 73] 70]
Test Case:  32 | Input/Output: [[74 74 74 19] 19]
Test Case:  33 | Input/Output: [[-20 -20 30 -20] -20]
Test Case:  34 | Input/Output: [[-30 -30 -31 -30] -31]
Test Case:  35 | Input/Output: [[-83 72 -83 -83] -83]
Test Case:  36 | Input/Output: [[45 81 45 45] 45]
Test Case:  37 | Input/Output: [[-22 -22 -66 -22] -66]
Test Case:  38 | Input/Output: [[-66 -66 -66 8] -66]
Test Case:  39 | Input/Output: [[-61 100 -61 -61] -61]
Test Case:  40 | Input/Output: [[27 27 27 20] 20]
Test Case:  41 | Input/Output: [[60 -30 -30 -30] -30]
Test Case:  42 | Input/Output: [[-69 50 -69 -69] -69]
Test Case:  43 | Input/Output: [[-59 -59 33 -59] -59]
Test Case:  44 | Input/Output: [[-36 34 -36 -36] -36]
Test Case:  45 | Input/Output: [[89 89 89 56] 56]
Test Case:  46 | Input/Output: [[9 7 7 7] 7]
Test Case:  47 | Input/Output: [[-40 -40 -40 -1] -40]
Test Case:  48 | Input/Output: [[82 82 82 79] 79]
Test Case:  49 | Input/Output: [[67 67 77 67] 67]
Test Case:  50 | Input/Output: [[31 31 31 -53] -53]
Test Case:  51 | Input/Output: [[-43 -43 -52 -43] -52]
Test Case:  52 | Input/Output: [[-2 -2 -2 -50] -50]
Test Case:  53 | Input/Output: [[-91 -91 -91 33] -91]
Test Case:  54 | Input/Output: [[63 -16 -16 -16] -16]
Test Case:  55 | Input/Output: [[-53 -65 -65 -65] -65]
Test Case:  56 | Input/Output: [[64 58 64 64] 58]
Test Case:  57 | Input/Output: [[77 77 77 48] 48]
Test Case:  58 | Input/Output: [[-61 -51 -51 -51] -61]
Test Case:  59 | Input/Output: [[-41 -90 -41 -41] -90]
Test Case:  60 | Input/Output: [[44 65 65 65] 44]
Test Case:  61 | Input/Output: [[-43 -43 -28 -43] -43]
Test Case:  62 | Input/Output: [[8 -21 -21 -21] -21]
Test Case:  63 | Input/Output: [[-82 -82 -55 -82] -82]
Test Case:  64 | Input/Output: [[-59 82 82 82] -59]
Test Case:  65 | Input/Output: [[-80 79 79 79] -80]
Test Case:  66 | Input/Output: [[73 0 73 73] 0]
Test Case:  67 | Input/Output: [[13 65 65 65] 13]
Test Case:  68 | Input/Output: [[-2 -2 -91 -2] -91]
Test Case:  69 | Input/Output: [[35 35 35 34] 34]
Test Case:  70 | Input/Output: [[-76 -76 -76 25] -76]
Test Case:  71 | Input/Output: [[-7 84 84 84] -7]
Test Case:  72 | Input/Output: [[-26 -26 -26 -48] -48]
Test Case:  73 | Input/Output: [[-10 -10 71 -10] -10]
Test Case:  74 | Input/Output: [[-41 -41 -41 17] -41]
Test Case:  75 | Input/Output: [[24 24 24 94] 24]
Test Case:  76 | Input/Output: [[-74 -91 -91 -91] -91]
Test Case:  77 | Input/Output: [[-7 -7 -7 79] -7]
Test Case:  78 | Input/Output: [[-47 -47 -47 43] -47]
Test Case:  79 | Input/Output: [[-8 -81 -8 -8] -81]
Test Case:  80 | Input/Output: [[51 -63 -63 -63] -63]
Test Case:  81 | Input/Output: [[14 14 14 -18] -18]
Test Case:  82 | Input/Output: [[-36 -36 -36 52] -36]
Test Case:  83 | Input/Output: [[74 74 45 74] 45]
Test Case:  84 | Input/Output: [[-67 -58 -67 -67] -67]
Test Case:  85 | Input/Output: [[-92 -5 -92 -92] -92]
Test Case:  86 | Input/Output: [[-82 -70 -70 -70] -82]
Test Case:  87 | Input/Output: [[51 51 51 -22] -22]
Test Case:  88 | Input/Output: [[66 66 92 66] 66]
Test Case:  89 | Input/Output: [[5 -24 5 5] -24]
Test Case:  90 | Input/Output: [[50 50 50 26] 26]
Test Case:  91 | Input/Output: [[-71 -78 -78 -78] -78]
Test Case:  92 | Input/Output: [[76 -38 -38 -38] -38]
Test Case:  93 | Input/Output: [[81 -70 -70 -70] -70]
Test Case:  94 | Input/Output: [[93 93 93 -41] -41]
Test Case:  95 | Input/Output: [[-77 -1 -1 -1] -77]
Test Case:  96 | Input/Output: [[-7 -7 0 -7] -7]
Test Case:  97 | Input/Output: [[-100 -100 -100 -71] -100]
Test Case:  98 | Input/Output: [[80 80 74 80] 74]
Test Case:  99 | Input/Output: [[-88 -88 -88 -48] -88]
Test Case: 100 | Input/Output: [(76 76 76 76) 76]
Test Case: 101 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 102 | Input/Output: [(86 86 86 86) 86]
Test Case: 103 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 104 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 105 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 106 | Input/Output: [(84 84 84 84) 84]
Test Case: 107 | Input/Output: [(27 27 27 27) 27]
Test Case: 108 | Input/Output: [(12 12 12 12) 12]
Test Case: 109 | Input/Output: [(8 8 8 8) 8]
Test Case: 110 | Input/Output: [(37 37 37 37) 37]
Test Case: 111 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 112 | Input/Output: [(95 95 95 95) 95]
Test Case: 113 | Input/Output: [(44 44 44 44) 44]
Test Case: 114 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 115 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 116 | Input/Output: [(51 51 51 51) 51]
Test Case: 117 | Input/Output: [(48 48 48 48) 48]
Test Case: 118 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 119 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 120 | Input/Output: [(64 64 64 64) 64]
Test Case: 121 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 122 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 123 | Input/Output: [(81 81 81 81) 81]
Test Case: 124 | Input/Output: [(61 61 61 61) 61]
Test Case: 125 | Input/Output: [(5 5 5 5) 5]
Test Case: 126 | Input/Output: [(55 55 55 55) 55]
Test Case: 127 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 128 | Input/Output: [(23 23 23 23) 23]
Test Case: 129 | Input/Output: [(46 46 46 46) 46]
Test Case: 130 | Input/Output: [(90 90 90 90) 90]
Test Case: 131 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 132 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 133 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 134 | Input/Output: [(89 89 89 89) 89]
Test Case: 135 | Input/Output: [(48 48 48 48) 48]
Test Case: 136 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 137 | Input/Output: [(42 42 42 42) 42]
Test Case: 138 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 139 | Input/Output: [(87 87 87 87) 87]
Test Case: 140 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 141 | Input/Output: [(76 76 76 76) 76]
Test Case: 142 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 143 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 144 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 145 | Input/Output: [(65 65 65 65) 65]
Test Case: 146 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 147 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 148 | Input/Output: [(69 69 69 69) 69]
Test Case: 149 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 150 | Input/Output: [(36 36 36 36) 36]
Test Case: 151 | Input/Output: [(91 91 91 91) 91]
Test Case: 152 | Input/Output: [(83 83 83 83) 83]
Test Case: 153 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 154 | Input/Output: [(39 39 39 39) 39]
Test Case: 155 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 156 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 157 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 158 | Input/Output: [(89 89 89 89) 89]
Test Case: 159 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 160 | Input/Output: [(100 100 100 100) 100]
Test Case: 161 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 162 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 163 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 164 | Input/Output: [(44 44 44 44) 44]
Test Case: 165 | Input/Output: [(40 40 40 40) 40]
Test Case: 166 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 167 | Input/Output: [(36 36 36 36) 36]
Test Case: 168 | Input/Output: [(45 45 45 45) 45]
Test Case: 169 | Input/Output: [(3 3 3 3) 3]
Test Case: 170 | Input/Output: [(33 33 33 33) 33]
Test Case: 171 | Input/Output: [(45 45 45 45) 45]
Test Case: 172 | Input/Output: [(43 43 43 43) 43]
Test Case: 173 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 174 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 175 | Input/Output: [(22 22 22 22) 22]
Test Case: 176 | Input/Output: [(96 96 96 96) 96]
Test Case: 177 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 178 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 179 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 180 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 181 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 182 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 183 | Input/Output: [(67 67 67 67) 67]
Test Case: 184 | Input/Output: [(49 49 49 49) 49]
Test Case: 185 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 186 | Input/Output: [(82 82 82 82) 82]
Test Case: 187 | Input/Output: [(29 29 29 29) 29]
Test Case: 188 | Input/Output: [(91 91 91 91) 91]
Test Case: 189 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 190 | Input/Output: [(98 98 98 98) 98]
Test Case: 191 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 192 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 193 | Input/Output: [(65 65 65 65) 65]
Test Case: 194 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 195 | Input/Output: [(13 13 13 13) 13]
Test Case: 196 | Input/Output: [(76 76 76 76) 76]
Test Case: 197 | Input/Output: [(4 4 4 4) 4]
Test Case: 198 | Input/Output: [(79 79 79 79) 79]
Test Case: 199 | Input/Output: [(16 16 16 16) 16]
Test Case: 200 | Input/Output: [(49 69 35 10) 10]
Test Case: 201 | Input/Output: [(80 71 53 36) 36]
Test Case: 202 | Input/Output: [(84 89 81 10) 10]
Test Case: 203 | Input/Output: [(35 48 72 90) 35]
Test Case: 204 | Input/Output: [(2 41 7 98) 2]
Test Case: 205 | Input/Output: [(65 65 15 30) 15]
Test Case: 206 | Input/Output: [(22 87 76 36) 22]
Test Case: 207 | Input/Output: [(40 56 89 9) 9]
Test Case: 208 | Input/Output: [(83 81 7 63) 7]
Test Case: 209 | Input/Output: [(53 40 66 29) 29]
Test Case: 210 | Input/Output: [(18 9 89 51) 9]
Test Case: 211 | Input/Output: [(92 56 61 52) 52]
Test Case: 212 | Input/Output: [(48 25 32 5) 5]
Test Case: 213 | Input/Output: [(43 27 34 8) 8]
Test Case: 214 | Input/Output: [(88 22 41 61) 22]
Test Case: 215 | Input/Output: [(18 0 13 41) 0]
Test Case: 216 | Input/Output: [(99 44 9 94) 9]
Test Case: 217 | Input/Output: [(28 37 44 14) 14]
Test Case: 218 | Input/Output: [(72 22 32 98) 22]
Test Case: 219 | Input/Output: [(51 28 79 12) 12]
Test Case: 220 | Input/Output: [(9 62 40 15) 9]
Test Case: 221 | Input/Output: [(63 93 94 78) 63]
Test Case: 222 | Input/Output: [(79 74 89 37) 37]
Test Case: 223 | Input/Output: [(49 24 51 58) 24]
Test Case: 224 | Input/Output: [(79 53 48 81) 48]
Test Case: 225 | Input/Output: [(72 84 0 40) 0]
Test Case: 226 | Input/Output: [(17 19 59 0) 0]
Test Case: 227 | Input/Output: [(48 32 34 16) 16]
Test Case: 228 | Input/Output: [(67 94 85 30) 30]
Test Case: 229 | Input/Output: [(89 15 26 29) 15]
Test Case: 230 | Input/Output: [(28 59 39 47) 28]
Test Case: 231 | Input/Output: [(97 54 45 47) 45]
Test Case: 232 | Input/Output: [(74 48 8 30) 8]
Test Case: 233 | Input/Output: [(84 34 43 60) 34]
Test Case: 234 | Input/Output: [(85 89 74 100) 74]
Test Case: 235 | Input/Output: [(67 83 81 71) 67]
Test Case: 236 | Input/Output: [(16 57 93 25) 16]
Test Case: 237 | Input/Output: [(75 99 100 62) 62]
Test Case: 238 | Input/Output: [(76 89 56 19) 19]
Test Case: 239 | Input/Output: [(47 35 32 52) 32]
Test Case: 240 | Input/Output: [(94 49 36 55) 36]
Test Case: 241 | Input/Output: [(28 63 35 69) 28]
Test Case: 242 | Input/Output: [(56 23 80 16) 16]
Test Case: 243 | Input/Output: [(72 37 96 15) 15]
Test Case: 244 | Input/Output: [(31 46 5 66) 5]
Test Case: 245 | Input/Output: [(97 8 37 54) 8]
Test Case: 246 | Input/Output: [(36 9 62 76) 9]
Test Case: 247 | Input/Output: [(81 63 67 13) 13]
Test Case: 248 | Input/Output: [(22 61 83 77) 22]
Test Case: 249 | Input/Output: [(40 55 67 77) 40]
Test Case: 250 | Input/Output: [(26 61 12 74) 12]
Test Case: 251 | Input/Output: [(3 92 67 95) 3]
Test Case: 252 | Input/Output: [(95 43 89 97) 43]
Test Case: 253 | Input/Output: [(91 61 5 79) 5]
Test Case: 254 | Input/Output: [(5 27 90 47) 5]
Test Case: 255 | Input/Output: [(12 72 78 66) 12]
Test Case: 256 | Input/Output: [(70 52 42 89) 42]
Test Case: 257 | Input/Output: [(58 22 42 28) 22]
Test Case: 258 | Input/Output: [(5 62 100 98) 5]
Test Case: 259 | Input/Output: [(0 53 52 15) 0]
Test Case: 260 | Input/Output: [(67 89 19 26) 19]
Test Case: 261 | Input/Output: [(100 84 4 86) 4]
Test Case: 262 | Input/Output: [(92 100 61 61) 61]
Test Case: 263 | Input/Output: [(27 43 22 33) 22]
Test Case: 264 | Input/Output: [(94 93 20 11) 11]
Test Case: 265 | Input/Output: [(32 39 64 8) 8]
Test Case: 266 | Input/Output: [(1 5 56 92) 1]
Test Case: 267 | Input/Output: [(64 87 86 61) 61]
Test Case: 268 | Input/Output: [(88 51 40 0) 0]
Test Case: 269 | Input/Output: [(19 51 96 65) 19]
Test Case: 270 | Input/Output: [(98 5 100 8) 5]
Test Case: 271 | Input/Output: [(2 49 63 75) 2]
Test Case: 272 | Input/Output: [(79 10 37 18) 10]
Test Case: 273 | Input/Output: [(63 26 50 45) 26]
Test Case: 274 | Input/Output: [(23 99 79 34) 23]
Test Case: 275 | Input/Output: [(19 59 9 93) 9]
Test Case: 276 | Input/Output: [(91 73 92 44) 44]
Test Case: 277 | Input/Output: [(24 16 18 86) 16]
Test Case: 278 | Input/Output: [(70 50 32 36) 32]
Test Case: 279 | Input/Output: [(56 92 81 26) 26]
Test Case: 280 | Input/Output: [(69 61 85 36) 36]
Test Case: 281 | Input/Output: [(94 97 24 5) 5]
Test Case: 282 | Input/Output: [(29 80 91 100) 29]
Test Case: 283 | Input/Output: [(16 41 37 34) 16]
Test Case: 284 | Input/Output: [(24 91 28 5) 5]
Test Case: 285 | Input/Output: [(79 24 48 87) 24]
Test Case: 286 | Input/Output: [(21 4 75 73) 4]
Test Case: 287 | Input/Output: [(8 99 53 62) 8]
Test Case: 288 | Input/Output: [(39 16 82 92) 16]
Test Case: 289 | Input/Output: [(41 9 38 53) 9]
Test Case: 290 | Input/Output: [(83 56 56 61) 56]
Test Case: 291 | Input/Output: [(22 38 89 30) 22]
Test Case: 292 | Input/Output: [(5 69 93 55) 5]
Test Case: 293 | Input/Output: [(25 76 32 83) 25]
Test Case: 294 | Input/Output: [(64 39 72 57) 39]
Test Case: 295 | Input/Output: [(43 53 86 31) 31]
Test Case: 296 | Input/Output: [(5 54 64 67) 5]
Test Case: 297 | Input/Output: [(28 45 49 85) 28]
Test Case: 298 | Input/Output: [(7 43 63 23) 7]
Test Case: 299 | Input/Output: [(58 41 60 99) 41]
Test Case: 300 | Input/Output: [(49 10 32 26) 10]
Test Case: 301 | Input/Output: [(77 49 45 100) 45]
Test Case: 302 | Input/Output: [(82 24 72 22) 22]
Test Case: 303 | Input/Output: [(32 23 100 43) 23]
Test Case: 304 | Input/Output: [(89 25 95 90) 25]
Test Case: 305 | Input/Output: [(76 24 44 63) 24]
Test Case: 306 | Input/Output: [(8 26 2 57) 2]
Test Case: 307 | Input/Output: [(81 94 6 83) 6]
Test Case: 308 | Input/Output: [(34 85 28 15) 15]
Test Case: 309 | Input/Output: [(60 11 22 80) 11]
Test Case: 310 | Input/Output: [(88 91 61 10) 10]
Test Case: 311 | Input/Output: [(87 22 60 58) 22]
Test Case: 312 | Input/Output: [(3 73 9 35) 3]
Test Case: 313 | Input/Output: [(89 54 68 56) 54]
Test Case: 314 | Input/Output: [(68 65 36 32) 32]
Test Case: 315 | Input/Output: [(68 45 53 23) 23]
Test Case: 316 | Input/Output: [(96 89 37 79) 37]
Test Case: 317 | Input/Output: [(2 20 74 59) 2]
Test Case: 318 | Input/Output: [(16 10 50 8) 8]
Test Case: 319 | Input/Output: [(18 35 72 90) 18]
Test Case: 320 | Input/Output: [(76 44 69 19) 19]
Test Case: 321 | Input/Output: [(11 21 74 61) 11]
Test Case: 322 | Input/Output: [(14 12 82 24) 12]
Test Case: 323 | Input/Output: [(49 97 47 10) 10]
Test Case: 324 | Input/Output: [(74 47 81 78) 47]
Test Case: 325 | Input/Output: [(48 75 20 57) 20]
Test Case: 326 | Input/Output: [(3 76 24 80) 3]
Test Case: 327 | Input/Output: [(50 44 70 11) 11]
Test Case: 328 | Input/Output: [(67 37 44 53) 37]
Test Case: 329 | Input/Output: [(6 72 90 84) 6]
Test Case: 330 | Input/Output: [(0 20 15 68) 0]
Test Case: 331 | Input/Output: [(31 3 47 93) 3]
Test Case: 332 | Input/Output: [(29 98 57 0) 0]
Test Case: 333 | Input/Output: [(21 16 29 63) 16]
Test Case: 334 | Input/Output: [(8 9 93 54) 8]
Test Case: 335 | Input/Output: [(62 52 30 16) 16]
Test Case: 336 | Input/Output: [(59 60 34 58) 34]
Test Case: 337 | Input/Output: [(66 92 87 60) 60]
Test Case: 338 | Input/Output: [(28 49 83 75) 28]
Test Case: 339 | Input/Output: [(59 95 52 41) 41]
Test Case: 340 | Input/Output: [(57 48 80 89) 48]
Test Case: 341 | Input/Output: [(5 48 95 61) 5]
Test Case: 342 | Input/Output: [(40 56 57 41) 40]
Test Case: 343 | Input/Output: [(66 51 81 18) 18]
Test Case: 344 | Input/Output: [(87 99 80 44) 44]
Test Case: 345 | Input/Output: [(33 27 11 63) 11]
Test Case: 346 | Input/Output: [(51 93 47 56) 47]
Test Case: 347 | Input/Output: [(70 1 60 2) 1]
Test Case: 348 | Input/Output: [(78 83 16 11) 11]
Test Case: 349 | Input/Output: [(95 19 97 64) 19]
Test Case: 350 | Input/Output: [(19 49 80 71) 19]
Test Case: 351 | Input/Output: [(54 42 98 51) 42]
Test Case: 352 | Input/Output: [(52 46 92 50) 46]
Test Case: 353 | Input/Output: [(57 37 81 45) 37]
Test Case: 354 | Input/Output: [(16 50 29 78) 16]
Test Case: 355 | Input/Output: [(22 90 76 66) 22]
Test Case: 356 | Input/Output: [(17 57 39 67) 17]
Test Case: 357 | Input/Output: [(67 50 38 28) 28]
Test Case: 358 | Input/Output: [(92 52 23 3) 3]
Test Case: 359 | Input/Output: [(71 78 100 14) 14]
Test Case: 360 | Input/Output: [(95 99 68 31) 31]
Test Case: 361 | Input/Output: [(43 67 81 11) 11]
Test Case: 362 | Input/Output: [(57 12 74 66) 12]
Test Case: 363 | Input/Output: [(35 56 83 13) 13]
Test Case: 364 | Input/Output: [(63 44 38 9) 9]
Test Case: 365 | Input/Output: [(67 91 46 89) 46]
Test Case: 366 | Input/Output: [(3 92 44 31) 3]
Test Case: 367 | Input/Output: [(99 1 25 40) 1]
Test Case: 368 | Input/Output: [(99 38 52 39) 38]
Test Case: 369 | Input/Output: [(5 49 50 87) 5]
Test Case: 370 | Input/Output: [(96 80 57 50) 50]
Test Case: 371 | Input/Output: [(95 93 64 18) 18]
Test Case: 372 | Input/Output: [(73 91 50 23) 23]
Test Case: 373 | Input/Output: [(24 2 2 84) 2]
Test Case: 374 | Input/Output: [(43 70 79 67) 43]
Test Case: 375 | Input/Output: [(5 54 10 93) 5]
Test Case: 376 | Input/Output: [(22 58 24 1) 1]
Test Case: 377 | Input/Output: [(32 63 17 81) 17]
Test Case: 378 | Input/Output: [(60 98 80 71) 60]
Test Case: 379 | Input/Output: [(32 32 9 73) 9]
Test Case: 380 | Input/Output: [(23 41 70 36) 23]
Test Case: 381 | Input/Output: [(41 66 53 3) 3]
Test Case: 382 | Input/Output: [(24 54 35 5) 5]
Test Case: 383 | Input/Output: [(100 40 90 97) 40]
Test Case: 384 | Input/Output: [(9 13 5 33) 5]
Test Case: 385 | Input/Output: [(31 61 33 23) 23]
Test Case: 386 | Input/Output: [(90 97 75 60) 60]
Test Case: 387 | Input/Output: [(68 87 88 26) 26]
Test Case: 388 | Input/Output: [(45 10 25 84) 10]
Test Case: 389 | Input/Output: [(44 4 90 60) 4]
Test Case: 390 | Input/Output: [(62 31 12 81) 12]
Test Case: 391 | Input/Output: [(20 64 91 47) 20]
Test Case: 392 | Input/Output: [(30 41 47 32) 30]
Test Case: 393 | Input/Output: [(51 74 26 3) 3]
Test Case: 394 | Input/Output: [(80 24 44 53) 24]
Test Case: 395 | Input/Output: [(32 50 52 54) 32]
Test Case: 396 | Input/Output: [(6 74 60 79) 6]
Test Case: 397 | Input/Output: [(38 97 32 77) 32]
Test Case: 398 | Input/Output: [(99 8 6 22) 6]
Test Case: 399 | Input/Output: [(77 40 23 94) 23]
Test Case: 400 | Input/Output: [(44 54 33 -87) -87]
Test Case: 401 | Input/Output: [(15 29 -36 12) -36]
Test Case: 402 | Input/Output: [(-49 -100 4 -40) -100]
Test Case: 403 | Input/Output: [(-53 -86 69 14) -86]
Test Case: 404 | Input/Output: [(-68 70 -43 -20) -68]
Test Case: 405 | Input/Output: [(46 -42 46 48) -42]
Test Case: 406 | Input/Output: [(-40 -99 -85 -91) -99]
Test Case: 407 | Input/Output: [(-38 -87 -69 -34) -87]
Test Case: 408 | Input/Output: [(35 83 81 -11) -11]
Test Case: 409 | Input/Output: [(35 -42 -76 -35) -76]
Test Case: 410 | Input/Output: [(80 -64 7 34) -64]
Test Case: 411 | Input/Output: [(29 -81 89 95) -81]
Test Case: 412 | Input/Output: [(82 64 -62 30) -62]
Test Case: 413 | Input/Output: [(-75 15 -49 73) -75]
Test Case: 414 | Input/Output: [(80 -11 -22 48) -22]
Test Case: 415 | Input/Output: [(-46 83 62 42) -46]
Test Case: 416 | Input/Output: [(-45 -71 23 77) -71]
Test Case: 417 | Input/Output: [(-25 -53 -49 -48) -53]
Test Case: 418 | Input/Output: [(54 -54 -87 46) -87]
Test Case: 419 | Input/Output: [(60 -89 -21 85) -89]
Test Case: 420 | Input/Output: [(22 45 -62 96) -62]
Test Case: 421 | Input/Output: [(70 -28 77 -23) -28]
Test Case: 422 | Input/Output: [(-56 61 6 52) -56]
Test Case: 423 | Input/Output: [(-83 -91 18 -10) -91]
Test Case: 424 | Input/Output: [(24 -62 -39 -92) -92]
Test Case: 425 | Input/Output: [(-99 46 56 41) -99]
Test Case: 426 | Input/Output: [(-68 -97 2 -25) -97]
Test Case: 427 | Input/Output: [(-34 -12 -83 89) -83]
Test Case: 428 | Input/Output: [(-77 80 -6 -43) -77]
Test Case: 429 | Input/Output: [(94 -99 -92 5) -99]
Test Case: 430 | Input/Output: [(63 93 -42 -15) -42]
Test Case: 431 | Input/Output: [(-72 67 95 31) -72]
Test Case: 432 | Input/Output: [(94 -78 45 72) -78]
Test Case: 433 | Input/Output: [(-43 -55 77 41) -55]
Test Case: 434 | Input/Output: [(18 18 3 42) 3]
Test Case: 435 | Input/Output: [(66 93 33 -54) -54]
Test Case: 436 | Input/Output: [(-98 4 98 63) -98]
Test Case: 437 | Input/Output: [(-40 43 -91 -25) -91]
Test Case: 438 | Input/Output: [(7 60 -82 2) -82]
Test Case: 439 | Input/Output: [(39 -4 15 13) -4]
Test Case: 440 | Input/Output: [(29 -92 47 82) -92]
Test Case: 441 | Input/Output: [(-35 -47 -64 -85) -85]
Test Case: 442 | Input/Output: [(13 21 -21 62) -21]
Test Case: 443 | Input/Output: [(-51 -34 82 -94) -94]
Test Case: 444 | Input/Output: [(-29 59 88 -24) -29]
Test Case: 445 | Input/Output: [(66 5 -22 -76) -76]
Test Case: 446 | Input/Output: [(-9 91 -6 42) -9]
Test Case: 447 | Input/Output: [(-26 -34 36 84) -34]
Test Case: 448 | Input/Output: [(-46 -30 -7 53) -46]
Test Case: 449 | Input/Output: [(88 4 62 34) 4]
Test Case: 450 | Input/Output: [(89 13 93 -70) -70]
Test Case: 451 | Input/Output: [(66 -73 57 -97) -97]
Test Case: 452 | Input/Output: [(-74 48 42 -28) -74]
Test Case: 453 | Input/Output: [(-71 76 21 71) -71]
Test Case: 454 | Input/Output: [(58 -62 98 -14) -62]
Test Case: 455 | Input/Output: [(37 97 -37 13) -37]
Test Case: 456 | Input/Output: [(-90 39 41 28) -90]
Test Case: 457 | Input/Output: [(-27 14 19 -13) -27]
Test Case: 458 | Input/Output: [(91 -10 -57 37) -57]
Test Case: 459 | Input/Output: [(-10 85 -69 -100) -100]
Test Case: 460 | Input/Output: [(16 -86 -29 75) -86]
Test Case: 461 | Input/Output: [(-28 33 73 -98) -98]
Test Case: 462 | Input/Output: [(9 -7 -73 5) -73]
Test Case: 463 | Input/Output: [(22 12 4 50) 4]
Test Case: 464 | Input/Output: [(-13 72 54 -29) -29]
Test Case: 465 | Input/Output: [(0 28 15 64) 0]
Test Case: 466 | Input/Output: [(98 -30 63 -69) -69]
Test Case: 467 | Input/Output: [(-10 -21 6 95) -21]
Test Case: 468 | Input/Output: [(-37 100 43 -29) -37]
Test Case: 469 | Input/Output: [(1 28 -85 -50) -85]
Test Case: 470 | Input/Output: [(36 25 35 52) 25]
Test Case: 471 | Input/Output: [(35 -97 -23 -76) -97]
Test Case: 472 | Input/Output: [(-53 -75 -81 13) -81]
Test Case: 473 | Input/Output: [(40 -5 5 7) -5]
Test Case: 474 | Input/Output: [(-39 -68 -57 -34) -68]
Test Case: 475 | Input/Output: [(36 69 -51 37) -51]
Test Case: 476 | Input/Output: [(-20 70 42 -34) -34]
Test Case: 477 | Input/Output: [(7 0 34 -5) -5]
Test Case: 478 | Input/Output: [(38 85 -81 88) -81]
Test Case: 479 | Input/Output: [(-72 -65 -10 -97) -97]
Test Case: 480 | Input/Output: [(56 -85 -31 -39) -85]
Test Case: 481 | Input/Output: [(2 26 -43 -75) -75]
Test Case: 482 | Input/Output: [(31 11 76 99) 11]
Test Case: 483 | Input/Output: [(90 -95 -21 -46) -95]
Test Case: 484 | Input/Output: [(-6 81 79 8) -6]
Test Case: 485 | Input/Output: [(56 -57 37 21) -57]
Test Case: 486 | Input/Output: [(16 -37 -92 65) -92]
Test Case: 487 | Input/Output: [(-18 -36 14 86) -36]
Test Case: 488 | Input/Output: [(43 -6 65 -10) -10]
Test Case: 489 | Input/Output: [(-61 17 -7 -24) -61]
Test Case: 490 | Input/Output: [(94 -1 7 13) -1]
Test Case: 491 | Input/Output: [(58 13 28 76) 13]
Test Case: 492 | Input/Output: [(-17 -3 56 -1) -17]
Test Case: 493 | Input/Output: [(91 -79 -75 -75) -79]
Test Case: 494 | Input/Output: [(-59 62 96 35) -59]
Test Case: 495 | Input/Output: [(43 -91 -47 49) -91]
Test Case: 496 | Input/Output: [(84 53 -17 84) -17]
Test Case: 497 | Input/Output: [(-41 -66 28 -67) -67]
Test Case: 498 | Input/Output: [(-79 39 64 19) -79]
Test Case: 499 | Input/Output: [(69 -70 32 85) -70]
Test Case: 500 | Input/Output: [(-22 -4 -5 34) -22]
Test Case: 501 | Input/Output: [(85 -92 -64 -39) -92]
Test Case: 502 | Input/Output: [(44 -39 -66 11) -66]
Test Case: 503 | Input/Output: [(-26 -9 39 -72) -72]
Test Case: 504 | Input/Output: [(43 15 71 -11) -11]
Test Case: 505 | Input/Output: [(-3 -48 94 92) -48]
Test Case: 506 | Input/Output: [(-17 -63 -45 -60) -63]
Test Case: 507 | Input/Output: [(100 70 -42 80) -42]
Test Case: 508 | Input/Output: [(51 20 -72 66) -72]
Test Case: 509 | Input/Output: [(85 48 92 -95) -95]
Test Case: 510 | Input/Output: [(-81 84 80 9) -81]
Test Case: 511 | Input/Output: [(-31 56 21 -63) -63]
Test Case: 512 | Input/Output: [(-66 1 -95 70) -95]
Test Case: 513 | Input/Output: [(-78 -86 48 38) -86]
Test Case: 514 | Input/Output: [(-53 8 -26 -10) -53]
Test Case: 515 | Input/Output: [(-30 -22 -61 89) -61]
Test Case: 516 | Input/Output: [(-39 56 -74 77) -74]
Test Case: 517 | Input/Output: [(29 10 22 -25) -25]
Test Case: 518 | Input/Output: [(2 -84 74 -29) -84]
Test Case: 519 | Input/Output: [(3 -87 -81 -20) -87]
Test Case: 520 | Input/Output: [(-47 -95 -3 100) -95]
Test Case: 521 | Input/Output: [(90 -70 92 -36) -70]
Test Case: 522 | Input/Output: [(10 68 18 18) 10]
Test Case: 523 | Input/Output: [(-69 4 -3 -66) -69]
Test Case: 524 | Input/Output: [(41 16 -76 78) -76]
Test Case: 525 | Input/Output: [(-63 -59 -67 -44) -67]
Test Case: 526 | Input/Output: [(-16 5 94 -90) -90]
Test Case: 527 | Input/Output: [(65 -62 30 -9) -62]
Test Case: 528 | Input/Output: [(-47 -3 -34 -15) -47]
Test Case: 529 | Input/Output: [(-50 43 11 -68) -68]
Test Case: 530 | Input/Output: [(45 69 8 53) 8]
Test Case: 531 | Input/Output: [(-40 67 -3 -85) -85]
Test Case: 532 | Input/Output: [(-33 -76 -47 -74) -76]
Test Case: 533 | Input/Output: [(29 -10 32 -13) -13]
Test Case: 534 | Input/Output: [(-12 91 63 -22) -22]
Test Case: 535 | Input/Output: [(79 -57 13 19) -57]
Test Case: 536 | Input/Output: [(87 -50 -52 -6) -52]
Test Case: 537 | Input/Output: [(-59 -64 78 40) -64]
Test Case: 538 | Input/Output: [(46 -18 29 6) -18]
Test Case: 539 | Input/Output: [(-42 -15 -67 45) -67]
Test Case: 540 | Input/Output: [(67 -91 -80 -56) -91]
Test Case: 541 | Input/Output: [(79 89 -26 -16) -26]
Test Case: 542 | Input/Output: [(25 -18 -94 -12) -94]
Test Case: 543 | Input/Output: [(55 49 -100 -53) -100]
Test Case: 544 | Input/Output: [(-53 -72 9 57) -72]
Test Case: 545 | Input/Output: [(-36 86 55 -67) -67]
Test Case: 546 | Input/Output: [(-46 0 -14 -39) -46]
Test Case: 547 | Input/Output: [(33 -54 67 -5) -54]
Test Case: 548 | Input/Output: [(86 -35 4 -44) -44]
Test Case: 549 | Input/Output: [(11 73 44 38) 11]
Test Case: 550 | Input/Output: [(9 96 -33 39) -33]
Test Case: 551 | Input/Output: [(-86 -23 -4 -40) -86]
Test Case: 552 | Input/Output: [(19 -55 -36 20) -55]
Test Case: 553 | Input/Output: [(-77 -34 -14 -12) -77]
Test Case: 554 | Input/Output: [(65 21 -70 10) -70]
Test Case: 555 | Input/Output: [(69 -65 62 36) -65]
Test Case: 556 | Input/Output: [(51 -38 -18 92) -38]
Test Case: 557 | Input/Output: [(-58 -83 90 62) -83]
Test Case: 558 | Input/Output: [(30 81 31 16) 16]
Test Case: 559 | Input/Output: [(79 22 -11 -72) -72]
Test Case: 560 | Input/Output: [(-78 4 19 69) -78]
Test Case: 561 | Input/Output: [(14 -32 -45 -6) -45]
Test Case: 562 | Input/Output: [(40 81 -93 -56) -93]
Test Case: 563 | Input/Output: [(38 -64 -19 -49) -64]
Test Case: 564 | Input/Output: [(51 62 -72 -63) -72]
Test Case: 565 | Input/Output: [(-94 22 -64 -40) -94]
Test Case: 566 | Input/Output: [(-20 22 -71 -34) -71]
Test Case: 567 | Input/Output: [(-43 -99 -28 -73) -99]
Test Case: 568 | Input/Output: [(18 -67 7 20) -67]
Test Case: 569 | Input/Output: [(81 -80 -80 -28) -80]
Test Case: 570 | Input/Output: [(-22 -37 -90 -3) -90]
Test Case: 571 | Input/Output: [(-99 18 -23 -86) -99]
Test Case: 572 | Input/Output: [(88 -17 -23 -63) -63]
Test Case: 573 | Input/Output: [(56 64 28 -9) -9]
Test Case: 574 | Input/Output: [(-6 19 -42 -51) -51]
Test Case: 575 | Input/Output: [(-25 44 -20 61) -25]
Test Case: 576 | Input/Output: [(79 96 61 -6) -6]
Test Case: 577 | Input/Output: [(10 -24 -41 -99) -99]
Test Case: 578 | Input/Output: [(82 -1 -38 -44) -44]
Test Case: 579 | Input/Output: [(-71 67 -86 15) -86]
Test Case: 580 | Input/Output: [(-29 -21 -35 21) -35]
Test Case: 581 | Input/Output: [(-10 -37 100 34) -37]
Test Case: 582 | Input/Output: [(-50 -55 9 50) -55]
Test Case: 583 | Input/Output: [(68 52 -39 44) -39]
Test Case: 584 | Input/Output: [(35 -70 51 -69) -70]
Test Case: 585 | Input/Output: [(-96 15 54 -17) -96]
Test Case: 586 | Input/Output: [(67 5 -44 10) -44]
Test Case: 587 | Input/Output: [(88 -63 60 -84) -84]
Test Case: 588 | Input/Output: [(-51 70 36 -47) -51]
Test Case: 589 | Input/Output: [(97 -82 71 -12) -82]
Test Case: 590 | Input/Output: [(43 -44 -62 -64) -64]
Test Case: 591 | Input/Output: [(58 30 91 -3) -3]
Test Case: 592 | Input/Output: [(82 -56 -78 69) -78]
Test Case: 593 | Input/Output: [(63 -80 -92 -66) -92]
Test Case: 594 | Input/Output: [(-48 -32 32 24) -48]
Test Case: 595 | Input/Output: [(-90 47 83 -24) -90]
Test Case: 596 | Input/Output: [(-94 -75 82 -80) -94]
Test Case: 597 | Input/Output: [(48 -41 -50 -7) -50]
Test Case: 598 | Input/Output: [(-11 -95 93 -89) -95]
Test Case: 599 | Input/Output: [(-92 66 45 -57) -92]
Test Case: 600 | Input/Output: [(5 40 -45 -86) -86]
Test Case: 601 | Input/Output: [(-61 81 -28 50) -61]
Test Case: 602 | Input/Output: [(45 -79 -22 96) -79]
Test Case: 603 | Input/Output: [(-8 -96 -50 -54) -96]
Test Case: 604 | Input/Output: [(82 85 -27 40) -27]
Test Case: 605 | Input/Output: [(-44 83 -65 41) -65]
Test Case: 606 | Input/Output: [(66 -54 -15 -82) -82]
Test Case: 607 | Input/Output: [(-74 89 -41 -53) -74]
Test Case: 608 | Input/Output: [(-10 61 39 87) -10]
Test Case: 609 | Input/Output: [(-89 29 55 58) -89]
Test Case: 610 | Input/Output: [(8 -97 -53 -5) -97]
Test Case: 611 | Input/Output: [(59 -97 48 -85) -97]
Test Case: 612 | Input/Output: [(-89 -74 80 -24) -89]
Test Case: 613 | Input/Output: [(23 -95 16 -67) -95]
Test Case: 614 | Input/Output: [(75 1 -99 -50) -99]
Test Case: 615 | Input/Output: [(-10 -13 16 19) -13]
Test Case: 616 | Input/Output: [(69 -25 57 -25) -25]
Test Case: 617 | Input/Output: [(-13 -8 38 -45) -45]
Test Case: 618 | Input/Output: [(49 47 -28 -25) -28]
Test Case: 619 | Input/Output: [(-4 3 -1 -55) -55]
Test Case: 620 | Input/Output: [(-8 -87 18 48) -87]
Test Case: 621 | Input/Output: [(29 19 -2 -89) -89]
Test Case: 622 | Input/Output: [(95 -49 57 -34) -49]
Test Case: 623 | Input/Output: [(31 55 86 48) 31]
Test Case: 624 | Input/Output: [(-16 34 19 -48) -48]
Test Case: 625 | Input/Output: [(-11 52 -89 -58) -89]
Test Case: 626 | Input/Output: [(-50 -33 73 -54) -54]
Test Case: 627 | Input/Output: [(-42 -63 -19 34) -63]
Test Case: 628 | Input/Output: [(-53 -71 41 49) -71]
Test Case: 629 | Input/Output: [(28 20 -59 -75) -75]
Test Case: 630 | Input/Output: [(-19 6 -51 -85) -85]
Test Case: 631 | Input/Output: [(-11 -69 5 -7) -69]
Test Case: 632 | Input/Output: [(-66 -75 -99 -49) -99]
Test Case: 633 | Input/Output: [(46 -65 56 62) -65]
Test Case: 634 | Input/Output: [(-67 -27 -86 -84) -86]
Test Case: 635 | Input/Output: [(-100 23 66 90) -100]
Test Case: 636 | Input/Output: [(-88 5 -55 -45) -88]
Test Case: 637 | Input/Output: [(-48 -58 66 -30) -58]
Test Case: 638 | Input/Output: [(-79 95 70 64) -79]
Test Case: 639 | Input/Output: [(98 12 28 -50) -50]
Test Case: 640 | Input/Output: [(-74 -46 -22 -41) -74]
Test Case: 641 | Input/Output: [(-38 -34 -50 46) -50]
Test Case: 642 | Input/Output: [(-15 -4 -10 50) -15]
Test Case: 643 | Input/Output: [(91 79 82 -58) -58]
Test Case: 644 | Input/Output: [(11 -74 -86 -29) -86]
Test Case: 645 | Input/Output: [(-32 -51 27 -38) -51]
Test Case: 646 | Input/Output: [(85 -31 37 -43) -43]
Test Case: 647 | Input/Output: [(25 -27 -98 86) -98]
Test Case: 648 | Input/Output: [(77 -90 70 67) -90]
Test Case: 649 | Input/Output: [(-27 -60 22 63) -60]
Test Case: 650 | Input/Output: [(0 24 20 -66) -66]
Test Case: 651 | Input/Output: [(-24 -88 -18 -94) -94]
Test Case: 652 | Input/Output: [(-98 -52 -57 77) -98]
Test Case: 653 | Input/Output: [(67 75 29 82) 29]
Test Case: 654 | Input/Output: [(68 93 -27 38) -27]
Test Case: 655 | Input/Output: [(-24 99 -39 -38) -39]
Test Case: 656 | Input/Output: [(92 95 -79 83) -79]
Test Case: 657 | Input/Output: [(-63 -68 -5 -30) -68]
Test Case: 658 | Input/Output: [(46 -75 69 60) -75]
Test Case: 659 | Input/Output: [(-87 -26 90 25) -87]
Test Case: 660 | Input/Output: [(7 21 10 36) 7]
Test Case: 661 | Input/Output: [(3 33 59 19) 3]
Test Case: 662 | Input/Output: [(-79 -36 90 -86) -86]
Test Case: 663 | Input/Output: [(39 79 -94 7) -94]
Test Case: 664 | Input/Output: [(-6 -43 82 5) -43]
Test Case: 665 | Input/Output: [(45 61 40 5) 5]
Test Case: 666 | Input/Output: [(-53 -24 8 49) -53]
Test Case: 667 | Input/Output: [(-57 -64 -58 -75) -75]
Test Case: 668 | Input/Output: [(96 -79 67 51) -79]
Test Case: 669 | Input/Output: [(64 20 -94 -24) -94]
Test Case: 670 | Input/Output: [(-95 50 -75 -84) -95]
Test Case: 671 | Input/Output: [(-72 -96 -16 -17) -96]
Test Case: 672 | Input/Output: [(22 -59 19 -70) -70]
Test Case: 673 | Input/Output: [(-23 -38 50 65) -38]
Test Case: 674 | Input/Output: [(9 -27 89 -17) -27]
Test Case: 675 | Input/Output: [(53 76 -25 -59) -59]
Test Case: 676 | Input/Output: [(-58 43 -23 97) -58]
Test Case: 677 | Input/Output: [(-25 -40 42 -2) -40]
Test Case: 678 | Input/Output: [(-40 -71 -92 2) -92]
Test Case: 679 | Input/Output: [(-57 -54 -50 -86) -86]
Test Case: 680 | Input/Output: [(-47 -28 -69 35) -69]
Test Case: 681 | Input/Output: [(-73 54 63 62) -73]
Test Case: 682 | Input/Output: [(-7 30 -54 -60) -60]
Test Case: 683 | Input/Output: [(-34 89 48 -86) -86]
Test Case: 684 | Input/Output: [(25 -43 0 -36) -43]
Test Case: 685 | Input/Output: [(18 -86 -60 -5) -86]
Test Case: 686 | Input/Output: [(21 -49 74 -32) -49]
Test Case: 687 | Input/Output: [(44 58 -26 92) -26]
Test Case: 688 | Input/Output: [(-76 -95 50 -96) -96]
Test Case: 689 | Input/Output: [(79 13 -42 41) -42]
Test Case: 690 | Input/Output: [(-75 -87 76 -67) -87]
Test Case: 691 | Input/Output: [(6 2 53 6) 2]
Test Case: 692 | Input/Output: [(-14 -71 100 -92) -92]
Test Case: 693 | Input/Output: [(55 -3 43 -56) -56]
Test Case: 694 | Input/Output: [(18 6 73 -33) -33]
Test Case: 695 | Input/Output: [(-28 25 71 -16) -28]
Test Case: 696 | Input/Output: [(1 32 -35 -80) -80]
Test Case: 697 | Input/Output: [(-27 37 39 -24) -27]
Test Case: 698 | Input/Output: [(39 29 95 85) 29]
Test Case: 699 | Input/Output: [(54 13 -45 -55) -55]
Test Case: 700 | Input/Output: [(-20 84 -91 -16) -91]
Test Case: 701 | Input/Output: [(78 58 86 -42) -42]
Test Case: 702 | Input/Output: [(79 -38 -72 -45) -72]
Test Case: 703 | Input/Output: [(75 99 64 89) 64]
Test Case: 704 | Input/Output: [(-24 99 -14 20) -24]
Test Case: 705 | Input/Output: [(94 -32 29 -91) -91]
Test Case: 706 | Input/Output: [(43 -44 -42 -29) -44]
Test Case: 707 | Input/Output: [(-9 -7 10 -6) -9]
Test Case: 708 | Input/Output: [(-77 8 -65 24) -77]
Test Case: 709 | Input/Output: [(-94 83 60 1) -94]
Test Case: 710 | Input/Output: [(-6 36 75 -71) -71]
Test Case: 711 | Input/Output: [(24 19 77 55) 19]
Test Case: 712 | Input/Output: [(-32 -84 75 65) -84]
Test Case: 713 | Input/Output: [(-49 -97 -94 0) -97]
Test Case: 714 | Input/Output: [(-37 52 -15 87) -37]
Test Case: 715 | Input/Output: [(-62 -5 41 -60) -62]
Test Case: 716 | Input/Output: [(-15 -47 -87 -80) -87]
Test Case: 717 | Input/Output: [(-97 -35 95 28) -97]
Test Case: 718 | Input/Output: [(23 -96 -84 -92) -96]
Test Case: 719 | Input/Output: [(-18 -62 3 -89) -89]
Test Case: 720 | Input/Output: [(76 21 -8 -90) -90]
Test Case: 721 | Input/Output: [(-95 -91 73 25) -95]
Test Case: 722 | Input/Output: [(95 11 74 76) 11]
Test Case: 723 | Input/Output: [(-37 -36 58 76) -37]
Test Case: 724 | Input/Output: [(2 -51 -12 82) -51]
Test Case: 725 | Input/Output: [(55 -61 -63 9) -63]
Test Case: 726 | Input/Output: [(96 17 -19 -53) -53]
Test Case: 727 | Input/Output: [(14 58 -42 39) -42]
Test Case: 728 | Input/Output: [(-34 -54 -74 39) -74]
Test Case: 729 | Input/Output: [(-1 57 -55 -33) -55]
Test Case: 730 | Input/Output: [(100 -20 -51 -74) -74]
Test Case: 731 | Input/Output: [(44 -29 1 -58) -58]
Test Case: 732 | Input/Output: [(-78 -69 -48 -30) -78]
Test Case: 733 | Input/Output: [(81 -36 93 55) -36]
Test Case: 734 | Input/Output: [(70 38 -43 -74) -74]
Test Case: 735 | Input/Output: [(73 97 -46 15) -46]
Test Case: 736 | Input/Output: [(35 -100 -46 6) -100]
Test Case: 737 | Input/Output: [(48 67 36 68) 36]
Test Case: 738 | Input/Output: [(-72 -90 -85 -75) -90]
Test Case: 739 | Input/Output: [(77 45 -12 -95) -95]
Test Case: 740 | Input/Output: [(63 -25 47 -97) -97]
Test Case: 741 | Input/Output: [(-87 -15 48 -73) -87]
Test Case: 742 | Input/Output: [(-20 -96 -48 -10) -96]
Test Case: 743 | Input/Output: [(-65 31 51 42) -65]
Test Case: 744 | Input/Output: [(1 72 64 24) 1]
Test Case: 745 | Input/Output: [(-15 35 -26 -51) -51]
Test Case: 746 | Input/Output: [(73 30 45 7) 7]
Test Case: 747 | Input/Output: [(37 -81 63 -37) -81]
Test Case: 748 | Input/Output: [(18 53 46 -20) -20]
Test Case: 749 | Input/Output: [(-35 78 -8 -44) -44]
Test Case: 750 | Input/Output: [(-45 85 10 -48) -48]
Test Case: 751 | Input/Output: [(-96 20 -47 -38) -96]
Test Case: 752 | Input/Output: [(35 77 51 -18) -18]
Test Case: 753 | Input/Output: [(35 -73 -45 34) -73]
Test Case: 754 | Input/Output: [(-10 93 -50 -8) -50]
Test Case: 755 | Input/Output: [(100 -91 -66 15) -91]
Test Case: 756 | Input/Output: [(-7 4 -72 -11) -72]
Test Case: 757 | Input/Output: [(46 -68 -80 41) -80]
Test Case: 758 | Input/Output: [(75 -99 -11 -10) -99]
Test Case: 759 | Input/Output: [(29 50 72 -57) -57]
Test Case: 760 | Input/Output: [(-4 58 30 82) -4]
Test Case: 761 | Input/Output: [(-60 29 -78 -95) -95]
Test Case: 762 | Input/Output: [(84 -81 -80 -58) -81]
Test Case: 763 | Input/Output: [(13 61 -43 45) -43]
Test Case: 764 | Input/Output: [(-38 -99 -48 -17) -99]
Test Case: 765 | Input/Output: [(20 -47 55 -45) -47]
Test Case: 766 | Input/Output: [(93 -32 -52 31) -52]
Test Case: 767 | Input/Output: [(-35 -15 -73 -74) -74]
Test Case: 768 | Input/Output: [(95 -51 52 -57) -57]
Test Case: 769 | Input/Output: [(80 79 16 -39) -39]
Test Case: 770 | Input/Output: [(-87 34 69 66) -87]
Test Case: 771 | Input/Output: [(-47 -62 55 15) -62]
Test Case: 772 | Input/Output: [(-72 39 13 5) -72]
Test Case: 773 | Input/Output: [(61 92 33 26) 26]
Test Case: 774 | Input/Output: [(-76 -47 -47 -43) -76]
Test Case: 775 | Input/Output: [(7 16 -65 -33) -65]
Test Case: 776 | Input/Output: [(82 -37 -69 95) -69]
Test Case: 777 | Input/Output: [(-80 -55 -40 28) -80]
Test Case: 778 | Input/Output: [(93 -30 29 73) -30]
Test Case: 779 | Input/Output: [(-62 -9 91 7) -62]
Test Case: 780 | Input/Output: [(-14 -94 -96 58) -96]
Test Case: 781 | Input/Output: [(-43 12 -65 98) -65]
Test Case: 782 | Input/Output: [(-91 -11 -86 -19) -91]
Test Case: 783 | Input/Output: [(13 83 20 -78) -78]
Test Case: 784 | Input/Output: [(-15 77 51 13) -15]
Test Case: 785 | Input/Output: [(73 -88 -4 -96) -96]
Test Case: 786 | Input/Output: [(-74 2 -6 -13) -74]
Test Case: 787 | Input/Output: [(-49 -47 81 -70) -70]
Test Case: 788 | Input/Output: [(7 -19 24 96) -19]
Test Case: 789 | Input/Output: [(38 46 -72 98) -72]
Test Case: 790 | Input/Output: [(54 69 18 -48) -48]
Test Case: 791 | Input/Output: [(11 63 -75 -10) -75]
Test Case: 792 | Input/Output: [(-56 -35 43 -44) -56]
Test Case: 793 | Input/Output: [(-39 -30 -95 74) -95]
Test Case: 794 | Input/Output: [(48 -25 -39 -71) -71]
Test Case: 795 | Input/Output: [(86 75 -39 30) -39]
Test Case: 796 | Input/Output: [(-44 63 15 50) -44]
Test Case: 797 | Input/Output: [(84 -84 -37 -66) -84]
Test Case: 798 | Input/Output: [(-95 -95 -90 69) -95]
Test Case: 799 | Input/Output: [(63 35 94 -49) -49]
Test Case: 800 | Input/Output: [(-3 -2 60 66) -3]
Test Case: 801 | Input/Output: [(-74 -25 -75 -35) -75]
Test Case: 802 | Input/Output: [(-100 -9 18 35) -100]
Test Case: 803 | Input/Output: [(76 45 -95 22) -95]
Test Case: 804 | Input/Output: [(-77 -82 30 77) -82]
Test Case: 805 | Input/Output: [(82 44 -90 10) -90]
Test Case: 806 | Input/Output: [(72 74 -56 68) -56]
Test Case: 807 | Input/Output: [(32 69 -29 -72) -72]
Test Case: 808 | Input/Output: [(10 -3 -28 -20) -28]
Test Case: 809 | Input/Output: [(-61 -44 -13 -67) -67]
Test Case: 810 | Input/Output: [(-44 -28 87 39) -44]
Test Case: 811 | Input/Output: [(32 -53 30 1) -53]
Test Case: 812 | Input/Output: [(8 -18 -87 -62) -87]
Test Case: 813 | Input/Output: [(-94 76 61 100) -94]
Test Case: 814 | Input/Output: [(43 -15 33 83) -15]
Test Case: 815 | Input/Output: [(-42 -51 85 -65) -65]
Test Case: 816 | Input/Output: [(18 -49 1 40) -49]
Test Case: 817 | Input/Output: [(17 -18 -100 83) -100]
Test Case: 818 | Input/Output: [(-58 6 -14 -2) -58]
Test Case: 819 | Input/Output: [(-99 24 -6 -80) -99]
Test Case: 820 | Input/Output: [(-81 -43 -95 -2) -95]
Test Case: 821 | Input/Output: [(100 82 25 96) 25]
Test Case: 822 | Input/Output: [(18 -40 -75 82) -75]
Test Case: 823 | Input/Output: [(7 97 -78 -63) -78]
Test Case: 824 | Input/Output: [(-33 -14 -8 -100) -100]
Test Case: 825 | Input/Output: [(-79 -100 77 -6) -100]
Test Case: 826 | Input/Output: [(-84 -53 48 -68) -84]
Test Case: 827 | Input/Output: [(59 78 -35 -53) -53]
Test Case: 828 | Input/Output: [(63 38 92 31) 31]
Test Case: 829 | Input/Output: [(-100 27 96 -51) -100]
Test Case: 830 | Input/Output: [(-76 98 18 57) -76]
Test Case: 831 | Input/Output: [(-23 76 84 86) -23]
Test Case: 832 | Input/Output: [(11 4 61 55) 4]
Test Case: 833 | Input/Output: [(77 9 -93 -60) -93]
Test Case: 834 | Input/Output: [(54 61 -69 -43) -69]
Test Case: 835 | Input/Output: [(-71 18 13 59) -71]
Test Case: 836 | Input/Output: [(42 -50 -98 -66) -98]
Test Case: 837 | Input/Output: [(-55 17 59 70) -55]
Test Case: 838 | Input/Output: [(20 -57 97 -77) -77]
Test Case: 839 | Input/Output: [(73 -55 -20 34) -55]
Test Case: 840 | Input/Output: [(69 92 -65 -24) -65]
Test Case: 841 | Input/Output: [(91 -27 -1 -45) -45]
Test Case: 842 | Input/Output: [(-48 -63 25 -81) -81]
Test Case: 843 | Input/Output: [(67 -67 -54 93) -67]
Test Case: 844 | Input/Output: [(27 -55 17 30) -55]
Test Case: 845 | Input/Output: [(-33 47 -85 -81) -85]
Test Case: 846 | Input/Output: [(92 42 -60 -45) -60]
Test Case: 847 | Input/Output: [(-60 -99 98 -91) -99]
Test Case: 848 | Input/Output: [(48 26 17 -100) -100]
Test Case: 849 | Input/Output: [(-87 58 54 -19) -87]
Test Case: 850 | Input/Output: [(7 -22 -88 -71) -88]
Test Case: 851 | Input/Output: [(-70 -89 11 -36) -89]
Test Case: 852 | Input/Output: [(-51 39 -58 15) -58]
Test Case: 853 | Input/Output: [(73 50 18 -24) -24]
Test Case: 854 | Input/Output: [(-90 -39 -93 95) -93]
Test Case: 855 | Input/Output: [(69 15 77 37) 15]
Test Case: 856 | Input/Output: [(22 71 4 50) 4]
Test Case: 857 | Input/Output: [(-32 38 90 -64) -64]
Test Case: 858 | Input/Output: [(23 76 28 -4) -4]
Test Case: 859 | Input/Output: [(69 -17 90 -38) -38]
Test Case: 860 | Input/Output: [(-18 -62 77 15) -62]
Test Case: 861 | Input/Output: [(68 -29 65 14) -29]
Test Case: 862 | Input/Output: [(57 -33 -72 -77) -77]
Test Case: 863 | Input/Output: [(-63 64 44 61) -63]
Test Case: 864 | Input/Output: [(55 -6 -65 42) -65]
Test Case: 865 | Input/Output: [(-31 51 -91 64) -91]
Test Case: 866 | Input/Output: [(67 66 65 11) 11]
Test Case: 867 | Input/Output: [(-32 -82 -16 -19) -82]
Test Case: 868 | Input/Output: [(-60 -27 83 -45) -60]
Test Case: 869 | Input/Output: [(58 -53 21 35) -53]
Test Case: 870 | Input/Output: [(88 -33 -87 -48) -87]
Test Case: 871 | Input/Output: [(-20 9 -55 -32) -55]
Test Case: 872 | Input/Output: [(33 78 -37 64) -37]
Test Case: 873 | Input/Output: [(7 -12 32 -40) -40]
Test Case: 874 | Input/Output: [(12 92 -89 -98) -98]
Test Case: 875 | Input/Output: [(9 47 35 -18) -18]
Test Case: 876 | Input/Output: [(-21 2 62 91) -21]
Test Case: 877 | Input/Output: [(-56 13 -24 -51) -56]
Test Case: 878 | Input/Output: [(-95 -22 86 97) -95]
Test Case: 879 | Input/Output: [(-17 2 -72 42) -72]
Test Case: 880 | Input/Output: [(44 -23 -25 -49) -49]
Test Case: 881 | Input/Output: [(2 3 16 -3) -3]
Test Case: 882 | Input/Output: [(61 31 -79 25) -79]
Test Case: 883 | Input/Output: [(-38 92 80 -34) -38]
Test Case: 884 | Input/Output: [(94 -98 46 -96) -98]
Test Case: 885 | Input/Output: [(57 99 -91 -14) -91]
Test Case: 886 | Input/Output: [(-69 -86 5 -93) -93]
Test Case: 887 | Input/Output: [(-28 -39 -98 3) -98]
Test Case: 888 | Input/Output: [(-67 44 -85 -16) -85]
Test Case: 889 | Input/Output: [(-71 -99 61 62) -99]
Test Case: 890 | Input/Output: [(88 -24 33 -79) -79]
Test Case: 891 | Input/Output: [(43 41 -98 -20) -98]
Test Case: 892 | Input/Output: [(-20 67 -1 56) -20]
Test Case: 893 | Input/Output: [(-41 90 28 -90) -90]
Test Case: 894 | Input/Output: [(-92 -41 -61 -9) -92]
Test Case: 895 | Input/Output: [(14 76 78 27) 14]
Test Case: 896 | Input/Output: [(34 89 -71 -88) -88]
Test Case: 897 | Input/Output: [(98 -67 11 54) -67]
Test Case: 898 | Input/Output: [(50 94 -99 -95) -99]
Test Case: 899 | Input/Output: [(-65 -28 62 56) -65]
Test Case: 900 | Input/Output: [(3 -52 94 -60) -60]
Test Case: 901 | Input/Output: [(-97 63 36 -91) -97]
Test Case: 902 | Input/Output: [(-70 -36 -69 40) -70]
Test Case: 903 | Input/Output: [(75 -16 98 -45) -45]
Test Case: 904 | Input/Output: [(6 -48 34 94) -48]
Test Case: 905 | Input/Output: [(43 87 -46 42) -46]
Test Case: 906 | Input/Output: [(-23 -77 14 -51) -77]
Test Case: 907 | Input/Output: [(-12 -59 -30 33) -59]
Test Case: 908 | Input/Output: [(-38 1 100 -14) -38]
Test Case: 909 | Input/Output: [(-53 63 -91 100) -91]
Test Case: 910 | Input/Output: [(-17 -99 -87 -19) -99]
Test Case: 911 | Input/Output: [(50 -70 68 -37) -70]
Test Case: 912 | Input/Output: [(-32 -54 25 -9) -54]
Test Case: 913 | Input/Output: [(93 -82 -89 -66) -89]
Test Case: 914 | Input/Output: [(16 94 49 -3) -3]
Test Case: 915 | Input/Output: [(1 33 -71 -99) -99]
Test Case: 916 | Input/Output: [(-2 11 -50 -52) -52]
Test Case: 917 | Input/Output: [(-20 -40 53 -57) -57]
Test Case: 918 | Input/Output: [(26 87 -84 35) -84]
Test Case: 919 | Input/Output: [(89 -23 -11 -30) -30]
Test Case: 920 | Input/Output: [(45 66 -35 90) -35]
Test Case: 921 | Input/Output: [(-42 -97 7 83) -97]
Test Case: 922 | Input/Output: [(58 30 20 20) 20]
Test Case: 923 | Input/Output: [(-58 -77 31 -48) -77]
Test Case: 924 | Input/Output: [(52 -11 100 -87) -87]
Test Case: 925 | Input/Output: [(-71 30 44 13) -71]
Test Case: 926 | Input/Output: [(63 -47 -42 63) -47]
Test Case: 927 | Input/Output: [(-95 -53 70 -56) -95]
Test Case: 928 | Input/Output: [(89 64 -69 73) -69]
Test Case: 929 | Input/Output: [(-27 -30 41 5) -30]
Test Case: 930 | Input/Output: [(90 67 -15 49) -15]
Test Case: 931 | Input/Output: [(-45 -57 27 -27) -57]
Test Case: 932 | Input/Output: [(-95 34 -84 72) -95]
Test Case: 933 | Input/Output: [(88 -100 -78 -93) -100]
Test Case: 934 | Input/Output: [(-18 61 90 -54) -54]
Test Case: 935 | Input/Output: [(-69 -62 -64 86) -69]
Test Case: 936 | Input/Output: [(-72 66 17 75) -72]
Test Case: 937 | Input/Output: [(-49 79 -6 -80) -80]
Test Case: 938 | Input/Output: [(-60 66 64 -1) -60]
Test Case: 939 | Input/Output: [(62 -63 -24 -43) -63]
Test Case: 940 | Input/Output: [(-67 -41 -94 32) -94]
Test Case: 941 | Input/Output: [(-62 78 54 -87) -87]
Test Case: 942 | Input/Output: [(94 20 -91 -66) -91]
Test Case: 943 | Input/Output: [(-90 -19 -18 -65) -90]
Test Case: 944 | Input/Output: [(-50 72 -43 85) -50]
Test Case: 945 | Input/Output: [(50 31 60 83) 31]
Test Case: 946 | Input/Output: [(-32 49 55 -80) -80]
Test Case: 947 | Input/Output: [(-44 -17 53 -5) -44]
Test Case: 948 | Input/Output: [(47 67 -43 -4) -43]
Test Case: 949 | Input/Output: [(96 -89 -23 100) -89]
Test Case: 950 | Input/Output: [(16 59 79 -63) -63]
Test Case: 951 | Input/Output: [(42 57 -82 88) -82]
Test Case: 952 | Input/Output: [(-4 -21 -26 63) -26]
Test Case: 953 | Input/Output: [(13 67 -81 40) -81]
Test Case: 954 | Input/Output: [(-88 -29 -92 67) -92]
Test Case: 955 | Input/Output: [(-18 91 -99 54) -99]
Test Case: 956 | Input/Output: [(11 5 -2 -94) -94]
Test Case: 957 | Input/Output: [(-81 74 -37 67) -81]
Test Case: 958 | Input/Output: [(-5 16 69 32) -5]
Test Case: 959 | Input/Output: [(11 48 -87 32) -87]
Test Case: 960 | Input/Output: [(-2 4 -57 35) -57]
Test Case: 961 | Input/Output: [(-88 -33 -53 -100) -100]
Test Case: 962 | Input/Output: [(26 36 -34 -50) -50]
Test Case: 963 | Input/Output: [(80 19 -18 77) -18]
Test Case: 964 | Input/Output: [(28 86 -5 38) -5]
Test Case: 965 | Input/Output: [(64 8 95 84) 8]
Test Case: 966 | Input/Output: [(-38 86 88 -39) -39]
Test Case: 967 | Input/Output: [(-36 52 -59 71) -59]
Test Case: 968 | Input/Output: [(-39 44 35 -91) -91]
Test Case: 969 | Input/Output: [(-93 -36 25 16) -93]
Test Case: 970 | Input/Output: [(-49 27 -19 93) -49]
Test Case: 971 | Input/Output: [(10 -38 10 37) -38]
Test Case: 972 | Input/Output: [(-10 -97 -23 -4) -97]
Test Case: 973 | Input/Output: [(4 -97 36 39) -97]
Test Case: 974 | Input/Output: [(99 -48 -2 1) -48]
Test Case: 975 | Input/Output: [(39 -10 -58 41) -58]
Test Case: 976 | Input/Output: [(42 20 -52 -2) -52]
Test Case: 977 | Input/Output: [(-87 -79 76 -100) -100]
Test Case: 978 | Input/Output: [(-60 26 -41 -90) -90]
Test Case: 979 | Input/Output: [(-30 -58 39 -10) -58]
Test Case: 980 | Input/Output: [(-54 -86 -14 -87) -87]
Test Case: 981 | Input/Output: [(61 75 93 -82) -82]
Test Case: 982 | Input/Output: [(57 50 55 -64) -64]
Test Case: 983 | Input/Output: [(-33 55 -28 33) -33]
Test Case: 984 | Input/Output: [(-86 -95 -91 -15) -95]
Test Case: 985 | Input/Output: [(-42 25 -21 -3) -42]
Test Case: 986 | Input/Output: [(89 92 99 92) 89]
Test Case: 987 | Input/Output: [(-7 28 7 60) -7]
Test Case: 988 | Input/Output: [(-76 45 0 -45) -76]
Test Case: 989 | Input/Output: [(24 -4 -6 -20) -20]
Test Case: 990 | Input/Output: [(55 -93 -85 -96) -96]
Test Case: 991 | Input/Output: [(-100 6 52 -3) -100]
Test Case: 992 | Input/Output: [(-2 42 9 -10) -10]
Test Case: 993 | Input/Output: [(-61 -48 9 77) -61]
Test Case: 994 | Input/Output: [(12 -88 -1 98) -88]
Test Case: 995 | Input/Output: [(41 -47 49 94) -47]
Test Case: 996 | Input/Output: [(24 15 34 -65) -65]
Test Case: 997 | Input/Output: [(51 55 24 55) 24]
Test Case: 998 | Input/Output: [(64 88 24 -16) -16]
Test Case: 999 | Input/Output: [(55 -12 50 -7) -12]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -64 66 -75 -54 -117 6 -110 -51 -71 104 -64 29 80 35 -115 1
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[20 20 20 82] 20] [[-43 66 -43 -43] -43] [[96 -4 -4 -4] -4] [[100 100 100 -52] -52] [[-59 -59 -59 -12] -59] [[82 82 62 82] 62] [[-82 -82 -82 93] -82] [[-94 -87 -94 -94] -94] [[92 92 -89 92] -89] [[-85 -85 -85 31] -85] [(6 6 6 6) 6] [(-31 -31 -31 -31) -31] [(-36 -36 -36 -36) -36] [(-98 -98 -98 -98) -98] [(-66 -66 -66 -66) -66] [(17 77 41 77) 17] [(81 6 94 65) 6] [(82 70 26 2) 2] [(1 69 88 3) 1] [(8 2 73 42) 2] [(27 92 42 38) 27] [(42 12 35 83) 12] [(21 77 9 62) 9] [(31 38 38 66) 31] [(53 96 59 77) 53] [(18 0 7 4) 0] [(52 5 90 45) 5] [(11 44 42 85) 11] [(87 17 64 28) 17] [(1 58 47 28) 1] [(6 28 50 9) 6] [(52 38 8 37) 8] [(32 41 100 7) 7] [(79 78 2 54) 2] [(25 53 83 47) 25] [(-29 -70 -51 11) -70] [(-45 -81 -15 -73) -81] [(20 -48 -76 95) -76] [(-59 80 58 95) -59] [(42 49 39 -89) -89] [(12 76 -52 28) -52] [(88 97 -6 58) -6] [(-51 25 14 -12) -51] [(-98 82 44 62) -98] [(60 13 81 0) 0] [(30 72 47 -40) -40] [(-2 -60 0 61) -60] [(97 -62 20 0) -62] [(88 -95 48 -89) -95] [(-42 -92 28 -72) -92] [(-92 17 93 21) -92] [(-87 28 8 23) -87] [(23 -24 100 97) -24] [(90 -62 -25 -69) -69] [(81 32 -66 -76) -76] [(52 -28 -14 -27) -28] [(-26 -27 -48 -58) -58] [(-61 30 -92 57) -92] [(-72 -85 -68 -80) -85] [(-72 95 -15 -67) -72] [(54 -28 60 -62) -62] [(69 88 -98 34) -98] [(51 19 39 -100) -100] [(8 15 -29 -58) -58] [(-86 -82 55 -32) -86] [(-30 -25 -56 -79) -79] [(76 8 26 0) 0] [(-29 80 21 17) -29] [(-32 -12 -86 82) -86] [(54 86 -37 -96) -96] [(8 -32 91 -70) -70] [(-79 -19 71 17) -79] [(-63 72 20 11) -63] [(-50 -62 22 79) -62] [(-55 2 87 -83) -83] [(-76 80 -97 -58) -97] [(42 -53 75 -64) -64] [(-20 79 -67 -6) -67] [(-51 55 -7 -87) -87] [(-36 -4 53 0) -36] [(-5 14 -16 -63) -63] [(-81 22 -98 -38) -98] [(27 8 -22 15) -22] [(-40 19 47 31) -40] [(90 -56 -13 69) -56] [(30 19 42 -70) -70] [(36 -92 13 -9) -92] [(-22 -25 71 78) -25] [(-95 67 64 -85) -95] [(-73 55 -9 44) -73] [(-22 44 59 77) -22] [(54 11 50 -45) -45] [(-27 22 -16 -57) -57] [(71 59 52 70) 52] [(-16 -49 47 6) -49])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 2, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k})
Lexicase best program: (exec_yank in2 integer_rot print_integer exec_k () ())
Lexicase best errors: [1 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 8
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 2, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k})
Zero cases best program: (exec_yank in2 integer_rot print_integer exec_k () ())
Zero cases best errors: [1 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 8
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 1 1 9 9 1 2 3 7 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 1 1 9 9 1 2 3 7 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_581} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction tagged_244})
Best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_dup_items integer_max integer_mod boolean_xor exec_yankdup integer_dec tagged_581 exec_k_when_autoconstructing (boolean_shove boolean_rot integer_dup_times) (exec_yank exec_while (integer_lte exec_y_when_autoconstructing (in3 boolean_invert_second_then_and) boolean_frominteger) integer_lte in2 exec_yank boolean_xor) print_boolean exec_dup () integer_dup_times integer_dup_times integer_empty in4 integer_dup_items boolean_not integer_pop integer_dup_items in1 tagged_244)) () ()) ()))) ())))
Errors: [0 1 1 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 76
Size: 104
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 9.961
Median total errors in population: 10
Error averages by case: (0.997 0.999 0.999 0.991 0.991 0.999 0.998 0.997 0.993 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.942
Average program size in population (points): 68.921
Average percent parens in population: 0.285
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 489533
--- Timings ---
Current time: 1559582798546 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.9 seconds, 35.5%
Fitness Testing:      1.5 seconds, 59.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yankdup})
Lexicase best program: (exec_yankdup integer_gte in1 boolean_swap boolean_yank print_integer integer_div integer_rot integer_dup integer_mult integer_flush print_integer boolean_xor integer_rot boolean_yankdup integer_yankdup boolean_invert_second_then_and integer_eq boolean_dup_items boolean_and boolean_dup exec_pop (exec_eq boolean_dup_items boolean_invert_second_then_and exec_do*times (integer_fromboolean exec_s_when_autoconstructing (integer_gte integer_yank) (exec_flush boolean_dup_items boolean_or) (exec_pop (boolean_rot) boolean_rot boolean_not) integer_gte in2 boolean_dup_items) boolean_xor integer_div exec_yankdup))
Lexicase best errors: [0 0 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.140
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yankdup})
Zero cases best program: (exec_yankdup integer_gte in1 boolean_swap boolean_yank print_integer integer_div integer_rot integer_dup integer_mult integer_flush print_integer boolean_xor integer_rot boolean_yankdup integer_yankdup boolean_invert_second_then_and integer_eq boolean_dup_items boolean_and boolean_dup exec_pop (exec_eq boolean_dup_items boolean_invert_second_then_and exec_do*times (integer_fromboolean exec_s_when_autoconstructing (integer_gte integer_yank) (exec_flush boolean_dup_items boolean_or) (exec_pop (boolean_rot) boolean_rot boolean_not) integer_gte in2 boolean_dup_items) boolean_xor integer_div exec_yankdup))
Zero cases best errors: [0 0 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.140
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 680 346 346 1000 332 906 226 331 1000)
Population mean number of elite cases: 5.50
Count of perfect (error zero) individuals by case: (334 680 346 346 0 332 906 226 331 0)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_eq})
Best program: (exec_yankdup integer_gte in1 boolean_swap boolean_yank print_integer integer_div integer_rot print_integer exec_flush boolean_invert_first_then_and in3 integer_div integer_div exec_s (boolean_shove exec_dup (boolean_invert_second_then_and integer_sub boolean_dup_times exec_s (integer_yank boolean_yankdup exec_flush) (integer_lte integer_dup_times exec_y_when_autoconstructing () boolean_yank in4 exec_pop (integer_mult integer_rot) boolean_swap) (boolean_or) exec_eq) print_newline boolean_empty exec_empty) (integer_fromboolean integer_eq) (exec_shove (exec_eq)))
Errors: [0 0 1 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 42
Size: 53
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.499
Median total errors in population: 6
Error averages by case: (0.666 0.32 0.654 0.654 1.0 0.668 0.094 0.774 0.669 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 40.964
Average program size in population (points): 54.788
Average percent parens in population: 0.291
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.499
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 326
Genome diversity (% unique genomes):	 0.426
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 332
Syntactic diversity (% unique Push programs):	 0.418
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 832265
--- Timings ---
Current time: 1559582800656 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.4%
Reproduction:         2.4 seconds, 50.2%
Fitness Testing:      1.9 seconds, 39.5%
Report:               0.4 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -12                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: 93                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 65                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 2                   | Program output: 42                 
Correct output: 27                  | Program output: 38                 
Correct output: 12                  | Program output: 83                 
Correct output: 9                   | Program output: 62                 
Correct output: 31                  | Program output: 66                 
Correct output: 53                  | Program output: 77                 
Correct output: 0                   | Program output: 4                  
Correct output: 5                   | Program output: 45                 
Correct output: 11                  | Program output: 85                 
Correct output: 17                  | Program output: 28                 
Correct output: 1                   | Program output: 28                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: -70                 | Program output: 11                 
Correct output: -81                 | Program output: -73                
Correct output: -76                 | Program output: 95                 
Correct output: -59                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: 28                 
Correct output: -6                  | Program output: 58                 
Correct output: -51                 | Program output: -12                
Correct output: -98                 | Program output: 62                 
Correct output: 0                   | Program output: 0                  
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: 61                 
Correct output: -62                 | Program output: 0                  
Correct output: -95                 | Program output: -89                
Correct output: -92                 | Program output: -72                
Correct output: -92                 | Program output: 21                 
Correct output: -87                 | Program output: 23                 
Correct output: -24                 | Program output: 97                 
Correct output: -69                 | Program output: -69                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: 57                 
Correct output: -85                 | Program output: -80                
Correct output: -72                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -86                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: 17                 
Correct output: -86                 | Program output: 82                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: 17                 
Correct output: -63                 | Program output: 11                 
Correct output: -62                 | Program output: 79                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -36                 | Program output: 0                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -38                
Correct output: -22                 | Program output: 15                 
Correct output: -40                 | Program output: 31                 
Correct output: -56                 | Program output: 69                 
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -9                 
Correct output: -25                 | Program output: 78                 
Correct output: -95                 | Program output: -85                
Correct output: -73                 | Program output: 44                 
Correct output: -22                 | Program output: 77                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: 52                  | Program output: 70                 
Correct output: -49                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_eq})
Lexicase best program: (in4 print_integer exec_flush boolean_invert_first_then_and in3 integer_div integer_div exec_s (boolean_shove exec_dup (boolean_invert_second_then_and integer_sub boolean_dup_times exec_s (integer_yank boolean_yankdup exec_flush) (integer_lte integer_dup_times exec_y_when_autoconstructing () boolean_yank in4 exec_pop (integer_mult integer_rot) boolean_swap) (boolean_or) exec_eq) print_newline boolean_empty exec_empty) (integer_fromboolean integer_eq) (exec_shove (exec_eq)))
Lexicase best errors: [1 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_eq})
Zero cases best program: (in4 print_integer exec_flush boolean_invert_first_then_and in3 integer_div integer_div exec_s (boolean_shove exec_dup (boolean_invert_second_then_and integer_sub boolean_dup_times exec_s (integer_yank boolean_yankdup exec_flush) (integer_lte integer_dup_times exec_y_when_autoconstructing () boolean_yank in4 exec_pop (integer_mult integer_rot) boolean_swap) (boolean_or) exec_eq) print_newline boolean_empty exec_empty) (integer_fromboolean integer_eq) (exec_shove (exec_eq)))
Zero cases best errors: [1 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (331 155 434 155 331 155 331 155 1000 155)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (331 155 434 155 331 155 331 155 0 155)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult})
Best program: (in4 print_integer exec_flush boolean_invert_first_then_and in3 integer_div integer_div exec_s (boolean_shove exec_dup (boolean_invert_second_then_and integer_sub boolean_dup_times exec_s (integer_yank boolean_yankdup exec_flush) (integer_lte integer_dup_times exec_y_when_autoconstructing () boolean_yank in4 exec_pop (integer_mult)) ())) () ())
Errors: [1 0 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.798
Median total errors in population: 9
Error averages by case: (0.669 0.845 0.566 0.845 0.669 0.845 0.669 0.845 1.0 0.845)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 42.042
Average program size in population (points): 56.581
Average percent parens in population: 0.291
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.012
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 291
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 300
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1161490
--- Timings ---
Current time: 1559582803578 milliseconds
Total Time:           7.8 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         4.9 seconds, 62.3%
Fitness Testing:      2.2 seconds, 28.7%
Report:               0.6 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add) print_boolean exec_while (integer_yankdup))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add) print_boolean exec_while (integer_yankdup))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (93 93 1000 92 953 558 655 93 93 298)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (93 93 0 92 953 558 655 93 93 298)
Population mean number of perfect (error zero) cases: 2.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k})
Best program: (exec_yankdup integer_gte in1 boolean_swap boolean_yank print_integer integer_div integer_rot integer_dup integer_mult integer_flush print_integer boolean_xor integer_rot boolean_yankdup integer_yankdup boolean_invert_second_then_and integer_eq boolean_dup_items boolean_and boolean_dup exec_pop (exec_eq boolean_dup_items exec_pop (integer_mult boolean_and boolean_dup exec_pop (exec_eq boolean_dup_items boolean_invert_second_then_and exec_do*times (exec_k () ())))))
Errors: [0 0 1 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 7.072
Median total errors in population: 7
Error averages by case: (0.907 0.907 1.0 0.908 0.047 0.442 0.345 0.907 0.907 0.702)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 28.439
Average program size in population (points): 38.38
Average percent parens in population: 0.286
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.53175
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 249
Genome diversity (% unique genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1258691
--- Timings ---
Current time: 1559582805789 milliseconds
Total Time:          10.0 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         6.7 seconds, 67.4%
Fitness Testing:      2.4 seconds, 24.0%
Report:               0.7 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor})
Lexicase best program: (exec_yankdup integer_gte in1 boolean_swap boolean_yank print_integer integer_div integer_rot boolean_xor)
Lexicase best errors: [1 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 10
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor})
Zero cases best program: (exec_yankdup integer_gte in1 boolean_swap boolean_yank print_integer integer_div integer_rot boolean_xor)
Zero cases best errors: [1 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 10
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 106 662 662 107 662 662 662 662 106)
Population mean number of elite cases: 5.29
Count of perfect (error zero) individuals by case: (0 106 662 662 107 662 662 662 662 106)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_581} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction in3} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction tagged_244})
Best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add) print_integer in3 integer_yankdup exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_dup_items boolean_frominteger integer_mod boolean_xor exec_yankdup integer_dec tagged_581 exec_k_when_autoconstructing (boolean_shove boolean_rot integer_dup_times) (exec_yank exec_while (integer_lte exec_while (integer_lte exec_y_when_autoconstructing (in3 in3) boolean_frominteger) integer_lte in2 exec_yank boolean_xor) boolean_rot exec_dup () integer_dup_times integer_dup_times integer_empty in4 integer_dup_items boolean_not integer_pop integer_dup_items in1 tagged_244))) () ()) ()))) ())))
Errors: [1 1 0 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 83
Size: 113
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 5.709
Median total errors in population: 4
Error averages by case: (1.0 0.894 0.338 0.338 0.893 0.338 0.338 0.338 0.338 0.894)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.48
Average program size in population (points): 58.662
Average percent parens in population: 0.260
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.95675
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1592966
--- Timings ---
Current time: 1559582808697 milliseconds
Total Time:          12.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         9.1 seconds, 70.6%
Fitness Testing:      2.7 seconds, 21.0%
Report:               1.0 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_eq})
Lexicase best program: (exec_yankdup integer_gte in1 boolean_swap boolean_yank print_integer integer_div integer_rot integer_dup integer_mult integer_flush print_integer boolean_xor integer_rot boolean_yankdup integer_yankdup boolean_invert_second_then_and integer_eq boolean_dup_items boolean_and in4 exec_pop (integer_mult integer_rot) boolean_swap boolean_or exec_eq print_newline boolean_empty exec_empty integer_fromboolean integer_add exec_shove (exec_eq))
Lexicase best errors: [1 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.081
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_eq})
Zero cases best program: (exec_yankdup integer_gte in1 boolean_swap boolean_yank print_integer integer_div integer_rot integer_dup integer_mult integer_flush print_integer boolean_xor integer_rot boolean_yankdup integer_yankdup boolean_invert_second_then_and integer_eq boolean_dup_items boolean_and in4 exec_pop (integer_mult integer_rot) boolean_swap boolean_or exec_eq print_newline boolean_empty exec_empty integer_fromboolean integer_add exec_shove (exec_eq))
Zero cases best errors: [1 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.081
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 902 1000 1000 1000 1000 596 600 596 1000)
Population mean number of elite cases: 8.69
Count of perfect (error zero) individuals by case: (0 902 0 0 0 0 596 600 596 0)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_581} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction tagged_244})
Best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_div) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_dup_items integer_max integer_mod integer_dup exec_yankdup integer_dec tagged_581 exec_k_when_autoconstructing (boolean_shove boolean_rot integer_dup_times) (exec_yank exec_while (integer_lte exec_y_when_autoconstructing (in3 boolean_invert_second_then_and) boolean_frominteger) integer_lte in2 exec_yank boolean_xor) print_boolean exec_dup () integer_dup_times integer_dup_times integer_empty in4 integer_dup_items boolean_not integer_pop integer_dup_items in1 tagged_244)) () ()) ()))) ())))
Errors: [1 0 1 1 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 76
Size: 104
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.306
Median total errors in population: 6
Error averages by case: (1.0 0.098 1.0 1.0 1.0 1.0 0.404 0.4 0.404 1.0)
Error minima by case: (1 0 1 1 1 1 0 0 0 1)
Average genome size in population (length): 34.542
Average program size in population (points): 46.809
Average percent parens in population: 0.281
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.443875
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 243
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 258
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1851333
--- Timings ---
Current time: 1559582810753 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:        10.7 seconds, 71.4%
Fitness Testing:      2.9 seconds, 19.7%
Report:               1.2 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output:                    
Correct output: 31                  | Program output:                    
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output:                    
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty})
Lexicase best program: (boolean_pop boolean_dup exec_when (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) ()) ())))
Lexicase best errors: [1 1 1 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 37
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty})
Zero cases best program: (boolean_pop boolean_dup exec_when (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) ()) ())))
Zero cases best errors: [1 1 1 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 37
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1 1000 1000 900 1000 1000 901)
Population mean number of elite cases: 8.80
Count of perfect (error zero) individuals by case: (0 0 0 1 0 0 900 0 0 901)
Population mean number of perfect (error zero) cases: 1.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_80} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_flush} {:close 0, :instruction -44} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_flush})
Best program: (exec_yankdup integer_gte in1 boolean_swap exec_yankdup integer_gte in1 boolean_swap boolean_yank print_integer boolean_pop integer_rot integer_dup integer_mult integer_flush print_integer boolean_xor integer_rot boolean_yankdup integer_yankdup boolean_invert_second_then_and integer_eq boolean_dup_items boolean_and boolean_dup exec_pop (exec_eq) boolean_dup_items boolean_invert_second_then_and integer_div exec_k (exec_s_when_autoconstructing (integer_gte) (integer_yank) (exec_flush boolean_dup_items boolean_or) exec_pop (boolean_rot) boolean_rot boolean_not) (integer_gte in2 boolean_dup_items) boolean_xor integer_div exec_yankdup boolean_empty boolean_yank integer_fromboolean exec_shove (exec_do*times (integer_sub tagged_80 integer_mult exec_dup_times (integer_dup_times exec_empty) integer_flush) -44 boolean_yankdup print_integer integer_flush integer_min exec_pop (boolean_stackdepth integer_dup_times) in3 integer_empty boolean_flush))
Errors: [1 1 1 1 1 1 0 1 1 0]
Total: 8
Mean: 0.8
Genome size: 70
Size: 82
Percent parens: 0.146
--- Population Statistics ---
Average total errors in population: 8.198
Median total errors in population: 8
Error averages by case: (1.0 1.0 1.0 0.999 1.0 1.0 0.1 1.0 1.0 0.099)
Error minima by case: (1 1 1 0 1 1 0 1 1 0)
Average genome size in population (length): 45.416
Average program size in population (points): 60.757
Average percent parens in population: 0.236
Minimum age in population: 6.0
Maximum age in population: 10.875
Average age in population: 8.91046875
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2167185
--- Timings ---
Current time: 1559582813015 milliseconds
Total Time:          17.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        12.3 seconds, 72.1%
Fitness Testing:      3.2 seconds, 18.8%
Report:               1.4 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -12                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: 93                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 65                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 2                   | Program output: 42                 
Correct output: 27                  | Program output: 38                 
Correct output: 12                  | Program output: 83                 
Correct output: 9                   | Program output: 62                 
Correct output: 31                  | Program output: 66                 
Correct output: 53                  | Program output: 77                 
Correct output: 0                   | Program output: 4                  
Correct output: 5                   | Program output: 45                 
Correct output: 11                  | Program output: 85                 
Correct output: 17                  | Program output: 28                 
Correct output: 1                   | Program output: 28                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: -70                 | Program output: 11                 
Correct output: -81                 | Program output: -73                
Correct output: -76                 | Program output: 95                 
Correct output: -59                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: 28                 
Correct output: -6                  | Program output: 58                 
Correct output: -51                 | Program output: -12                
Correct output: -98                 | Program output: 62                 
Correct output: 0                   | Program output: 0                  
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: 61                 
Correct output: -62                 | Program output: 0                  
Correct output: -95                 | Program output: -89                
Correct output: -92                 | Program output: -72                
Correct output: -92                 | Program output: 21                 
Correct output: -87                 | Program output: 23                 
Correct output: -24                 | Program output: 97                 
Correct output: -69                 | Program output: -69                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: 57                 
Correct output: -85                 | Program output: -80                
Correct output: -72                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -86                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: 17                 
Correct output: -86                 | Program output: 82                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: 17                 
Correct output: -63                 | Program output: 11                 
Correct output: -62                 | Program output: 79                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -36                 | Program output: 0                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -38                
Correct output: -22                 | Program output: 15                 
Correct output: -40                 | Program output: 31                 
Correct output: -56                 | Program output: 69                 
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -9                 
Correct output: -25                 | Program output: 78                 
Correct output: -95                 | Program output: -85                
Correct output: -73                 | Program output: 44                 
Correct output: -22                 | Program output: 77                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: 52                  | Program output: 70                 
Correct output: -49                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (boolean_stackdepth in1) boolean_invert_second_then_and boolean_swap in2 integer_dup_times integer_dup_times print_integer) in3 integer_yankdup exec_while (integer_add) exec_do*times (exec_while (integer_yankdup exec_when (exec_if (integer_dup exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_empty) integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) () ()) ()))) ()))))))
Lexicase best errors: [1 1 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 89
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (boolean_stackdepth in1) boolean_invert_second_then_and boolean_swap in2 integer_dup_times integer_dup_times print_integer) in3 integer_yankdup exec_while (integer_add) exec_do*times (exec_while (integer_yankdup exec_when (exec_if (integer_dup exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_empty) integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) () ()) ()))) ()))))))
Zero cases best errors: [1 1 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 89
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 296 643 642 1 1 1 1 1000)
Population mean number of elite cases: 2.59
Count of perfect (error zero) individuals by case: (1 1 296 643 642 1 1 1 1 0)
Population mean number of perfect (error zero) cases: 1.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte})
Best program: (boolean_pop boolean_dup exec_yank exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times in4 print_integer) (in3) integer_yankdup) exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items integer_min exec_do*times (integer_eq exec_dup_items integer_max integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup boolean_frominteger) integer_lte)) () ()) ())) ()))) ())))
Errors: [1 0 1 1 1 0 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 57
Size: 83
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 8.413
Median total errors in population: 8
Error averages by case: (0.999 0.999 0.704 0.357 0.358 0.999 0.999 0.999 0.999 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 48.811
Average program size in population (points): 67.988
Average percent parens in population: 0.265
Minimum age in population: 7.5
Maximum age in population: 12.296875
Average age in population: 10.629765625
Median age in population: 10.71875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2531884
--- Timings ---
Current time: 1559582814976 milliseconds
Total Time:          19.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        13.7 seconds, 71.8%
Fitness Testing:      3.5 seconds, 18.4%
Report:               1.8 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -12                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: 93                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 65                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 2                   | Program output: 42                 
Correct output: 27                  | Program output: 38                 
Correct output: 12                  | Program output: 83                 
Correct output: 9                   | Program output: 62                 
Correct output: 31                  | Program output: 66                 
Correct output: 53                  | Program output: 77                 
Correct output: 0                   | Program output: 4                  
Correct output: 5                   | Program output: 45                 
Correct output: 11                  | Program output: 85                 
Correct output: 17                  | Program output: 28                 
Correct output: 1                   | Program output: 28                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: -70                 | Program output: 11                 
Correct output: -81                 | Program output: -73                
Correct output: -76                 | Program output: 95                 
Correct output: -59                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: 28                 
Correct output: -6                  | Program output: 58                 
Correct output: -51                 | Program output: -12                
Correct output: -98                 | Program output: 62                 
Correct output: 0                   | Program output: 0                  
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: 61                 
Correct output: -62                 | Program output: 0                  
Correct output: -95                 | Program output: -89                
Correct output: -92                 | Program output: -72                
Correct output: -92                 | Program output: 21                 
Correct output: -87                 | Program output: 23                 
Correct output: -24                 | Program output: 97                 
Correct output: -69                 | Program output: -69                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: 57                 
Correct output: -85                 | Program output: -80                
Correct output: -72                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -86                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: 17                 
Correct output: -86                 | Program output: 82                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: 17                 
Correct output: -63                 | Program output: 11                 
Correct output: -62                 | Program output: 79                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -36                 | Program output: 0                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -38                
Correct output: -22                 | Program output: 15                 
Correct output: -40                 | Program output: 31                 
Correct output: -56                 | Program output: 69                 
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -9                 
Correct output: -25                 | Program output: 78                 
Correct output: -95                 | Program output: -85                
Correct output: -73                 | Program output: 44                 
Correct output: -22                 | Program output: 77                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: 52                  | Program output: 70                 
Correct output: -49                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_pop boolean_dup exec_yank exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1 boolean_invert_second_then_and boolean_swap tag_boolean_793) integer_gt in1 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times in4 print_integer) (in3) integer_yankdup exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items integer_min exec_do*times (integer_eq exec_dup_items integer_max integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup boolean_frominteger) integer_lte)) () ()) ())) ()))) ())))
Lexicase best errors: [0 0 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 88
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_pop boolean_dup exec_yank exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1 boolean_invert_second_then_and boolean_swap tag_boolean_793) integer_gt in1 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times in4 print_integer) (in3) integer_yankdup exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items integer_min exec_do*times (integer_eq exec_dup_items integer_max integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup boolean_frominteger) integer_lte)) () ()) ())) ()))) ())))
Zero cases best errors: [0 0 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 88
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (289 289 8 120 289 299 11 504 212 11)
Population mean number of elite cases: 2.03
Count of perfect (error zero) individuals by case: (289 289 8 120 289 299 11 504 212 11)
Population mean number of perfect (error zero) cases: 2.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte})
Best program: (boolean_pop boolean_dup exec_yank exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times in4 print_integer) (in3) integer_yankdup) exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap integer_dec exec_dup_items integer_min exec_do*times (integer_eq exec_dup_items integer_max integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup boolean_frominteger) integer_lte)) () ()) ())))) ())))
Errors: [0 0 1 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 57
Size: 81
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.968
Median total errors in population: 8
Error averages by case: (0.711 0.711 0.992 0.88 0.711 0.701 0.989 0.496 0.788 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.408
Average program size in population (points): 76.44
Average percent parens in population: 0.327
Minimum age in population: 9.84375
Maximum age in population: 13.703125
Average age in population: 12.6449765625
Median age in population: 12.703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2951898
--- Timings ---
Current time: 1559582817354 milliseconds
Total Time:          21.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.5 seconds, 72.2%
Fitness Testing:      3.8 seconds, 17.9%
Report:               2.0 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_pop boolean_dup in2 exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1) print_integer in3 integer_yankdup exec_while (integer_add) exec_do*times (exec_while (integer_yankdup exec_when (exec_if (integer_dup exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_empty) integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) () ()) ())) () ()) ()))) ()))))))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 99
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_pop boolean_dup in2 exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1) print_integer in3 integer_yankdup exec_while (integer_add) exec_do*times (exec_while (integer_yankdup exec_when (exec_if (integer_dup exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_empty) integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) () ()) ())) () ()) ()))) ()))))))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 99
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (356 35 34 35 931 35 35 48 104 931)
Population mean number of elite cases: 2.54
Count of perfect (error zero) individuals by case: (356 35 34 35 931 35 35 48 104 931)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte})
Best program: (boolean_pop boolean_dup exec_yank exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1 boolean_invert_second_then_and boolean_swap integer_rot print_integer) in3 integer_yankdup exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items integer_min exec_do*times (integer_eq exec_dup_items integer_max integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup boolean_frominteger) integer_lte)) () ()) ())) ()))) ())))
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 55
Size: 79
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 7.456
Median total errors in population: 7
Error averages by case: (0.644 0.965 0.966 0.965 0.069 0.965 0.965 0.952 0.896 0.069)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.447
Average program size in population (points): 79.673
Average percent parens in population: 0.329
Minimum age in population: 12.078125
Maximum age in population: 15.703125
Average age in population: 14.3738671875
Median age in population: 14.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3493354
--- Timings ---
Current time: 1559582820162 milliseconds
Total Time:          24.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        17.7 seconds, 72.8%
Fitness Testing:      4.2 seconds, 17.4%
Report:               2.3 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_pop boolean_dup in2 exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1) print_integer in3 integer_yankdup exec_while (integer_add) exec_do*times (exec_while (integer_yankdup exec_when (exec_if (integer_dup integer_eq) (exec_y_when_autoconstructing (exec_empty) integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap in2 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (in1 exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) () ()) ()))) ()))))))
Lexicase best errors: [1 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.354
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_pop boolean_dup in2 exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1) print_integer in3 integer_yankdup exec_while (integer_add) exec_do*times (exec_while (integer_yankdup exec_when (exec_if (integer_dup integer_eq) (exec_y_when_autoconstructing (exec_empty) integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap in2 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (in1 exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) () ()) ()))) ()))))))
Zero cases best errors: [1 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.354
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 123 1000 110 1000 716 715 945 716 945)
Population mean number of elite cases: 7.27
Count of perfect (error zero) individuals by case: (0 123 0 110 0 716 715 945 716 945)
Population mean number of perfect (error zero) cases: 4.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lte})
Best program: (boolean_pop boolean_dup in2 exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in1) print_integer in3 integer_yankdup exec_while (integer_add) exec_do*times (exec_while (integer_yankdup exec_when (exec_if (integer_dup exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_empty) integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (print_exec (boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod integer_shove exec_yankdup exec_eq) integer_lte)) () ()) ())))) ()))))))
Errors: [1 1 1 1 1 0 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 54
Size: 82
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 5.73
Median total errors in population: 5
Error averages by case: (1.0 0.877 1.0 0.89 1.0 0.284 0.285 0.055 0.284 0.055)
Error minima by case: (1 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 51.44
Average program size in population (points): 77.839
Average percent parens in population: 0.337
Minimum age in population: 13.57421875
Maximum age in population: 17.453125
Average age in population: 15.62765234375
Median age in population: 15.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4267774
--- Timings ---
Current time: 1559582823149 milliseconds
Total Time:          27.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.7 seconds, 72.7%
Fitness Testing:      4.8 seconds, 17.6%
Report:               2.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -87                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (in2 integer_dup_times integer_dup_times print_integer) in3 integer_yankdup boolean_not integer_add exec_do*times (exec_while (integer_yankdup exec_when (exec_if (integer_dup exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_empty) integer_rot exec_when (exec_if (exec_if (exec_empty) (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_rot (in4 boolean_swap integer_dup_times 7) (exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) () ()) ())) ())) ())) ()))))))
Lexicase best errors: [0 1 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 89
Percent parens: 0.371
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (in2 integer_dup_times integer_dup_times print_integer) in3 integer_yankdup boolean_not integer_add exec_do*times (exec_while (integer_yankdup exec_when (exec_if (integer_dup exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_empty) integer_rot exec_when (exec_if (exec_if (exec_empty) (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_rot (in4 boolean_swap integer_dup_times 7) (exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) () ()) ())) ())) ())) ()))))))
Zero cases best errors: [0 1 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 89
Percent parens: 0.371
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 194 199 1000 196 196 946 1000 946 194)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (198 194 199 0 196 196 946 0 946 194)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Best program: (boolean_pop boolean_dup boolean_pop boolean_dup exec_do*count (in2 integer_dup_times integer_dup_times print_integer) in3 integer_yankdup boolean_not integer_add exec_do*times (exec_while (integer_yankdup exec_when (exec_if (integer_dup exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (print_integer) integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot) exec_dup_times (integer_eq exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) () ())) () ()) ()))) ()))))))
Errors: [0 1 0 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 58
Size: 89
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 6.931
Median total errors in population: 8
Error averages by case: (0.802 0.806 0.801 1.0 0.804 0.804 0.054 1.0 0.054 0.806)
Error minima by case: (0 0 0 1 0 0 0 1 0 0)
Average genome size in population (length): 50.033
Average program size in population (points): 75.562
Average percent parens in population: 0.336
Minimum age in population: 14.57421875
Maximum age in population: 18.923828125
Average age in population: 17.1655087890625
Median age in population: 17.24853515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4602812
--- Timings ---
Current time: 1559582825790 milliseconds
Total Time:          29.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.6 seconds, 72.6%
Fitness Testing:      5.0 seconds, 16.9%
Report:               3.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 94                 
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 88                 
Correct output: 2                   | Program output: 73                 
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 7                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 64                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 83                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 81                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 20                 
Correct output: -95                 | Program output: 48                 
Correct output: -92                 | Program output: 28                 
Correct output: -92                 | Program output: 93                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: 100                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: 60                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 39                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: 55                 
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 26                 
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: 91                 
Correct output: -79                 | Program output: 71                 
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: 22                 
Correct output: -83                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: 53                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 47                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 42                 
Correct output: -92                 | Program output: 13                 
Correct output: -25                 | Program output: 71                 
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 59                 
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_pop boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_y_when_autoconstructing (boolean_not) exec_dup_times (in1 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) () ()) ()))))
Lexicase best errors: [0 1 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_pop boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_y_when_autoconstructing (boolean_not) exec_dup_times (in1 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) () ()) ()))))
Zero cases best errors: [0 1 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (929 1000 929 929 1000 311 312 2 1000 618)
Population mean number of elite cases: 7.03
Count of perfect (error zero) individuals by case: (929 0 929 929 0 311 312 2 0 618)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 2, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3)) integer_yankdup exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ())) ())))
Errors: [0 1 0 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 48
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.97
Median total errors in population: 6
Error averages by case: (0.071 1.0 0.071 0.071 1.0 0.689 0.688 0.998 1.0 0.382)
Error minima by case: (0 1 0 0 1 0 0 0 1 0)
Average genome size in population (length): 48.686
Average program size in population (points): 73.364
Average percent parens in population: 0.334
Minimum age in population: 16.0703125
Maximum age in population: 20.54443359375
Average age in population: 18.74905419921875
Median age in population: 18.828369140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5073689
--- Timings ---
Current time: 1559582828279 milliseconds
Total Time:          32.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        23.4 seconds, 72.3%
Fitness Testing:      5.4 seconds, 16.6%
Report:               3.5 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -87                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (in2 integer_dup_times integer_dup_times print_integer) in3 integer_yankdup boolean_not integer_add exec_do*times (exec_while (integer_yankdup exec_when (exec_if (exec_pop (exec_empty) integer_rot exec_while (integer_add) print_boolean exec_k_when_autoconstructing (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (exec_do*range (exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ()))) ())) ()) ()))))
Lexicase best errors: [0 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (in2 integer_dup_times integer_dup_times print_integer) in3 integer_yankdup boolean_not integer_add exec_do*times (exec_while (integer_yankdup exec_when (exec_if (exec_pop (exec_empty) integer_rot exec_while (integer_add) print_boolean exec_k_when_autoconstructing (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (exec_do*range (exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ()))) ())) ()) ()))))
Zero cases best errors: [0 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 275 792 792 1 519 516 1000 792 276)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (334 275 792 792 1 519 516 0 792 276)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Best program: (boolean_pop boolean_dup exec_do*count (in2 integer_dup_times integer_dup_times print_integer) in3 integer_yankdup boolean_not integer_add exec_do*times (exec_while (integer_yankdup exec_when (exec_if (integer_dup exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_empty) integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing () (exec_dup_items exec_s_when_autoconstructing (exec_do*times (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod) boolean_xor exec_yankdup exec_k () (integer_lte))) () ())) () ())))) ()))))))
Errors: [0 0 0 0 1 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 56
Size: 87
Percent parens: 0.356
--- Population Statistics ---
Average total errors in population: 5.703
Median total errors in population: 5
Error averages by case: (0.666 0.725 0.208 0.208 0.999 0.481 0.484 1.0 0.208 0.724)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 44.193
Average program size in population (points): 66.538
Average percent parens in population: 0.334
Minimum age in population: 17.18359375
Maximum age in population: 22.11474609375
Average age in population: 20.19654272460938
Median age in population: 20.288818359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5321242
--- Timings ---
Current time: 1559582830703 milliseconds
Total Time:          34.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.2 seconds, 72.7%
Fitness Testing:      5.6 seconds, 16.1%
Report:               3.8 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 94                 
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 88                 
Correct output: 2                   | Program output: 73                 
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 7                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 64                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 83                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 81                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 20                 
Correct output: -95                 | Program output: 48                 
Correct output: -92                 | Program output: 28                 
Correct output: -92                 | Program output: 93                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: 100                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: 60                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 39                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: 55                 
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 26                 
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: 91                 
Correct output: -79                 | Program output: 71                 
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: 22                 
Correct output: -83                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: 53                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 47                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 42                 
Correct output: -92                 | Program output: 13                 
Correct output: -25                 | Program output: 71                 
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 59                 
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ())) ())))
Lexicase best errors: [0 1 1 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ())) ())))
Zero cases best errors: [0 1 1 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (285 216 446 287 216 285 1000 287 216 444)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (285 216 446 287 216 285 0 287 216 444)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop})
Best program: (boolean_pop boolean_dup exec_yank exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (print_integer) (in3) integer_yankdup exec_while (integer_add) exec_do*times (exec_while (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup exec_empty) integer_rot exec_if (exec_if (exec_empty) (integer_rot exec_noop)) ())))
Errors: [0 1 1 0 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 32
Size: 48
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.318
Median total errors in population: 7
Error averages by case: (0.715 0.784 0.554 0.713 0.784 0.715 1.0 0.713 0.784 0.556)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 43.13
Average program size in population (points): 64.818
Average percent parens in population: 0.332
Minimum age in population: 18.6181640625
Maximum age in population: 23.992431640625
Average age in population: 21.63582678222656
Median age in population: 21.75665283203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5819750
--- Timings ---
Current time: 1559582833306 milliseconds
Total Time:          37.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.2 seconds, 72.6%
Fitness Testing:      5.9 seconds, 15.9%
Report:               4.2 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 94                 
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 88                 
Correct output: 2                   | Program output: 73                 
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 7                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 64                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 83                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 81                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 20                 
Correct output: -95                 | Program output: 48                 
Correct output: -92                 | Program output: 28                 
Correct output: -92                 | Program output: 93                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: 100                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: 60                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 39                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: 55                 
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 26                 
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: 91                 
Correct output: -79                 | Program output: 71                 
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: 22                 
Correct output: -83                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: 53                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 47                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 42                 
Correct output: -92                 | Program output: 13                 
Correct output: -25                 | Program output: 71                 
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 59                 
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add print_boolean exec_k_when_autoconstructing (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) boolean_dup_items in4 integer_lte)) ())) ()))
Lexicase best errors: [0 1 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add print_boolean exec_k_when_autoconstructing (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) boolean_dup_items in4 integer_lte)) ())) ()))
Zero cases best errors: [0 1 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (909 1000 685 679 231 909 231 1 677 412)
Population mean number of elite cases: 5.73
Count of perfect (error zero) individuals by case: (909 0 685 679 231 909 231 1 677 412)
Population mean number of perfect (error zero) cases: 4.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction print_newline} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add print_boolean exec_while (integer_yankdup exec_when (exec_if (print_newline exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (integer_dup_times 7) exec_dup (boolean_frominteger integer_div exec_dup_times (boolean_not) exec_yankdup in4 exec_shove ()))))))
Errors: [0 1 0 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 54
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 5.266
Median total errors in population: 5
Error averages by case: (0.091 1.0 0.315 0.321 0.769 0.091 0.769 0.999 0.323 0.588)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.952
Average program size in population (points): 59.979
Average percent parens in population: 0.332
Minimum age in population: 19.6181640625
Maximum age in population: 25.33648681640625
Average age in population: 23.09640881347656
Median age in population: 23.15823364257812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6170087
--- Timings ---
Current time: 1559582835705 milliseconds
Total Time:          39.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.1 seconds, 72.9%
Fitness Testing:      6.2 seconds, 15.6%
Report:               4.4 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 94                 
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 88                 
Correct output: 2                   | Program output: 73                 
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 7                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 64                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 83                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 81                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 20                 
Correct output: -95                 | Program output: 48                 
Correct output: -92                 | Program output: 28                 
Correct output: -92                 | Program output: 93                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: 100                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: 60                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 39                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: 55                 
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 26                 
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: 91                 
Correct output: -79                 | Program output: 71                 
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: 22                 
Correct output: -83                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: 53                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 47                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 42                 
Correct output: -92                 | Program output: 13                 
Correct output: -25                 | Program output: 71                 
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 59                 
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap integer_gte integer_dup_times integer_dup_times print_integer) integer_add print_boolean exec_k_when_autoconstructing (integer_yankdup exec_when (exec_if (boolean_swap exec_empty) (exec_do*range (exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ())))) ())
Lexicase best errors: [0 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap integer_gte integer_dup_times integer_dup_times print_integer) integer_add print_boolean exec_k_when_autoconstructing (integer_yankdup exec_when (exec_if (boolean_swap exec_empty) (exec_do*range (exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ())))) ())
Zero cases best errors: [0 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (824 554 270 552 107 107 269 552 821 554)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (824 554 270 552 107 107 269 552 821 554)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 1, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt) in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) in1 boolean_invert_second_then_and boolean_swap exec_k (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times exec_if (in4) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 integer_dup_items integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items integer_min exec_do*times (integer_eq exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ())) ()))) ())
Errors: [0 0 1 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 72
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 5.39
Median total errors in population: 4
Error averages by case: (0.176 0.446 0.73 0.448 0.893 0.893 0.731 0.448 0.179 0.446)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.902
Average program size in population (points): 67.197
Average percent parens in population: 0.329
Minimum age in population: 20.931884765625
Maximum age in population: 26.61026000976562
Average age in population: 24.72130969238281
Median age in population: 24.76689147949219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6548280
--- Timings ---
Current time: 1559582838933 milliseconds
Total Time:          42.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        31.1 seconds, 73.3%
Fitness Testing:      6.5 seconds, 15.4%
Report:               4.7 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -87                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (exec_y_when_autoconstructing (in2 exec_k_when_autoconstructing (tag_boolean_793) (integer_gt boolean_xor) boolean_invert_second_then_and boolean_dup exec_k (exec_rot (integer_dup_times print_integer) (in3) (integer_yankdup) exec_while (exec_when (exec_if (integer_dup integer_shove exec_when (exec_if (exec_if (exec_empty) (integer_rot)) ())) ()))) ()))))
Lexicase best errors: [1 1 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 50
Percent parens: 0.420
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (exec_y_when_autoconstructing (in2 exec_k_when_autoconstructing (tag_boolean_793) (integer_gt boolean_xor) boolean_invert_second_then_and boolean_dup exec_k (exec_rot (integer_dup_times print_integer) (in3) (integer_yankdup) exec_while (exec_when (exec_if (integer_dup integer_shove exec_when (exec_if (exec_if (exec_empty) (integer_rot)) ())) ()))) ()))))
Zero cases best errors: [1 1 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 50
Percent parens: 0.420
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 1000 1 255 256 1000 476 474 255 199)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (204 0 1 255 256 0 476 474 255 199)
Population mean number of perfect (error zero) cases: 2.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_581} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while})
Best program: (boolean_pop boolean_dup boolean_swap in2 integer_dup_times integer_dup_times print_integer in3 integer_yankdup boolean_swap integer_add exec_do*times (exec_while (integer_yankdup exec_when (exec_if (integer_dup exec_empty) (print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (integer_eq) (exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_do*times (exec_do*times (integer_eq exec_dup_items integer_max integer_swap exec_k_when_autoconstructing (exec_dup_items exec_k_when_autoconstructing (exec_do*times (integer_dec tagged_581 exec_k_when_autoconstructing (boolean_shove boolean_rot integer_dup_times) (exec_yank exec_while ()))) ()) ()))) ()))) ())))))))
Errors: [1 1 1 0 0 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 55
Size: 82
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 7.88
Median total errors in population: 8
Error averages by case: (0.796 1.0 0.999 0.745 0.744 1.0 0.524 0.526 0.745 0.801)
Error minima by case: (0 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 45.474
Average program size in population (points): 68.606
Average percent parens in population: 0.335
Minimum age in population: 23.2177734375
Maximum age in population: 28.16947937011719
Average age in population: 26.20343946838379
Median age in population: 26.26065826416016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.004
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7061339
--- Timings ---
Current time: 1559582841732 milliseconds
Total Time:          45.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        33.1 seconds, 72.4%
Fitness Testing:      6.9 seconds, 15.2%
Report:               5.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 94                 
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 88                 
Correct output: 2                   | Program output: 73                 
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 7                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 64                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 83                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 81                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 20                 
Correct output: -95                 | Program output: 48                 
Correct output: -92                 | Program output: 28                 
Correct output: -92                 | Program output: 93                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: 100                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: 60                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 39                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: 55                 
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 26                 
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: 91                 
Correct output: -79                 | Program output: 71                 
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: 22                 
Correct output: -83                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: 53                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 47                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 42                 
Correct output: -92                 | Program output: 13                 
Correct output: -25                 | Program output: 71                 
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 59                 
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup exec_while (integer_dec) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_gte boolean_and integer_eq) exec_y_when_autoconstructing (exec_y_when_autoconstructing () integer_gt in4 exec_shove ())) ()))))
Lexicase best errors: [1 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup exec_while (integer_dec) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_gte boolean_and integer_eq) exec_y_when_autoconstructing (exec_y_when_autoconstructing () integer_gt in4 exec_shove ())) ()))))
Zero cases best errors: [1 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 608 345 1000 260 261 260 1000 1000 604)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (0 608 345 0 260 261 260 0 0 604)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Best program: (boolean_pop tag_boolean_793 integer_gt in3 exec_if (boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) (integer_lt integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (in4 exec_shove ())) ())))
Errors: [1 0 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 35
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 7.662
Median total errors in population: 7
Error averages by case: (1.0 0.392 0.655 1.0 0.74 0.739 0.74 1.0 1.0 0.396)
Error minima by case: (1 0 0 1 0 0 0 1 1 0)
Average genome size in population (length): 50.742
Average program size in population (points): 75.79
Average percent parens in population: 0.330
Minimum age in population: 24.2177734375
Maximum age in population: 29.7242431640625
Average age in population: 28.16602899932861
Median age in population: 28.36734771728516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7816107
--- Timings ---
Current time: 1559582844753 milliseconds
Total Time:          48.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.3 seconds, 72.2%
Fitness Testing:      7.5 seconds, 15.3%
Report:               6.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 94                 
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 88                 
Correct output: 2                   | Program output: 73                 
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 7                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 64                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 83                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 81                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 20                 
Correct output: -95                 | Program output: 48                 
Correct output: -92                 | Program output: 28                 
Correct output: -92                 | Program output: 93                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: 100                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: 60                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 39                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: 55                 
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 26                 
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: 91                 
Correct output: -79                 | Program output: 71                 
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: 22                 
Correct output: -83                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: 53                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 47                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 42                 
Correct output: -92                 | Program output: 13                 
Correct output: -25                 | Program output: 71                 
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 59                 
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_pop boolean_dup exec_swap (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3 integer_yankdup exec_while (integer_add) print_boolean) exec_while (integer_yankdup exec_when () exec_if (exec_if () (integer_eq) exec_y_when_autoconstructing (exec_empty) integer_rot) (exec_when (exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when ())) () ()) ())) () ()) ()))))) ())
Lexicase best errors: [1 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 79
Percent parens: 0.392
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_pop boolean_dup exec_swap (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3 integer_yankdup exec_while (integer_add) print_boolean) exec_while (integer_yankdup exec_when () exec_if (exec_if () (integer_eq) exec_y_when_autoconstructing (exec_empty) integer_rot) (exec_when (exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when ())) () ()) ())) () ()) ()))))) ())
Zero cases best errors: [1 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 79
Percent parens: 0.392
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 911 1000 1000 1000 1000 676 1000 676)
Population mean number of elite cases: 9.26
Count of perfect (error zero) individuals by case: (0 0 911 0 0 0 0 676 0 676)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup exec_while (integer_add) print_boolean) exec_while (integer_yankdup exec_when () exec_if (exec_if () (integer_eq) exec_y_when_autoconstructing (exec_empty) integer_rot exec_when (exec_dup_times (boolean_yankdup boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) () ()) ()))) ()))
Errors: [1 1 0 1 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 48
Size: 74
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 7.737
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.089 1.0 1.0 1.0 1.0 0.324 1.0 0.324)
Error minima by case: (1 1 0 1 1 1 1 0 1 0)
Average genome size in population (length): 44.586
Average program size in population (points): 66.922
Average percent parens in population: 0.332
Minimum age in population: 25.2177734375
Maximum age in population: 31.5086669921875
Average age in population: 29.35830665969849
Median age in population: 29.46824073791504
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8212650
--- Timings ---
Current time: 1559582847206 milliseconds
Total Time:          51.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.2 seconds, 72.4%
Fitness Testing:      7.8 seconds, 15.2%
Report:               6.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 909
Test mean error for best: 0.90900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output:                    
Correct output: -44                 | Program output:                    
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output:                    
Correct output: 99                  | Program output: 0000000000         
Correct output: 20                  | Program output: 0000000000         
Correct output: -43                 | Program output:                    
Correct output: -4                  | Program output:                    
Correct output: -52                 | Program output: 0000000000         
Correct output: -59                 | Program output:                    
Correct output: 62                  | Program output: 0000000000         
Correct output: -82                 | Program output:                    
Correct output: -94                 | Program output:                    
Correct output: -89                 | Program output:                    
Correct output: -85                 | Program output:                    
Correct output: 6                   | Program output: 000000             
Correct output: -31                 | Program output:                    
Correct output: -36                 | Program output:                    
Correct output: -98                 | Program output:                    
Correct output: -66                 | Program output:                    
Correct output: 17                  | Program output: 0000000000         
Correct output: 6                   | Program output: 0000000000         
Correct output: 2                   | Program output: 0000000000         
Correct output: 1                   | Program output: 0                  
Correct output: 2                   | Program output: 00000000           
Correct output: 27                  | Program output: 0000000000         
Correct output: 12                  | Program output: 0000000000         
Correct output: 9                   | Program output: 0000000000         
Correct output: 31                  | Program output: 0000000000         
Correct output: 53                  | Program output: 0000000000         
Correct output: 0                   | Program output: 0000000000         
Correct output: 5                   | Program output: 0000000000         
Correct output: 11                  | Program output: 0000000000         
Correct output: 17                  | Program output: 0000000000         
Correct output: 1                   | Program output: 0                  
Correct output: 6                   | Program output: 000000             
Correct output: 8                   | Program output: 0000000000         
Correct output: 7                   | Program output: 0000000000         
Correct output: 2                   | Program output: 122444444          
Correct output: 25                  | Program output: 0000000000         
Correct output: -70                 | Program output:                    
Correct output: -81                 | Program output:                    
Correct output: -76                 | Program output:                    
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 0000000000         
Correct output: -52                 | Program output:                    
Correct output: -6                  | Program output:                    
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 0000000000         
Correct output: -40                 | Program output: 0000000000         
Correct output: -60                 | Program output:                    
Correct output: -62                 | Program output: 0000000000         
Correct output: -95                 | Program output: 0000000000         
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 0000000000         
Correct output: -69                 | Program output:                    
Correct output: -76                 | Program output:                    
Correct output: -28                 | Program output:                    
Correct output: -58                 | Program output:                    
Correct output: -92                 | Program output:                    
Correct output: -85                 | Program output:                    
Correct output: -72                 | Program output:                    
Correct output: -62                 | Program output: 0000000000         
Correct output: -98                 | Program output:                    
Correct output: -100                | Program output: 0000000000         
Correct output: -58                 | Program output:                    
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output:                    
Correct output: 0                   | Program output: 0000000000         
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output:                    
Correct output: -96                 | Program output:                    
Correct output: -70                 | Program output: 00000000           
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output:                    
Correct output: -64                 | Program output: 0000000000         
Correct output: -67                 | Program output:                    
Correct output: -87                 | Program output:                    
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output:                    
Correct output: -98                 | Program output:                    
Correct output: -22                 | Program output:                    
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output:                    
Correct output: -70                 | Program output: 0000000000         
Correct output: -92                 | Program output: 0000000000         
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 0000000000         
Correct output: -57                 | Program output:                    
Correct output: 52                  | Program output: 0000000000         
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Lexicase best program: (in1 boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (integer_flush integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*range (exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 exec_empty) integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_shove () exec_dup_times (in4) boolean_swap integer_dup_times exec_dup (boolean_frominteger integer_mod boolean_xor integer_mod boolean_xor boolean_rot exec_k () (integer_lte))))) () ()) ()))) ()))
Lexicase best errors: [1 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 90
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Zero cases best program: (in1 boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (integer_flush integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*range (exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 exec_empty) integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_shove () exec_dup_times (in4) boolean_swap integer_dup_times exec_dup (boolean_frominteger integer_mod boolean_xor integer_mod boolean_xor boolean_rot exec_k () (integer_lte))))) () ()) ()))) ()))
Zero cases best errors: [1 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 90
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1 1 1000 1 928 1 1000 1)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (0 0 1 1 0 1 928 1 0 1)
Population mean number of perfect (error zero) cases: 0.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Best program: (in1 boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (integer_flush integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*range (exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 exec_empty) integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_shove () exec_dup_times (in4) boolean_swap integer_dup_times exec_dup (boolean_frominteger integer_mod boolean_xor integer_mod boolean_xor boolean_rot exec_k () (integer_lte))))) () ()) ()))) ()))
Errors: [1 1 0 1 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 60
Size: 90
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 9.067
Median total errors in population: 9
Error averages by case: (1.0 1.0 0.999 0.999 1.0 0.999 0.072 0.999 1.0 0.999)
Error minima by case: (1 1 0 0 1 0 0 0 1 0)
Average genome size in population (length): 42.697
Average program size in population (points): 63.943
Average percent parens in population: 0.330
Minimum age in population: 26.2177734375
Maximum age in population: 32.95186805725098
Average age in population: 30.85294980621338
Median age in population: 30.95158004760742
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8488015
--- Timings ---
Current time: 1559582850152 milliseconds
Total Time:          53.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.9 seconds, 72.6%
Fitness Testing:      8.0 seconds, 15.0%
Report:               6.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 94                 
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 88                 
Correct output: 2                   | Program output: 73                 
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 7                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 64                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 83                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 81                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 20                 
Correct output: -95                 | Program output: 48                 
Correct output: -92                 | Program output: 28                 
Correct output: -92                 | Program output: 93                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: 100                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: 60                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 39                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: 55                 
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 26                 
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: 91                 
Correct output: -79                 | Program output: 71                 
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: 22                 
Correct output: -83                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: 53                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 47                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 42                 
Correct output: -92                 | Program output: 13                 
Correct output: -25                 | Program output: 71                 
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 59                 
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3 boolean_invert_second_then_and boolean_empty exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add) print_integer) in3 integer_dup exec_empty integer_rot exec_when (exec_if (exec_if (exec_empty integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not exec_dup_times (in4 boolean_swap integer_dup_times 7 exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod exec_when () exec_yankdup exec_k (integer_lte) ()))) () ()) ())))) ()) ()))
Lexicase best errors: [1 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 77
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3 boolean_invert_second_then_and boolean_empty exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup) exec_while (integer_add) print_integer) in3 integer_dup exec_empty integer_rot exec_when (exec_if (exec_if (exec_empty integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not exec_dup_times (in4 boolean_swap integer_dup_times 7 exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*times (integer_eq exec_when (integer_max integer_mod exec_when () exec_yankdup exec_k (integer_lte) ()))) () ()) ())))) ()) ()))
Zero cases best errors: [1 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 77
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 2 1000 184 1000 292 179 179 201 1000)
Population mean number of elite cases: 5.04
Count of perfect (error zero) individuals by case: (0 2 0 184 0 292 179 179 201 0)
Population mean number of perfect (error zero) cases: 1.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793 integer_gt in3) (boolean_swap exec_k (integer_dup_times integer_dup_times boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3 integer_yankdup) exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_when (exec_flush) exec_dup_times (in1 boolean_swap integer_dup_times 7) exec_dup (boolean_frominteger integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing () (exec_do*times (integer_eq exec_when (integer_max integer_mod boolean_xor exec_yankdup exec_k () (integer_lte)))) ()) ())))) ())))
Errors: [1 1 1 0 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 46
Size: 69
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 8.963
Median total errors in population: 10
Error averages by case: (1.0 0.998 1.0 0.816 1.0 0.708 0.821 0.821 0.799 1.0)
Error minima by case: (1 0 1 0 1 0 0 0 0 1)
Average genome size in population (length): 49.75
Average program size in population (points): 73.909
Average percent parens in population: 0.324
Minimum age in population: 27.2177734375
Maximum age in population: 33.81734657287598
Average age in population: 32.50042819881439
Median age in population: 32.41858863830566
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9292002
--- Timings ---
Current time: 1559582852573 milliseconds
Total Time:          56.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.3 seconds, 71.0%
Fitness Testing:      8.8 seconds, 15.5%
Report:               7.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 94                 
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 88                 
Correct output: 2                   | Program output: 73                 
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 7                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 64                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 83                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 81                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 20                 
Correct output: -95                 | Program output: 48                 
Correct output: -92                 | Program output: 28                 
Correct output: -92                 | Program output: 93                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: 100                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: 60                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 39                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: 55                 
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 26                 
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: 91                 
Correct output: -79                 | Program output: 71                 
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: 22                 
Correct output: -83                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: 53                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 47                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 42                 
Correct output: -92                 | Program output: 13                 
Correct output: -25                 | Program output: 71                 
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 59                 
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793 integer_gt in3) (boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup exec_while (exec_if (exec_empty) (integer_rot boolean_flush integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (integer_flush integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*range (exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 exec_empty) integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_shove () exec_dup_times (in4) boolean_swap integer_dup_times exec_dup (boolean_frominteger integer_mod boolean_xor integer_mod boolean_xor boolean_rot exec_k () (integer_lte))))) () ()) ())))))
Lexicase best errors: [1 0 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 85
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (tag_boolean_793 integer_gt in3) (boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup exec_while (exec_if (exec_empty) (integer_rot boolean_flush integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (integer_flush integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*range (exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 exec_empty) integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_shove () exec_dup_times (in4) boolean_swap integer_dup_times exec_dup (boolean_frominteger integer_mod boolean_xor integer_mod boolean_xor boolean_rot exec_k () (integer_lte))))) () ()) ())))))
Zero cases best errors: [1 0 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 85
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 560 180 738 914 177 1000 916 561 561)
Population mean number of elite cases: 5.79
Count of perfect (error zero) individuals by case: (180 560 180 738 914 177 0 916 561 561)
Population mean number of perfect (error zero) cases: 4.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction 7} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_lte})
Best program: (in1 boolean_dup in1 exec_k_when_autoconstructing (tag_boolean_793) (integer_gt in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (in3) integer_yankdup integer_rot exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times 7) exec_dup (integer_flush integer_swap exec_k_when_autoconstructing (exec_dup_items exec_s_when_autoconstructing (exec_do*range (exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 exec_empty) integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (exec_shove () exec_dup_times (in4) boolean_swap integer_dup_times exec_dup (boolean_frominteger integer_mod boolean_xor integer_mod boolean_xor boolean_rot exec_k () (integer_lte))))) () ()) ()))) ()))
Errors: [1 0 1 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 60
Size: 89
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 5.213
Median total errors in population: 4
Error averages by case: (0.82 0.44 0.82 0.262 0.086 0.823 1.0 0.084 0.439 0.439)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 42.269
Average program size in population (points): 62.8
Average percent parens in population: 0.324
Minimum age in population: 28.2177734375
Maximum age in population: 35.53579568862915
Average age in population: 34.00609414100647
Median age in population: 34.1288526058197
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9720378
--- Timings ---
Current time: 1559582855057 milliseconds
Total Time:          59.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.2 seconds, 71.2%
Fitness Testing:      9.1 seconds, 15.5%
Report:               7.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -87                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 70                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 77                 
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 96                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 44                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 58                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 38                 
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 78                 
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 80                 
Correct output: -89                 | Program output: 49                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 25                 
Correct output: -98                 | Program output: 82                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 72                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 28                 
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 80                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 72                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 67                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 59                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction tag_exec_576} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (in2 tag_boolean_793) tag_exec_576 (in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup exec_empty) (integer_rot exec_y_when_autoconstructing (exec_empty) integer_rot exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times))) ())) ()))
Lexicase best errors: [1 0 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction tag_exec_576} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (in2 tag_boolean_793) tag_exec_576 (in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup exec_empty) (integer_rot exec_y_when_autoconstructing (exec_empty) integer_rot exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times))) ())) ()))
Zero cases best errors: [1 0 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 916 467 1 1 468 465 1 917 2)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (1 916 467 1 1 468 465 1 917 2)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times})
Best program: (boolean_pop boolean_dup exec_do*count (in2 tag_boolean_793) integer_gt in3 boolean_invert_second_then_and integer_pop exec_k (integer_dup_times integer_dup_times print_integer) (exec_dup_times () print_boolean integer_div integer_yankdup exec_when (exec_if (integer_shove integer_dup exec_empty) (integer_rot exec_y_when_autoconstructing (exec_empty) integer_rot exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times))) ()))))
Errors: [1 0 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 54
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 6.761
Median total errors in population: 8
Error averages by case: (0.999 0.084 0.533 0.999 0.999 0.532 0.535 0.999 0.083 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.5
Average program size in population (points): 59.308
Average percent parens in population: 0.315
Minimum age in population: 31.57797479629517
Maximum age in population: 37.13115119934082
Average age in population: 35.26450401949883
Median age in population: 35.34502005577087
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9983926
--- Timings ---
Current time: 1559582857426 milliseconds
Total Time:          61.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.1 seconds, 71.6%
Fitness Testing:      9.4 seconds, 15.2%
Report:               8.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 94                 
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 88                 
Correct output: 2                   | Program output: 73                 
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 7                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 64                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 83                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 81                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 20                 
Correct output: -95                 | Program output: 48                 
Correct output: -92                 | Program output: 28                 
Correct output: -92                 | Program output: 93                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: 100                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: 60                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 39                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: 55                 
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 26                 
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: 91                 
Correct output: -79                 | Program output: 71                 
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: 22                 
Correct output: -83                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: 53                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 47                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 42                 
Correct output: -92                 | Program output: 13                 
Correct output: -25                 | Program output: 71                 
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 59                 
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (boolean_and tag_boolean_793) integer_gt in3 boolean_invert_second_then_and boolean_swap boolean_swap integer_dup_times in1 exec_while (integer_add) exec_k (exec_rot (integer_eq) (integer_dup_times print_integer) (in3) integer_yankdup) (exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (exec_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ())) ()))))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 56
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (boolean_and tag_boolean_793) integer_gt in3 boolean_invert_second_then_and boolean_swap boolean_swap integer_dup_times in1 exec_while (integer_add) exec_k (exec_rot (integer_eq) (integer_dup_times print_integer) (in3) integer_yankdup) (exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (exec_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ())) ()))))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 56
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (320 575 218 12 12 10 320 324 349 348)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (320 575 218 12 12 10 320 324 349 348)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction tag_exec_576} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times})
Best program: (boolean_pop boolean_dup exec_do*count (boolean_and tag_boolean_793) integer_gt in3 tag_boolean_793 tag_exec_576 (in3) boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup exec_empty) (integer_rot exec_y_when_autoconstructing (exec_empty) integer_rot exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times))) ())) ()))
Errors: [1 0 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 41
Size: 59
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 7.512
Median total errors in population: 7
Error averages by case: (0.68 0.425 0.782 0.988 0.988 0.99 0.68 0.676 0.651 0.652)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.146
Average program size in population (points): 58.928
Average percent parens in population: 0.334
Minimum age in population: 34.20609903335571
Maximum age in population: 38.64581394195557
Average age in population: 37.11290388119221
Median age in population: 37.06104421615601
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 202
Genome diversity (% unique genomes):	 0.567
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 10210746
--- Timings ---
Current time: 1559582859634 milliseconds
Total Time:          63.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.8 seconds, 71.8%
Fitness Testing:      9.6 seconds, 15.1%
Report:               8.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 94                 
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 88                 
Correct output: 2                   | Program output: 73                 
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 7                  
Correct output: 5                   | Program output: 90                 
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 64                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 100                
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 83                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 81                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: 0                  
Correct output: -62                 | Program output: 20                 
Correct output: -95                 | Program output: 48                 
Correct output: -92                 | Program output: 28                 
Correct output: -92                 | Program output: 93                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: 100                
Correct output: -69                 | Program output: -25                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -14                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -68                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: 60                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 39                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: 55                 
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 26                 
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: 91                 
Correct output: -79                 | Program output: 71                 
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: 22                 
Correct output: -83                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: 53                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 47                 
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: 42                 
Correct output: -92                 | Program output: 13                 
Correct output: -25                 | Program output: 71                 
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 59                 
Correct output: -45                 | Program output: 50                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (in3) (boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times in4 boolean_dup) (in3) integer_yankdup) exec_while (integer_add) exec_k (exec_rot (integer_eq) (integer_dup_times print_integer) (in3) integer_yankdup) (exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (boolean_shove exec_if (exec_empty) (integer_rot exec_dup_times (exec_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ()))))))
Lexicase best errors: [1 0 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (in3) (boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times in4 boolean_dup) (in3) integer_yankdup) exec_while (integer_add) exec_k (exec_rot (integer_eq) (integer_dup_times print_integer) (in3) integer_yankdup) (exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (boolean_shove exec_if (exec_empty) (integer_rot exec_dup_times (exec_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ()))))))
Zero cases best errors: [1 0 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (328 174 364 114 559 324 247 637 174 114)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (328 174 364 114 559 324 247 637 174 114)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove})
Best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (in3) (boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times in4 boolean_dup) (in3) integer_yankdup) exec_while (integer_add) exec_k (exec_rot (integer_eq) (integer_dup_times print_integer) (in3) integer_yankdup) (exec_while (integer_add) print_boolean exec_while (integer_yankdup print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (exec_eq) exec_y_when_autoconstructing (boolean_not) exec_yankdup in4 exec_shove ())) ()))))))
Errors: [1 0 0 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 42
Size: 65
Percent parens: 0.354
--- Population Statistics ---
Average total errors in population: 6.965
Median total errors in population: 7
Error averages by case: (0.672 0.826 0.636 0.886 0.441 0.676 0.753 0.363 0.826 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.784
Average program size in population (points): 59.937
Average percent parens in population: 0.335
Minimum age in population: 35.20609903335571
Maximum age in population: 40.04500043392181
Average age in population: 38.76951750403643
Median age in population: 38.81316959857941
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10508717
--- Timings ---
Current time: 1559582862133 milliseconds
Total Time:          66.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.8 seconds, 72.1%
Fitness Testing:      9.9 seconds, 14.9%
Report:               8.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 20                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -12                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: 93                 
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 77                 
Correct output: 6                   | Program output: 65                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 2                   | Program output: 42                 
Correct output: 27                  | Program output: 38                 
Correct output: 12                  | Program output: 83                 
Correct output: 9                   | Program output: 62                 
Correct output: 31                  | Program output: 66                 
Correct output: 53                  | Program output: 77                 
Correct output: 0                   | Program output: 4                  
Correct output: 5                   | Program output: 45                 
Correct output: 11                  | Program output: 85                 
Correct output: 17                  | Program output: 28                 
Correct output: 1                   | Program output: 28                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 54                 
Correct output: 25                  | Program output: 47                 
Correct output: -70                 | Program output: 11                 
Correct output: -81                 | Program output: -73                
Correct output: -76                 | Program output: 95                 
Correct output: -59                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: 28                 
Correct output: -6                  | Program output: 58                 
Correct output: -51                 | Program output: -12                
Correct output: -98                 | Program output: 62                 
Correct output: 0                   | Program output: 0                  
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: 61                 
Correct output: -62                 | Program output: 0                  
Correct output: -95                 | Program output: -89                
Correct output: -92                 | Program output: -72                
Correct output: -92                 | Program output: 21                 
Correct output: -87                 | Program output: 23                 
Correct output: -24                 | Program output: 97                 
Correct output: -69                 | Program output: -69                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: 57                 
Correct output: -85                 | Program output: -80                
Correct output: -72                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -86                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: 17                 
Correct output: -86                 | Program output: 82                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: 17                 
Correct output: -63                 | Program output: 11                 
Correct output: -62                 | Program output: 79                 
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -36                 | Program output: 0                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -38                
Correct output: -22                 | Program output: 15                 
Correct output: -40                 | Program output: 31                 
Correct output: -56                 | Program output: 69                 
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -9                 
Correct output: -25                 | Program output: 78                 
Correct output: -95                 | Program output: -85                
Correct output: -73                 | Program output: 44                 
Correct output: -22                 | Program output: 77                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: 52                  | Program output: 70                 
Correct output: -49                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (in3) (boolean_invert_second_then_and boolean_swap exec_k (boolean_yank in4 print_integer) (in3) integer_yankdup) exec_while (integer_add) exec_k (exec_rot (integer_eq) (integer_dup_times print_integer) (in3) integer_yankdup) (exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (exec_eq) exec_y_when_autoconstructing (exec_empty) integer_rot exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times))) ())) ())))))
Lexicase best errors: [0 1 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 77
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (in3) (boolean_invert_second_then_and boolean_swap exec_k (boolean_yank in4 print_integer) (in3) integer_yankdup) exec_while (integer_add) exec_k (exec_rot (integer_eq) (integer_dup_times print_integer) (in3) integer_yankdup) (exec_while (integer_add) print_boolean exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (exec_eq) exec_y_when_autoconstructing (exec_empty) integer_rot exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) exec_y_when_autoconstructing (boolean_not) exec_dup_times (in4 boolean_swap integer_dup_times))) ())) ())))))
Zero cases best errors: [0 1 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 77
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (662 232 5 558 3 108 228 109 108 108)
Population mean number of elite cases: 2.12
Count of perfect (error zero) individuals by case: (662 232 5 558 3 108 228 109 108 108)
Population mean number of perfect (error zero) cases: 2.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times})
Best program: (boolean_pop boolean_dup exec_do*count (exec_k_when_autoconstructing (in3) (boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times in4 print_integer) (in3) integer_yankdup) exec_while (integer_add) exec_k (integer_add) (integer_sub exec_while (integer_yankdup exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) integer_eq) exec_k (exec_when (exec_if (integer_add exec_empty) (integer_rot exec_k_when_autoconstructing (exec_y_when_autoconstructing (integer_min exec_do*times (boolean_swap integer_dup_times))) ()))) ()) ())))))
Errors: [0 1 1 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 65
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 7.879
Median total errors in population: 8
Error averages by case: (0.338 0.768 0.995 0.442 0.997 0.892 0.772 0.891 0.892 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.124
Average program size in population (points): 60.283
Average percent parens in population: 0.334
Minimum age in population: 38.44134843349457
Maximum age in population: 42.03076079487801
Average age in population: 40.32359231582284
Median age in population: 40.40312659740448
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 10950417
--- Timings ---
Current time: 1559582864501 milliseconds
Total Time:          68.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.6 seconds, 72.2%
Fitness Testing:     10.2 seconds, 14.9%
Report:               8.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 589
Test mean error for best: 0.58900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -87                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: 76                 
Correct output: -6                  | Program output: 97                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: 32                 
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 30                 
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: 95                 
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: 88                 
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: 15                 
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -25                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -12                
Correct output: -96                 | Program output: 86                 
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: 80                 
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: 79                 
Correct output: -87                 | Program output: 55                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: 14                 
Correct output: -98                 | Program output: 22                 
Correct output: -22                 | Program output: 8                  
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: 55                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: 22                 
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (in2 tag_boolean_793) integer_gt in3 boolean_dup in2 tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Lexicase best errors: [1 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (in2 tag_boolean_793) integer_gt in3 boolean_dup in2 tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Zero cases best errors: [1 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 206 206 361 160 197 307 603 307 381)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (197 206 206 361 160 197 307 603 307 381)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Best program: (boolean_pop boolean_dup exec_do*count (in2 tag_boolean_793) integer_gt in3 boolean_dup in2 tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Errors: [1 0 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 26
Size: 35
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 7.075
Median total errors in population: 7
Error averages by case: (0.803 0.794 0.794 0.639 0.84 0.803 0.693 0.397 0.693 0.619)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.484
Average program size in population (points): 56.768
Average percent parens in population: 0.335
Minimum age in population: 39.72323709726334
Maximum age in population: 43.3828040510416
Average age in population: 41.86215222854912
Median age in population: 41.9612400457263
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 11181169
--- Timings ---
Current time: 1559582866855 milliseconds
Total Time:          70.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.4 seconds, 72.4%
Fitness Testing:     10.4 seconds, 14.7%
Report:               9.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_pop boolean_pop boolean_dup exec_do*count (in2 tag_boolean_793) integer_gt in3 boolean_dup in2 tag_boolean_793 in3 boolean_dup in2 tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Lexicase best errors: [0 0 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_pop boolean_pop boolean_dup exec_do*count (in2 tag_boolean_793) integer_gt in3 boolean_dup in2 tag_boolean_793 in3 boolean_dup in2 tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Zero cases best errors: [0 0 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (693 693 23 523 23 212 211 212 211 737)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (693 693 23 523 23 212 211 212 211 737)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (boolean_dup in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Errors: [0 0 0 0 0 1 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.462
Median total errors in population: 6
Error averages by case: (0.307 0.307 0.977 0.477 0.977 0.788 0.789 0.788 0.789 0.263)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.284
Average program size in population (points): 48.526
Average percent parens in population: 0.283
Minimum age in population: 40.98456478118896
Maximum age in population: 44.99421484023333
Average age in population: 43.36620310959965
Median age in population: 43.36322246864438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 372
Genome diversity (% unique genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 385
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 11456617
--- Timings ---
Current time: 1559582869252 milliseconds
Total Time:          73.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.2 seconds, 72.5%
Fitness Testing:     10.7 seconds, 14.6%
Report:               9.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (boolean_dup in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Lexicase best errors: [0 1 1 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (boolean_dup in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Zero cases best errors: [0 1 1 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (104 405 1000 904 1000 1000 478 1000 1000 1000)
Population mean number of elite cases: 7.89
Count of perfect (error zero) individuals by case: (104 405 0 904 0 0 478 0 0 0)
Population mean number of perfect (error zero) cases: 1.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (boolean_dup in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Errors: [0 1 1 0 1 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 8.109
Median total errors in population: 8
Error averages by case: (0.896 0.595 1.0 0.096 1.0 1.0 0.522 1.0 1.0 1.0)
Error minima by case: (0 0 1 0 1 1 0 1 1 1)
Average genome size in population (length): 32.24
Average program size in population (points): 46.199
Average percent parens in population: 0.292
Minimum age in population: 41.98456478118896
Maximum age in population: 46.47648141160607
Average age in population: 45.04942819333449
Median age in population: 44.95874798297882
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.518
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.494
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 11710680
--- Timings ---
Current time: 1559582871580 milliseconds
Total Time:          75.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        54.9 seconds, 72.6%
Fitness Testing:     11.0 seconds, 14.5%
Report:               9.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (boolean_dup in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Lexicase best errors: [0 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (boolean_dup in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Zero cases best errors: [0 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (861 559 565 1000 584 1000 884 298 883 584)
Population mean number of elite cases: 7.22
Count of perfect (error zero) individuals by case: (861 559 565 0 584 0 884 298 883 584)
Population mean number of perfect (error zero) cases: 5.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (boolean_dup in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Errors: [0 0 0 1 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 4.782
Median total errors in population: 3
Error averages by case: (0.139 0.441 0.435 1.0 0.416 1.0 0.116 0.702 0.117 0.416)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 32.955
Average program size in population (points): 47.386
Average percent parens in population: 0.299
Minimum age in population: 42.98456478118896
Maximum age in population: 48.11418655328453
Average age in population: 46.66448414117657
Median age in population: 46.80282456148416
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 328
Genome diversity (% unique genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 343
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 12008414
--- Timings ---
Current time: 1559582874298 milliseconds
Total Time:          78.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.0 seconds, 72.8%
Fitness Testing:     11.3 seconds, 14.4%
Report:              10.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 26                 
Correct output: 1                   | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 47                 
Correct output: 6                   | Program output: 28                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 41                 
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 53                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: 39                 
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: 14                 
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 13                 
Correct output: -40                 | Program output: 47                 
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: -28                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 19                 
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 8                  
Correct output: -29                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: -32                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 20                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -53                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 64                 
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: 11                 
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (boolean_dup in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Lexicase best errors: [0 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (boolean_dup in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Zero cases best errors: [0 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (687 184 657 894 1 847 1 688 1000 889)
Population mean number of elite cases: 5.85
Count of perfect (error zero) individuals by case: (687 184 657 894 1 847 1 688 0 889)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (boolean_dup in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Errors: [0 1 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.152
Median total errors in population: 4
Error averages by case: (0.313 0.816 0.343 0.106 0.999 0.153 0.999 0.312 1.0 0.111)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 32.145
Average program size in population (points): 45.742
Average percent parens in population: 0.293
Minimum age in population: 45.42852459847927
Maximum age in population: 50.00603008922189
Average age in population: 48.17318784126919
Median age in population: 48.23912072740495
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 330
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 349
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 12323073
--- Timings ---
Current time: 1559582876806 milliseconds
Total Time:          80.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.9 seconds, 72.8%
Fitness Testing:     11.6 seconds, 14.3%
Report:              10.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: 96                 
Correct output: -52                 | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 82                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 81                 
Correct output: 2                   | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 42                 
Correct output: 9                   | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 18                 
Correct output: 5                   | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 32                 
Correct output: 2                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -29                
Correct output: -81                 | Program output: -45                
Correct output: -76                 | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: 42                 
Correct output: -52                 | Program output: 12                 
Correct output: -6                  | Program output: 88                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 60                 
Correct output: -40                 | Program output: 30                 
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 97                 
Correct output: -95                 | Program output: 88                 
Correct output: -92                 | Program output: -42                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: 90                 
Correct output: -76                 | Program output: 81                 
Correct output: -28                 | Program output: 52                 
Correct output: -58                 | Program output: -26                
Correct output: -92                 | Program output: -61                
Correct output: -85                 | Program output: -72                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: 54                 
Correct output: -98                 | Program output: 69                 
Correct output: -100                | Program output: 51                 
Correct output: -58                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -30                
Correct output: 0                   | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -32                
Correct output: -96                 | Program output: 54                 
Correct output: -70                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -55                
Correct output: -97                 | Program output: -76                
Correct output: -64                 | Program output: 42                 
Correct output: -67                 | Program output: -20                
Correct output: -87                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -5                 
Correct output: -98                 | Program output: -81                
Correct output: -22                 | Program output: 27                 
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: 90                 
Correct output: -70                 | Program output: 30                 
Correct output: -92                 | Program output: 36                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: 54                 
Correct output: -57                 | Program output: -27                
Correct output: 52                  | Program output: 71                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction in3} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_pop boolean_dup exec_do*count (boolean_and tag_boolean_793) integer_gt in3 boolean_invert_second_then_and boolean_swap boolean_swap integer_dup_times in1 print_integer in3 integer_yankdup exec_while (integer_add) integer_sub exec_while (boolean_yank exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) integer_eq exec_k () (exec_when ()))) ())))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction in3} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_pop boolean_dup exec_do*count (boolean_and tag_boolean_793) integer_gt in3 boolean_invert_second_then_and boolean_swap boolean_swap integer_dup_times in1 print_integer in3 integer_yankdup exec_while (integer_add) integer_sub exec_while (boolean_yank exec_when (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (integer_eq) integer_eq exec_k () (exec_when ()))) ())))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (386 170 170 165 236 560 576 578 166 385)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (386 170 170 165 236 560 576 578 166 385)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times})
Best program: (boolean_pop boolean_dup exec_do*count (boolean_and tag_boolean_793) integer_gt in3 boolean_invert_second_then_and boolean_swap boolean_swap integer_dup_times in1 print_integer in3 integer_yankdup exec_while (integer_add) integer_sub exec_while (integer_yankdup exec_dup_times (exec_if (exec_if (exec_empty) (integer_rot exec_dup_times (boolean_eq integer_eq) exec_k (exec_when (exec_if () (exec_if (exec_empty) (integer_rot exec_k_when_autoconstructing (exec_y_when_autoconstructing (integer_min exec_do*times (boolean_swap integer_dup_times))) ())))) ())) ())))
Errors: [1 0 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 40
Size: 61
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 6.608
Median total errors in population: 5
Error averages by case: (0.614 0.83 0.83 0.835 0.764 0.44 0.424 0.422 0.834 0.615)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.217
Average program size in population (points): 44.004
Average percent parens in population: 0.285
Minimum age in population: 46.42852459847927
Maximum age in population: 51.45190045749769
Average age in population: 49.81836949034175
Median age in population: 49.85611879988573
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.533
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 12615782
--- Timings ---
Current time: 1559582879039 milliseconds
Total Time:          83.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.6 seconds, 72.9%
Fitness Testing:     11.9 seconds, 14.3%
Report:              10.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 262
Test mean error for best: 0.26200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 38                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 28                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 47                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: -12                
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 11                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -85                
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (in4 in2 tag_boolean_793) (integer_min in3) integer_pop boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when () exec_if (exec_if (integer_dup) ()) ())
Lexicase best errors: [0 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (in4 in2 tag_boolean_793) (integer_min in3) integer_pop boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when () exec_if (exec_if (integer_dup) ()) ())
Zero cases best errors: [0 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 521 227 266 1 227 868 1 874 347)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (348 521 227 266 1 227 868 1 874 347)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty})
Best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (in4 in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_dup_items integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (boolean_empty) ()) ()))
Errors: [0 1 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.32
Median total errors in population: 7
Error averages by case: (0.652 0.479 0.773 0.734 0.999 0.773 0.132 0.999 0.126 0.653)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.296
Average program size in population (points): 49.703
Average percent parens in population: 0.302
Minimum age in population: 47.59541669487953
Maximum age in population: 52.95730882929638
Average age in population: 51.18261637354945
Median age in population: 51.32584311487153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 12887171
--- Timings ---
Current time: 1559582881481 milliseconds
Total Time:          85.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.5 seconds, 73.0%
Fitness Testing:     12.1 seconds, 14.2%
Report:              10.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 262
Test mean error for best: 0.26200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 38                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 28                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 47                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: -12                
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -62                
Correct output: -76                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -15                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -29                
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -56                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -37                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 11                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -7                 
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -85                
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -16                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (in4 in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Lexicase best errors: [0 0 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (in4 in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ()))
Zero cases best errors: [0 0 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (745 743 698 106 461 107 699 106 106 729)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (745 743 698 106 461 107 699 106 106 729)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty})
Best program: (boolean_pop exec_s (exec_do*count (in2 tag_boolean_793) integer_gt in3) (in4 in2 tag_boolean_793) (integer_min in3) boolean_invert_second_then_and boolean_dup_items integer_min in3 boolean_invert_second_then_and boolean_swap exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (boolean_empty) ()) ()))
Errors: [0 0 0 1 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.5
Median total errors in population: 5
Error averages by case: (0.255 0.257 0.302 0.894 0.539 0.893 0.301 0.894 0.894 0.271)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.767
Average program size in population (points): 46.516
Average percent parens in population: 0.293
Minimum age in population: 49.98015944845974
Maximum age in population: 54.52834848454222
Average age in population: 53.21640637654171
Median age in population: 53.18377887969837
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 218
Genome diversity (% unique genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 13220335
--- Timings ---
Current time: 1559582883986 milliseconds
Total Time:          88.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.3 seconds, 73.1%
Fitness Testing:     12.5 seconds, 14.1%
Report:              11.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 201
Test mean error for best: 0.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 38                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 38                 
Correct output: 53                  | Program output: 59                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 42                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 28                 
Correct output: 6                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 47                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 58                 
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: -12                
Correct output: -98                 | Program output: 44                 
Correct output: 0                   | Program output: 0                  
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 17                 
Correct output: -87                 | Program output: 8                  
Correct output: -24                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -86                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -19                
Correct output: -63                 | Program output: 11                 
Correct output: -62                 | Program output: -62                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -36                 | Program output: -4                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: 19                 
Correct output: -56                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -85                
Correct output: -73                 | Program output: -9                 
Correct output: -22                 | Program output: 44                 
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -49                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in2 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in2 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (493 396 881 8 457 493 856 881 503 875)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (493 396 881 8 457 493 856 881 503 875)
Population mean number of perfect (error zero) cases: 5.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 2, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Best program: (boolean_pop exec_s (in1 in2 tag_boolean_793) (integer_gt in3) () in4 in2 tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 48
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.157
Median total errors in population: 5
Error averages by case: (0.507 0.604 0.119 0.992 0.543 0.507 0.144 0.119 0.497 0.125)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.324
Average program size in population (points): 48.809
Average percent parens in population: 0.290
Minimum age in population: 51.07830195873976
Maximum age in population: 56.29225862352178
Average age in population: 54.43924530763476
Median age in population: 54.53329131263308
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.01
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 13514341
--- Timings ---
Current time: 1559582886341 milliseconds
Total Time:          90.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.1 seconds, 73.1%
Fitness Testing:     12.7 seconds, 14.1%
Report:              11.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 216
Test mean error for best: 0.21600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 65                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 4                  
Correct output: 5                   | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 0                  
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 0                  
Correct output: -95                 | Program output: -89                
Correct output: -92                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: -69                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -79                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -9                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 830 892 227 849 868 582 227 577 573)
Population mean number of elite cases: 5.85
Count of perfect (error zero) individuals by case: (221 830 892 227 849 868 582 227 577 573)
Population mean number of perfect (error zero) cases: 5.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction tag_boolean_793} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Best program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 4.154
Median total errors in population: 3
Error averages by case: (0.779 0.17 0.108 0.773 0.151 0.132 0.418 0.773 0.423 0.427)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.43
Average program size in population (points): 47.218
Average percent parens in population: 0.228
Minimum age in population: 55.84776693559252
Maximum age in population: 57.40232930949423
Average age in population: 56.61110591935914
Median age in population: 56.40232930949423
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.432
Total error diversity:				 0.009
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 13885779
--- Timings ---
Current time: 1559582888780 milliseconds
Total Time:          92.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.9 seconds, 73.1%
Fitness Testing:     13.1 seconds, 14.1%
Report:              11.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 36
Successful program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 43


Auto-simplifying with starting size: 43
step: 0
program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 500
program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 1000
program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 1500
program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 2000
program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 2500
program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 3000
program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 3500
program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 4000
program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 4500
program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 5000
program: (boolean_pop boolean_pop tag_boolean_793 integer_gt in3 in4 in1 tag_boolean_793 integer_min in3 boolean_empty boolean_swap integer_min tag_boolean_793 integer_min in3 boolean_invert_second_then_and boolean_swap integer_min in3 boolean_invert_second_then_and exec_shove (exec_k (integer_dup_times integer_dup_times print_integer) (integer_add) print_boolean integer_div integer_yankdup exec_when (exec_if (exec_if (integer_dup) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 216
Test mean error for best: 0.21600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 20                  | Program output: 20                 
Correct output: -43                 | Program output: -43                
Correct output: -4                  | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 62                  | Program output: 62                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -85                 | Program output: -85                
Correct output: 6                   | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -36                 | Program output: -36                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: 17                  | Program output: 17                 
Correct output: 6                   | Program output: 65                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 27                  | Program output: 27                 
Correct output: 12                  | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 53                  | Program output: 53                 
Correct output: 0                   | Program output: 4                  
Correct output: 5                   | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 17                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: -70                 | Program output: -51                
Correct output: -81                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -6                  | Program output: -6                 
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 0                  
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -2                 
Correct output: -62                 | Program output: 0                  
Correct output: -95                 | Program output: -89                
Correct output: -92                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -87                
Correct output: -24                 | Program output: 23                 
Correct output: -69                 | Program output: -69                
Correct output: -76                 | Program output: -76                
Correct output: -28                 | Program output: -27                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -58                
Correct output: -86                 | Program output: -86                
Correct output: -79                 | Program output: -79                
Correct output: 0                   | Program output: 0                  
Correct output: -29                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -79                 | Program output: -79                
Correct output: -63                 | Program output: -63                
Correct output: -62                 | Program output: -50                
Correct output: -83                 | Program output: -83                
Correct output: -97                 | Program output: -97                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -87                 | Program output: -87                
Correct output: -36                 | Program output: -36                
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -22                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -56                 | Program output: -13                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -9                 
Correct output: -25                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -22                 | Program output: -22                
Correct output: -45                 | Program output: -45                
Correct output: -57                 | Program output: -57                
Correct output: 52                  | Program output: 52                 
Correct output: -49                 | Program output: -16                
;;******************************
