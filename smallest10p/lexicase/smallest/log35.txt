Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-30 -41 -30 -30] -41] [[34 71 34 34] 34] [[-50 -50 -50 76] -50] [[-49 -49 -78 -49] -78] [[53 18 18 18] 18] [[28 -65 -65 -65] -65] [[59 59 -68 59] -68] [[-39 58 58 58] -39] [[51 51 75 51] 51] [[-17 -17 -17 98] -17] [(-31 -31 -31 -31) -31] [(-55 -55 -55 -55) -55] [(-60 -60 -60 -60) -60] [(-35 -35 -35 -35) -35] [(23 23 23 23) 23] [(50 16 82 6) 6] [(70 92 25 33) 25] [(53 8 6 61) 6] [(73 73 42 29) 29] [(62 22 40 79) 22] [(45 60 94 5) 5] [(21 59 66 100) 21] [(66 99 6 65) 6] [(38 86 0 10) 0] [(30 76 39 42) 30] [(56 40 50 74) 40] [(39 82 72 15) 15] [(29 16 24 3) 3] [(16 25 87 74) 16] [(92 0 74 9) 0] [(40 53 80 64) 40] [(63 34 62 69) 34] [(58 47 87 27) 27] [(63 4 3 38) 3] [(22 64 75 27) 22] [(36 11 -86 -62) -86] [(78 -97 -60 -42) -97] [(-68 -5 -64 47) -68] [(-42 78 39 20) -42] [(7 17 80 85) 7] [(-24 -100 80 40) -100] [(100 4 56 32) 4] [(24 28 9 -7) -7] [(-4 -78 -22 35) -78] [(-51 28 -88 64) -88] [(64 -72 26 22) -72] [(38 -22 -16 -28) -28] [(63 -53 61 -44) -53] [(-79 4 -46 35) -79] [(-37 -98 3 8) -98] [(-11 90 -4 -12) -12] [(-70 -18 50 58) -70] [(85 30 -41 -84) -84] [(38 72 20 17) 17] [(20 31 85 -69) -69] [(-13 -5 -89 -33) -89] [(3 80 -6 35) -6] [(95 44 13 90) 13] [(-89 55 41 -7) -89] [(2 -76 62 -66) -76] [(50 97 -98 26) -98] [(11 24 -46 57) -46] [(18 77 -81 68) -81] [(92 -58 -36 -78) -78] [(36 -30 -64 -10) -64] [(84 9 85 75) 9] [(90 1 46 -51) -51] [(-5 14 31 -91) -91] [(56 -56 -50 85) -56] [(7 32 88 -94) -94] [(-9 -36 27 -33) -36] [(1 -13 18 -28) -28] [(88 -33 68 61) -33] [(-19 -3 83 -21) -21] [(44 -24 39 -52) -52] [(-36 35 -56 64) -56] [(-53 -97 -7 4) -97] [(-29 -77 -72 -75) -77] [(-93 -29 -53 -47) -93] [(-18 -48 100 22) -48] [(71 34 43 -52) -52] [(-18 69 17 3) -18] [(-97 -10 19 75) -97] [(-5 -50 48 41) -50] [(-29 -97 -49 -5) -97] [(-20 -20 13 -91) -91] [(-1 45 72 34) -1] [(-4 -17 75 96) -17] [(-54 -31 -46 -53) -54] [(-16 -54 80 77) -54] [(89 -7 14 86) -7] [(1 65 -10 37) -10] [(54 13 26 6) 6] [(8 2 -46 43) -46] [(93 -64 22 91) -64])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-30 -41 -30 -30] -41]
Train Case:   6 | Input/Output: [[34 71 34 34] 34]
Train Case:   7 | Input/Output: [[-50 -50 -50 76] -50]
Train Case:   8 | Input/Output: [[-49 -49 -78 -49] -78]
Train Case:   9 | Input/Output: [[53 18 18 18] 18]
Train Case:  10 | Input/Output: [[28 -65 -65 -65] -65]
Train Case:  11 | Input/Output: [[59 59 -68 59] -68]
Train Case:  12 | Input/Output: [[-39 58 58 58] -39]
Train Case:  13 | Input/Output: [[51 51 75 51] 51]
Train Case:  14 | Input/Output: [[-17 -17 -17 98] -17]
Train Case:  15 | Input/Output: [(-31 -31 -31 -31) -31]
Train Case:  16 | Input/Output: [(-55 -55 -55 -55) -55]
Train Case:  17 | Input/Output: [(-60 -60 -60 -60) -60]
Train Case:  18 | Input/Output: [(-35 -35 -35 -35) -35]
Train Case:  19 | Input/Output: [(23 23 23 23) 23]
Train Case:  20 | Input/Output: [(50 16 82 6) 6]
Train Case:  21 | Input/Output: [(70 92 25 33) 25]
Train Case:  22 | Input/Output: [(53 8 6 61) 6]
Train Case:  23 | Input/Output: [(73 73 42 29) 29]
Train Case:  24 | Input/Output: [(62 22 40 79) 22]
Train Case:  25 | Input/Output: [(45 60 94 5) 5]
Train Case:  26 | Input/Output: [(21 59 66 100) 21]
Train Case:  27 | Input/Output: [(66 99 6 65) 6]
Train Case:  28 | Input/Output: [(38 86 0 10) 0]
Train Case:  29 | Input/Output: [(30 76 39 42) 30]
Train Case:  30 | Input/Output: [(56 40 50 74) 40]
Train Case:  31 | Input/Output: [(39 82 72 15) 15]
Train Case:  32 | Input/Output: [(29 16 24 3) 3]
Train Case:  33 | Input/Output: [(16 25 87 74) 16]
Train Case:  34 | Input/Output: [(92 0 74 9) 0]
Train Case:  35 | Input/Output: [(40 53 80 64) 40]
Train Case:  36 | Input/Output: [(63 34 62 69) 34]
Train Case:  37 | Input/Output: [(58 47 87 27) 27]
Train Case:  38 | Input/Output: [(63 4 3 38) 3]
Train Case:  39 | Input/Output: [(22 64 75 27) 22]
Train Case:  40 | Input/Output: [(36 11 -86 -62) -86]
Train Case:  41 | Input/Output: [(78 -97 -60 -42) -97]
Train Case:  42 | Input/Output: [(-68 -5 -64 47) -68]
Train Case:  43 | Input/Output: [(-42 78 39 20) -42]
Train Case:  44 | Input/Output: [(7 17 80 85) 7]
Train Case:  45 | Input/Output: [(-24 -100 80 40) -100]
Train Case:  46 | Input/Output: [(100 4 56 32) 4]
Train Case:  47 | Input/Output: [(24 28 9 -7) -7]
Train Case:  48 | Input/Output: [(-4 -78 -22 35) -78]
Train Case:  49 | Input/Output: [(-51 28 -88 64) -88]
Train Case:  50 | Input/Output: [(64 -72 26 22) -72]
Train Case:  51 | Input/Output: [(38 -22 -16 -28) -28]
Train Case:  52 | Input/Output: [(63 -53 61 -44) -53]
Train Case:  53 | Input/Output: [(-79 4 -46 35) -79]
Train Case:  54 | Input/Output: [(-37 -98 3 8) -98]
Train Case:  55 | Input/Output: [(-11 90 -4 -12) -12]
Train Case:  56 | Input/Output: [(-70 -18 50 58) -70]
Train Case:  57 | Input/Output: [(85 30 -41 -84) -84]
Train Case:  58 | Input/Output: [(38 72 20 17) 17]
Train Case:  59 | Input/Output: [(20 31 85 -69) -69]
Train Case:  60 | Input/Output: [(-13 -5 -89 -33) -89]
Train Case:  61 | Input/Output: [(3 80 -6 35) -6]
Train Case:  62 | Input/Output: [(95 44 13 90) 13]
Train Case:  63 | Input/Output: [(-89 55 41 -7) -89]
Train Case:  64 | Input/Output: [(2 -76 62 -66) -76]
Train Case:  65 | Input/Output: [(50 97 -98 26) -98]
Train Case:  66 | Input/Output: [(11 24 -46 57) -46]
Train Case:  67 | Input/Output: [(18 77 -81 68) -81]
Train Case:  68 | Input/Output: [(92 -58 -36 -78) -78]
Train Case:  69 | Input/Output: [(36 -30 -64 -10) -64]
Train Case:  70 | Input/Output: [(84 9 85 75) 9]
Train Case:  71 | Input/Output: [(90 1 46 -51) -51]
Train Case:  72 | Input/Output: [(-5 14 31 -91) -91]
Train Case:  73 | Input/Output: [(56 -56 -50 85) -56]
Train Case:  74 | Input/Output: [(7 32 88 -94) -94]
Train Case:  75 | Input/Output: [(-9 -36 27 -33) -36]
Train Case:  76 | Input/Output: [(1 -13 18 -28) -28]
Train Case:  77 | Input/Output: [(88 -33 68 61) -33]
Train Case:  78 | Input/Output: [(-19 -3 83 -21) -21]
Train Case:  79 | Input/Output: [(44 -24 39 -52) -52]
Train Case:  80 | Input/Output: [(-36 35 -56 64) -56]
Train Case:  81 | Input/Output: [(-53 -97 -7 4) -97]
Train Case:  82 | Input/Output: [(-29 -77 -72 -75) -77]
Train Case:  83 | Input/Output: [(-93 -29 -53 -47) -93]
Train Case:  84 | Input/Output: [(-18 -48 100 22) -48]
Train Case:  85 | Input/Output: [(71 34 43 -52) -52]
Train Case:  86 | Input/Output: [(-18 69 17 3) -18]
Train Case:  87 | Input/Output: [(-97 -10 19 75) -97]
Train Case:  88 | Input/Output: [(-5 -50 48 41) -50]
Train Case:  89 | Input/Output: [(-29 -97 -49 -5) -97]
Train Case:  90 | Input/Output: [(-20 -20 13 -91) -91]
Train Case:  91 | Input/Output: [(-1 45 72 34) -1]
Train Case:  92 | Input/Output: [(-4 -17 75 96) -17]
Train Case:  93 | Input/Output: [(-54 -31 -46 -53) -54]
Train Case:  94 | Input/Output: [(-16 -54 80 77) -54]
Train Case:  95 | Input/Output: [(89 -7 14 86) -7]
Train Case:  96 | Input/Output: [(1 65 -10 37) -10]
Train Case:  97 | Input/Output: [(54 13 26 6) 6]
Train Case:  98 | Input/Output: [(8 2 -46 43) -46]
Train Case:  99 | Input/Output: [(93 -64 22 91) -64]
Test Case:   0 | Input/Output: [[67 -32 -32 -32] -32]
Test Case:   1 | Input/Output: [[50 50 23 50] 23]
Test Case:   2 | Input/Output: [[-67 89 -67 -67] -67]
Test Case:   3 | Input/Output: [[-96 57 -96 -96] -96]
Test Case:   4 | Input/Output: [[-14 25 25 25] -14]
Test Case:   5 | Input/Output: [[-11 -11 -11 -46] -46]
Test Case:   6 | Input/Output: [[73 -17 -17 -17] -17]
Test Case:   7 | Input/Output: [[-21 -21 -21 -90] -90]
Test Case:   8 | Input/Output: [[-34 16 -34 -34] -34]
Test Case:   9 | Input/Output: [[37 44 44 44] 37]
Test Case:  10 | Input/Output: [[46 46 78 46] 46]
Test Case:  11 | Input/Output: [[-69 27 -69 -69] -69]
Test Case:  12 | Input/Output: [[38 38 -30 38] -30]
Test Case:  13 | Input/Output: [[-18 -18 -83 -18] -83]
Test Case:  14 | Input/Output: [[0 0 0 95] 0]
Test Case:  15 | Input/Output: [[67 12 12 12] 12]
Test Case:  16 | Input/Output: [[70 98 70 70] 70]
Test Case:  17 | Input/Output: [[-20 82 82 82] -20]
Test Case:  18 | Input/Output: [[30 -97 30 30] -97]
Test Case:  19 | Input/Output: [[64 -57 64 64] -57]
Test Case:  20 | Input/Output: [[67 -52 -52 -52] -52]
Test Case:  21 | Input/Output: [[85 85 -10 85] -10]
Test Case:  22 | Input/Output: [[-41 -41 -41 90] -41]
Test Case:  23 | Input/Output: [[-4 -86 -4 -4] -86]
Test Case:  24 | Input/Output: [[94 -92 -92 -92] -92]
Test Case:  25 | Input/Output: [[-62 99 99 99] -62]
Test Case:  26 | Input/Output: [[4 4 -48 4] -48]
Test Case:  27 | Input/Output: [[80 80 55 80] 55]
Test Case:  28 | Input/Output: [[79 -100 79 79] -100]
Test Case:  29 | Input/Output: [[17 17 17 -52] -52]
Test Case:  30 | Input/Output: [[-81 -81 -81 -88] -88]
Test Case:  31 | Input/Output: [[-49 -49 -49 27] -49]
Test Case:  32 | Input/Output: [[99 -68 99 99] -68]
Test Case:  33 | Input/Output: [[-97 -97 -97 89] -97]
Test Case:  34 | Input/Output: [[-76 -76 -76 -55] -76]
Test Case:  35 | Input/Output: [[-48 76 76 76] -48]
Test Case:  36 | Input/Output: [[55 55 94 55] 55]
Test Case:  37 | Input/Output: [[68 -10 -10 -10] -10]
Test Case:  38 | Input/Output: [[24 -8 -8 -8] -8]
Test Case:  39 | Input/Output: [[29 29 29 38] 29]
Test Case:  40 | Input/Output: [[100 100 100 80] 80]
Test Case:  41 | Input/Output: [[86 -44 86 86] -44]
Test Case:  42 | Input/Output: [[-100 -100 -100 15] -100]
Test Case:  43 | Input/Output: [[-66 -66 -66 -76] -76]
Test Case:  44 | Input/Output: [[-2 -78 -78 -78] -78]
Test Case:  45 | Input/Output: [[89 -89 89 89] -89]
Test Case:  46 | Input/Output: [[-84 -84 23 -84] -84]
Test Case:  47 | Input/Output: [[20 20 20 -68] -68]
Test Case:  48 | Input/Output: [[-17 44 -17 -17] -17]
Test Case:  49 | Input/Output: [[-31 -31 -59 -31] -59]
Test Case:  50 | Input/Output: [[50 -11 -11 -11] -11]
Test Case:  51 | Input/Output: [[89 59 59 59] 59]
Test Case:  52 | Input/Output: [[96 96 96 -7] -7]
Test Case:  53 | Input/Output: [[11 -28 11 11] -28]
Test Case:  54 | Input/Output: [[-36 56 56 56] -36]
Test Case:  55 | Input/Output: [[-98 -46 -98 -98] -98]
Test Case:  56 | Input/Output: [[1 34 34 34] 1]
Test Case:  57 | Input/Output: [[-23 -23 -23 -94] -94]
Test Case:  58 | Input/Output: [[-24 -24 -24 29] -24]
Test Case:  59 | Input/Output: [[-26 -12 -12 -12] -26]
Test Case:  60 | Input/Output: [[8 60 60 60] 8]
Test Case:  61 | Input/Output: [[-56 -56 61 -56] -56]
Test Case:  62 | Input/Output: [[-44 -44 -93 -44] -93]
Test Case:  63 | Input/Output: [[52 25 52 52] 25]
Test Case:  64 | Input/Output: [[82 82 30 82] 30]
Test Case:  65 | Input/Output: [[-69 -55 -69 -69] -69]
Test Case:  66 | Input/Output: [[-64 -25 -25 -25] -64]
Test Case:  67 | Input/Output: [[-88 -88 -88 24] -88]
Test Case:  68 | Input/Output: [[49 49 55 49] 49]
Test Case:  69 | Input/Output: [[-93 -93 77 -93] -93]
Test Case:  70 | Input/Output: [[0 62 0 0] 0]
Test Case:  71 | Input/Output: [[31 80 80 80] 31]
Test Case:  72 | Input/Output: [[8 8 8 -72] -72]
Test Case:  73 | Input/Output: [[-44 -44 -44 -69] -69]
Test Case:  74 | Input/Output: [[-68 56 56 56] -68]
Test Case:  75 | Input/Output: [[39 39 39 45] 39]
Test Case:  76 | Input/Output: [[-42 -100 -42 -42] -100]
Test Case:  77 | Input/Output: [[49 -31 49 49] -31]
Test Case:  78 | Input/Output: [[-44 77 77 77] -44]
Test Case:  79 | Input/Output: [[65 65 22 65] 22]
Test Case:  80 | Input/Output: [[-33 -33 -33 79] -33]
Test Case:  81 | Input/Output: [[62 80 80 80] 62]
Test Case:  82 | Input/Output: [[87 -95 87 87] -95]
Test Case:  83 | Input/Output: [[9 -44 -44 -44] -44]
Test Case:  84 | Input/Output: [[94 4 4 4] 4]
Test Case:  85 | Input/Output: [[76 76 76 50] 50]
Test Case:  86 | Input/Output: [[49 98 98 98] 49]
Test Case:  87 | Input/Output: [[96 34 34 34] 34]
Test Case:  88 | Input/Output: [[9 45 45 45] 9]
Test Case:  89 | Input/Output: [[63 63 -40 63] -40]
Test Case:  90 | Input/Output: [[-58 -58 -89 -58] -89]
Test Case:  91 | Input/Output: [[44 18 18 18] 18]
Test Case:  92 | Input/Output: [[-59 -54 -59 -59] -59]
Test Case:  93 | Input/Output: [[53 7 7 7] 7]
Test Case:  94 | Input/Output: [[-17 -17 -17 85] -17]
Test Case:  95 | Input/Output: [[-3 -3 -3 -71] -71]
Test Case:  96 | Input/Output: [[94 94 57 94] 57]
Test Case:  97 | Input/Output: [[59 59 -67 59] -67]
Test Case:  98 | Input/Output: [[30 30 -18 30] -18]
Test Case:  99 | Input/Output: [[65 65 65 68] 65]
Test Case: 100 | Input/Output: [(62 62 62 62) 62]
Test Case: 101 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 102 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 103 | Input/Output: [(49 49 49 49) 49]
Test Case: 104 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 105 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 106 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 107 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 108 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 109 | Input/Output: [(69 69 69 69) 69]
Test Case: 110 | Input/Output: [(8 8 8 8) 8]
Test Case: 111 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 112 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 113 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 114 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 115 | Input/Output: [(49 49 49 49) 49]
Test Case: 116 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 117 | Input/Output: [(45 45 45 45) 45]
Test Case: 118 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 119 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 120 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 121 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 122 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 123 | Input/Output: [(94 94 94 94) 94]
Test Case: 124 | Input/Output: [(85 85 85 85) 85]
Test Case: 125 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 126 | Input/Output: [(50 50 50 50) 50]
Test Case: 127 | Input/Output: [(30 30 30 30) 30]
Test Case: 128 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 129 | Input/Output: [(96 96 96 96) 96]
Test Case: 130 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 131 | Input/Output: [(10 10 10 10) 10]
Test Case: 132 | Input/Output: [(69 69 69 69) 69]
Test Case: 133 | Input/Output: [(93 93 93 93) 93]
Test Case: 134 | Input/Output: [(97 97 97 97) 97]
Test Case: 135 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 136 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 137 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 138 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 139 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 140 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 141 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 142 | Input/Output: [(66 66 66 66) 66]
Test Case: 143 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 144 | Input/Output: [(32 32 32 32) 32]
Test Case: 145 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 146 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 147 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 148 | Input/Output: [(94 94 94 94) 94]
Test Case: 149 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 150 | Input/Output: [(23 23 23 23) 23]
Test Case: 151 | Input/Output: [(53 53 53 53) 53]
Test Case: 152 | Input/Output: [(6 6 6 6) 6]
Test Case: 153 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 154 | Input/Output: [(89 89 89 89) 89]
Test Case: 155 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 156 | Input/Output: [(6 6 6 6) 6]
Test Case: 157 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 158 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 159 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 160 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 161 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 162 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 163 | Input/Output: [(43 43 43 43) 43]
Test Case: 164 | Input/Output: [(29 29 29 29) 29]
Test Case: 165 | Input/Output: [(71 71 71 71) 71]
Test Case: 166 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 167 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 168 | Input/Output: [(63 63 63 63) 63]
Test Case: 169 | Input/Output: [(73 73 73 73) 73]
Test Case: 170 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 171 | Input/Output: [(74 74 74 74) 74]
Test Case: 172 | Input/Output: [(6 6 6 6) 6]
Test Case: 173 | Input/Output: [(60 60 60 60) 60]
Test Case: 174 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 175 | Input/Output: [(100 100 100 100) 100]
Test Case: 176 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 177 | Input/Output: [(97 97 97 97) 97]
Test Case: 178 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 179 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 180 | Input/Output: [(21 21 21 21) 21]
Test Case: 181 | Input/Output: [(26 26 26 26) 26]
Test Case: 182 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 183 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 184 | Input/Output: [(58 58 58 58) 58]
Test Case: 185 | Input/Output: [(36 36 36 36) 36]
Test Case: 186 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 187 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 188 | Input/Output: [(46 46 46 46) 46]
Test Case: 189 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 190 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 191 | Input/Output: [(78 78 78 78) 78]
Test Case: 192 | Input/Output: [(55 55 55 55) 55]
Test Case: 193 | Input/Output: [(74 74 74 74) 74]
Test Case: 194 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 195 | Input/Output: [(88 88 88 88) 88]
Test Case: 196 | Input/Output: [(95 95 95 95) 95]
Test Case: 197 | Input/Output: [(48 48 48 48) 48]
Test Case: 198 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 199 | Input/Output: [(17 17 17 17) 17]
Test Case: 200 | Input/Output: [(6 85 77 14) 6]
Test Case: 201 | Input/Output: [(42 51 25 55) 25]
Test Case: 202 | Input/Output: [(30 35 75 78) 30]
Test Case: 203 | Input/Output: [(23 74 57 24) 23]
Test Case: 204 | Input/Output: [(66 27 39 70) 27]
Test Case: 205 | Input/Output: [(84 33 38 88) 33]
Test Case: 206 | Input/Output: [(16 12 49 72) 12]
Test Case: 207 | Input/Output: [(37 30 1 84) 1]
Test Case: 208 | Input/Output: [(82 7 27 51) 7]
Test Case: 209 | Input/Output: [(77 17 1 27) 1]
Test Case: 210 | Input/Output: [(12 69 21 86) 12]
Test Case: 211 | Input/Output: [(12 3 40 46) 3]
Test Case: 212 | Input/Output: [(45 98 94 1) 1]
Test Case: 213 | Input/Output: [(27 9 68 24) 9]
Test Case: 214 | Input/Output: [(79 26 64 91) 26]
Test Case: 215 | Input/Output: [(70 56 41 1) 1]
Test Case: 216 | Input/Output: [(14 40 9 8) 8]
Test Case: 217 | Input/Output: [(2 48 12 58) 2]
Test Case: 218 | Input/Output: [(44 92 97 33) 33]
Test Case: 219 | Input/Output: [(54 27 40 88) 27]
Test Case: 220 | Input/Output: [(31 88 79 49) 31]
Test Case: 221 | Input/Output: [(51 42 88 94) 42]
Test Case: 222 | Input/Output: [(62 96 7 62) 7]
Test Case: 223 | Input/Output: [(0 42 16 48) 0]
Test Case: 224 | Input/Output: [(27 42 67 57) 27]
Test Case: 225 | Input/Output: [(48 47 12 9) 9]
Test Case: 226 | Input/Output: [(49 45 73 68) 45]
Test Case: 227 | Input/Output: [(70 49 74 27) 27]
Test Case: 228 | Input/Output: [(99 50 51 27) 27]
Test Case: 229 | Input/Output: [(16 21 35 27) 16]
Test Case: 230 | Input/Output: [(10 18 86 61) 10]
Test Case: 231 | Input/Output: [(26 91 93 96) 26]
Test Case: 232 | Input/Output: [(25 86 47 21) 21]
Test Case: 233 | Input/Output: [(98 95 72 14) 14]
Test Case: 234 | Input/Output: [(4 54 39 74) 4]
Test Case: 235 | Input/Output: [(74 9 68 30) 9]
Test Case: 236 | Input/Output: [(74 67 16 99) 16]
Test Case: 237 | Input/Output: [(25 36 39 5) 5]
Test Case: 238 | Input/Output: [(44 30 50 95) 30]
Test Case: 239 | Input/Output: [(14 54 21 51) 14]
Test Case: 240 | Input/Output: [(90 94 1 15) 1]
Test Case: 241 | Input/Output: [(93 83 54 61) 54]
Test Case: 242 | Input/Output: [(26 1 7 95) 1]
Test Case: 243 | Input/Output: [(70 53 93 67) 53]
Test Case: 244 | Input/Output: [(68 80 73 87) 68]
Test Case: 245 | Input/Output: [(1 15 82 90) 1]
Test Case: 246 | Input/Output: [(30 9 31 8) 8]
Test Case: 247 | Input/Output: [(81 58 29 42) 29]
Test Case: 248 | Input/Output: [(99 27 4 87) 4]
Test Case: 249 | Input/Output: [(92 92 99 57) 57]
Test Case: 250 | Input/Output: [(98 92 82 10) 10]
Test Case: 251 | Input/Output: [(49 85 88 87) 49]
Test Case: 252 | Input/Output: [(52 67 2 8) 2]
Test Case: 253 | Input/Output: [(32 91 92 36) 32]
Test Case: 254 | Input/Output: [(56 34 51 47) 34]
Test Case: 255 | Input/Output: [(4 90 82 33) 4]
Test Case: 256 | Input/Output: [(96 40 53 60) 40]
Test Case: 257 | Input/Output: [(15 52 46 96) 15]
Test Case: 258 | Input/Output: [(56 44 66 74) 44]
Test Case: 259 | Input/Output: [(33 74 99 37) 33]
Test Case: 260 | Input/Output: [(66 6 21 14) 6]
Test Case: 261 | Input/Output: [(58 94 16 95) 16]
Test Case: 262 | Input/Output: [(57 67 79 69) 57]
Test Case: 263 | Input/Output: [(34 37 2 100) 2]
Test Case: 264 | Input/Output: [(27 25 92 80) 25]
Test Case: 265 | Input/Output: [(64 0 21 23) 0]
Test Case: 266 | Input/Output: [(45 98 43 28) 28]
Test Case: 267 | Input/Output: [(20 39 61 20) 20]
Test Case: 268 | Input/Output: [(77 15 46 25) 15]
Test Case: 269 | Input/Output: [(12 47 77 35) 12]
Test Case: 270 | Input/Output: [(66 41 54 46) 41]
Test Case: 271 | Input/Output: [(58 34 54 49) 34]
Test Case: 272 | Input/Output: [(47 48 40 24) 24]
Test Case: 273 | Input/Output: [(88 89 93 41) 41]
Test Case: 274 | Input/Output: [(30 16 67 33) 16]
Test Case: 275 | Input/Output: [(89 33 91 8) 8]
Test Case: 276 | Input/Output: [(27 0 63 16) 0]
Test Case: 277 | Input/Output: [(58 77 15 84) 15]
Test Case: 278 | Input/Output: [(87 87 37 73) 37]
Test Case: 279 | Input/Output: [(87 35 80 97) 35]
Test Case: 280 | Input/Output: [(83 18 54 78) 18]
Test Case: 281 | Input/Output: [(75 58 61 76) 58]
Test Case: 282 | Input/Output: [(96 64 95 24) 24]
Test Case: 283 | Input/Output: [(2 93 95 36) 2]
Test Case: 284 | Input/Output: [(67 45 6 40) 6]
Test Case: 285 | Input/Output: [(90 74 55 80) 55]
Test Case: 286 | Input/Output: [(35 23 19 100) 19]
Test Case: 287 | Input/Output: [(61 42 6 25) 6]
Test Case: 288 | Input/Output: [(80 86 70 68) 68]
Test Case: 289 | Input/Output: [(30 7 100 85) 7]
Test Case: 290 | Input/Output: [(3 56 69 38) 3]
Test Case: 291 | Input/Output: [(28 61 30 56) 28]
Test Case: 292 | Input/Output: [(94 82 35 45) 35]
Test Case: 293 | Input/Output: [(50 12 41 39) 12]
Test Case: 294 | Input/Output: [(61 50 35 16) 16]
Test Case: 295 | Input/Output: [(79 36 70 95) 36]
Test Case: 296 | Input/Output: [(77 5 12 46) 5]
Test Case: 297 | Input/Output: [(49 18 92 39) 18]
Test Case: 298 | Input/Output: [(36 81 91 91) 36]
Test Case: 299 | Input/Output: [(23 91 32 9) 9]
Test Case: 300 | Input/Output: [(16 93 45 33) 16]
Test Case: 301 | Input/Output: [(31 22 53 22) 22]
Test Case: 302 | Input/Output: [(23 42 24 46) 23]
Test Case: 303 | Input/Output: [(78 17 72 9) 9]
Test Case: 304 | Input/Output: [(51 33 9 4) 4]
Test Case: 305 | Input/Output: [(64 70 49 0) 0]
Test Case: 306 | Input/Output: [(78 62 64 69) 62]
Test Case: 307 | Input/Output: [(74 67 58 44) 44]
Test Case: 308 | Input/Output: [(84 46 30 79) 30]
Test Case: 309 | Input/Output: [(68 18 14 68) 14]
Test Case: 310 | Input/Output: [(83 20 33 66) 20]
Test Case: 311 | Input/Output: [(45 43 100 91) 43]
Test Case: 312 | Input/Output: [(83 34 1 82) 1]
Test Case: 313 | Input/Output: [(53 12 73 78) 12]
Test Case: 314 | Input/Output: [(25 98 0 36) 0]
Test Case: 315 | Input/Output: [(85 77 35 54) 35]
Test Case: 316 | Input/Output: [(81 64 65 53) 53]
Test Case: 317 | Input/Output: [(37 21 0 36) 0]
Test Case: 318 | Input/Output: [(7 69 30 18) 7]
Test Case: 319 | Input/Output: [(61 29 91 96) 29]
Test Case: 320 | Input/Output: [(10 66 6 85) 6]
Test Case: 321 | Input/Output: [(84 95 52 88) 52]
Test Case: 322 | Input/Output: [(84 6 64 38) 6]
Test Case: 323 | Input/Output: [(53 6 60 67) 6]
Test Case: 324 | Input/Output: [(51 17 83 73) 17]
Test Case: 325 | Input/Output: [(100 70 48 44) 44]
Test Case: 326 | Input/Output: [(70 59 89 97) 59]
Test Case: 327 | Input/Output: [(86 100 75 73) 73]
Test Case: 328 | Input/Output: [(20 11 21 98) 11]
Test Case: 329 | Input/Output: [(67 87 78 91) 67]
Test Case: 330 | Input/Output: [(17 30 57 79) 17]
Test Case: 331 | Input/Output: [(10 32 51 56) 10]
Test Case: 332 | Input/Output: [(52 63 23 43) 23]
Test Case: 333 | Input/Output: [(39 51 51 40) 39]
Test Case: 334 | Input/Output: [(75 74 19 20) 19]
Test Case: 335 | Input/Output: [(52 81 3 40) 3]
Test Case: 336 | Input/Output: [(90 3 9 15) 3]
Test Case: 337 | Input/Output: [(18 23 37 33) 18]
Test Case: 338 | Input/Output: [(53 83 100 16) 16]
Test Case: 339 | Input/Output: [(70 66 20 44) 20]
Test Case: 340 | Input/Output: [(17 44 89 89) 17]
Test Case: 341 | Input/Output: [(26 91 1 44) 1]
Test Case: 342 | Input/Output: [(54 46 93 51) 46]
Test Case: 343 | Input/Output: [(5 8 14 94) 5]
Test Case: 344 | Input/Output: [(31 62 10 20) 10]
Test Case: 345 | Input/Output: [(96 98 17 41) 17]
Test Case: 346 | Input/Output: [(36 11 50 74) 11]
Test Case: 347 | Input/Output: [(44 11 63 75) 11]
Test Case: 348 | Input/Output: [(9 26 96 82) 9]
Test Case: 349 | Input/Output: [(54 75 85 39) 39]
Test Case: 350 | Input/Output: [(16 52 38 58) 16]
Test Case: 351 | Input/Output: [(27 33 48 15) 15]
Test Case: 352 | Input/Output: [(6 68 76 66) 6]
Test Case: 353 | Input/Output: [(35 1 45 57) 1]
Test Case: 354 | Input/Output: [(73 95 77 29) 29]
Test Case: 355 | Input/Output: [(13 30 11 79) 11]
Test Case: 356 | Input/Output: [(35 29 54 17) 17]
Test Case: 357 | Input/Output: [(61 21 51 92) 21]
Test Case: 358 | Input/Output: [(92 45 46 96) 45]
Test Case: 359 | Input/Output: [(5 53 91 21) 5]
Test Case: 360 | Input/Output: [(96 70 59 86) 59]
Test Case: 361 | Input/Output: [(81 8 69 43) 8]
Test Case: 362 | Input/Output: [(74 14 83 66) 14]
Test Case: 363 | Input/Output: [(12 98 76 62) 12]
Test Case: 364 | Input/Output: [(65 3 84 49) 3]
Test Case: 365 | Input/Output: [(92 11 6 30) 6]
Test Case: 366 | Input/Output: [(43 83 86 6) 6]
Test Case: 367 | Input/Output: [(55 63 99 84) 55]
Test Case: 368 | Input/Output: [(39 58 72 45) 39]
Test Case: 369 | Input/Output: [(57 27 16 26) 16]
Test Case: 370 | Input/Output: [(77 66 9 0) 0]
Test Case: 371 | Input/Output: [(80 18 29 69) 18]
Test Case: 372 | Input/Output: [(9 42 89 85) 9]
Test Case: 373 | Input/Output: [(97 84 58 14) 14]
Test Case: 374 | Input/Output: [(58 45 91 78) 45]
Test Case: 375 | Input/Output: [(19 96 34 42) 19]
Test Case: 376 | Input/Output: [(78 80 100 38) 38]
Test Case: 377 | Input/Output: [(16 24 18 35) 16]
Test Case: 378 | Input/Output: [(100 26 44 26) 26]
Test Case: 379 | Input/Output: [(91 78 25 21) 21]
Test Case: 380 | Input/Output: [(90 48 79 50) 48]
Test Case: 381 | Input/Output: [(16 59 35 63) 16]
Test Case: 382 | Input/Output: [(23 30 20 35) 20]
Test Case: 383 | Input/Output: [(4 27 32 73) 4]
Test Case: 384 | Input/Output: [(67 56 42 37) 37]
Test Case: 385 | Input/Output: [(84 50 76 53) 50]
Test Case: 386 | Input/Output: [(31 44 92 40) 31]
Test Case: 387 | Input/Output: [(67 39 96 3) 3]
Test Case: 388 | Input/Output: [(39 48 80 93) 39]
Test Case: 389 | Input/Output: [(60 98 41 81) 41]
Test Case: 390 | Input/Output: [(92 78 38 53) 38]
Test Case: 391 | Input/Output: [(69 66 70 68) 66]
Test Case: 392 | Input/Output: [(27 12 60 65) 12]
Test Case: 393 | Input/Output: [(18 31 100 80) 18]
Test Case: 394 | Input/Output: [(50 41 31 74) 31]
Test Case: 395 | Input/Output: [(71 90 83 49) 49]
Test Case: 396 | Input/Output: [(9 36 22 27) 9]
Test Case: 397 | Input/Output: [(35 61 45 88) 35]
Test Case: 398 | Input/Output: [(75 10 4 72) 4]
Test Case: 399 | Input/Output: [(31 98 62 91) 31]
Test Case: 400 | Input/Output: [(36 95 -75 83) -75]
Test Case: 401 | Input/Output: [(-53 54 21 10) -53]
Test Case: 402 | Input/Output: [(54 -48 -54 -47) -54]
Test Case: 403 | Input/Output: [(2 -5 7 88) -5]
Test Case: 404 | Input/Output: [(-27 -27 53 21) -27]
Test Case: 405 | Input/Output: [(97 12 29 4) 4]
Test Case: 406 | Input/Output: [(-92 42 30 3) -92]
Test Case: 407 | Input/Output: [(38 71 100 51) 38]
Test Case: 408 | Input/Output: [(46 -30 96 35) -30]
Test Case: 409 | Input/Output: [(-69 45 -41 -84) -84]
Test Case: 410 | Input/Output: [(57 5 27 -11) -11]
Test Case: 411 | Input/Output: [(-75 -17 30 -92) -92]
Test Case: 412 | Input/Output: [(-47 29 -65 -24) -65]
Test Case: 413 | Input/Output: [(36 27 -22 71) -22]
Test Case: 414 | Input/Output: [(96 5 87 70) 5]
Test Case: 415 | Input/Output: [(32 -38 15 -82) -82]
Test Case: 416 | Input/Output: [(-61 -55 62 -64) -64]
Test Case: 417 | Input/Output: [(11 67 75 -99) -99]
Test Case: 418 | Input/Output: [(-88 98 16 -84) -88]
Test Case: 419 | Input/Output: [(-32 -74 64 -39) -74]
Test Case: 420 | Input/Output: [(-39 24 66 96) -39]
Test Case: 421 | Input/Output: [(-98 95 -59 -39) -98]
Test Case: 422 | Input/Output: [(-80 51 -16 -53) -80]
Test Case: 423 | Input/Output: [(44 -36 -43 98) -43]
Test Case: 424 | Input/Output: [(-100 88 39 26) -100]
Test Case: 425 | Input/Output: [(66 -87 31 -64) -87]
Test Case: 426 | Input/Output: [(39 -7 -98 -22) -98]
Test Case: 427 | Input/Output: [(12 50 -38 58) -38]
Test Case: 428 | Input/Output: [(-99 2 -55 51) -99]
Test Case: 429 | Input/Output: [(-58 -28 -71 -43) -71]
Test Case: 430 | Input/Output: [(-93 -57 96 -81) -93]
Test Case: 431 | Input/Output: [(94 -41 5 15) -41]
Test Case: 432 | Input/Output: [(-23 97 -6 -54) -54]
Test Case: 433 | Input/Output: [(-36 -52 -89 -91) -91]
Test Case: 434 | Input/Output: [(-72 21 51 -13) -72]
Test Case: 435 | Input/Output: [(-96 59 55 20) -96]
Test Case: 436 | Input/Output: [(-100 -76 -78 -11) -100]
Test Case: 437 | Input/Output: [(99 -9 80 -19) -19]
Test Case: 438 | Input/Output: [(49 24 10 88) 10]
Test Case: 439 | Input/Output: [(75 39 -31 -38) -38]
Test Case: 440 | Input/Output: [(-98 -18 -41 81) -98]
Test Case: 441 | Input/Output: [(-46 23 -19 68) -46]
Test Case: 442 | Input/Output: [(33 4 52 30) 4]
Test Case: 443 | Input/Output: [(-76 -68 -89 8) -89]
Test Case: 444 | Input/Output: [(-50 -70 -51 -17) -70]
Test Case: 445 | Input/Output: [(72 -53 -87 49) -87]
Test Case: 446 | Input/Output: [(-46 -65 83 29) -65]
Test Case: 447 | Input/Output: [(-99 56 -60 66) -99]
Test Case: 448 | Input/Output: [(99 -13 -27 -8) -27]
Test Case: 449 | Input/Output: [(6 29 -18 90) -18]
Test Case: 450 | Input/Output: [(79 -8 62 55) -8]
Test Case: 451 | Input/Output: [(-91 -75 -78 -41) -91]
Test Case: 452 | Input/Output: [(34 8 46 48) 8]
Test Case: 453 | Input/Output: [(18 -33 -75 -60) -75]
Test Case: 454 | Input/Output: [(83 -48 35 62) -48]
Test Case: 455 | Input/Output: [(31 32 -30 79) -30]
Test Case: 456 | Input/Output: [(75 -20 -73 -87) -87]
Test Case: 457 | Input/Output: [(49 -40 78 -40) -40]
Test Case: 458 | Input/Output: [(67 76 -91 -79) -91]
Test Case: 459 | Input/Output: [(80 -52 28 -78) -78]
Test Case: 460 | Input/Output: [(-3 51 -9 -93) -93]
Test Case: 461 | Input/Output: [(99 -68 -56 -11) -68]
Test Case: 462 | Input/Output: [(78 76 49 -30) -30]
Test Case: 463 | Input/Output: [(-17 -94 40 63) -94]
Test Case: 464 | Input/Output: [(-45 -14 20 11) -45]
Test Case: 465 | Input/Output: [(74 4 -23 -14) -23]
Test Case: 466 | Input/Output: [(61 -15 93 -17) -17]
Test Case: 467 | Input/Output: [(71 43 64 -30) -30]
Test Case: 468 | Input/Output: [(-16 -22 94 -99) -99]
Test Case: 469 | Input/Output: [(-12 100 12 -33) -33]
Test Case: 470 | Input/Output: [(48 -59 -79 25) -79]
Test Case: 471 | Input/Output: [(-72 -47 70 -10) -72]
Test Case: 472 | Input/Output: [(46 -97 2 59) -97]
Test Case: 473 | Input/Output: [(-75 -21 87 -22) -75]
Test Case: 474 | Input/Output: [(74 -6 -5 -77) -77]
Test Case: 475 | Input/Output: [(40 36 -11 -7) -11]
Test Case: 476 | Input/Output: [(-23 66 -32 57) -32]
Test Case: 477 | Input/Output: [(13 8 71 9) 8]
Test Case: 478 | Input/Output: [(-47 82 48 56) -47]
Test Case: 479 | Input/Output: [(-68 0 88 -37) -68]
Test Case: 480 | Input/Output: [(7 -4 86 -76) -76]
Test Case: 481 | Input/Output: [(31 2 35 -89) -89]
Test Case: 482 | Input/Output: [(87 39 -62 -38) -62]
Test Case: 483 | Input/Output: [(-35 -6 66 93) -35]
Test Case: 484 | Input/Output: [(-54 69 74 -15) -54]
Test Case: 485 | Input/Output: [(-42 -60 53 80) -60]
Test Case: 486 | Input/Output: [(16 -37 17 -81) -81]
Test Case: 487 | Input/Output: [(42 93 -28 -23) -28]
Test Case: 488 | Input/Output: [(-78 -27 -1 -25) -78]
Test Case: 489 | Input/Output: [(90 -68 -59 63) -68]
Test Case: 490 | Input/Output: [(-63 -57 -19 -30) -63]
Test Case: 491 | Input/Output: [(5 77 16 -33) -33]
Test Case: 492 | Input/Output: [(73 28 -79 -38) -79]
Test Case: 493 | Input/Output: [(60 -28 -72 75) -72]
Test Case: 494 | Input/Output: [(-42 -58 97 95) -58]
Test Case: 495 | Input/Output: [(-49 -99 79 -55) -99]
Test Case: 496 | Input/Output: [(-64 -85 78 31) -85]
Test Case: 497 | Input/Output: [(44 -85 74 -27) -85]
Test Case: 498 | Input/Output: [(7 1 -3 79) -3]
Test Case: 499 | Input/Output: [(-83 75 -99 -26) -99]
Test Case: 500 | Input/Output: [(59 43 -95 -80) -95]
Test Case: 501 | Input/Output: [(-25 -58 7 -8) -58]
Test Case: 502 | Input/Output: [(68 11 -87 -70) -87]
Test Case: 503 | Input/Output: [(-37 96 -33 -32) -37]
Test Case: 504 | Input/Output: [(-65 -44 -87 -36) -87]
Test Case: 505 | Input/Output: [(-45 6 76 99) -45]
Test Case: 506 | Input/Output: [(36 57 9 87) 9]
Test Case: 507 | Input/Output: [(81 -91 34 -39) -91]
Test Case: 508 | Input/Output: [(-74 77 -98 -39) -98]
Test Case: 509 | Input/Output: [(-31 89 98 -48) -48]
Test Case: 510 | Input/Output: [(-86 -97 -85 1) -97]
Test Case: 511 | Input/Output: [(-32 79 -74 96) -74]
Test Case: 512 | Input/Output: [(94 -13 78 70) -13]
Test Case: 513 | Input/Output: [(-74 -11 -30 -66) -74]
Test Case: 514 | Input/Output: [(-86 -17 -96 35) -96]
Test Case: 515 | Input/Output: [(91 29 56 -96) -96]
Test Case: 516 | Input/Output: [(-84 38 56 30) -84]
Test Case: 517 | Input/Output: [(34 -19 -99 -6) -99]
Test Case: 518 | Input/Output: [(-83 97 -30 -69) -83]
Test Case: 519 | Input/Output: [(77 69 3 63) 3]
Test Case: 520 | Input/Output: [(88 29 94 -44) -44]
Test Case: 521 | Input/Output: [(-69 -88 41 1) -88]
Test Case: 522 | Input/Output: [(75 -79 85 23) -79]
Test Case: 523 | Input/Output: [(-64 67 15 76) -64]
Test Case: 524 | Input/Output: [(99 -17 2 -78) -78]
Test Case: 525 | Input/Output: [(1 45 50 9) 1]
Test Case: 526 | Input/Output: [(62 13 -49 -98) -98]
Test Case: 527 | Input/Output: [(-60 -13 93 40) -60]
Test Case: 528 | Input/Output: [(51 83 -24 30) -24]
Test Case: 529 | Input/Output: [(-51 59 20 -6) -51]
Test Case: 530 | Input/Output: [(-43 -26 71 88) -43]
Test Case: 531 | Input/Output: [(9 57 -66 62) -66]
Test Case: 532 | Input/Output: [(-11 -75 20 1) -75]
Test Case: 533 | Input/Output: [(-29 -14 -80 -98) -98]
Test Case: 534 | Input/Output: [(-5 -46 68 -91) -91]
Test Case: 535 | Input/Output: [(56 -42 -18 53) -42]
Test Case: 536 | Input/Output: [(42 -3 -94 68) -94]
Test Case: 537 | Input/Output: [(-32 -37 -61 -9) -61]
Test Case: 538 | Input/Output: [(97 -43 17 7) -43]
Test Case: 539 | Input/Output: [(2 45 -81 9) -81]
Test Case: 540 | Input/Output: [(92 62 12 66) 12]
Test Case: 541 | Input/Output: [(72 97 66 2) 2]
Test Case: 542 | Input/Output: [(-19 95 27 44) -19]
Test Case: 543 | Input/Output: [(-66 1 27 -29) -66]
Test Case: 544 | Input/Output: [(-53 62 10 -71) -71]
Test Case: 545 | Input/Output: [(25 -78 50 71) -78]
Test Case: 546 | Input/Output: [(-48 84 -23 5) -48]
Test Case: 547 | Input/Output: [(-37 81 -90 -78) -90]
Test Case: 548 | Input/Output: [(-34 86 -46 -65) -65]
Test Case: 549 | Input/Output: [(-30 -6 77 35) -30]
Test Case: 550 | Input/Output: [(20 53 13 -60) -60]
Test Case: 551 | Input/Output: [(-35 85 -7 32) -35]
Test Case: 552 | Input/Output: [(28 -5 -39 -62) -62]
Test Case: 553 | Input/Output: [(-40 -86 -53 21) -86]
Test Case: 554 | Input/Output: [(75 -69 72 31) -69]
Test Case: 555 | Input/Output: [(-18 96 0 -18) -18]
Test Case: 556 | Input/Output: [(-83 -59 35 -3) -83]
Test Case: 557 | Input/Output: [(37 -16 -83 11) -83]
Test Case: 558 | Input/Output: [(-54 11 27 -65) -65]
Test Case: 559 | Input/Output: [(67 22 -37 -20) -37]
Test Case: 560 | Input/Output: [(45 73 11 84) 11]
Test Case: 561 | Input/Output: [(48 -85 2 -52) -85]
Test Case: 562 | Input/Output: [(-93 80 -45 67) -93]
Test Case: 563 | Input/Output: [(87 71 -92 57) -92]
Test Case: 564 | Input/Output: [(32 -31 -62 84) -62]
Test Case: 565 | Input/Output: [(-31 51 -24 -79) -79]
Test Case: 566 | Input/Output: [(-69 39 45 -89) -89]
Test Case: 567 | Input/Output: [(0 74 65 -4) -4]
Test Case: 568 | Input/Output: [(-33 81 -82 78) -82]
Test Case: 569 | Input/Output: [(-30 71 -25 56) -30]
Test Case: 570 | Input/Output: [(-30 -27 83 54) -30]
Test Case: 571 | Input/Output: [(13 -89 -47 -17) -89]
Test Case: 572 | Input/Output: [(59 -56 36 -17) -56]
Test Case: 573 | Input/Output: [(-77 24 95 81) -77]
Test Case: 574 | Input/Output: [(42 3 -84 -68) -84]
Test Case: 575 | Input/Output: [(61 -64 -25 7) -64]
Test Case: 576 | Input/Output: [(-69 81 -77 31) -77]
Test Case: 577 | Input/Output: [(-44 52 16 47) -44]
Test Case: 578 | Input/Output: [(-27 90 -25 46) -27]
Test Case: 579 | Input/Output: [(46 -33 27 -67) -67]
Test Case: 580 | Input/Output: [(35 -57 51 17) -57]
Test Case: 581 | Input/Output: [(17 -61 13 17) -61]
Test Case: 582 | Input/Output: [(19 -68 3 -50) -68]
Test Case: 583 | Input/Output: [(92 -24 37 -68) -68]
Test Case: 584 | Input/Output: [(74 -60 15 -34) -60]
Test Case: 585 | Input/Output: [(50 -23 -53 23) -53]
Test Case: 586 | Input/Output: [(-51 59 -14 -59) -59]
Test Case: 587 | Input/Output: [(1 -2 15 11) -2]
Test Case: 588 | Input/Output: [(-91 21 36 11) -91]
Test Case: 589 | Input/Output: [(39 35 3 11) 3]
Test Case: 590 | Input/Output: [(-96 87 -45 -20) -96]
Test Case: 591 | Input/Output: [(23 -80 51 -43) -80]
Test Case: 592 | Input/Output: [(-78 93 80 89) -78]
Test Case: 593 | Input/Output: [(-21 27 10 76) -21]
Test Case: 594 | Input/Output: [(90 -55 -92 32) -92]
Test Case: 595 | Input/Output: [(-66 9 -26 -30) -66]
Test Case: 596 | Input/Output: [(-43 -91 44 -76) -91]
Test Case: 597 | Input/Output: [(88 -76 68 63) -76]
Test Case: 598 | Input/Output: [(-43 -23 88 38) -43]
Test Case: 599 | Input/Output: [(46 61 58 -52) -52]
Test Case: 600 | Input/Output: [(81 -47 -23 -90) -90]
Test Case: 601 | Input/Output: [(-68 88 5 -33) -68]
Test Case: 602 | Input/Output: [(18 -100 24 61) -100]
Test Case: 603 | Input/Output: [(23 89 -48 -75) -75]
Test Case: 604 | Input/Output: [(11 -35 -35 -88) -88]
Test Case: 605 | Input/Output: [(-34 -61 85 -29) -61]
Test Case: 606 | Input/Output: [(-33 55 -31 96) -33]
Test Case: 607 | Input/Output: [(33 27 -84 -32) -84]
Test Case: 608 | Input/Output: [(55 77 31 -97) -97]
Test Case: 609 | Input/Output: [(69 -34 -65 12) -65]
Test Case: 610 | Input/Output: [(-18 43 -1 -64) -64]
Test Case: 611 | Input/Output: [(-28 92 -96 95) -96]
Test Case: 612 | Input/Output: [(-19 65 36 97) -19]
Test Case: 613 | Input/Output: [(59 65 8 32) 8]
Test Case: 614 | Input/Output: [(74 13 -29 46) -29]
Test Case: 615 | Input/Output: [(-14 -90 -23 -2) -90]
Test Case: 616 | Input/Output: [(20 -82 -92 74) -92]
Test Case: 617 | Input/Output: [(97 66 -20 -41) -41]
Test Case: 618 | Input/Output: [(-55 -10 -28 9) -55]
Test Case: 619 | Input/Output: [(10 23 -1 -78) -78]
Test Case: 620 | Input/Output: [(-85 97 77 58) -85]
Test Case: 621 | Input/Output: [(-32 -7 -67 41) -67]
Test Case: 622 | Input/Output: [(55 -61 -35 97) -61]
Test Case: 623 | Input/Output: [(4 -12 9 42) -12]
Test Case: 624 | Input/Output: [(-82 -1 -100 -99) -100]
Test Case: 625 | Input/Output: [(-70 98 57 39) -70]
Test Case: 626 | Input/Output: [(18 -13 52 -19) -19]
Test Case: 627 | Input/Output: [(90 70 -3 59) -3]
Test Case: 628 | Input/Output: [(-15 -84 55 50) -84]
Test Case: 629 | Input/Output: [(68 -99 45 14) -99]
Test Case: 630 | Input/Output: [(67 54 -26 -85) -85]
Test Case: 631 | Input/Output: [(-68 1 -17 65) -68]
Test Case: 632 | Input/Output: [(-47 -3 98 94) -47]
Test Case: 633 | Input/Output: [(65 14 -87 -27) -87]
Test Case: 634 | Input/Output: [(-40 80 -72 27) -72]
Test Case: 635 | Input/Output: [(7 35 98 -86) -86]
Test Case: 636 | Input/Output: [(-67 48 32 -59) -67]
Test Case: 637 | Input/Output: [(-69 77 -74 -41) -74]
Test Case: 638 | Input/Output: [(68 -51 83 -18) -51]
Test Case: 639 | Input/Output: [(-7 53 27 57) -7]
Test Case: 640 | Input/Output: [(98 -89 -61 -72) -89]
Test Case: 641 | Input/Output: [(-28 23 18 82) -28]
Test Case: 642 | Input/Output: [(-32 54 32 -17) -32]
Test Case: 643 | Input/Output: [(27 20 -2 9) -2]
Test Case: 644 | Input/Output: [(25 -54 -91 22) -91]
Test Case: 645 | Input/Output: [(59 83 35 39) 35]
Test Case: 646 | Input/Output: [(-21 53 -1 -13) -21]
Test Case: 647 | Input/Output: [(63 -24 41 28) -24]
Test Case: 648 | Input/Output: [(-93 -3 17 34) -93]
Test Case: 649 | Input/Output: [(54 15 60 1) 1]
Test Case: 650 | Input/Output: [(33 -66 64 56) -66]
Test Case: 651 | Input/Output: [(-90 -42 66 80) -90]
Test Case: 652 | Input/Output: [(99 57 89 45) 45]
Test Case: 653 | Input/Output: [(72 21 17 41) 17]
Test Case: 654 | Input/Output: [(7 -63 91 -70) -70]
Test Case: 655 | Input/Output: [(-39 83 -98 -10) -98]
Test Case: 656 | Input/Output: [(-71 -20 28 -25) -71]
Test Case: 657 | Input/Output: [(82 55 64 -20) -20]
Test Case: 658 | Input/Output: [(82 11 -81 54) -81]
Test Case: 659 | Input/Output: [(-47 -23 -5 28) -47]
Test Case: 660 | Input/Output: [(-74 32 28 -33) -74]
Test Case: 661 | Input/Output: [(-4 -96 15 -55) -96]
Test Case: 662 | Input/Output: [(66 -88 -29 55) -88]
Test Case: 663 | Input/Output: [(33 -28 -82 -47) -82]
Test Case: 664 | Input/Output: [(-31 59 -20 -41) -41]
Test Case: 665 | Input/Output: [(28 55 83 17) 17]
Test Case: 666 | Input/Output: [(50 90 -92 69) -92]
Test Case: 667 | Input/Output: [(-82 34 -2 19) -82]
Test Case: 668 | Input/Output: [(44 -26 76 -52) -52]
Test Case: 669 | Input/Output: [(22 -72 97 -14) -72]
Test Case: 670 | Input/Output: [(-63 -3 -2 19) -63]
Test Case: 671 | Input/Output: [(84 -64 44 91) -64]
Test Case: 672 | Input/Output: [(-3 33 -43 -48) -48]
Test Case: 673 | Input/Output: [(-80 -97 -7 25) -97]
Test Case: 674 | Input/Output: [(43 -68 -25 22) -68]
Test Case: 675 | Input/Output: [(-17 -18 16 18) -18]
Test Case: 676 | Input/Output: [(-73 -94 9 83) -94]
Test Case: 677 | Input/Output: [(-84 20 27 35) -84]
Test Case: 678 | Input/Output: [(-1 46 -7 49) -7]
Test Case: 679 | Input/Output: [(11 -75 -93 -34) -93]
Test Case: 680 | Input/Output: [(-37 66 -34 -70) -70]
Test Case: 681 | Input/Output: [(19 -66 -65 23) -66]
Test Case: 682 | Input/Output: [(80 75 -28 -77) -77]
Test Case: 683 | Input/Output: [(66 -86 -92 2) -92]
Test Case: 684 | Input/Output: [(26 18 28 -82) -82]
Test Case: 685 | Input/Output: [(-68 19 -38 -98) -98]
Test Case: 686 | Input/Output: [(82 -1 93 -36) -36]
Test Case: 687 | Input/Output: [(43 50 -45 18) -45]
Test Case: 688 | Input/Output: [(43 99 26 -34) -34]
Test Case: 689 | Input/Output: [(-81 -78 8 70) -81]
Test Case: 690 | Input/Output: [(-45 57 15 -70) -70]
Test Case: 691 | Input/Output: [(12 -63 -57 32) -63]
Test Case: 692 | Input/Output: [(-26 -89 99 -49) -89]
Test Case: 693 | Input/Output: [(60 -2 -7 79) -7]
Test Case: 694 | Input/Output: [(46 40 35 -81) -81]
Test Case: 695 | Input/Output: [(6 -13 -99 53) -99]
Test Case: 696 | Input/Output: [(43 -96 -13 -51) -96]
Test Case: 697 | Input/Output: [(-92 -7 21 28) -92]
Test Case: 698 | Input/Output: [(-35 88 -47 -87) -87]
Test Case: 699 | Input/Output: [(-98 49 -63 -38) -98]
Test Case: 700 | Input/Output: [(-3 -86 40 35) -86]
Test Case: 701 | Input/Output: [(26 61 38 7) 7]
Test Case: 702 | Input/Output: [(-78 46 9 -81) -81]
Test Case: 703 | Input/Output: [(-82 22 100 83) -82]
Test Case: 704 | Input/Output: [(-66 35 -12 -56) -66]
Test Case: 705 | Input/Output: [(96 92 91 90) 90]
Test Case: 706 | Input/Output: [(41 -7 -30 -70) -70]
Test Case: 707 | Input/Output: [(-2 -17 71 -39) -39]
Test Case: 708 | Input/Output: [(31 74 -57 17) -57]
Test Case: 709 | Input/Output: [(-64 47 62 14) -64]
Test Case: 710 | Input/Output: [(-56 73 -4 47) -56]
Test Case: 711 | Input/Output: [(46 -54 77 27) -54]
Test Case: 712 | Input/Output: [(-82 -16 65 -61) -82]
Test Case: 713 | Input/Output: [(72 -22 51 -18) -22]
Test Case: 714 | Input/Output: [(-84 58 -46 97) -84]
Test Case: 715 | Input/Output: [(-95 -36 -29 -68) -95]
Test Case: 716 | Input/Output: [(80 -25 95 15) -25]
Test Case: 717 | Input/Output: [(-55 74 60 -57) -57]
Test Case: 718 | Input/Output: [(52 -72 35 -69) -72]
Test Case: 719 | Input/Output: [(42 95 -33 54) -33]
Test Case: 720 | Input/Output: [(-84 14 38 -18) -84]
Test Case: 721 | Input/Output: [(-53 60 20 79) -53]
Test Case: 722 | Input/Output: [(39 4 -93 15) -93]
Test Case: 723 | Input/Output: [(-49 -54 -68 -89) -89]
Test Case: 724 | Input/Output: [(-22 37 -42 6) -42]
Test Case: 725 | Input/Output: [(41 -35 39 -31) -35]
Test Case: 726 | Input/Output: [(-78 -37 -98 68) -98]
Test Case: 727 | Input/Output: [(27 15 -95 35) -95]
Test Case: 728 | Input/Output: [(87 38 53 95) 38]
Test Case: 729 | Input/Output: [(-8 64 79 -12) -12]
Test Case: 730 | Input/Output: [(84 62 -69 -1) -69]
Test Case: 731 | Input/Output: [(-42 -68 -33 8) -68]
Test Case: 732 | Input/Output: [(59 -33 -13 61) -33]
Test Case: 733 | Input/Output: [(-58 75 9 -8) -58]
Test Case: 734 | Input/Output: [(34 13 66 -19) -19]
Test Case: 735 | Input/Output: [(42 -100 -1 -63) -100]
Test Case: 736 | Input/Output: [(25 94 -24 12) -24]
Test Case: 737 | Input/Output: [(-13 -68 -35 19) -68]
Test Case: 738 | Input/Output: [(-75 28 46 -84) -84]
Test Case: 739 | Input/Output: [(-44 97 -8 -81) -81]
Test Case: 740 | Input/Output: [(-99 -20 -6 -89) -99]
Test Case: 741 | Input/Output: [(-26 -44 54 -51) -51]
Test Case: 742 | Input/Output: [(-96 -74 -61 17) -96]
Test Case: 743 | Input/Output: [(25 54 49 60) 25]
Test Case: 744 | Input/Output: [(-76 -65 -21 91) -76]
Test Case: 745 | Input/Output: [(94 -14 87 -74) -74]
Test Case: 746 | Input/Output: [(-66 58 -14 33) -66]
Test Case: 747 | Input/Output: [(-41 73 -85 -100) -100]
Test Case: 748 | Input/Output: [(-92 -27 54 80) -92]
Test Case: 749 | Input/Output: [(5 68 74 9) 5]
Test Case: 750 | Input/Output: [(-7 -17 8 68) -17]
Test Case: 751 | Input/Output: [(98 70 19 71) 19]
Test Case: 752 | Input/Output: [(57 34 70 67) 34]
Test Case: 753 | Input/Output: [(23 -25 -73 23) -73]
Test Case: 754 | Input/Output: [(35 -34 50 -83) -83]
Test Case: 755 | Input/Output: [(-24 65 18 66) -24]
Test Case: 756 | Input/Output: [(-40 -40 -100 0) -100]
Test Case: 757 | Input/Output: [(-9 96 -23 97) -23]
Test Case: 758 | Input/Output: [(23 3 -17 -72) -72]
Test Case: 759 | Input/Output: [(45 15 3 -10) -10]
Test Case: 760 | Input/Output: [(16 80 -52 4) -52]
Test Case: 761 | Input/Output: [(-98 -69 42 28) -98]
Test Case: 762 | Input/Output: [(13 -75 -50 -35) -75]
Test Case: 763 | Input/Output: [(-34 17 55 -86) -86]
Test Case: 764 | Input/Output: [(58 33 -29 92) -29]
Test Case: 765 | Input/Output: [(-36 -77 -25 -85) -85]
Test Case: 766 | Input/Output: [(99 -77 -54 40) -77]
Test Case: 767 | Input/Output: [(-7 98 -89 95) -89]
Test Case: 768 | Input/Output: [(-81 -89 -69 14) -89]
Test Case: 769 | Input/Output: [(53 62 -66 -33) -66]
Test Case: 770 | Input/Output: [(-89 -46 28 26) -89]
Test Case: 771 | Input/Output: [(6 46 82 -68) -68]
Test Case: 772 | Input/Output: [(69 -31 -38 -37) -38]
Test Case: 773 | Input/Output: [(-64 62 -41 -90) -90]
Test Case: 774 | Input/Output: [(-34 -92 30 2) -92]
Test Case: 775 | Input/Output: [(16 54 46 -72) -72]
Test Case: 776 | Input/Output: [(36 65 -67 -64) -67]
Test Case: 777 | Input/Output: [(21 -35 91 93) -35]
Test Case: 778 | Input/Output: [(-74 68 -73 100) -74]
Test Case: 779 | Input/Output: [(17 -90 -68 97) -90]
Test Case: 780 | Input/Output: [(93 -44 -65 11) -65]
Test Case: 781 | Input/Output: [(56 28 60 -39) -39]
Test Case: 782 | Input/Output: [(-35 96 2 -40) -40]
Test Case: 783 | Input/Output: [(55 -83 74 -61) -83]
Test Case: 784 | Input/Output: [(46 -33 -99 -12) -99]
Test Case: 785 | Input/Output: [(-64 -66 60 -61) -66]
Test Case: 786 | Input/Output: [(-58 -23 12 1) -58]
Test Case: 787 | Input/Output: [(-5 -7 -28 -53) -53]
Test Case: 788 | Input/Output: [(37 75 57 99) 37]
Test Case: 789 | Input/Output: [(26 89 37 -40) -40]
Test Case: 790 | Input/Output: [(77 63 -70 45) -70]
Test Case: 791 | Input/Output: [(-39 -12 86 91) -39]
Test Case: 792 | Input/Output: [(12 -34 57 18) -34]
Test Case: 793 | Input/Output: [(51 -40 29 92) -40]
Test Case: 794 | Input/Output: [(92 -98 66 -41) -98]
Test Case: 795 | Input/Output: [(99 -76 22 33) -76]
Test Case: 796 | Input/Output: [(79 -31 -13 -13) -31]
Test Case: 797 | Input/Output: [(-15 -29 -65 38) -65]
Test Case: 798 | Input/Output: [(-44 -95 -24 59) -95]
Test Case: 799 | Input/Output: [(43 48 40 -49) -49]
Test Case: 800 | Input/Output: [(-48 79 83 97) -48]
Test Case: 801 | Input/Output: [(-85 -78 57 9) -85]
Test Case: 802 | Input/Output: [(-60 -89 -70 1) -89]
Test Case: 803 | Input/Output: [(-94 49 -60 -68) -94]
Test Case: 804 | Input/Output: [(49 -12 48 16) -12]
Test Case: 805 | Input/Output: [(-8 84 -85 73) -85]
Test Case: 806 | Input/Output: [(49 50 41 96) 41]
Test Case: 807 | Input/Output: [(72 -56 -18 21) -56]
Test Case: 808 | Input/Output: [(45 -56 75 52) -56]
Test Case: 809 | Input/Output: [(-2 21 80 48) -2]
Test Case: 810 | Input/Output: [(-69 44 91 70) -69]
Test Case: 811 | Input/Output: [(-42 -61 27 46) -61]
Test Case: 812 | Input/Output: [(-72 26 100 30) -72]
Test Case: 813 | Input/Output: [(42 -6 34 96) -6]
Test Case: 814 | Input/Output: [(-10 8 54 -56) -56]
Test Case: 815 | Input/Output: [(7 -89 -14 28) -89]
Test Case: 816 | Input/Output: [(-60 19 85 -69) -69]
Test Case: 817 | Input/Output: [(-65 -31 43 -92) -92]
Test Case: 818 | Input/Output: [(-87 48 38 29) -87]
Test Case: 819 | Input/Output: [(25 -49 55 98) -49]
Test Case: 820 | Input/Output: [(-79 -50 29 83) -79]
Test Case: 821 | Input/Output: [(92 28 -42 64) -42]
Test Case: 822 | Input/Output: [(-51 15 -22 -60) -60]
Test Case: 823 | Input/Output: [(-52 -92 -43 90) -92]
Test Case: 824 | Input/Output: [(-7 -9 26 -19) -19]
Test Case: 825 | Input/Output: [(-32 97 -51 13) -51]
Test Case: 826 | Input/Output: [(-89 46 98 71) -89]
Test Case: 827 | Input/Output: [(-62 -80 -46 57) -80]
Test Case: 828 | Input/Output: [(-100 -40 -90 67) -100]
Test Case: 829 | Input/Output: [(-7 -83 36 39) -83]
Test Case: 830 | Input/Output: [(57 2 89 -100) -100]
Test Case: 831 | Input/Output: [(-90 -57 27 65) -90]
Test Case: 832 | Input/Output: [(37 28 23 82) 23]
Test Case: 833 | Input/Output: [(-79 41 51 -49) -79]
Test Case: 834 | Input/Output: [(5 -37 -68 88) -68]
Test Case: 835 | Input/Output: [(25 82 76 46) 25]
Test Case: 836 | Input/Output: [(44 74 22 -100) -100]
Test Case: 837 | Input/Output: [(50 51 -52 -56) -56]
Test Case: 838 | Input/Output: [(23 -77 35 22) -77]
Test Case: 839 | Input/Output: [(-74 -36 18 85) -74]
Test Case: 840 | Input/Output: [(-55 14 63 -15) -55]
Test Case: 841 | Input/Output: [(27 88 -51 -94) -94]
Test Case: 842 | Input/Output: [(-76 21 94 1) -76]
Test Case: 843 | Input/Output: [(-13 -39 -47 11) -47]
Test Case: 844 | Input/Output: [(-6 21 72 53) -6]
Test Case: 845 | Input/Output: [(3 -28 58 43) -28]
Test Case: 846 | Input/Output: [(56 -29 -14 47) -29]
Test Case: 847 | Input/Output: [(-86 14 -65 -20) -86]
Test Case: 848 | Input/Output: [(-23 -55 -55 -52) -55]
Test Case: 849 | Input/Output: [(-79 95 -31 55) -79]
Test Case: 850 | Input/Output: [(82 -26 -32 -81) -81]
Test Case: 851 | Input/Output: [(47 -24 8 11) -24]
Test Case: 852 | Input/Output: [(98 50 73 -4) -4]
Test Case: 853 | Input/Output: [(23 -21 48 -40) -40]
Test Case: 854 | Input/Output: [(30 -31 -48 14) -48]
Test Case: 855 | Input/Output: [(91 97 35 -69) -69]
Test Case: 856 | Input/Output: [(30 73 -92 -14) -92]
Test Case: 857 | Input/Output: [(-39 95 37 -24) -39]
Test Case: 858 | Input/Output: [(72 -73 -5 -76) -76]
Test Case: 859 | Input/Output: [(20 -48 39 -45) -48]
Test Case: 860 | Input/Output: [(-26 95 69 81) -26]
Test Case: 861 | Input/Output: [(80 3 95 -69) -69]
Test Case: 862 | Input/Output: [(-83 11 -92 -64) -92]
Test Case: 863 | Input/Output: [(-16 20 72 -8) -16]
Test Case: 864 | Input/Output: [(-63 -31 53 16) -63]
Test Case: 865 | Input/Output: [(59 -58 42 36) -58]
Test Case: 866 | Input/Output: [(-42 -79 47 -16) -79]
Test Case: 867 | Input/Output: [(-12 59 -27 -62) -62]
Test Case: 868 | Input/Output: [(18 -44 -46 50) -46]
Test Case: 869 | Input/Output: [(-89 -44 73 21) -89]
Test Case: 870 | Input/Output: [(40 52 -29 91) -29]
Test Case: 871 | Input/Output: [(74 30 41 -12) -12]
Test Case: 872 | Input/Output: [(51 -36 -72 55) -72]
Test Case: 873 | Input/Output: [(-43 96 94 -49) -49]
Test Case: 874 | Input/Output: [(36 -29 61 -75) -75]
Test Case: 875 | Input/Output: [(1 -90 68 39) -90]
Test Case: 876 | Input/Output: [(28 -38 -7 56) -38]
Test Case: 877 | Input/Output: [(-74 11 89 -18) -74]
Test Case: 878 | Input/Output: [(-66 37 87 -8) -66]
Test Case: 879 | Input/Output: [(0 9 12 8) 0]
Test Case: 880 | Input/Output: [(-68 -55 -74 -67) -74]
Test Case: 881 | Input/Output: [(30 -81 54 -94) -94]
Test Case: 882 | Input/Output: [(-52 -16 64 -71) -71]
Test Case: 883 | Input/Output: [(-92 -54 -88 -32) -92]
Test Case: 884 | Input/Output: [(28 54 -58 -24) -58]
Test Case: 885 | Input/Output: [(46 -15 -61 -93) -93]
Test Case: 886 | Input/Output: [(-71 -54 28 -93) -93]
Test Case: 887 | Input/Output: [(-22 89 -88 -34) -88]
Test Case: 888 | Input/Output: [(86 -95 22 -86) -95]
Test Case: 889 | Input/Output: [(3 5 30 74) 3]
Test Case: 890 | Input/Output: [(-90 70 -20 4) -90]
Test Case: 891 | Input/Output: [(-56 -49 62 79) -56]
Test Case: 892 | Input/Output: [(-77 31 -85 -23) -85]
Test Case: 893 | Input/Output: [(97 50 25 13) 13]
Test Case: 894 | Input/Output: [(-100 91 9 -54) -100]
Test Case: 895 | Input/Output: [(98 -49 2 -42) -49]
Test Case: 896 | Input/Output: [(98 -43 83 3) -43]
Test Case: 897 | Input/Output: [(-13 45 10 -3) -13]
Test Case: 898 | Input/Output: [(35 -81 49 -56) -81]
Test Case: 899 | Input/Output: [(-69 0 83 -38) -69]
Test Case: 900 | Input/Output: [(-6 46 61 -18) -18]
Test Case: 901 | Input/Output: [(63 -25 82 -8) -25]
Test Case: 902 | Input/Output: [(7 -43 42 47) -43]
Test Case: 903 | Input/Output: [(-94 -97 88 -74) -97]
Test Case: 904 | Input/Output: [(-11 -50 -10 6) -50]
Test Case: 905 | Input/Output: [(-55 52 -99 -38) -99]
Test Case: 906 | Input/Output: [(-34 -72 58 -11) -72]
Test Case: 907 | Input/Output: [(-88 93 73 92) -88]
Test Case: 908 | Input/Output: [(-3 -38 -19 -45) -45]
Test Case: 909 | Input/Output: [(7 19 -82 55) -82]
Test Case: 910 | Input/Output: [(-5 -3 -23 0) -23]
Test Case: 911 | Input/Output: [(64 35 0 43) 0]
Test Case: 912 | Input/Output: [(91 54 -69 -95) -95]
Test Case: 913 | Input/Output: [(7 76 -68 -33) -68]
Test Case: 914 | Input/Output: [(-63 -30 24 74) -63]
Test Case: 915 | Input/Output: [(85 75 -51 -67) -67]
Test Case: 916 | Input/Output: [(73 8 40 -50) -50]
Test Case: 917 | Input/Output: [(28 -4 68 -89) -89]
Test Case: 918 | Input/Output: [(-29 52 92 -85) -85]
Test Case: 919 | Input/Output: [(94 -35 45 -7) -35]
Test Case: 920 | Input/Output: [(-62 -49 55 -39) -62]
Test Case: 921 | Input/Output: [(0 -87 -55 -99) -99]
Test Case: 922 | Input/Output: [(99 53 17 -72) -72]
Test Case: 923 | Input/Output: [(51 48 -40 -36) -40]
Test Case: 924 | Input/Output: [(-10 96 -17 68) -17]
Test Case: 925 | Input/Output: [(-15 -12 65 32) -15]
Test Case: 926 | Input/Output: [(-68 18 -19 16) -68]
Test Case: 927 | Input/Output: [(82 87 3 21) 3]
Test Case: 928 | Input/Output: [(-44 -19 -62 94) -62]
Test Case: 929 | Input/Output: [(89 28 54 -100) -100]
Test Case: 930 | Input/Output: [(-75 -85 -74 30) -85]
Test Case: 931 | Input/Output: [(-86 -88 -90 16) -90]
Test Case: 932 | Input/Output: [(-90 -28 -60 17) -90]
Test Case: 933 | Input/Output: [(35 70 81 25) 25]
Test Case: 934 | Input/Output: [(47 61 -46 2) -46]
Test Case: 935 | Input/Output: [(90 44 76 -73) -73]
Test Case: 936 | Input/Output: [(-28 -64 68 -25) -64]
Test Case: 937 | Input/Output: [(-99 70 -29 -5) -99]
Test Case: 938 | Input/Output: [(2 49 -88 -61) -88]
Test Case: 939 | Input/Output: [(74 -53 -54 -23) -54]
Test Case: 940 | Input/Output: [(49 12 27 45) 12]
Test Case: 941 | Input/Output: [(-32 -20 39 17) -32]
Test Case: 942 | Input/Output: [(67 52 -26 -43) -43]
Test Case: 943 | Input/Output: [(0 -21 -40 -88) -88]
Test Case: 944 | Input/Output: [(-100 -84 -30 58) -100]
Test Case: 945 | Input/Output: [(57 62 94 -38) -38]
Test Case: 946 | Input/Output: [(79 -28 18 86) -28]
Test Case: 947 | Input/Output: [(-18 -81 -48 74) -81]
Test Case: 948 | Input/Output: [(-17 -59 -42 3) -59]
Test Case: 949 | Input/Output: [(-70 -55 94 -85) -85]
Test Case: 950 | Input/Output: [(-62 64 -74 -27) -74]
Test Case: 951 | Input/Output: [(-30 88 92 -89) -89]
Test Case: 952 | Input/Output: [(22 -88 -13 29) -88]
Test Case: 953 | Input/Output: [(70 23 -85 17) -85]
Test Case: 954 | Input/Output: [(-53 -47 19 -81) -81]
Test Case: 955 | Input/Output: [(55 -43 -84 100) -84]
Test Case: 956 | Input/Output: [(10 0 -21 46) -21]
Test Case: 957 | Input/Output: [(2 63 62 -22) -22]
Test Case: 958 | Input/Output: [(2 90 -90 -89) -90]
Test Case: 959 | Input/Output: [(100 93 67 48) 48]
Test Case: 960 | Input/Output: [(22 7 -93 6) -93]
Test Case: 961 | Input/Output: [(-50 40 47 -90) -90]
Test Case: 962 | Input/Output: [(-29 62 -44 10) -44]
Test Case: 963 | Input/Output: [(-43 71 56 29) -43]
Test Case: 964 | Input/Output: [(30 76 70 -97) -97]
Test Case: 965 | Input/Output: [(98 71 -94 70) -94]
Test Case: 966 | Input/Output: [(22 -43 20 15) -43]
Test Case: 967 | Input/Output: [(0 -8 22 76) -8]
Test Case: 968 | Input/Output: [(36 63 -85 -94) -94]
Test Case: 969 | Input/Output: [(-48 75 -60 99) -60]
Test Case: 970 | Input/Output: [(6 15 100 -41) -41]
Test Case: 971 | Input/Output: [(92 48 9 -78) -78]
Test Case: 972 | Input/Output: [(-76 -85 -9 48) -85]
Test Case: 973 | Input/Output: [(-61 68 87 31) -61]
Test Case: 974 | Input/Output: [(-67 -50 68 20) -67]
Test Case: 975 | Input/Output: [(-33 51 -62 -44) -62]
Test Case: 976 | Input/Output: [(-65 23 -65 -15) -65]
Test Case: 977 | Input/Output: [(0 77 2 -99) -99]
Test Case: 978 | Input/Output: [(43 -23 -68 -21) -68]
Test Case: 979 | Input/Output: [(29 32 70 -66) -66]
Test Case: 980 | Input/Output: [(-99 -100 12 57) -100]
Test Case: 981 | Input/Output: [(-44 -24 -92 10) -92]
Test Case: 982 | Input/Output: [(46 -60 -86 -94) -94]
Test Case: 983 | Input/Output: [(84 91 -15 -69) -69]
Test Case: 984 | Input/Output: [(72 43 4 -74) -74]
Test Case: 985 | Input/Output: [(-23 27 31 -75) -75]
Test Case: 986 | Input/Output: [(35 -1 41 51) -1]
Test Case: 987 | Input/Output: [(-77 -34 -89 100) -89]
Test Case: 988 | Input/Output: [(54 71 -2 80) -2]
Test Case: 989 | Input/Output: [(-44 69 -49 86) -49]
Test Case: 990 | Input/Output: [(45 81 -46 -17) -46]
Test Case: 991 | Input/Output: [(-85 14 59 -32) -85]
Test Case: 992 | Input/Output: [(83 28 2 -13) -13]
Test Case: 993 | Input/Output: [(96 -38 21 35) -38]
Test Case: 994 | Input/Output: [(69 -23 -72 83) -72]
Test Case: 995 | Input/Output: [(-92 -25 59 -61) -92]
Test Case: 996 | Input/Output: [(11 49 -8 -79) -79]
Test Case: 997 | Input/Output: [(83 -39 22 -100) -100]
Test Case: 998 | Input/Output: [(-39 84 -49 -17) -49]
Test Case: 999 | Input/Output: [(82 1 -15 -72) -72]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -119 38 76 -113 -14 41 120 51 -48 52 56 -6 -25 -2 68 110
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-30 -41 -30 -30] -41] [[34 71 34 34] 34] [[-50 -50 -50 76] -50] [[-49 -49 -78 -49] -78] [[53 18 18 18] 18] [[28 -65 -65 -65] -65] [[59 59 -68 59] -68] [[-39 58 58 58] -39] [[51 51 75 51] 51] [[-17 -17 -17 98] -17] [(-31 -31 -31 -31) -31] [(-55 -55 -55 -55) -55] [(-60 -60 -60 -60) -60] [(-35 -35 -35 -35) -35] [(23 23 23 23) 23] [(50 16 82 6) 6] [(70 92 25 33) 25] [(53 8 6 61) 6] [(73 73 42 29) 29] [(62 22 40 79) 22] [(45 60 94 5) 5] [(21 59 66 100) 21] [(66 99 6 65) 6] [(38 86 0 10) 0] [(30 76 39 42) 30] [(56 40 50 74) 40] [(39 82 72 15) 15] [(29 16 24 3) 3] [(16 25 87 74) 16] [(92 0 74 9) 0] [(40 53 80 64) 40] [(63 34 62 69) 34] [(58 47 87 27) 27] [(63 4 3 38) 3] [(22 64 75 27) 22] [(36 11 -86 -62) -86] [(78 -97 -60 -42) -97] [(-68 -5 -64 47) -68] [(-42 78 39 20) -42] [(7 17 80 85) 7] [(-24 -100 80 40) -100] [(100 4 56 32) 4] [(24 28 9 -7) -7] [(-4 -78 -22 35) -78] [(-51 28 -88 64) -88] [(64 -72 26 22) -72] [(38 -22 -16 -28) -28] [(63 -53 61 -44) -53] [(-79 4 -46 35) -79] [(-37 -98 3 8) -98] [(-11 90 -4 -12) -12] [(-70 -18 50 58) -70] [(85 30 -41 -84) -84] [(38 72 20 17) 17] [(20 31 85 -69) -69] [(-13 -5 -89 -33) -89] [(3 80 -6 35) -6] [(95 44 13 90) 13] [(-89 55 41 -7) -89] [(2 -76 62 -66) -76] [(50 97 -98 26) -98] [(11 24 -46 57) -46] [(18 77 -81 68) -81] [(92 -58 -36 -78) -78] [(36 -30 -64 -10) -64] [(84 9 85 75) 9] [(90 1 46 -51) -51] [(-5 14 31 -91) -91] [(56 -56 -50 85) -56] [(7 32 88 -94) -94] [(-9 -36 27 -33) -36] [(1 -13 18 -28) -28] [(88 -33 68 61) -33] [(-19 -3 83 -21) -21] [(44 -24 39 -52) -52] [(-36 35 -56 64) -56] [(-53 -97 -7 4) -97] [(-29 -77 -72 -75) -77] [(-93 -29 -53 -47) -93] [(-18 -48 100 22) -48] [(71 34 43 -52) -52] [(-18 69 17 3) -18] [(-97 -10 19 75) -97] [(-5 -50 48 41) -50] [(-29 -97 -49 -5) -97] [(-20 -20 13 -91) -91] [(-1 45 72 34) -1] [(-4 -17 75 96) -17] [(-54 -31 -46 -53) -54] [(-16 -54 80 77) -54] [(89 -7 14 86) -7] [(1 65 -10 37) -10] [(54 13 26 6) 6] [(8 2 -46 43) -46] [(93 -64 22 91) -64])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Lexicase best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Lexicase best errors: [1 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Zero cases best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Zero cases best errors: [1 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 5 5 2 11 2 3 1000 5 2)
Population mean number of elite cases: 2.04
Count of perfect (error zero) individuals by case: (0 5 5 2 11 2 3 0 5 2)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction tagged_313} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_158} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_mult} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_124} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_stackdepth})
Best program: (boolean_pop boolean_not exec_yankdup tagged_313 in2 integer_fromboolean boolean_empty boolean_swap integer_add exec_swap () (integer_mod boolean_invert_first_then_and print_integer boolean_pop integer_stackdepth boolean_invert_second_then_and) integer_swap exec_yankdup boolean_eq boolean_frominteger integer_empty exec_y (integer_shove exec_s (exec_rot (integer_swap tag_exec_788 (exec_s_when_autoconstructing (boolean_dup integer_dec integer_dup_times boolean_yank tag_integer_158 boolean_invert_first_then_and) (boolean_xor integer_div exec_rot () (exec_dup_times (boolean_flush in4 boolean_dup_times exec_do*count (boolean_yank exec_s (exec_k () (integer_sub integer_dup_items integer_yankdup integer_yankdup exec_s_when_autoconstructing (exec_k_when_autoconstructing (boolean_yank boolean_empty integer_pop integer_gt boolean_not) (integer_mult)) (boolean_xor) () integer_add) exec_rot () (exec_y (exec_dup () boolean_empty boolean_eq integer_shove tag_integer_124 exec_yank) integer_pop boolean_pop exec_k (boolean_flush exec_do*times (exec_dup_items) boolean_dup integer_dec) (exec_stackdepth)) ()) () ()))) ()) ())) () ()) () ()))
Errors: [1 0 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 76
Size: 113
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 9.965
Median total errors in population: 10
Error averages by case: (1.0 0.995 0.995 0.998 0.989 0.998 0.997 1.0 0.995 0.998)
Error minima by case: (1 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 52.434
Average program size in population (points): 72.075
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 483006
--- Timings ---
Current time: 1559583181966 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.8%
Reproduction:         0.9 seconds, 35.8%
Fitness Testing:      1.4 seconds, 59.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 82                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 40                 
Correct output: 5                   | Program output: 94                 
Correct output: 21                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 50                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 24                 
Correct output: 16                  | Program output: 87                 
Correct output: 0                   | Program output: 74                 
Correct output: 40                  | Program output: 80                 
Correct output: 34                  | Program output: 62                 
Correct output: 27                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 75                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -60                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 80                 
Correct output: -100                | Program output: 80                 
Correct output: 4                   | Program output: 56                 
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 26                 
Correct output: -28                 | Program output: -16                
Correct output: -53                 | Program output: 61                 
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: 3                  
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: 50                 
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 85                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: 62                 
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 85                 
Correct output: -51                 | Program output: 46                 
Correct output: -91                 | Program output: 31                 
Correct output: -56                 | Program output: -50                
Correct output: -94                 | Program output: 88                 
Correct output: -36                 | Program output: 27                 
Correct output: -28                 | Program output: 18                 
Correct output: -33                 | Program output: 68                 
Correct output: -21                 | Program output: 83                 
Correct output: -52                 | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -7                 
Correct output: -77                 | Program output: -72                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: 100                
Correct output: -52                 | Program output: 43                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: 19                 
Correct output: -50                 | Program output: 48                 
Correct output: -97                 | Program output: -49                
Correct output: -91                 | Program output: 13                 
Correct output: -1                  | Program output: 72                 
Correct output: -17                 | Program output: 75                 
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: 80                 
Correct output: -7                  | Program output: 14                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Lexicase best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Lexicase best errors: [1 1 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 18
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Zero cases best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Zero cases best errors: [1 1 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 18
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (358 1 121 363 387 360 1 388 1 387)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (358 1 121 363 387 360 1 388 1 387)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_967} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_749})
Best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty integer_dec in3 print_integer in2 boolean_rot integer_dup in4 exec_dup_times () exec_flush boolean_empty print_exec (integer_shove boolean_not exec_dup (tagged_967 exec_flush boolean_invert_second_then_and exec_do*range (integer_min exec_swap (integer_yankdup in3 exec_yankdup) (exec_pop (exec_rot (tagged_749) () ()))))))
Errors: [0 1 1 0 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 34
Size: 46
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 7.633
Median total errors in population: 7
Error averages by case: (0.642 0.999 0.879 0.637 0.613 0.64 0.999 0.612 0.999 0.613)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.796
Average program size in population (points): 57.072
Average percent parens in population: 0.282
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.501
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 875804
--- Timings ---
Current time: 1559583184302 milliseconds
Total Time:           6.1 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.3 seconds, 38.0%
Fitness Testing:      2.0 seconds, 33.1%
Report:               1.7 seconds, 27.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction tagged_313} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_158} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_mult} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_124} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_pop boolean_not exec_yankdup tagged_313 in2 integer_fromboolean boolean_empty boolean_swap integer_add exec_swap () (integer_mod boolean_invert_first_then_and print_integer boolean_pop integer_stackdepth boolean_invert_second_then_and) integer_swap exec_yankdup boolean_eq boolean_frominteger integer_empty exec_y (integer_shove exec_s (exec_rot (integer_swap tag_exec_788 (exec_s_when_autoconstructing (boolean_dup integer_dec integer_dup_times boolean_yank tag_integer_158 boolean_invert_first_then_and) (boolean_xor integer_div exec_rot (exec_dup_times (boolean_flush in4 boolean_dup_times boolean_or boolean_yank exec_s (exec_k () (integer_sub integer_dup_items integer_yankdup integer_yankdup exec_s_when_autoconstructing (exec_k_when_autoconstructing (boolean_yank boolean_empty integer_pop integer_gt boolean_not) (integer_mult)) (boolean_xor) () integer_add) exec_rot () (exec_y (exec_dup ()) boolean_empty boolean_eq integer_shove tag_integer_124 exec_yank integer_pop boolean_pop exec_k (boolean_flush exec_do*times (exec_dup_items) boolean_dup integer_dec) (exec_stackdepth)) ()) () ())) () ()) ())) () ()) () ()))
Lexicase best errors: [1 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 112
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction tagged_313} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_158} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_mult} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_124} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_pop boolean_not exec_yankdup tagged_313 in2 integer_fromboolean boolean_empty boolean_swap integer_add exec_swap () (integer_mod boolean_invert_first_then_and print_integer boolean_pop integer_stackdepth boolean_invert_second_then_and) integer_swap exec_yankdup boolean_eq boolean_frominteger integer_empty exec_y (integer_shove exec_s (exec_rot (integer_swap tag_exec_788 (exec_s_when_autoconstructing (boolean_dup integer_dec integer_dup_times boolean_yank tag_integer_158 boolean_invert_first_then_and) (boolean_xor integer_div exec_rot (exec_dup_times (boolean_flush in4 boolean_dup_times boolean_or boolean_yank exec_s (exec_k () (integer_sub integer_dup_items integer_yankdup integer_yankdup exec_s_when_autoconstructing (exec_k_when_autoconstructing (boolean_yank boolean_empty integer_pop integer_gt boolean_not) (integer_mult)) (boolean_xor) () integer_add) exec_rot () (exec_y (exec_dup ()) boolean_empty boolean_eq integer_shove tag_integer_124 exec_yank integer_pop boolean_pop exec_k (boolean_flush exec_do*times (exec_dup_items) boolean_dup integer_dec) (exec_stackdepth)) ()) () ())) () ()) ())) () ()) () ()))
Zero cases best errors: [1 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 112
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 248 266 267 597 267 268 883 286 246)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (284 248 266 267 597 267 268 883 286 246)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction tagged_313} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_158} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_mult} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_eq})
Best program: (boolean_pop boolean_not exec_yankdup tagged_313 in2 integer_fromboolean boolean_empty boolean_swap integer_add exec_swap () (integer_mod boolean_invert_first_then_and print_integer boolean_pop integer_stackdepth boolean_invert_second_then_and) integer_swap exec_yankdup boolean_eq boolean_frominteger integer_max integer_dup_times integer_shove exec_s (exec_rot (integer_swap tag_exec_788 (exec_s_when_autoconstructing (boolean_dup integer_dec integer_dup_times boolean_yank tag_integer_158 boolean_invert_first_then_and) (boolean_xor integer_div exec_rot () (exec_dup_times (boolean_flush in4 boolean_dup_times exec_do*count (boolean_yank exec_s (exec_k () (integer_sub integer_dup_items integer_yankdup integer_yankdup exec_s_when_autoconstructing (exec_k_when_autoconstructing (boolean_yank boolean_empty integer_pop integer_gt boolean_not) (integer_mult)) (boolean_xor) () integer_add) exec_rot () (exec_y (exec_dup () boolean_empty boolean_eq)) ()) () ()))) ()) ())) () ()) () ())
Errors: [1 1 0 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 64
Size: 97
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 6.388
Median total errors in population: 6
Error averages by case: (0.716 0.752 0.734 0.733 0.403 0.733 0.732 0.117 0.714 0.754)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.928
Average program size in population (points): 52.421
Average percent parens in population: 0.294
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.106
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 191
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1415237
--- Timings ---
Current time: 1559583187341 milliseconds
Total Time:           9.2 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.3 seconds, 47.4%
Fitness Testing:      2.8 seconds, 30.2%
Report:               1.9 seconds, 21.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 82                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 40                 
Correct output: 5                   | Program output: 94                 
Correct output: 21                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 50                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 24                 
Correct output: 16                  | Program output: 87                 
Correct output: 0                   | Program output: 74                 
Correct output: 40                  | Program output: 80                 
Correct output: 34                  | Program output: 62                 
Correct output: 27                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 75                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -60                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 80                 
Correct output: -100                | Program output: 80                 
Correct output: 4                   | Program output: 56                 
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 26                 
Correct output: -28                 | Program output: -16                
Correct output: -53                 | Program output: 61                 
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: 3                  
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: 50                 
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 85                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: 62                 
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 85                 
Correct output: -51                 | Program output: 46                 
Correct output: -91                 | Program output: 31                 
Correct output: -56                 | Program output: -50                
Correct output: -94                 | Program output: 88                 
Correct output: -36                 | Program output: 27                 
Correct output: -28                 | Program output: 18                 
Correct output: -33                 | Program output: 68                 
Correct output: -21                 | Program output: 83                 
Correct output: -52                 | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -7                 
Correct output: -77                 | Program output: -72                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: 100                
Correct output: -52                 | Program output: 43                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: 19                 
Correct output: -50                 | Program output: 48                 
Correct output: -97                 | Program output: -49                
Correct output: -91                 | Program output: 13                 
Correct output: -1                  | Program output: 72                 
Correct output: -17                 | Program output: 75                 
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: 80                 
Correct output: -7                  | Program output: 14                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_967} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_749})
Lexicase best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty integer_dec in3 in1 boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty integer_dec in3 print_integer in2 boolean_rot integer_dup in4 exec_dup_times () exec_flush boolean_empty print_exec (integer_shove boolean_not exec_dup (tagged_967 exec_flush boolean_invert_second_then_and exec_do*range (integer_min exec_swap (integer_yankdup in3 exec_yankdup) (exec_pop (exec_rot (tagged_749) () ()))))))
Lexicase best errors: [1 0 0 1 1 1 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 55
Percent parens: 0.236
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_967} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_749})
Zero cases best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty integer_dec in3 in1 boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty integer_dec in3 print_integer in2 boolean_rot integer_dup in4 exec_dup_times () exec_flush boolean_empty print_exec (integer_shove boolean_not exec_dup (tagged_967 exec_flush boolean_invert_second_then_and exec_do*range (integer_min exec_swap (integer_yankdup in3 exec_yankdup) (exec_pop (exec_rot (tagged_749) () ()))))))
Zero cases best errors: [1 0 0 1 1 1 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 55
Percent parens: 0.236
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 215 215 1000 1000 1000 1000 202 484 1000)
Population mean number of elite cases: 6.32
Count of perfect (error zero) individuals by case: (201 215 215 0 0 0 0 202 484 0)
Population mean number of perfect (error zero) cases: 1.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_16} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_flush} {:close 0, :instruction tag_exec_897} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 1, :instruction 34} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction 4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop})
Best program: (integer_lt boolean_invert_first_then_and boolean_stackdepth exec_s (tagged_16 exec_empty integer_empty integer_flush) (tag_exec_897 (print_newline boolean_yank boolean_eq integer_shove integer_sub exec_dup_items 34) integer_gt integer_div integer_dec exec_swap (exec_yank integer_min exec_pop (4 boolean_dup_times exec_do*while (print_newline) exec_when (boolean_rot boolean_dup_times boolean_rot) boolean_frominteger integer_lt integer_dup boolean_yank exec_do*count (boolean_dup_items) integer_div) integer_dup) (integer_fromboolean exec_noop exec_dup_items print_integer exec_s_when_autoconstructing (exec_do*range (boolean_rot exec_do*while () integer_pop boolean_not in3 boolean_eq exec_dup (print_integer exec_flush exec_pop ()))) () ())) ())
Errors: [1 0 0 1 1 1 1 1 1 1]
Total: 8
Mean: 0.8
Genome size: 55
Size: 73
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 8.683
Median total errors in population: 9
Error averages by case: (0.799 0.785 0.785 1.0 1.0 1.0 1.0 0.798 0.516 1.0)
Error minima by case: (0 0 0 1 1 1 1 0 0 1)
Average genome size in population (length): 33.719
Average program size in population (points): 48.058
Average percent parens in population: 0.292
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.527
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.549
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1871928
--- Timings ---
Current time: 1559583190691 milliseconds
Total Time:          12.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.7 seconds, 53.7%
Fitness Testing:      3.4 seconds, 27.5%
Report:               2.2 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Lexicase best program: (in4 integer_fromboolean boolean_empty boolean_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Lexicase best errors: [1 0 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Zero cases best program: (in4 integer_fromboolean boolean_empty boolean_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Zero cases best errors: [1 0 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (340 534 346 340 189 346 189 341 189 2)
Population mean number of elite cases: 2.82
Count of perfect (error zero) individuals by case: (340 534 346 340 189 346 189 341 189 2)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Best program: (in4 integer_fromboolean boolean_empty boolean_swap integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Errors: [1 0 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 16
Size: 22
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.184
Median total errors in population: 7
Error averages by case: (0.66 0.466 0.654 0.66 0.811 0.654 0.811 0.659 0.811 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.397
Average program size in population (points): 48.182
Average percent parens in population: 0.284
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.072125
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2363200
--- Timings ---
Current time: 1559583193661 milliseconds
Total Time:          15.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.8 seconds, 56.5%
Fitness Testing:      4.1 seconds, 26.3%
Report:               2.6 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 82                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 40                 
Correct output: 5                   | Program output: 94                 
Correct output: 21                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 50                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 24                 
Correct output: 16                  | Program output: 87                 
Correct output: 0                   | Program output: 74                 
Correct output: 40                  | Program output: 80                 
Correct output: 34                  | Program output: 62                 
Correct output: 27                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 75                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -60                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 80                 
Correct output: -100                | Program output: 80                 
Correct output: 4                   | Program output: 56                 
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 26                 
Correct output: -28                 | Program output: -16                
Correct output: -53                 | Program output: 61                 
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: 3                  
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: 50                 
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 85                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: 62                 
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 85                 
Correct output: -51                 | Program output: 46                 
Correct output: -91                 | Program output: 31                 
Correct output: -56                 | Program output: -50                
Correct output: -94                 | Program output: 88                 
Correct output: -36                 | Program output: 27                 
Correct output: -28                 | Program output: 18                 
Correct output: -33                 | Program output: 68                 
Correct output: -21                 | Program output: 83                 
Correct output: -52                 | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -7                 
Correct output: -77                 | Program output: -72                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: 100                
Correct output: -52                 | Program output: 43                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: 19                 
Correct output: -50                 | Program output: 48                 
Correct output: -97                 | Program output: -49                
Correct output: -91                 | Program output: 13                 
Correct output: -1                  | Program output: 72                 
Correct output: -17                 | Program output: 75                 
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: 80                 
Correct output: -7                  | Program output: 14                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_967} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_749})
Lexicase best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty integer_dec in3 print_integer in2 boolean_rot integer_dup in4 exec_dup_times () exec_flush boolean_empty print_exec (integer_shove boolean_not exec_dup (tagged_967 exec_flush boolean_invert_second_then_and exec_do*range (integer_min exec_swap (integer_yankdup in3 exec_yankdup) (exec_pop (exec_rot (tagged_749) () ()))))))
Lexicase best errors: [1 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_967} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_749})
Zero cases best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty integer_dec in3 print_integer in2 boolean_rot integer_dup in4 exec_dup_times () exec_flush boolean_empty print_exec (integer_shove boolean_not exec_dup (tagged_967 exec_flush boolean_invert_second_then_and exec_do*range (integer_min exec_swap (integer_yankdup in3 exec_yankdup) (exec_pop (exec_rot (tagged_749) () ()))))))
Zero cases best errors: [1 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 903 190 285 317 286 189 191 111 189)
Population mean number of elite cases: 2.98
Count of perfect (error zero) individuals by case: (317 903 190 285 317 286 189 191 111 189)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_967} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup exec_do*count (exec_empty in1 in3 print_integer in2 boolean_rot integer_dup in4 exec_dup_times () exec_flush) boolean_empty print_exec (integer_shove exec_when (exec_dup (tagged_967 exec_flush boolean_invert_second_then_and exec_do*range (integer_min exec_swap () ())))))
Errors: [1 0 0 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 7.022
Median total errors in population: 7
Error averages by case: (0.683 0.097 0.81 0.715 0.683 0.714 0.811 0.809 0.889 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.939
Average program size in population (points): 42.43
Average percent parens in population: 0.286
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.5584375
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2864284
--- Timings ---
Current time: 1559583196851 milliseconds
Total Time:          18.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.1 seconds, 59.2%
Fitness Testing:      4.7 seconds, 25.2%
Report:               2.8 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 82                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 40                 
Correct output: 5                   | Program output: 94                 
Correct output: 21                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 50                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 24                 
Correct output: 16                  | Program output: 87                 
Correct output: 0                   | Program output: 74                 
Correct output: 40                  | Program output: 80                 
Correct output: 34                  | Program output: 62                 
Correct output: 27                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 75                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -60                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 80                 
Correct output: -100                | Program output: 80                 
Correct output: 4                   | Program output: 56                 
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 26                 
Correct output: -28                 | Program output: -16                
Correct output: -53                 | Program output: 61                 
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: 3                  
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: 50                 
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 85                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: 62                 
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 85                 
Correct output: -51                 | Program output: 46                 
Correct output: -91                 | Program output: 31                 
Correct output: -56                 | Program output: -50                
Correct output: -94                 | Program output: 88                 
Correct output: -36                 | Program output: 27                 
Correct output: -28                 | Program output: 18                 
Correct output: -33                 | Program output: 68                 
Correct output: -21                 | Program output: 83                 
Correct output: -52                 | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -7                 
Correct output: -77                 | Program output: -72                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: 100                
Correct output: -52                 | Program output: 43                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: 19                 
Correct output: -50                 | Program output: 48                 
Correct output: -97                 | Program output: -49                
Correct output: -91                 | Program output: 13                 
Correct output: -1                  | Program output: 72                 
Correct output: -17                 | Program output: 75                 
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: 80                 
Correct output: -7                  | Program output: 14                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_158})
Lexicase best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty integer_dec in3 print_integer exec_rot (integer_swap tag_exec_788 (exec_s_when_autoconstructing (boolean_dup integer_dec integer_dup_times boolean_yank tag_integer_158) () ())) () ())
Lexicase best errors: [0 1 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_158})
Zero cases best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty integer_dec in3 print_integer exec_rot (integer_swap tag_exec_788 (exec_s_when_autoconstructing (boolean_dup integer_dec integer_dup_times boolean_yank tag_integer_158) () ())) () ())
Zero cases best errors: [0 1 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (392 310 401 212 393 915 204 491 914 212)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (392 310 401 212 393 915 204 491 914 212)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_967} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction 4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_noop})
Best program: (boolean_or boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty integer_dec in3 print_integer in2 boolean_rot integer_dup in4 exec_dup_times () exec_flush boolean_empty print_exec (integer_shove boolean_not exec_dup (tagged_967 exec_flush integer_min exec_pop (4 boolean_dup_times exec_do*while (print_newline) exec_when (boolean_dup_items boolean_dup_times boolean_rot) boolean_frominteger exec_do*while (integer_dup integer_dup_items exec_do*count (boolean_dup_items) integer_div) integer_dup) integer_fromboolean exec_noop)))
Errors: [0 1 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 5.556
Median total errors in population: 5
Error averages by case: (0.608 0.69 0.599 0.788 0.607 0.085 0.796 0.509 0.086 0.788)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.005
Average program size in population (points): 44.478
Average percent parens in population: 0.275
Minimum age in population: 6.625
Maximum age in population: 10.8125
Average age in population: 9.026875
Median age in population: 9.109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3288350
--- Timings ---
Current time: 1559583199407 milliseconds
Total Time:          21.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.9 seconds, 60.5%
Fitness Testing:      5.3 seconds, 24.7%
Report:               3.0 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction tagged_313} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_749})
Lexicase best program: (boolean_pop boolean_not exec_yankdup tagged_313 in2 integer_fromboolean boolean_empty boolean_swap integer_add exec_swap () (integer_mod boolean_invert_first_then_and print_integer boolean_pop integer_stackdepth boolean_invert_second_then_and) integer_swap exec_yankdup boolean_eq boolean_frominteger in3 exec_yankdup exec_pop (exec_pop (exec_rot (tagged_749) () ())))
Lexicase best errors: [0 1 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction tagged_313} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_749})
Zero cases best program: (boolean_pop boolean_not exec_yankdup tagged_313 in2 integer_fromboolean boolean_empty boolean_swap integer_add exec_swap () (integer_mod boolean_invert_first_then_and print_integer boolean_pop integer_stackdepth boolean_invert_second_then_and) integer_swap exec_yankdup boolean_eq boolean_frominteger in3 exec_yankdup exec_pop (exec_pop (exec_rot (tagged_749) () ())))
Zero cases best errors: [0 1 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (293 99 293 116 293 402 393 809 116 913)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (293 99 293 116 293 402 393 809 116 913)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Best program: (exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Errors: [0 1 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 10
Size: 16
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 6.273
Median total errors in population: 7
Error averages by case: (0.707 0.901 0.707 0.884 0.707 0.598 0.607 0.191 0.884 0.087)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.958
Average program size in population (points): 42.781
Average percent parens in population: 0.270
Minimum age in population: 7.75
Maximum age in population: 12.609375
Average age in population: 10.463203125
Median age in population: 10.5390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3667896
--- Timings ---
Current time: 1559583202221 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.1 seconds, 62.4%
Fitness Testing:      5.7 seconds, 23.7%
Report:               3.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction tag_exec_792} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_158})
Lexicase best program: (boolean_or integer_sub in1 boolean_eq exec_empty print_integer boolean_pop integer_stackdepth boolean_invert_second_then_and integer_swap exec_yankdup boolean_eq boolean_frominteger integer_empty exec_y (integer_shove exec_s (exec_rot (integer_swap tag_exec_788 (tag_exec_792 (boolean_dup) integer_dec integer_dup_times boolean_yank tag_integer_158)) () ()) () ()))
Lexicase best errors: [1 0 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction tag_exec_792} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_158})
Zero cases best program: (boolean_or integer_sub in1 boolean_eq exec_empty print_integer boolean_pop integer_stackdepth boolean_invert_second_then_and integer_swap exec_yankdup boolean_eq boolean_frominteger integer_empty exec_y (integer_shove exec_s (exec_rot (integer_swap tag_exec_788 (tag_exec_792 (boolean_dup) integer_dec integer_dup_times boolean_yank tag_integer_158)) () ()) () ()))
Zero cases best errors: [1 0 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 566 933 139 674 255 105 427 429 138)
Population mean number of elite cases: 3.92
Count of perfect (error zero) individuals by case: (255 566 933 139 674 255 105 427 429 138)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction tagged_313} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 3, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction 78} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times})
Best program: (boolean_pop boolean_not exec_yankdup tagged_313 in2 integer_fromboolean boolean_empty boolean_swap integer_add exec_swap () (integer_mod boolean_invert_first_then_and print_integer boolean_pop integer_stackdepth boolean_invert_second_then_and) integer_swap exec_yankdup boolean_eq boolean_frominteger integer_empty exec_y (integer_shove exec_s (exec_rot (integer_swap tag_exec_788 (78 boolean_dup integer_dec integer_dup_times)) () ()) () ()))
Errors: [1 0 0 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 42
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.079
Median total errors in population: 5
Error averages by case: (0.745 0.434 0.067 0.861 0.326 0.745 0.895 0.573 0.571 0.862)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.492
Average program size in population (points): 37.526
Average percent parens in population: 0.282
Minimum age in population: 9.25
Maximum age in population: 14.59375
Average age in population: 11.9292265625
Median age in population: 11.99609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4150330
--- Timings ---
Current time: 1559583205607 milliseconds
Total Time:          26.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.0 seconds, 63.3%
Fitness Testing:      6.3 seconds, 23.5%
Report:               3.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Lexicase best program: (boolean_pop boolean_swap integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Lexicase best errors: [0 1 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Zero cases best program: (boolean_pop boolean_swap integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Zero cases best errors: [0 1 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (635 261 265 106 611 105 267 267 573 267)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (635 261 265 106 611 105 267 267 573 267)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Errors: [0 1 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 12
Size: 18
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.643
Median total errors in population: 6
Error averages by case: (0.365 0.739 0.735 0.894 0.389 0.895 0.733 0.733 0.427 0.733)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.995
Average program size in population (points): 33.198
Average percent parens in population: 0.262
Minimum age in population: 10.3125
Maximum age in population: 15.21875
Average age in population: 13.43498046875
Median age in population: 13.50390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4588740
--- Timings ---
Current time: 1559583208145 milliseconds
Total Time:          30.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.9 seconds, 62.7%
Fitness Testing:      6.8 seconds, 22.8%
Report:               4.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 53                 
Correct output: -65                 | Program output: 28                 
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 50                 
Correct output: 25                  | Program output: 70                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 66                 
Correct output: 0                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 39                 
Correct output: 3                   | Program output: 29                 
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 92                 
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 58                 
Correct output: 3                   | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: 36                 
Correct output: -97                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 100                
Correct output: -7                  | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 64                 
Correct output: -28                 | Program output: 38                 
Correct output: -53                 | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -11                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: 85                 
Correct output: 17                  | Program output: 38                 
Correct output: -69                 | Program output: 20                 
Correct output: -89                 | Program output: -13                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: 2                  
Correct output: -98                 | Program output: 50                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: 92                 
Correct output: -64                 | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: -51                 | Program output: 90                 
Correct output: -91                 | Program output: -5                 
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: 7                  
Correct output: -36                 | Program output: -9                 
Correct output: -28                 | Program output: 1                  
Correct output: -33                 | Program output: 88                 
Correct output: -21                 | Program output: -19                
Correct output: -52                 | Program output: 44                 
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: 71                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 89                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 54                 
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_max integer_sub in1 in4 integer_yankdup print_integer exec_k_when_autoconstructing (boolean_yankdup) (print_boolean in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [1 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_max integer_sub in1 in4 integer_yankdup print_integer exec_k_when_autoconstructing (boolean_yankdup) (print_boolean in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [1 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 195 1 195 465 195 195 465 928 1)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (257 195 1 195 465 195 195 465 928 1)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction tag_exec_792} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_158})
Best program: (boolean_or integer_sub in1 boolean_eq exec_empty print_integer boolean_pop integer_stackdepth boolean_invert_second_then_and integer_swap exec_yankdup boolean_eq boolean_frominteger integer_empty exec_y (integer_shove exec_s (exec_rot (integer_swap tag_exec_788 (tag_exec_792 (boolean_dup) integer_dec integer_dup_times boolean_yank tag_integer_158)) () ()) () ()))
Errors: [1 0 1 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 36
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 7.103
Median total errors in population: 7
Error averages by case: (0.743 0.805 0.999 0.805 0.535 0.805 0.805 0.535 0.072 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.002
Average program size in population (points): 34.23
Average percent parens in population: 0.263
Minimum age in population: 12.25
Maximum age in population: 16.9140625
Average age in population: 14.999013671875
Median age in population: 15.1083984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4949184
--- Timings ---
Current time: 1559583211676 milliseconds
Total Time:          33.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.1 seconds, 64.1%
Fitness Testing:      7.3 seconds, 22.1%
Report:               4.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Lexicase best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Lexicase best errors: [1 1 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Zero cases best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Zero cases best errors: [1 1 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (81 417 203 236 937 519 202 416 202 619)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (81 417 203 236 937 519 202 416 202 619)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction -70} {:close 0, :instruction integer_dup})
Best program: (in4 in2 print_integer integer_gt boolean_eq boolean_frominteger integer_empty exec_y (integer_shove exec_s (tag_integer_892 exec_s (exec_empty -70 integer_dup) () ()) () ()))
Errors: [1 1 0 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 15
Size: 23
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 6.168
Median total errors in population: 6
Error averages by case: (0.919 0.583 0.797 0.764 0.063 0.481 0.798 0.584 0.798 0.381)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.917
Average program size in population (points): 26.814
Average percent parens in population: 0.245
Minimum age in population: 13.25
Maximum age in population: 18.4423828125
Average age in population: 16.556169921875
Median age in population: 16.57421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 188
Genome diversity (% unique genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5273316
--- Timings ---
Current time: 1559583214714 milliseconds
Total Time:          36.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 63.8%
Fitness Testing:      7.7 seconds, 21.3%
Report:               5.3 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: 76                 
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: 98                 
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 61                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 79                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 100                
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 74                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 74                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 64                 
Correct output: 34                  | Program output: 69                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: 47                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 85                 
Correct output: -100                | Program output: 40                 
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: 35                 
Correct output: -88                 | Program output: 64                 
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: 35                 
Correct output: -98                 | Program output: 8                  
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 57                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 64                 
Correct output: -97                 | Program output: 4                  
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: 22                 
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: 75                 
Correct output: -50                 | Program output: 41                 
Correct output: -97                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: 96                 
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: 77                 
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 43                 
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_967} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot})
Lexicase best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty exec_do*range (in2 print_integer in2 boolean_rot) integer_dup in4 exec_s () (exec_flush) (boolean_empty integer_gt integer_shove boolean_not exec_dup (tagged_967 exec_flush boolean_invert_second_then_and exec_do*range (integer_min exec_swap (integer_yankdup in3 exec_yankdup) (exec_pop (exec_rot () () ()))))))
Lexicase best errors: [0 1 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_967} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot})
Zero cases best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty exec_do*range (in2 print_integer in2 boolean_rot) integer_dup in4 exec_s () (exec_flush) (boolean_empty integer_gt integer_shove boolean_not exec_dup (tagged_967 exec_flush boolean_invert_second_then_and exec_do*range (integer_min exec_swap (integer_yankdup in3 exec_yankdup) (exec_pop (exec_rot () () ()))))))
Zero cases best errors: [0 1 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (442 124 124 696 129 925 124 442 225 445)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (442 124 124 696 129 925 124 442 225 445)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Best program: (boolean_or integer_sub in1 in4 boolean_invert_second_then_and print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Errors: [1 0 0 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.324
Median total errors in population: 5
Error averages by case: (0.558 0.876 0.876 0.304 0.871 0.075 0.876 0.558 0.775 0.555)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.652
Average program size in population (points): 28.017
Average percent parens in population: 0.254
Minimum age in population: 15.1171875
Maximum age in population: 19.9794921875
Average age in population: 18.0526337890625
Median age in population: 18.15673828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5614931
--- Timings ---
Current time: 1559583217205 milliseconds
Total Time:          39.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.9 seconds, 63.6%
Fitness Testing:      8.1 seconds, 20.6%
Report:               6.1 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 75                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 82                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 29                  | Program output: 42                 
Correct output: 22                  | Program output: 40                 
Correct output: 5                   | Program output: 94                 
Correct output: 21                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 30                  | Program output: 39                 
Correct output: 40                  | Program output: 50                 
Correct output: 15                  | Program output: 72                 
Correct output: 3                   | Program output: 24                 
Correct output: 16                  | Program output: 87                 
Correct output: 0                   | Program output: 74                 
Correct output: 40                  | Program output: 80                 
Correct output: 34                  | Program output: 62                 
Correct output: 27                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 22                  | Program output: 75                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -60                
Correct output: -68                 | Program output: -64                
Correct output: -42                 | Program output: 39                 
Correct output: 7                   | Program output: 80                 
Correct output: -100                | Program output: 80                 
Correct output: 4                   | Program output: 56                 
Correct output: -7                  | Program output: 9                  
Correct output: -78                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 26                 
Correct output: -28                 | Program output: -16                
Correct output: -53                 | Program output: 61                 
Correct output: -79                 | Program output: -46                
Correct output: -98                 | Program output: 3                  
Correct output: -12                 | Program output: -4                 
Correct output: -70                 | Program output: 50                 
Correct output: -84                 | Program output: -41                
Correct output: 17                  | Program output: 20                 
Correct output: -69                 | Program output: 85                 
Correct output: -89                 | Program output: -89                
Correct output: -6                  | Program output: -6                 
Correct output: 13                  | Program output: 13                 
Correct output: -89                 | Program output: 41                 
Correct output: -76                 | Program output: 62                 
Correct output: -98                 | Program output: -98                
Correct output: -46                 | Program output: -46                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -36                
Correct output: -64                 | Program output: -64                
Correct output: 9                   | Program output: 85                 
Correct output: -51                 | Program output: 46                 
Correct output: -91                 | Program output: 31                 
Correct output: -56                 | Program output: -50                
Correct output: -94                 | Program output: 88                 
Correct output: -36                 | Program output: 27                 
Correct output: -28                 | Program output: 18                 
Correct output: -33                 | Program output: 68                 
Correct output: -21                 | Program output: 83                 
Correct output: -52                 | Program output: 39                 
Correct output: -56                 | Program output: -56                
Correct output: -97                 | Program output: -7                 
Correct output: -77                 | Program output: -72                
Correct output: -93                 | Program output: -53                
Correct output: -48                 | Program output: 100                
Correct output: -52                 | Program output: 43                 
Correct output: -18                 | Program output: 17                 
Correct output: -97                 | Program output: 19                 
Correct output: -50                 | Program output: 48                 
Correct output: -97                 | Program output: -49                
Correct output: -91                 | Program output: 13                 
Correct output: -1                  | Program output: 72                 
Correct output: -17                 | Program output: 75                 
Correct output: -54                 | Program output: -46                
Correct output: -54                 | Program output: 80                 
Correct output: -7                  | Program output: 14                 
Correct output: -10                 | Program output: -10                
Correct output: 6                   | Program output: 26                 
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: 22                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction -52} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_158})
Lexicase best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup -52 exec_empty integer_dec in3 print_integer exec_dup_times (boolean_invert_second_then_and) integer_swap exec_yankdup boolean_eq boolean_frominteger integer_empty exec_y (integer_shove exec_s (exec_rot (integer_swap tag_exec_788 (exec_s_when_autoconstructing (boolean_dup integer_dec integer_dup_times boolean_yank tag_integer_158) () ())) () ()) () ()))
Lexicase best errors: [0 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction -52} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_158})
Zero cases best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup -52 exec_empty integer_dec in3 print_integer exec_dup_times (boolean_invert_second_then_and) integer_swap exec_yankdup boolean_eq boolean_frominteger integer_empty exec_y (integer_shove exec_s (exec_rot (integer_swap tag_exec_788 (exec_s_when_autoconstructing (boolean_dup integer_dec integer_dup_times boolean_yank tag_integer_158) () ())) () ()) () ()))
Zero cases best errors: [0 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (588 590 364 361 114 115 110 841 361 117)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (588 590 364 361 114 115 110 841 361 117)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (boolean_or integer_sub in1 boolean_eq exec_empty boolean_yankdup exec_do*count () exec_empty integer_dec in3 print_integer in2 boolean_rot integer_gte in4 exec_dup_times () exec_flush boolean_empty print_exec (integer_shove exec_yankdup integer_gte) boolean_frominteger integer_empty exec_y (integer_shove exec_s (exec_s () () ()) () ()))
Errors: [0 0 1 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 39
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.439
Median total errors in population: 7
Error averages by case: (0.412 0.41 0.636 0.639 0.886 0.885 0.89 0.159 0.639 0.883)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.477
Average program size in population (points): 24.741
Average percent parens in population: 0.243
Minimum age in population: 16.77734375
Maximum age in population: 21.487060546875
Average age in population: 19.60606298828125
Median age in population: 19.651123046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 206
Genome diversity (% unique genomes):	 0.493
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 218
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5872899
--- Timings ---
Current time: 1559583219888 milliseconds
Total Time:          41.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.1 seconds, 64.8%
Fitness Testing:      8.4 seconds, 20.1%
Report:               6.2 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction tagged_313} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_pop boolean_not exec_yankdup tagged_313 in2 integer_fromboolean boolean_empty boolean_swap integer_add exec_swap () (integer_mod integer_empty print_integer integer_swap tag_exec_788 (exec_s_when_autoconstructing (boolean_dup integer_dec) () ())))
Lexicase best errors: [0 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction tagged_313} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_pop boolean_not exec_yankdup tagged_313 in2 integer_fromboolean boolean_empty boolean_swap integer_add exec_swap () (integer_mod integer_empty print_integer integer_swap tag_exec_788 (exec_s_when_autoconstructing (boolean_dup integer_dec) () ())))
Zero cases best errors: [0 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (938 243 432 241 798 241 125 136 125 799)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (938 243 432 241 798 241 125 136 125 799)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction tagged_313} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_pop boolean_not exec_yankdup tagged_313 in2 integer_fromboolean boolean_empty boolean_swap integer_add exec_swap () (integer_mod boolean_invert_first_then_and print_integer boolean_pop integer_stackdepth boolean_invert_second_then_and) integer_swap exec_yankdup boolean_eq boolean_frominteger)
Errors: [0 0 1 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 20
Size: 23
Percent parens: 0.130
--- Population Statistics ---
Average total errors in population: 5.922
Median total errors in population: 6
Error averages by case: (0.062 0.757 0.568 0.759 0.202 0.759 0.875 0.864 0.875 0.201)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.348
Average program size in population (points): 29.651
Average percent parens in population: 0.238
Minimum age in population: 17.77734375
Maximum age in population: 23.037841796875
Average age in population: 21.046294921875
Median age in population: 21.11865234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6131955
--- Timings ---
Current time: 1559583222346 milliseconds
Total Time:          44.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.1 seconds, 65.7%
Fitness Testing:      8.7 seconds, 19.6%
Report:               6.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Lexicase best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Lexicase best errors: [0 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Zero cases best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Zero cases best errors: [0 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (425 427 266 150 265 427 266 265 426 426)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (425 427 266 150 265 427 266 265 426 426)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_908} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Best program: (boolean_pop in2 exec_stackdepth tag_integer_908 exec_s (exec_empty print_integer integer_dup in4) () ())
Errors: [0 0 1 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 9
Size: 13
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 6.657
Median total errors in population: 6
Error averages by case: (0.575 0.573 0.734 0.85 0.735 0.573 0.734 0.735 0.574 0.574)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.229
Average program size in population (points): 24.339
Average percent parens in population: 0.246
Minimum age in population: 18.77734375
Maximum age in population: 24.46014404296875
Average age in population: 22.57128607177734
Median age in population: 22.632568359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6380966
--- Timings ---
Current time: 1559583224909 milliseconds
Total Time:          46.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.2 seconds, 66.6%
Fitness Testing:      9.0 seconds, 19.2%
Report:               6.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [1 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [1 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (89 950 465 3 465 4 396 949 464 396)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (89 950 465 3 465 4 396 949 464 396)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Errors: [1 0 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.819
Median total errors in population: 6
Error averages by case: (0.911 0.05 0.535 0.997 0.535 0.996 0.604 0.051 0.536 0.604)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.137
Average program size in population (points): 22.798
Average percent parens in population: 0.243
Minimum age in population: 20.359375
Maximum age in population: 26.09808349609375
Average age in population: 24.10125939941406
Median age in population: 24.16667175292969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.505
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6600504
--- Timings ---
Current time: 1559583227490 milliseconds
Total Time:          49.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.4 seconds, 67.5%
Fitness Testing:      9.2 seconds, 18.7%
Report:               6.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Lexicase best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Lexicase best errors: [0 0 1 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 2, :instruction in4})
Zero cases best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer integer_dup in4) () ()))
Zero cases best errors: [0 0 1 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 326 481 112 479 112 326 511 112 326)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (326 326 481 112 479 112 326 511 112 326)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction tagged_313} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 3, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap})
Best program: (tagged_313 in2 integer_fromboolean boolean_empty boolean_swap integer_add exec_swap () (integer_mod boolean_invert_first_then_and print_integer boolean_pop integer_stackdepth boolean_invert_second_then_and) integer_lte exec_yankdup boolean_eq boolean_frominteger integer_empty exec_swap () ())
Errors: [0 0 1 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.889
Median total errors in population: 7
Error averages by case: (0.674 0.674 0.519 0.888 0.521 0.888 0.674 0.489 0.888 0.674)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.492
Average program size in population (points): 21.674
Average percent parens in population: 0.238
Minimum age in population: 22.74810791015625
Maximum age in population: 27.5206298828125
Average age in population: 26.14228370666504
Median age in population: 26.25625610351562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 405
Genome diversity (% unique genomes):	 0.396
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 416
Syntactic diversity (% unique Push programs):	 0.37
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6774852
--- Timings ---
Current time: 1559583229637 milliseconds
Total Time:          51.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.1 seconds, 68.2%
Fitness Testing:      9.4 seconds, 18.3%
Report:               6.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [0 0 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [0 0 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (670 289 378 933 378 378 937 265 289 287)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (670 289 378 933 378 378 937 265 289 287)
Population mean number of perfect (error zero) cases: 4.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in3 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Errors: [0 0 1 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.196
Median total errors in population: 4
Error averages by case: (0.33 0.711 0.622 0.067 0.622 0.622 0.063 0.735 0.711 0.713)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.485
Average program size in population (points): 24.261
Average percent parens in population: 0.237
Minimum age in population: 24.2130126953125
Maximum age in population: 29.41827392578125
Average age in population: 27.48760257720947
Median age in population: 27.56671905517578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 197
Genome diversity (% unique genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6972962
--- Timings ---
Current time: 1559583232693 milliseconds
Total Time:          54.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.8 seconds, 69.2%
Fitness Testing:      9.7 seconds, 17.7%
Report:               7.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [0 1 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [0 1 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (432 114 437 437 544 401 432 432 113 432)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (432 114 437 437 544 401 432 432 113 432)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_exec_788} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank})
Best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items integer_stackdepth boolean_invert_second_then_and integer_swap exec_yankdup boolean_eq boolean_frominteger integer_empty exec_y (integer_shove exec_s (exec_rot (integer_swap tag_exec_788 (exec_s_when_autoconstructing (boolean_dup integer_dec integer_dup_times boolean_yank) () ())) () ()) () ()))
Errors: [0 1 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 44
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 6.226
Median total errors in population: 7
Error averages by case: (0.568 0.886 0.563 0.563 0.456 0.599 0.568 0.568 0.887 0.568)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.609
Average program size in population (points): 21.881
Average percent parens in population: 0.239
Minimum age in population: 25.58062744140625
Maximum age in population: 31.11261749267578
Average age in population: 29.04602867126465
Median age in population: 29.1450023651123
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 263
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 287
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7158411
--- Timings ---
Current time: 1559583235890 milliseconds
Total Time:          57.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.0 seconds, 69.9%
Fitness Testing:      9.9 seconds, 17.3%
Report:               7.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while})
Lexicase best program: (in4 in2 print_integer exec_k_when_autoconstructing (boolean_yankdup) (in3 in1 boolean_or boolean_dup_items integer_shove) exec_do*while ())
Lexicase best errors: [1 1 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while})
Zero cases best program: (in4 in2 print_integer exec_k_when_autoconstructing (boolean_yankdup) (in3 in1 boolean_or boolean_dup_items integer_shove) exec_do*while ())
Zero cases best errors: [1 1 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 659 81 659 654 81 82 82 216 81)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (216 659 81 659 654 81 82 82 216 81)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 1, :instruction tagged_313} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_pop boolean_not exec_yankdup tagged_313 in2 integer_fromboolean boolean_empty boolean_swap boolean_swap integer_add exec_swap () (integer_mod boolean_invert_first_then_and print_integer boolean_pop) integer_stackdepth boolean_invert_second_then_and integer_swap integer_max integer_empty boolean_frominteger integer_empty exec_y_when_autoconstructing ())
Errors: [1 1 0 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 27
Percent parens: 0.148
--- Population Statistics ---
Average total errors in population: 7.189
Median total errors in population: 7
Error averages by case: (0.784 0.341 0.919 0.341 0.346 0.919 0.918 0.918 0.784 0.919)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.778
Average program size in population (points): 21.663
Average percent parens in population: 0.224
Minimum age in population: 27.69917297363281
Maximum age in population: 32.82485389709473
Average age in population: 30.63296957778931
Median age in population: 30.71606349945068
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 326
Genome diversity (% unique genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 362
Syntactic diversity (% unique Push programs):	 0.393
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7310041
--- Timings ---
Current time: 1559583238253 milliseconds
Total Time:          60.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.0 seconds, 69.8%
Fitness Testing:     10.1 seconds, 16.7%
Report:               8.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (integer_div) (in1 in4) integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (integer_div) (in1 in4) integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (292 291 464 292 290 291 182 946 290 949)
Population mean number of elite cases: 4.29
Count of perfect (error zero) individuals by case: (292 291 464 292 290 291 182 946 290 949)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Errors: [0 0 1 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.713
Median total errors in population: 7
Error averages by case: (0.708 0.709 0.536 0.708 0.71 0.709 0.818 0.054 0.71 0.051)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.67
Average program size in population (points): 22.058
Average percent parens in population: 0.244
Minimum age in population: 29.04623794555664
Maximum age in population: 34.21031284332275
Average age in population: 31.99688841247559
Median age in population: 32.06921768188477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.417
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7504513
--- Timings ---
Current time: 1559583240414 milliseconds
Total Time:          62.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.8 seconds, 70.2%
Fitness Testing:     10.3 seconds, 16.5%
Report:               8.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [1 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [1 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (125 956 713 713 106 713 125 718 125 711)
Population mean number of elite cases: 5.01
Count of perfect (error zero) individuals by case: (125 956 713 713 106 713 125 718 125 711)
Population mean number of perfect (error zero) cases: 5.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Best program: (boolean_or integer_sub boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Errors: [1 0 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 16
Size: 20
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.995
Median total errors in population: 4
Error averages by case: (0.875 0.044 0.287 0.287 0.894 0.287 0.875 0.282 0.875 0.289)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.796
Average program size in population (points): 20.475
Average percent parens in population: 0.227
Minimum age in population: 30.49710083007812
Maximum age in population: 35.75958251953125
Average age in population: 33.55229595375061
Median age in population: 33.61142444610596
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 257
Genome diversity (% unique genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 314
Syntactic diversity (% unique Push programs):	 0.388
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7647520
--- Timings ---
Current time: 1559583242580 milliseconds
Total Time:          64.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.6 seconds, 70.7%
Fitness Testing:     10.5 seconds, 16.2%
Report:               8.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [0 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [0 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (949 530 943 849 99 314 99 99 530 533)
Population mean number of elite cases: 4.95
Count of perfect (error zero) individuals by case: (949 530 943 849 99 314 99 99 530 533)
Population mean number of perfect (error zero) cases: 4.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Best program: (boolean_or integer_sub in1 in4 integer_min integer_yank exec_k (boolean_yankdup) (in3 in1 in4) integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Errors: [0 0 0 0 1 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.055
Median total errors in population: 4
Error averages by case: (0.051 0.47 0.057 0.151 0.901 0.686 0.901 0.901 0.47 0.467)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.33
Average program size in population (points): 22.449
Average percent parens in population: 0.225
Minimum age in population: 32.20054817199707
Maximum age in population: 37.21504402160645
Average age in population: 34.9759644472599
Median age in population: 35.04690277576447
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 176
Genome diversity (% unique genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 216
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 7806206
--- Timings ---
Current time: 1559583244831 milliseconds
Total Time:          66.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.5 seconds, 71.2%
Fitness Testing:     10.7 seconds, 16.0%
Report:               8.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 16                 
Correct output: 25                  | Program output: 92                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 73                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 60                 
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 99                 
Correct output: 0                   | Program output: 86                 
Correct output: 30                  | Program output: 76                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 82                 
Correct output: 3                   | Program output: 16                 
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 47                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 64                 
Correct output: -86                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 78                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: 28                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -22                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: 90                 
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: 30                 
Correct output: 17                  | Program output: 72                 
Correct output: -69                 | Program output: 31                 
Correct output: -89                 | Program output: -5                 
Correct output: -6                  | Program output: 80                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 97                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 77                 
Correct output: -78                 | Program output: -58                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: 1                  
Correct output: -91                 | Program output: 14                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -13                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -3                 
Correct output: -52                 | Program output: -24                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: 34                 
Correct output: -18                 | Program output: 69                 
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -20                
Correct output: -1                  | Program output: 45                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -31                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 65                 
Correct output: 6                   | Program output: 13                 
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction in4})
Lexicase best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer exec_when (in4)) () ()))
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 19
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_892} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction in4})
Zero cases best program: (integer_swap integer_stackdepth exec_shove () exec_dup_times (in2 exec_stackdepth tag_integer_892 exec_s (exec_empty print_integer exec_when (in4)) () ()))
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 19
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (790 351 447 939 350 350 934 137 350 350)
Population mean number of elite cases: 5.00
Count of perfect (error zero) individuals by case: (790 351 447 939 350 350 934 137 350 350)
Population mean number of perfect (error zero) cases: 5.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_invert_second_then_and})
Best program: (integer_gt in2 print_integer exec_k_when_autoconstructing (boolean_pop integer_stackdepth) (boolean_invert_second_then_and))
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 7
Size: 10
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.002
Median total errors in population: 6
Error averages by case: (0.21 0.649 0.553 0.061 0.65 0.65 0.066 0.863 0.65 0.65)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.725
Average program size in population (points): 20.729
Average percent parens in population: 0.239
Minimum age in population: 33.20054817199707
Maximum age in population: 38.40424025058746
Average age in population: 36.35171016991138
Median age in population: 36.42639452219009
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 7967533
--- Timings ---
Current time: 1559583246871 milliseconds
Total Time:          68.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.3 seconds, 71.5%
Fitness Testing:     10.9 seconds, 15.8%
Report:               8.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [1 0 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [1 0 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (684 942 75 177 253 684 686 252 75 75)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (684 942 75 177 253 684 686 252 75 75)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k () (boolean_yankdup) in3 in1 boolean_or boolean_dup_items boolean_frominteger exec_do*while ())
Errors: [1 0 0 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.097
Median total errors in population: 6
Error averages by case: (0.316 0.058 0.925 0.823 0.747 0.316 0.314 0.748 0.925 0.925)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 13.891
Average program size in population (points): 18.839
Average percent parens in population: 0.259
Minimum age in population: 34.51206970214844
Maximum age in population: 39.6014398932457
Average age in population: 37.92085817325115
Median age in population: 37.93581038713455
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.321
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.294
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 8149925
--- Timings ---
Current time: 1559583249227 milliseconds
Total Time:          71.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.2 seconds, 72.0%
Fitness Testing:     11.1 seconds, 15.6%
Report:               8.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (974 968 656 656 142 143 656 510 657 510)
Population mean number of elite cases: 5.87
Count of perfect (error zero) individuals by case: (974 968 656 656 142 143 656 510 657 510)
Population mean number of perfect (error zero) cases: 5.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Best program: (integer_dup_times in3 in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 4.128
Median total errors in population: 2
Error averages by case: (0.026 0.032 0.344 0.344 0.858 0.857 0.344 0.49 0.343 0.49)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.232
Average program size in population (points): 18.79
Average percent parens in population: 0.240
Minimum age in population: 35.51206970214844
Maximum age in population: 41.26263239979744
Average age in population: 39.36674529701471
Median age in population: 39.4585125297308
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.356
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.321
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 8295030
--- Timings ---
Current time: 1559583251318 milliseconds
Total Time:          73.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.0 seconds, 72.3%
Fitness Testing:     11.3 seconds, 15.4%
Report:               8.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or in2 boolean_eq in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [1 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or in2 boolean_eq in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [1 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (478 463 1 948 941 941 942 1 463 1)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (478 463 1 948 941 941 942 1 463 1)
Population mean number of perfect (error zero) cases: 5.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Best program: (boolean_or in2 boolean_eq in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Errors: [1 1 0 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 4.821
Median total errors in population: 5
Error averages by case: (0.522 0.537 0.999 0.052 0.059 0.059 0.058 0.999 0.537 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.571
Average program size in population (points): 18.677
Average percent parens in population: 0.220
Minimum age in population: 36.51206970214844
Maximum age in population: 43.10279294848442
Average age in population: 40.93460530668497
Median age in population: 41.02162615209818
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 287
Genome diversity (% unique genomes):	 0.354
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 309
Syntactic diversity (% unique Push programs):	 0.319
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 8424117
--- Timings ---
Current time: 1559583253463 milliseconds
Total Time:          75.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        54.9 seconds, 72.7%
Fitness Testing:     11.4 seconds, 15.1%
Report:               9.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or in2 boolean_eq in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [1 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or in2 boolean_eq in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [1 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (160 476 963 476 963 976 333 160 963 476)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (160 476 963 476 963 976 333 160 963 476)
Population mean number of perfect (error zero) cases: 5.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Best program: (boolean_or in2 boolean_eq in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Errors: [1 0 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 4.054
Median total errors in population: 4
Error averages by case: (0.84 0.524 0.037 0.524 0.037 0.024 0.667 0.84 0.037 0.524)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.334
Average program size in population (points): 18.426
Average percent parens in population: 0.222
Minimum age in population: 39.56057438254356
Maximum age in population: 44.15882940590382
Average age in population: 42.70933867017925
Median age in population: 42.69460389018059
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 403
Genome diversity (% unique genomes):	 0.29
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 411
Syntactic diversity (% unique Push programs):	 0.266
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 8550716
--- Timings ---
Current time: 1559583255530 milliseconds
Total Time:          77.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 73.1%
Fitness Testing:     11.6 seconds, 14.9%
Report:               9.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or in2 boolean_eq in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or in2 boolean_eq in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (521 521 521 521 832 521 832 521 327 327)
Population mean number of elite cases: 5.44
Count of perfect (error zero) individuals by case: (521 521 521 521 832 521 832 521 327 327)
Population mean number of perfect (error zero) cases: 5.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Best program: (boolean_or in2 boolean_eq in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 4.556
Median total errors in population: 4
Error averages by case: (0.479 0.479 0.479 0.479 0.168 0.479 0.168 0.479 0.673 0.673)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.584
Average program size in population (points): 18.627
Average percent parens in population: 0.217
Minimum age in population: 40.73225420713425
Maximum age in population: 45.88882543891668
Average age in population: 44.29531817280874
Median age in population: 44.41446307301521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 275
Genome diversity (% unique genomes):	 0.348
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 288
Syntactic diversity (% unique Push programs):	 0.312
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 8685757
--- Timings ---
Current time: 1559583257584 milliseconds
Total Time:          79.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.4 seconds, 73.4%
Fitness Testing:     11.7 seconds, 14.7%
Report:               9.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: 58                 
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 59                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 42                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 53                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 27                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -5                 
Correct output: -42                 | Program output: 20                 
Correct output: 7                   | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 4                  
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -18                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 35                 
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 24                 
Correct output: -81                 | Program output: 68                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -47                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: 3                  
Correct output: -97                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -53                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or in2 boolean_eq in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger integer_min print_integer exec_pop (boolean_yankdup) in3 in1 boolean_or boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [0 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or in2 boolean_eq in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger integer_min print_integer exec_pop (boolean_yankdup) in3 in1 boolean_or boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [0 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (854 538 1000 515 1000 2 854 515 538 854)
Population mean number of elite cases: 6.67
Count of perfect (error zero) individuals by case: (854 538 0 515 0 2 854 515 538 854)
Population mean number of perfect (error zero) cases: 4.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Best program: (boolean_or in2 boolean_eq in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.33
Median total errors in population: 5
Error averages by case: (0.146 0.462 1.0 0.485 1.0 0.998 0.146 0.485 0.462 0.146)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 14.239
Average program size in population (points): 18.288
Average percent parens in population: 0.221
Minimum age in population: 43.64671344310045
Maximum age in population: 47.4649159219116
Average age in population: 46.22448512254097
Median age in population: 46.17998030036688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 373
Genome diversity (% unique genomes):	 0.275
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 388
Syntactic diversity (% unique Push programs):	 0.238
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 8830066
--- Timings ---
Current time: 1559583260030 milliseconds
Total Time:          82.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.6 seconds, 73.9%
Fitness Testing:     11.9 seconds, 14.5%
Report:               9.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -30                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 53                 
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 9                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 63                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 38                 
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -24                
Correct output: 4                   | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -4                 
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: 22                 
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -44                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -37                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -66                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -10                
Correct output: 9                   | Program output: 75                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 56                 
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -53                
Correct output: -77                 | Program output: -75                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -18                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -5                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -4                 
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -16                
Correct output: -7                  | Program output: 86                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 8                  
Correct output: -64                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Lexicase best errors: [0 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (in3 in1 boolean_or) boolean_dup_items boolean_frominteger exec_do*while ())
Zero cases best errors: [0 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (528 641 508 846 553 640 528 1000 529 508)
Population mean number of elite cases: 6.28
Count of perfect (error zero) individuals by case: (528 641 508 846 553 640 528 0 529 508)
Population mean number of perfect (error zero) cases: 5.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while})
Best program: (boolean_or integer_sub in1 in4 integer_min print_integer exec_k (boolean_yankdup) (boolean_dup_items boolean_frominteger) exec_do*while ())
Errors: [0 1 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 11
Size: 15
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 4.719
Median total errors in population: 4
Error averages by case: (0.472 0.359 0.492 0.154 0.447 0.36 0.472 1.0 0.471 0.492)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 14.255
Average program size in population (points): 18.236
Average percent parens in population: 0.218
Minimum age in population: 44.64671344310045
Maximum age in population: 49.34310557320714
Average age in population: 47.65796093251649
Median age in population: 47.73860099352896
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 216
Genome diversity (% unique genomes):	 0.345
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 237
Syntactic diversity (% unique Push programs):	 0.298
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 8970040
--- Timings ---
Current time: 1559583262313 milliseconds
Total Time:          84.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.6 seconds, 74.2%
Fitness Testing:     12.0 seconds, 14.3%
Report:               9.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 207
Test mean error for best: 0.20700
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1})
Lexicase best program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 16
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1})
Zero cases best program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 16
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (679 540 676 540 680 680 949 675 960 676)
Population mean number of elite cases: 7.05
Count of perfect (error zero) individuals by case: (679 540 676 540 680 680 949 675 960 676)
Population mean number of perfect (error zero) cases: 7.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in1})
Best program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 13
Size: 16
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 2.945
Median total errors in population: 3
Error averages by case: (0.321 0.46 0.324 0.46 0.32 0.32 0.051 0.325 0.04 0.324)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.678
Average program size in population (points): 18.829
Average percent parens in population: 0.220
Minimum age in population: 45.64671344310045
Maximum age in population: 51.13845342071727
Average age in population: 49.08401056976849
Median age in population: 49.08790885959752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.384
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.336
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 9112102
--- Timings ---
Current time: 1559583264552 milliseconds
Total Time:          86.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.5 seconds, 74.6%
Fitness Testing:     12.2 seconds, 14.1%
Report:               9.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 32
Successful program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 16


Auto-simplifying with starting size: 16
step: 0
program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 500
program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 1000
program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 1500
program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 2000
program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 2500
program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 3000
program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 3500
program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 4000
program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 4500
program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

step: 5000
program: (in2 boolean_or integer_sub in1 in4 integer_min integer_min print_integer exec_k (boolean_yankdup in3 in3 in1) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 16

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 207
Test mean error for best: 0.20700
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: 34                  | Program output: 34                 
Correct output: -50                 | Program output: -50                
Correct output: -78                 | Program output: -49                
Correct output: 18                  | Program output: 18                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: 51                  | Program output: 51                 
Correct output: -17                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -60                 | Program output: -60                
Correct output: -35                 | Program output: -35                
Correct output: 23                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 25                  | Program output: 33                 
Correct output: 6                   | Program output: 8                  
Correct output: 29                  | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 65                 
Correct output: 0                   | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 40                  | Program output: 40                 
Correct output: 15                  | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 16                  | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 40                 
Correct output: 34                  | Program output: 34                 
Correct output: 27                  | Program output: 27                 
Correct output: 3                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: -86                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -42                 | Program output: -42                
Correct output: 7                   | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: 4                   | Program output: 4                  
Correct output: -7                  | Program output: -7                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -28                 | Program output: -28                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -12                 | Program output: -12                
Correct output: -70                 | Program output: -70                
Correct output: -84                 | Program output: -84                
Correct output: 17                  | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -89                 | Program output: -33                
Correct output: -6                  | Program output: 3                  
Correct output: 13                  | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: 26                 
Correct output: -46                 | Program output: 11                 
Correct output: -81                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -64                 | Program output: -30                
Correct output: 9                   | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -28                 | Program output: -28                
Correct output: -33                 | Program output: -33                
Correct output: -21                 | Program output: -21                
Correct output: -52                 | Program output: -52                
Correct output: -56                 | Program output: -36                
Correct output: -97                 | Program output: -97                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -17                 | Program output: -17                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -7                  | Program output: -7                 
Correct output: -10                 | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: -46                 | Program output: 2                  
Correct output: -64                 | Program output: -64                
;;******************************
