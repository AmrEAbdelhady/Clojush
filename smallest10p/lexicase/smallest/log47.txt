Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-98 -100 -100 -100] -100] [[11 11 11 5] 5] [[-27 -27 -27 -42] -42] [[51 51 52 51] 51] [[40 40 -80 40] -80] [[-32 -54 -54 -54] -54] [[-1 95 95 95] -1] [[24 24 24 -43] -43] [[-93 -93 73 -93] -93] [[-97 88 88 88] -97] [(42 42 42 42) 42] [(-59 -59 -59 -59) -59] [(56 56 56 56) 56] [(100 100 100 100) 100] [(8 8 8 8) 8] [(74 50 12 78) 12] [(28 71 12 78) 12] [(58 65 23 14) 14] [(53 40 99 92) 40] [(3 72 80 92) 3] [(57 75 58 10) 10] [(1 86 89 78) 1] [(81 0 90 7) 0] [(81 27 60 78) 27] [(76 21 30 40) 21] [(17 46 81 10) 10] [(49 42 32 96) 32] [(51 94 81 1) 1] [(72 74 68 94) 68] [(52 65 96 96) 52] [(27 13 31 95) 13] [(19 36 86 41) 19] [(54 25 19 24) 19] [(36 56 7 71) 7] [(71 47 33 78) 33] [(-64 -99 44 96) -99] [(-7 10 60 -54) -54] [(-65 70 -2 -98) -98] [(-55 -58 -23 -79) -79] [(94 -85 -96 -75) -96] [(16 94 -19 -10) -19] [(-47 -77 -4 86) -77] [(67 -91 -6 -26) -91] [(-77 -73 33 14) -77] [(29 40 95 -95) -95] [(-12 -58 95 68) -58] [(-43 -28 73 -74) -74] [(94 -28 77 93) -28] [(60 18 -57 56) -57] [(11 -71 15 -30) -71] [(10 85 46 -100) -100] [(-5 -32 -93 -15) -93] [(-85 94 77 82) -85] [(54 100 90 69) 54] [(50 89 -35 74) -35] [(37 -20 66 -44) -44] [(-48 66 86 71) -48] [(-94 -81 11 -51) -94] [(-62 46 52 -59) -62] [(-2 -30 -48 43) -48] [(-32 43 -65 -2) -65] [(-93 73 88 -56) -93] [(10 -40 -57 69) -57] [(-12 14 20 36) -12] [(93 -72 -85 -25) -85] [(45 -87 70 80) -87] [(88 18 16 -96) -96] [(-62 -88 -80 -61) -88] [(19 56 49 -4) -4] [(-17 -79 -2 -38) -79] [(-1 -14 24 80) -14] [(-50 68 -96 9) -96] [(41 -55 70 91) -55] [(-93 -86 -9 -40) -93] [(64 -87 -59 73) -87] [(55 71 -17 7) -17] [(-27 13 39 11) -27] [(48 34 34 -68) -68] [(-29 45 -3 -50) -50] [(-70 -59 36 56) -70] [(28 -74 -37 -85) -85] [(-28 -9 99 -64) -64] [(36 -69 -32 -2) -69] [(100 58 -2 61) -2] [(3 63 -68 -79) -79] [(42 67 -100 37) -100] [(0 14 -92 9) -92] [(39 -81 -15 97) -81] [(35 84 -38 -43) -43] [(65 -17 90 84) -17] [(79 -63 42 -78) -78] [(-55 -24 -38 58) -55] [(-4 10 15 -100) -100] [(40 -48 61 -4) -48] [(99 100 -74 -81) -81])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-98 -100 -100 -100] -100]
Train Case:   6 | Input/Output: [[11 11 11 5] 5]
Train Case:   7 | Input/Output: [[-27 -27 -27 -42] -42]
Train Case:   8 | Input/Output: [[51 51 52 51] 51]
Train Case:   9 | Input/Output: [[40 40 -80 40] -80]
Train Case:  10 | Input/Output: [[-32 -54 -54 -54] -54]
Train Case:  11 | Input/Output: [[-1 95 95 95] -1]
Train Case:  12 | Input/Output: [[24 24 24 -43] -43]
Train Case:  13 | Input/Output: [[-93 -93 73 -93] -93]
Train Case:  14 | Input/Output: [[-97 88 88 88] -97]
Train Case:  15 | Input/Output: [(42 42 42 42) 42]
Train Case:  16 | Input/Output: [(-59 -59 -59 -59) -59]
Train Case:  17 | Input/Output: [(56 56 56 56) 56]
Train Case:  18 | Input/Output: [(100 100 100 100) 100]
Train Case:  19 | Input/Output: [(8 8 8 8) 8]
Train Case:  20 | Input/Output: [(74 50 12 78) 12]
Train Case:  21 | Input/Output: [(28 71 12 78) 12]
Train Case:  22 | Input/Output: [(58 65 23 14) 14]
Train Case:  23 | Input/Output: [(53 40 99 92) 40]
Train Case:  24 | Input/Output: [(3 72 80 92) 3]
Train Case:  25 | Input/Output: [(57 75 58 10) 10]
Train Case:  26 | Input/Output: [(1 86 89 78) 1]
Train Case:  27 | Input/Output: [(81 0 90 7) 0]
Train Case:  28 | Input/Output: [(81 27 60 78) 27]
Train Case:  29 | Input/Output: [(76 21 30 40) 21]
Train Case:  30 | Input/Output: [(17 46 81 10) 10]
Train Case:  31 | Input/Output: [(49 42 32 96) 32]
Train Case:  32 | Input/Output: [(51 94 81 1) 1]
Train Case:  33 | Input/Output: [(72 74 68 94) 68]
Train Case:  34 | Input/Output: [(52 65 96 96) 52]
Train Case:  35 | Input/Output: [(27 13 31 95) 13]
Train Case:  36 | Input/Output: [(19 36 86 41) 19]
Train Case:  37 | Input/Output: [(54 25 19 24) 19]
Train Case:  38 | Input/Output: [(36 56 7 71) 7]
Train Case:  39 | Input/Output: [(71 47 33 78) 33]
Train Case:  40 | Input/Output: [(-64 -99 44 96) -99]
Train Case:  41 | Input/Output: [(-7 10 60 -54) -54]
Train Case:  42 | Input/Output: [(-65 70 -2 -98) -98]
Train Case:  43 | Input/Output: [(-55 -58 -23 -79) -79]
Train Case:  44 | Input/Output: [(94 -85 -96 -75) -96]
Train Case:  45 | Input/Output: [(16 94 -19 -10) -19]
Train Case:  46 | Input/Output: [(-47 -77 -4 86) -77]
Train Case:  47 | Input/Output: [(67 -91 -6 -26) -91]
Train Case:  48 | Input/Output: [(-77 -73 33 14) -77]
Train Case:  49 | Input/Output: [(29 40 95 -95) -95]
Train Case:  50 | Input/Output: [(-12 -58 95 68) -58]
Train Case:  51 | Input/Output: [(-43 -28 73 -74) -74]
Train Case:  52 | Input/Output: [(94 -28 77 93) -28]
Train Case:  53 | Input/Output: [(60 18 -57 56) -57]
Train Case:  54 | Input/Output: [(11 -71 15 -30) -71]
Train Case:  55 | Input/Output: [(10 85 46 -100) -100]
Train Case:  56 | Input/Output: [(-5 -32 -93 -15) -93]
Train Case:  57 | Input/Output: [(-85 94 77 82) -85]
Train Case:  58 | Input/Output: [(54 100 90 69) 54]
Train Case:  59 | Input/Output: [(50 89 -35 74) -35]
Train Case:  60 | Input/Output: [(37 -20 66 -44) -44]
Train Case:  61 | Input/Output: [(-48 66 86 71) -48]
Train Case:  62 | Input/Output: [(-94 -81 11 -51) -94]
Train Case:  63 | Input/Output: [(-62 46 52 -59) -62]
Train Case:  64 | Input/Output: [(-2 -30 -48 43) -48]
Train Case:  65 | Input/Output: [(-32 43 -65 -2) -65]
Train Case:  66 | Input/Output: [(-93 73 88 -56) -93]
Train Case:  67 | Input/Output: [(10 -40 -57 69) -57]
Train Case:  68 | Input/Output: [(-12 14 20 36) -12]
Train Case:  69 | Input/Output: [(93 -72 -85 -25) -85]
Train Case:  70 | Input/Output: [(45 -87 70 80) -87]
Train Case:  71 | Input/Output: [(88 18 16 -96) -96]
Train Case:  72 | Input/Output: [(-62 -88 -80 -61) -88]
Train Case:  73 | Input/Output: [(19 56 49 -4) -4]
Train Case:  74 | Input/Output: [(-17 -79 -2 -38) -79]
Train Case:  75 | Input/Output: [(-1 -14 24 80) -14]
Train Case:  76 | Input/Output: [(-50 68 -96 9) -96]
Train Case:  77 | Input/Output: [(41 -55 70 91) -55]
Train Case:  78 | Input/Output: [(-93 -86 -9 -40) -93]
Train Case:  79 | Input/Output: [(64 -87 -59 73) -87]
Train Case:  80 | Input/Output: [(55 71 -17 7) -17]
Train Case:  81 | Input/Output: [(-27 13 39 11) -27]
Train Case:  82 | Input/Output: [(48 34 34 -68) -68]
Train Case:  83 | Input/Output: [(-29 45 -3 -50) -50]
Train Case:  84 | Input/Output: [(-70 -59 36 56) -70]
Train Case:  85 | Input/Output: [(28 -74 -37 -85) -85]
Train Case:  86 | Input/Output: [(-28 -9 99 -64) -64]
Train Case:  87 | Input/Output: [(36 -69 -32 -2) -69]
Train Case:  88 | Input/Output: [(100 58 -2 61) -2]
Train Case:  89 | Input/Output: [(3 63 -68 -79) -79]
Train Case:  90 | Input/Output: [(42 67 -100 37) -100]
Train Case:  91 | Input/Output: [(0 14 -92 9) -92]
Train Case:  92 | Input/Output: [(39 -81 -15 97) -81]
Train Case:  93 | Input/Output: [(35 84 -38 -43) -43]
Train Case:  94 | Input/Output: [(65 -17 90 84) -17]
Train Case:  95 | Input/Output: [(79 -63 42 -78) -78]
Train Case:  96 | Input/Output: [(-55 -24 -38 58) -55]
Train Case:  97 | Input/Output: [(-4 10 15 -100) -100]
Train Case:  98 | Input/Output: [(40 -48 61 -4) -48]
Train Case:  99 | Input/Output: [(99 100 -74 -81) -81]
Test Case:   0 | Input/Output: [[-8 -62 -62 -62] -62]
Test Case:   1 | Input/Output: [[56 56 56 100] 56]
Test Case:   2 | Input/Output: [[50 50 50 54] 50]
Test Case:   3 | Input/Output: [[-48 -48 -29 -48] -48]
Test Case:   4 | Input/Output: [[30 30 30 -94] -94]
Test Case:   5 | Input/Output: [[54 54 54 5] 5]
Test Case:   6 | Input/Output: [[-78 82 82 82] -78]
Test Case:   7 | Input/Output: [[-21 -2 -21 -21] -21]
Test Case:   8 | Input/Output: [[7 93 93 93] 7]
Test Case:   9 | Input/Output: [[83 -66 -66 -66] -66]
Test Case:  10 | Input/Output: [[-30 72 72 72] -30]
Test Case:  11 | Input/Output: [[17 42 42 42] 17]
Test Case:  12 | Input/Output: [[-98 -98 -57 -98] -98]
Test Case:  13 | Input/Output: [[-25 -25 -97 -25] -97]
Test Case:  14 | Input/Output: [[16 16 72 16] 16]
Test Case:  15 | Input/Output: [[-61 0 -61 -61] -61]
Test Case:  16 | Input/Output: [[7 -96 -96 -96] -96]
Test Case:  17 | Input/Output: [[-88 83 83 83] -88]
Test Case:  18 | Input/Output: [[-38 -14 -14 -14] -38]
Test Case:  19 | Input/Output: [[9 39 39 39] 9]
Test Case:  20 | Input/Output: [[-55 -55 -55 -23] -55]
Test Case:  21 | Input/Output: [[-83 35 35 35] -83]
Test Case:  22 | Input/Output: [[-95 -95 -98 -95] -98]
Test Case:  23 | Input/Output: [[47 47 -11 47] -11]
Test Case:  24 | Input/Output: [[-20 -20 -14 -20] -20]
Test Case:  25 | Input/Output: [[83 83 83 -98] -98]
Test Case:  26 | Input/Output: [[-49 -49 -49 -60] -60]
Test Case:  27 | Input/Output: [[37 37 -91 37] -91]
Test Case:  28 | Input/Output: [[-93 2 -93 -93] -93]
Test Case:  29 | Input/Output: [[-91 -91 -91 -35] -91]
Test Case:  30 | Input/Output: [[73 73 73 -21] -21]
Test Case:  31 | Input/Output: [[28 -44 28 28] -44]
Test Case:  32 | Input/Output: [[-27 -27 22 -27] -27]
Test Case:  33 | Input/Output: [[-50 -50 -50 94] -50]
Test Case:  34 | Input/Output: [[-67 -67 -67 -9] -67]
Test Case:  35 | Input/Output: [[-23 93 -23 -23] -23]
Test Case:  36 | Input/Output: [[16 -39 -39 -39] -39]
Test Case:  37 | Input/Output: [[-5 -5 -5 10] -5]
Test Case:  38 | Input/Output: [[-60 -60 -60 87] -60]
Test Case:  39 | Input/Output: [[64 64 64 90] 64]
Test Case:  40 | Input/Output: [[-45 -43 -43 -43] -45]
Test Case:  41 | Input/Output: [[26 26 23 26] 23]
Test Case:  42 | Input/Output: [[-78 -78 -78 -75] -78]
Test Case:  43 | Input/Output: [[-90 63 63 63] -90]
Test Case:  44 | Input/Output: [[71 71 71 92] 71]
Test Case:  45 | Input/Output: [[37 -51 37 37] -51]
Test Case:  46 | Input/Output: [[87 47 87 87] 47]
Test Case:  47 | Input/Output: [[84 84 16 84] 16]
Test Case:  48 | Input/Output: [[-17 -100 -100 -100] -100]
Test Case:  49 | Input/Output: [[89 3 3 3] 3]
Test Case:  50 | Input/Output: [[33 73 33 33] 33]
Test Case:  51 | Input/Output: [[73 73 73 -76] -76]
Test Case:  52 | Input/Output: [[38 35 38 38] 35]
Test Case:  53 | Input/Output: [[-23 -23 -23 -81] -81]
Test Case:  54 | Input/Output: [[42 -51 -51 -51] -51]
Test Case:  55 | Input/Output: [[10 23 10 10] 10]
Test Case:  56 | Input/Output: [[-95 -11 -11 -11] -95]
Test Case:  57 | Input/Output: [[1 1 1 70] 1]
Test Case:  58 | Input/Output: [[-5 -5 12 -5] -5]
Test Case:  59 | Input/Output: [[-100 -100 -60 -100] -100]
Test Case:  60 | Input/Output: [[-62 -62 -62 75] -62]
Test Case:  61 | Input/Output: [[-9 -9 -9 -70] -70]
Test Case:  62 | Input/Output: [[92 92 92 16] 16]
Test Case:  63 | Input/Output: [[-16 95 -16 -16] -16]
Test Case:  64 | Input/Output: [[-45 -45 -45 19] -45]
Test Case:  65 | Input/Output: [[-37 -37 93 -37] -37]
Test Case:  66 | Input/Output: [[47 47 -96 47] -96]
Test Case:  67 | Input/Output: [[-13 -13 -87 -13] -87]
Test Case:  68 | Input/Output: [[-8 33 -8 -8] -8]
Test Case:  69 | Input/Output: [[-75 -75 -75 -91] -91]
Test Case:  70 | Input/Output: [[81 100 100 100] 81]
Test Case:  71 | Input/Output: [[15 -68 15 15] -68]
Test Case:  72 | Input/Output: [[-94 -94 -94 -83] -94]
Test Case:  73 | Input/Output: [[-78 -78 -78 20] -78]
Test Case:  74 | Input/Output: [[-55 -55 -55 -22] -55]
Test Case:  75 | Input/Output: [[-79 56 -79 -79] -79]
Test Case:  76 | Input/Output: [[70 67 67 67] 67]
Test Case:  77 | Input/Output: [[8 8 24 8] 8]
Test Case:  78 | Input/Output: [[16 16 16 17] 16]
Test Case:  79 | Input/Output: [[-57 83 83 83] -57]
Test Case:  80 | Input/Output: [[73 -59 -59 -59] -59]
Test Case:  81 | Input/Output: [[1 13 13 13] 1]
Test Case:  82 | Input/Output: [[-35 -35 -30 -35] -35]
Test Case:  83 | Input/Output: [[66 66 66 -72] -72]
Test Case:  84 | Input/Output: [[-10 -10 -10 -59] -59]
Test Case:  85 | Input/Output: [[60 83 60 60] 60]
Test Case:  86 | Input/Output: [[-58 -58 -58 -18] -58]
Test Case:  87 | Input/Output: [[44 44 44 58] 44]
Test Case:  88 | Input/Output: [[-57 -57 -40 -57] -57]
Test Case:  89 | Input/Output: [[-47 75 -47 -47] -47]
Test Case:  90 | Input/Output: [[-70 -48 -48 -48] -70]
Test Case:  91 | Input/Output: [[-83 49 -83 -83] -83]
Test Case:  92 | Input/Output: [[52 52 52 22] 22]
Test Case:  93 | Input/Output: [[2 2 100 2] 2]
Test Case:  94 | Input/Output: [[23 96 23 23] 23]
Test Case:  95 | Input/Output: [[40 -85 40 40] -85]
Test Case:  96 | Input/Output: [[-34 39 -34 -34] -34]
Test Case:  97 | Input/Output: [[81 78 81 81] 78]
Test Case:  98 | Input/Output: [[28 -57 -57 -57] -57]
Test Case:  99 | Input/Output: [[79 45 45 45] 45]
Test Case: 100 | Input/Output: [(72 72 72 72) 72]
Test Case: 101 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 102 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 103 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 104 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 105 | Input/Output: [(5 5 5 5) 5]
Test Case: 106 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 107 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 108 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 109 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 110 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 111 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 112 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 113 | Input/Output: [(100 100 100 100) 100]
Test Case: 114 | Input/Output: [(62 62 62 62) 62]
Test Case: 115 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 116 | Input/Output: [(28 28 28 28) 28]
Test Case: 117 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 118 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 119 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 120 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 121 | Input/Output: [(69 69 69 69) 69]
Test Case: 122 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 123 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 124 | Input/Output: [(13 13 13 13) 13]
Test Case: 125 | Input/Output: [(68 68 68 68) 68]
Test Case: 126 | Input/Output: [(1 1 1 1) 1]
Test Case: 127 | Input/Output: [(75 75 75 75) 75]
Test Case: 128 | Input/Output: [(66 66 66 66) 66]
Test Case: 129 | Input/Output: [(57 57 57 57) 57]
Test Case: 130 | Input/Output: [(53 53 53 53) 53]
Test Case: 131 | Input/Output: [(31 31 31 31) 31]
Test Case: 132 | Input/Output: [(4 4 4 4) 4]
Test Case: 133 | Input/Output: [(88 88 88 88) 88]
Test Case: 134 | Input/Output: [(64 64 64 64) 64]
Test Case: 135 | Input/Output: [(23 23 23 23) 23]
Test Case: 136 | Input/Output: [(46 46 46 46) 46]
Test Case: 137 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 138 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 139 | Input/Output: [(16 16 16 16) 16]
Test Case: 140 | Input/Output: [(87 87 87 87) 87]
Test Case: 141 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 142 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 143 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 144 | Input/Output: [(62 62 62 62) 62]
Test Case: 145 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 146 | Input/Output: [(13 13 13 13) 13]
Test Case: 147 | Input/Output: [(84 84 84 84) 84]
Test Case: 148 | Input/Output: [(70 70 70 70) 70]
Test Case: 149 | Input/Output: [(92 92 92 92) 92]
Test Case: 150 | Input/Output: [(3 3 3 3) 3]
Test Case: 151 | Input/Output: [(48 48 48 48) 48]
Test Case: 152 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 153 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 154 | Input/Output: [(91 91 91 91) 91]
Test Case: 155 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 156 | Input/Output: [(50 50 50 50) 50]
Test Case: 157 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 158 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 159 | Input/Output: [(4 4 4 4) 4]
Test Case: 160 | Input/Output: [(90 90 90 90) 90]
Test Case: 161 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 162 | Input/Output: [(100 100 100 100) 100]
Test Case: 163 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 164 | Input/Output: [(51 51 51 51) 51]
Test Case: 165 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 166 | Input/Output: [(44 44 44 44) 44]
Test Case: 167 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 168 | Input/Output: [(13 13 13 13) 13]
Test Case: 169 | Input/Output: [(76 76 76 76) 76]
Test Case: 170 | Input/Output: [(4 4 4 4) 4]
Test Case: 171 | Input/Output: [(7 7 7 7) 7]
Test Case: 172 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 173 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 174 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 175 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 176 | Input/Output: [(0 0 0 0) 0]
Test Case: 177 | Input/Output: [(11 11 11 11) 11]
Test Case: 178 | Input/Output: [(12 12 12 12) 12]
Test Case: 179 | Input/Output: [(5 5 5 5) 5]
Test Case: 180 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 181 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 182 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 183 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 184 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 185 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 186 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 187 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 188 | Input/Output: [(71 71 71 71) 71]
Test Case: 189 | Input/Output: [(97 97 97 97) 97]
Test Case: 190 | Input/Output: [(51 51 51 51) 51]
Test Case: 191 | Input/Output: [(50 50 50 50) 50]
Test Case: 192 | Input/Output: [(7 7 7 7) 7]
Test Case: 193 | Input/Output: [(90 90 90 90) 90]
Test Case: 194 | Input/Output: [(7 7 7 7) 7]
Test Case: 195 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 196 | Input/Output: [(15 15 15 15) 15]
Test Case: 197 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 198 | Input/Output: [(68 68 68 68) 68]
Test Case: 199 | Input/Output: [(69 69 69 69) 69]
Test Case: 200 | Input/Output: [(46 27 92 85) 27]
Test Case: 201 | Input/Output: [(87 79 98 21) 21]
Test Case: 202 | Input/Output: [(23 55 48 34) 23]
Test Case: 203 | Input/Output: [(92 35 48 91) 35]
Test Case: 204 | Input/Output: [(86 60 46 71) 46]
Test Case: 205 | Input/Output: [(85 66 47 92) 47]
Test Case: 206 | Input/Output: [(45 72 77 24) 24]
Test Case: 207 | Input/Output: [(18 5 15 68) 5]
Test Case: 208 | Input/Output: [(97 30 49 12) 12]
Test Case: 209 | Input/Output: [(89 59 58 76) 58]
Test Case: 210 | Input/Output: [(65 87 84 44) 44]
Test Case: 211 | Input/Output: [(68 33 94 43) 33]
Test Case: 212 | Input/Output: [(5 18 50 90) 5]
Test Case: 213 | Input/Output: [(9 38 9 21) 9]
Test Case: 214 | Input/Output: [(5 18 26 30) 5]
Test Case: 215 | Input/Output: [(20 92 29 46) 20]
Test Case: 216 | Input/Output: [(2 69 89 68) 2]
Test Case: 217 | Input/Output: [(59 30 88 44) 30]
Test Case: 218 | Input/Output: [(59 91 32 40) 32]
Test Case: 219 | Input/Output: [(85 9 22 26) 9]
Test Case: 220 | Input/Output: [(68 36 19 42) 19]
Test Case: 221 | Input/Output: [(61 3 10 77) 3]
Test Case: 222 | Input/Output: [(23 11 82 71) 11]
Test Case: 223 | Input/Output: [(74 58 7 40) 7]
Test Case: 224 | Input/Output: [(44 100 98 32) 32]
Test Case: 225 | Input/Output: [(89 66 47 87) 47]
Test Case: 226 | Input/Output: [(93 76 78 27) 27]
Test Case: 227 | Input/Output: [(46 17 0 71) 0]
Test Case: 228 | Input/Output: [(57 32 53 92) 32]
Test Case: 229 | Input/Output: [(35 27 65 58) 27]
Test Case: 230 | Input/Output: [(54 56 14 69) 14]
Test Case: 231 | Input/Output: [(96 47 100 40) 40]
Test Case: 232 | Input/Output: [(46 19 67 91) 19]
Test Case: 233 | Input/Output: [(12 9 94 70) 9]
Test Case: 234 | Input/Output: [(10 80 17 7) 7]
Test Case: 235 | Input/Output: [(9 83 38 99) 9]
Test Case: 236 | Input/Output: [(72 73 85 67) 67]
Test Case: 237 | Input/Output: [(76 51 97 35) 35]
Test Case: 238 | Input/Output: [(76 10 98 11) 10]
Test Case: 239 | Input/Output: [(25 83 31 80) 25]
Test Case: 240 | Input/Output: [(78 84 74 63) 63]
Test Case: 241 | Input/Output: [(71 38 16 60) 16]
Test Case: 242 | Input/Output: [(41 4 21 18) 4]
Test Case: 243 | Input/Output: [(20 91 82 90) 20]
Test Case: 244 | Input/Output: [(96 49 78 87) 49]
Test Case: 245 | Input/Output: [(0 6 17 22) 0]
Test Case: 246 | Input/Output: [(41 98 100 16) 16]
Test Case: 247 | Input/Output: [(75 65 96 5) 5]
Test Case: 248 | Input/Output: [(37 97 94 21) 21]
Test Case: 249 | Input/Output: [(76 45 66 79) 45]
Test Case: 250 | Input/Output: [(94 5 54 85) 5]
Test Case: 251 | Input/Output: [(32 96 66 57) 32]
Test Case: 252 | Input/Output: [(42 47 70 11) 11]
Test Case: 253 | Input/Output: [(59 27 75 28) 27]
Test Case: 254 | Input/Output: [(53 47 76 44) 44]
Test Case: 255 | Input/Output: [(60 32 73 82) 32]
Test Case: 256 | Input/Output: [(6 68 95 57) 6]
Test Case: 257 | Input/Output: [(41 89 29 60) 29]
Test Case: 258 | Input/Output: [(93 97 43 14) 14]
Test Case: 259 | Input/Output: [(99 35 80 33) 33]
Test Case: 260 | Input/Output: [(75 39 91 29) 29]
Test Case: 261 | Input/Output: [(90 98 38 65) 38]
Test Case: 262 | Input/Output: [(88 15 33 80) 15]
Test Case: 263 | Input/Output: [(14 7 79 31) 7]
Test Case: 264 | Input/Output: [(19 29 16 4) 4]
Test Case: 265 | Input/Output: [(12 14 96 5) 5]
Test Case: 266 | Input/Output: [(11 66 66 24) 11]
Test Case: 267 | Input/Output: [(47 56 92 45) 45]
Test Case: 268 | Input/Output: [(94 56 25 27) 25]
Test Case: 269 | Input/Output: [(40 21 18 55) 18]
Test Case: 270 | Input/Output: [(33 45 64 9) 9]
Test Case: 271 | Input/Output: [(9 15 30 9) 9]
Test Case: 272 | Input/Output: [(23 16 4 90) 4]
Test Case: 273 | Input/Output: [(100 76 89 1) 1]
Test Case: 274 | Input/Output: [(70 48 35 64) 35]
Test Case: 275 | Input/Output: [(81 18 76 53) 18]
Test Case: 276 | Input/Output: [(94 50 94 48) 48]
Test Case: 277 | Input/Output: [(11 8 64 32) 8]
Test Case: 278 | Input/Output: [(83 44 43 58) 43]
Test Case: 279 | Input/Output: [(80 77 35 19) 19]
Test Case: 280 | Input/Output: [(77 74 83 99) 74]
Test Case: 281 | Input/Output: [(40 36 60 70) 36]
Test Case: 282 | Input/Output: [(58 96 63 73) 58]
Test Case: 283 | Input/Output: [(76 97 93 100) 76]
Test Case: 284 | Input/Output: [(37 88 47 31) 31]
Test Case: 285 | Input/Output: [(32 79 46 33) 32]
Test Case: 286 | Input/Output: [(32 77 33 97) 32]
Test Case: 287 | Input/Output: [(65 44 80 94) 44]
Test Case: 288 | Input/Output: [(38 11 10 35) 10]
Test Case: 289 | Input/Output: [(50 84 96 57) 50]
Test Case: 290 | Input/Output: [(40 12 89 55) 12]
Test Case: 291 | Input/Output: [(2 41 32 45) 2]
Test Case: 292 | Input/Output: [(64 74 93 51) 51]
Test Case: 293 | Input/Output: [(52 7 60 100) 7]
Test Case: 294 | Input/Output: [(4 90 83 32) 4]
Test Case: 295 | Input/Output: [(26 52 8 48) 8]
Test Case: 296 | Input/Output: [(74 6 79 46) 6]
Test Case: 297 | Input/Output: [(42 36 94 14) 14]
Test Case: 298 | Input/Output: [(63 69 80 84) 63]
Test Case: 299 | Input/Output: [(17 10 43 84) 10]
Test Case: 300 | Input/Output: [(63 70 35 71) 35]
Test Case: 301 | Input/Output: [(67 34 81 17) 17]
Test Case: 302 | Input/Output: [(78 12 68 77) 12]
Test Case: 303 | Input/Output: [(89 26 12 25) 12]
Test Case: 304 | Input/Output: [(83 38 30 1) 1]
Test Case: 305 | Input/Output: [(45 71 76 45) 45]
Test Case: 306 | Input/Output: [(45 85 5 45) 5]
Test Case: 307 | Input/Output: [(49 46 60 56) 46]
Test Case: 308 | Input/Output: [(54 39 55 76) 39]
Test Case: 309 | Input/Output: [(66 70 85 80) 66]
Test Case: 310 | Input/Output: [(61 54 11 52) 11]
Test Case: 311 | Input/Output: [(99 60 5 75) 5]
Test Case: 312 | Input/Output: [(70 46 14 63) 14]
Test Case: 313 | Input/Output: [(71 14 82 76) 14]
Test Case: 314 | Input/Output: [(49 18 7 26) 7]
Test Case: 315 | Input/Output: [(16 10 32 88) 10]
Test Case: 316 | Input/Output: [(83 24 17 12) 12]
Test Case: 317 | Input/Output: [(3 74 24 71) 3]
Test Case: 318 | Input/Output: [(78 89 30 93) 30]
Test Case: 319 | Input/Output: [(56 31 84 22) 22]
Test Case: 320 | Input/Output: [(30 80 66 57) 30]
Test Case: 321 | Input/Output: [(68 79 29 60) 29]
Test Case: 322 | Input/Output: [(5 82 27 65) 5]
Test Case: 323 | Input/Output: [(22 89 96 75) 22]
Test Case: 324 | Input/Output: [(60 60 7 46) 7]
Test Case: 325 | Input/Output: [(12 19 54 45) 12]
Test Case: 326 | Input/Output: [(27 65 32 1) 1]
Test Case: 327 | Input/Output: [(48 33 17 94) 17]
Test Case: 328 | Input/Output: [(30 98 32 84) 30]
Test Case: 329 | Input/Output: [(41 3 41 44) 3]
Test Case: 330 | Input/Output: [(72 78 14 80) 14]
Test Case: 331 | Input/Output: [(85 82 26 44) 26]
Test Case: 332 | Input/Output: [(99 96 21 22) 21]
Test Case: 333 | Input/Output: [(15 71 21 46) 15]
Test Case: 334 | Input/Output: [(17 74 91 60) 17]
Test Case: 335 | Input/Output: [(42 96 59 87) 42]
Test Case: 336 | Input/Output: [(92 13 59 85) 13]
Test Case: 337 | Input/Output: [(46 15 82 25) 15]
Test Case: 338 | Input/Output: [(62 67 61 21) 21]
Test Case: 339 | Input/Output: [(40 35 19 61) 19]
Test Case: 340 | Input/Output: [(96 19 75 39) 19]
Test Case: 341 | Input/Output: [(34 84 11 92) 11]
Test Case: 342 | Input/Output: [(37 53 79 63) 37]
Test Case: 343 | Input/Output: [(0 71 8 43) 0]
Test Case: 344 | Input/Output: [(66 93 33 18) 18]
Test Case: 345 | Input/Output: [(6 17 56 41) 6]
Test Case: 346 | Input/Output: [(63 66 17 67) 17]
Test Case: 347 | Input/Output: [(91 26 1 59) 1]
Test Case: 348 | Input/Output: [(89 39 50 54) 39]
Test Case: 349 | Input/Output: [(99 92 9 18) 9]
Test Case: 350 | Input/Output: [(22 90 63 72) 22]
Test Case: 351 | Input/Output: [(19 18 0 11) 0]
Test Case: 352 | Input/Output: [(54 32 8 14) 8]
Test Case: 353 | Input/Output: [(96 91 1 58) 1]
Test Case: 354 | Input/Output: [(59 99 87 28) 28]
Test Case: 355 | Input/Output: [(27 15 7 47) 7]
Test Case: 356 | Input/Output: [(65 0 79 45) 0]
Test Case: 357 | Input/Output: [(32 2 70 36) 2]
Test Case: 358 | Input/Output: [(51 24 40 15) 15]
Test Case: 359 | Input/Output: [(35 40 62 93) 35]
Test Case: 360 | Input/Output: [(64 29 4 71) 4]
Test Case: 361 | Input/Output: [(12 27 21 10) 10]
Test Case: 362 | Input/Output: [(12 73 73 38) 12]
Test Case: 363 | Input/Output: [(100 22 25 5) 5]
Test Case: 364 | Input/Output: [(74 23 58 95) 23]
Test Case: 365 | Input/Output: [(62 84 54 39) 39]
Test Case: 366 | Input/Output: [(49 3 100 24) 3]
Test Case: 367 | Input/Output: [(16 43 62 87) 16]
Test Case: 368 | Input/Output: [(94 77 37 97) 37]
Test Case: 369 | Input/Output: [(28 11 42 12) 11]
Test Case: 370 | Input/Output: [(87 78 40 97) 40]
Test Case: 371 | Input/Output: [(27 44 94 65) 27]
Test Case: 372 | Input/Output: [(30 56 93 52) 30]
Test Case: 373 | Input/Output: [(61 53 2 6) 2]
Test Case: 374 | Input/Output: [(61 69 99 51) 51]
Test Case: 375 | Input/Output: [(74 24 45 4) 4]
Test Case: 376 | Input/Output: [(43 81 86 80) 43]
Test Case: 377 | Input/Output: [(3 20 67 5) 3]
Test Case: 378 | Input/Output: [(81 82 55 83) 55]
Test Case: 379 | Input/Output: [(56 66 1 26) 1]
Test Case: 380 | Input/Output: [(74 20 84 8) 8]
Test Case: 381 | Input/Output: [(62 58 60 75) 58]
Test Case: 382 | Input/Output: [(73 87 70 12) 12]
Test Case: 383 | Input/Output: [(26 39 74 40) 26]
Test Case: 384 | Input/Output: [(57 14 68 19) 14]
Test Case: 385 | Input/Output: [(55 67 54 24) 24]
Test Case: 386 | Input/Output: [(29 60 4 1) 1]
Test Case: 387 | Input/Output: [(64 58 29 28) 28]
Test Case: 388 | Input/Output: [(60 99 58 19) 19]
Test Case: 389 | Input/Output: [(88 21 26 73) 21]
Test Case: 390 | Input/Output: [(44 63 55 76) 44]
Test Case: 391 | Input/Output: [(90 37 70 15) 15]
Test Case: 392 | Input/Output: [(39 61 0 0) 0]
Test Case: 393 | Input/Output: [(37 99 57 54) 37]
Test Case: 394 | Input/Output: [(85 36 66 41) 36]
Test Case: 395 | Input/Output: [(99 98 44 48) 44]
Test Case: 396 | Input/Output: [(53 76 0 93) 0]
Test Case: 397 | Input/Output: [(79 17 89 92) 17]
Test Case: 398 | Input/Output: [(66 75 68 12) 12]
Test Case: 399 | Input/Output: [(22 41 42 72) 22]
Test Case: 400 | Input/Output: [(-48 -63 -74 -32) -74]
Test Case: 401 | Input/Output: [(-86 -81 -37 -25) -86]
Test Case: 402 | Input/Output: [(-64 -58 -50 -32) -64]
Test Case: 403 | Input/Output: [(-77 93 -65 -62) -77]
Test Case: 404 | Input/Output: [(-54 51 -18 37) -54]
Test Case: 405 | Input/Output: [(59 -63 -7 80) -63]
Test Case: 406 | Input/Output: [(-8 58 48 13) -8]
Test Case: 407 | Input/Output: [(60 53 -81 93) -81]
Test Case: 408 | Input/Output: [(-74 -88 -26 61) -88]
Test Case: 409 | Input/Output: [(33 98 100 89) 33]
Test Case: 410 | Input/Output: [(78 19 -23 85) -23]
Test Case: 411 | Input/Output: [(93 -91 -37 31) -91]
Test Case: 412 | Input/Output: [(-44 83 83 78) -44]
Test Case: 413 | Input/Output: [(-84 -48 87 -66) -84]
Test Case: 414 | Input/Output: [(84 31 45 -58) -58]
Test Case: 415 | Input/Output: [(-94 -46 66 48) -94]
Test Case: 416 | Input/Output: [(22 24 47 87) 22]
Test Case: 417 | Input/Output: [(46 58 -59 -56) -59]
Test Case: 418 | Input/Output: [(-65 12 -15 -32) -65]
Test Case: 419 | Input/Output: [(0 63 30 100) 0]
Test Case: 420 | Input/Output: [(-19 -48 -32 35) -48]
Test Case: 421 | Input/Output: [(18 -47 32 78) -47]
Test Case: 422 | Input/Output: [(40 -22 -19 31) -22]
Test Case: 423 | Input/Output: [(89 64 -46 -43) -46]
Test Case: 424 | Input/Output: [(65 37 -6 12) -6]
Test Case: 425 | Input/Output: [(-82 -78 -37 20) -82]
Test Case: 426 | Input/Output: [(58 -14 -46 -90) -90]
Test Case: 427 | Input/Output: [(-25 -23 27 18) -25]
Test Case: 428 | Input/Output: [(-27 -42 24 -97) -97]
Test Case: 429 | Input/Output: [(62 -29 -73 -32) -73]
Test Case: 430 | Input/Output: [(10 -93 44 0) -93]
Test Case: 431 | Input/Output: [(-16 36 6 -15) -16]
Test Case: 432 | Input/Output: [(23 -33 79 -83) -83]
Test Case: 433 | Input/Output: [(77 13 -87 62) -87]
Test Case: 434 | Input/Output: [(-64 -90 -72 49) -90]
Test Case: 435 | Input/Output: [(77 66 -42 59) -42]
Test Case: 436 | Input/Output: [(26 -77 42 9) -77]
Test Case: 437 | Input/Output: [(-81 -27 49 -17) -81]
Test Case: 438 | Input/Output: [(80 -99 -1 57) -99]
Test Case: 439 | Input/Output: [(39 -67 -21 24) -67]
Test Case: 440 | Input/Output: [(-76 66 16 -38) -76]
Test Case: 441 | Input/Output: [(59 -43 -64 -30) -64]
Test Case: 442 | Input/Output: [(91 -100 -70 -45) -100]
Test Case: 443 | Input/Output: [(-8 -71 -4 -82) -82]
Test Case: 444 | Input/Output: [(30 -33 55 24) -33]
Test Case: 445 | Input/Output: [(16 37 -6 -59) -59]
Test Case: 446 | Input/Output: [(69 69 -20 -11) -20]
Test Case: 447 | Input/Output: [(77 81 44 -72) -72]
Test Case: 448 | Input/Output: [(-92 -38 85 -20) -92]
Test Case: 449 | Input/Output: [(30 -43 83 39) -43]
Test Case: 450 | Input/Output: [(-7 -16 -78 5) -78]
Test Case: 451 | Input/Output: [(-87 84 79 0) -87]
Test Case: 452 | Input/Output: [(-68 25 68 -28) -68]
Test Case: 453 | Input/Output: [(-63 85 24 -12) -63]
Test Case: 454 | Input/Output: [(96 -87 38 -2) -87]
Test Case: 455 | Input/Output: [(71 1 81 9) 1]
Test Case: 456 | Input/Output: [(68 -83 -4 -88) -88]
Test Case: 457 | Input/Output: [(-61 -35 90 -5) -61]
Test Case: 458 | Input/Output: [(63 -11 82 -54) -54]
Test Case: 459 | Input/Output: [(94 -88 20 59) -88]
Test Case: 460 | Input/Output: [(-50 65 -57 77) -57]
Test Case: 461 | Input/Output: [(-48 -73 -1 -80) -80]
Test Case: 462 | Input/Output: [(30 49 -85 -1) -85]
Test Case: 463 | Input/Output: [(58 -24 55 80) -24]
Test Case: 464 | Input/Output: [(87 83 -7 44) -7]
Test Case: 465 | Input/Output: [(97 -32 99 -30) -32]
Test Case: 466 | Input/Output: [(-67 -55 56 23) -67]
Test Case: 467 | Input/Output: [(7 -8 -95 -21) -95]
Test Case: 468 | Input/Output: [(-94 -22 64 -95) -95]
Test Case: 469 | Input/Output: [(79 83 28 77) 28]
Test Case: 470 | Input/Output: [(-87 -17 58 -85) -87]
Test Case: 471 | Input/Output: [(82 -86 7 -86) -86]
Test Case: 472 | Input/Output: [(34 57 31 -80) -80]
Test Case: 473 | Input/Output: [(-58 -52 1 26) -58]
Test Case: 474 | Input/Output: [(-17 6 -82 86) -82]
Test Case: 475 | Input/Output: [(57 -62 -11 -20) -62]
Test Case: 476 | Input/Output: [(-76 50 -50 -3) -76]
Test Case: 477 | Input/Output: [(-5 -98 -62 -29) -98]
Test Case: 478 | Input/Output: [(-67 54 -6 95) -67]
Test Case: 479 | Input/Output: [(11 20 -98 -6) -98]
Test Case: 480 | Input/Output: [(71 -54 17 -6) -54]
Test Case: 481 | Input/Output: [(-24 25 78 -99) -99]
Test Case: 482 | Input/Output: [(-48 -77 78 -45) -77]
Test Case: 483 | Input/Output: [(29 -60 -18 37) -60]
Test Case: 484 | Input/Output: [(70 63 -55 -19) -55]
Test Case: 485 | Input/Output: [(28 4 -12 -6) -12]
Test Case: 486 | Input/Output: [(66 -28 -45 8) -45]
Test Case: 487 | Input/Output: [(-86 38 25 -89) -89]
Test Case: 488 | Input/Output: [(30 -79 -76 22) -79]
Test Case: 489 | Input/Output: [(-85 -50 -77 -77) -85]
Test Case: 490 | Input/Output: [(-13 -99 -45 51) -99]
Test Case: 491 | Input/Output: [(-28 -68 -79 11) -79]
Test Case: 492 | Input/Output: [(8 27 8 -85) -85]
Test Case: 493 | Input/Output: [(91 71 56 48) 48]
Test Case: 494 | Input/Output: [(-6 80 68 98) -6]
Test Case: 495 | Input/Output: [(23 47 -35 86) -35]
Test Case: 496 | Input/Output: [(-16 -57 -65 -8) -65]
Test Case: 497 | Input/Output: [(54 -81 30 -19) -81]
Test Case: 498 | Input/Output: [(38 -27 -2 42) -27]
Test Case: 499 | Input/Output: [(20 63 -66 -38) -66]
Test Case: 500 | Input/Output: [(-64 26 62 60) -64]
Test Case: 501 | Input/Output: [(14 -2 64 -48) -48]
Test Case: 502 | Input/Output: [(87 23 -61 -90) -90]
Test Case: 503 | Input/Output: [(-1 75 -23 51) -23]
Test Case: 504 | Input/Output: [(24 -32 43 53) -32]
Test Case: 505 | Input/Output: [(99 -47 83 -13) -47]
Test Case: 506 | Input/Output: [(30 75 -38 -43) -43]
Test Case: 507 | Input/Output: [(-89 87 41 55) -89]
Test Case: 508 | Input/Output: [(28 -7 97 -74) -74]
Test Case: 509 | Input/Output: [(63 92 -27 95) -27]
Test Case: 510 | Input/Output: [(-4 -67 97 89) -67]
Test Case: 511 | Input/Output: [(-14 -70 -84 -100) -100]
Test Case: 512 | Input/Output: [(40 1 41 71) 1]
Test Case: 513 | Input/Output: [(-3 -62 52 76) -62]
Test Case: 514 | Input/Output: [(-53 -92 12 -58) -92]
Test Case: 515 | Input/Output: [(13 -64 14 -92) -92]
Test Case: 516 | Input/Output: [(45 -10 43 -12) -12]
Test Case: 517 | Input/Output: [(-5 -97 50 -90) -97]
Test Case: 518 | Input/Output: [(-24 31 -32 99) -32]
Test Case: 519 | Input/Output: [(-58 35 -17 -31) -58]
Test Case: 520 | Input/Output: [(54 49 31 34) 31]
Test Case: 521 | Input/Output: [(93 -51 -28 28) -51]
Test Case: 522 | Input/Output: [(-80 -19 -86 -30) -86]
Test Case: 523 | Input/Output: [(-90 -55 51 -61) -90]
Test Case: 524 | Input/Output: [(14 -74 57 91) -74]
Test Case: 525 | Input/Output: [(48 -49 52 14) -49]
Test Case: 526 | Input/Output: [(-53 92 -42 84) -53]
Test Case: 527 | Input/Output: [(79 -96 -89 86) -96]
Test Case: 528 | Input/Output: [(-42 53 26 86) -42]
Test Case: 529 | Input/Output: [(61 -29 -24 -37) -37]
Test Case: 530 | Input/Output: [(-48 46 83 44) -48]
Test Case: 531 | Input/Output: [(-73 -45 45 69) -73]
Test Case: 532 | Input/Output: [(15 82 -63 85) -63]
Test Case: 533 | Input/Output: [(91 -32 93 -9) -32]
Test Case: 534 | Input/Output: [(-84 12 -58 -94) -94]
Test Case: 535 | Input/Output: [(-17 -95 39 -55) -95]
Test Case: 536 | Input/Output: [(30 -94 33 17) -94]
Test Case: 537 | Input/Output: [(-70 -29 -6 -30) -70]
Test Case: 538 | Input/Output: [(8 14 70 -6) -6]
Test Case: 539 | Input/Output: [(12 -85 6 -27) -85]
Test Case: 540 | Input/Output: [(60 37 28 -22) -22]
Test Case: 541 | Input/Output: [(-74 -31 -42 79) -74]
Test Case: 542 | Input/Output: [(-44 81 31 73) -44]
Test Case: 543 | Input/Output: [(-6 29 77 -15) -15]
Test Case: 544 | Input/Output: [(79 -57 41 -27) -57]
Test Case: 545 | Input/Output: [(-49 -84 8 -33) -84]
Test Case: 546 | Input/Output: [(-56 86 -24 -8) -56]
Test Case: 547 | Input/Output: [(-77 59 -14 -95) -95]
Test Case: 548 | Input/Output: [(5 65 34 -56) -56]
Test Case: 549 | Input/Output: [(80 -41 34 16) -41]
Test Case: 550 | Input/Output: [(85 -60 -92 -73) -92]
Test Case: 551 | Input/Output: [(39 27 -57 -74) -74]
Test Case: 552 | Input/Output: [(-63 15 99 30) -63]
Test Case: 553 | Input/Output: [(-24 -43 41 -79) -79]
Test Case: 554 | Input/Output: [(22 -87 -34 82) -87]
Test Case: 555 | Input/Output: [(56 -59 6 76) -59]
Test Case: 556 | Input/Output: [(37 18 -89 60) -89]
Test Case: 557 | Input/Output: [(74 17 -62 -97) -97]
Test Case: 558 | Input/Output: [(20 4 67 99) 4]
Test Case: 559 | Input/Output: [(-15 85 4 -73) -73]
Test Case: 560 | Input/Output: [(-53 -21 -30 -33) -53]
Test Case: 561 | Input/Output: [(85 56 -26 83) -26]
Test Case: 562 | Input/Output: [(-79 5 71 88) -79]
Test Case: 563 | Input/Output: [(-39 -57 -91 93) -91]
Test Case: 564 | Input/Output: [(-57 74 90 25) -57]
Test Case: 565 | Input/Output: [(-65 3 -78 0) -78]
Test Case: 566 | Input/Output: [(-29 36 98 -96) -96]
Test Case: 567 | Input/Output: [(-33 52 29 -92) -92]
Test Case: 568 | Input/Output: [(-24 9 51 69) -24]
Test Case: 569 | Input/Output: [(-55 -1 9 37) -55]
Test Case: 570 | Input/Output: [(71 -98 20 -88) -98]
Test Case: 571 | Input/Output: [(27 21 3 -87) -87]
Test Case: 572 | Input/Output: [(18 100 -60 51) -60]
Test Case: 573 | Input/Output: [(79 -35 -27 95) -35]
Test Case: 574 | Input/Output: [(-18 62 35 23) -18]
Test Case: 575 | Input/Output: [(28 51 -60 92) -60]
Test Case: 576 | Input/Output: [(35 21 8 17) 8]
Test Case: 577 | Input/Output: [(-91 16 48 31) -91]
Test Case: 578 | Input/Output: [(93 -2 -58 48) -58]
Test Case: 579 | Input/Output: [(-79 -84 -58 -3) -84]
Test Case: 580 | Input/Output: [(-40 -22 48 -81) -81]
Test Case: 581 | Input/Output: [(-26 -92 -5 -37) -92]
Test Case: 582 | Input/Output: [(-78 34 -16 -89) -89]
Test Case: 583 | Input/Output: [(-18 15 8 -15) -18]
Test Case: 584 | Input/Output: [(91 -86 1 25) -86]
Test Case: 585 | Input/Output: [(-9 -80 63 -15) -80]
Test Case: 586 | Input/Output: [(64 -87 -11 94) -87]
Test Case: 587 | Input/Output: [(-46 96 -25 82) -46]
Test Case: 588 | Input/Output: [(-35 -80 66 35) -80]
Test Case: 589 | Input/Output: [(-87 60 -52 0) -87]
Test Case: 590 | Input/Output: [(7 23 32 93) 7]
Test Case: 591 | Input/Output: [(-31 -56 82 -83) -83]
Test Case: 592 | Input/Output: [(77 81 61 -31) -31]
Test Case: 593 | Input/Output: [(21 -51 100 -37) -51]
Test Case: 594 | Input/Output: [(100 30 -10 88) -10]
Test Case: 595 | Input/Output: [(7 -23 53 60) -23]
Test Case: 596 | Input/Output: [(60 84 -97 -87) -97]
Test Case: 597 | Input/Output: [(-58 -36 -86 43) -86]
Test Case: 598 | Input/Output: [(-98 39 45 56) -98]
Test Case: 599 | Input/Output: [(40 -100 44 62) -100]
Test Case: 600 | Input/Output: [(59 -60 57 21) -60]
Test Case: 601 | Input/Output: [(57 -31 10 -14) -31]
Test Case: 602 | Input/Output: [(97 2 -30 59) -30]
Test Case: 603 | Input/Output: [(-34 -28 -3 41) -34]
Test Case: 604 | Input/Output: [(-47 87 21 18) -47]
Test Case: 605 | Input/Output: [(-36 -96 -1 -5) -96]
Test Case: 606 | Input/Output: [(9 -95 69 -83) -95]
Test Case: 607 | Input/Output: [(-99 44 -78 66) -99]
Test Case: 608 | Input/Output: [(-21 -5 -14 -91) -91]
Test Case: 609 | Input/Output: [(-53 20 65 9) -53]
Test Case: 610 | Input/Output: [(-9 -32 -41 -90) -90]
Test Case: 611 | Input/Output: [(-53 62 -62 -27) -62]
Test Case: 612 | Input/Output: [(5 -58 -27 -41) -58]
Test Case: 613 | Input/Output: [(-44 75 -37 -96) -96]
Test Case: 614 | Input/Output: [(31 33 41 -28) -28]
Test Case: 615 | Input/Output: [(76 -98 63 -98) -98]
Test Case: 616 | Input/Output: [(-96 11 -3 88) -96]
Test Case: 617 | Input/Output: [(34 -63 -91 -81) -91]
Test Case: 618 | Input/Output: [(-99 -61 -10 80) -99]
Test Case: 619 | Input/Output: [(91 84 9 12) 9]
Test Case: 620 | Input/Output: [(55 -65 21 56) -65]
Test Case: 621 | Input/Output: [(97 -50 -86 -5) -86]
Test Case: 622 | Input/Output: [(99 -53 11 -45) -53]
Test Case: 623 | Input/Output: [(26 -25 -82 73) -82]
Test Case: 624 | Input/Output: [(-22 -81 76 52) -81]
Test Case: 625 | Input/Output: [(-82 70 91 -96) -96]
Test Case: 626 | Input/Output: [(52 96 -74 96) -74]
Test Case: 627 | Input/Output: [(-32 -42 94 -61) -61]
Test Case: 628 | Input/Output: [(-68 63 87 59) -68]
Test Case: 629 | Input/Output: [(7 -72 -77 12) -77]
Test Case: 630 | Input/Output: [(87 22 -64 94) -64]
Test Case: 631 | Input/Output: [(49 -14 -34 -51) -51]
Test Case: 632 | Input/Output: [(3 -64 -45 61) -64]
Test Case: 633 | Input/Output: [(66 98 -69 7) -69]
Test Case: 634 | Input/Output: [(9 -74 -24 40) -74]
Test Case: 635 | Input/Output: [(4 -92 -53 -29) -92]
Test Case: 636 | Input/Output: [(66 -83 -29 0) -83]
Test Case: 637 | Input/Output: [(91 47 34 -5) -5]
Test Case: 638 | Input/Output: [(55 -45 -14 -11) -45]
Test Case: 639 | Input/Output: [(-99 -86 83 89) -99]
Test Case: 640 | Input/Output: [(-24 18 -13 -25) -25]
Test Case: 641 | Input/Output: [(76 -3 45 -60) -60]
Test Case: 642 | Input/Output: [(-34 37 -90 85) -90]
Test Case: 643 | Input/Output: [(49 -36 47 -44) -44]
Test Case: 644 | Input/Output: [(46 71 25 14) 14]
Test Case: 645 | Input/Output: [(-84 -22 -31 14) -84]
Test Case: 646 | Input/Output: [(-93 -11 47 -92) -93]
Test Case: 647 | Input/Output: [(23 -11 66 7) -11]
Test Case: 648 | Input/Output: [(-91 98 -60 -64) -91]
Test Case: 649 | Input/Output: [(29 79 -87 -18) -87]
Test Case: 650 | Input/Output: [(89 54 -55 -33) -55]
Test Case: 651 | Input/Output: [(-33 34 7 62) -33]
Test Case: 652 | Input/Output: [(-8 48 -30 -63) -63]
Test Case: 653 | Input/Output: [(-31 -92 25 -68) -92]
Test Case: 654 | Input/Output: [(-69 85 -63 53) -69]
Test Case: 655 | Input/Output: [(20 -31 -77 -19) -77]
Test Case: 656 | Input/Output: [(81 71 25 66) 25]
Test Case: 657 | Input/Output: [(-53 -36 -44 1) -53]
Test Case: 658 | Input/Output: [(-43 58 79 33) -43]
Test Case: 659 | Input/Output: [(-90 52 -52 -78) -90]
Test Case: 660 | Input/Output: [(-98 14 91 85) -98]
Test Case: 661 | Input/Output: [(11 -31 38 -65) -65]
Test Case: 662 | Input/Output: [(65 68 100 -59) -59]
Test Case: 663 | Input/Output: [(37 28 87 -38) -38]
Test Case: 664 | Input/Output: [(80 56 37 26) 26]
Test Case: 665 | Input/Output: [(-87 -19 -64 -25) -87]
Test Case: 666 | Input/Output: [(6 55 -100 35) -100]
Test Case: 667 | Input/Output: [(-12 -77 -72 1) -77]
Test Case: 668 | Input/Output: [(-31 -92 90 -47) -92]
Test Case: 669 | Input/Output: [(22 41 -48 17) -48]
Test Case: 670 | Input/Output: [(-19 -61 -91 29) -91]
Test Case: 671 | Input/Output: [(-68 94 57 -51) -68]
Test Case: 672 | Input/Output: [(85 -34 -63 73) -63]
Test Case: 673 | Input/Output: [(-16 64 75 -27) -27]
Test Case: 674 | Input/Output: [(16 30 48 29) 16]
Test Case: 675 | Input/Output: [(-71 -57 48 -12) -71]
Test Case: 676 | Input/Output: [(-79 100 71 52) -79]
Test Case: 677 | Input/Output: [(-46 73 24 83) -46]
Test Case: 678 | Input/Output: [(-69 18 -7 63) -69]
Test Case: 679 | Input/Output: [(-41 -59 -39 -16) -59]
Test Case: 680 | Input/Output: [(-12 0 -83 50) -83]
Test Case: 681 | Input/Output: [(59 -92 -100 46) -100]
Test Case: 682 | Input/Output: [(-5 94 -51 -28) -51]
Test Case: 683 | Input/Output: [(-72 -47 -82 91) -82]
Test Case: 684 | Input/Output: [(40 -37 -19 -65) -65]
Test Case: 685 | Input/Output: [(63 3 -31 -67) -67]
Test Case: 686 | Input/Output: [(-37 87 44 12) -37]
Test Case: 687 | Input/Output: [(-45 -2 -84 -46) -84]
Test Case: 688 | Input/Output: [(54 -77 51 -2) -77]
Test Case: 689 | Input/Output: [(-30 60 23 -72) -72]
Test Case: 690 | Input/Output: [(-26 -78 -9 69) -78]
Test Case: 691 | Input/Output: [(49 -53 -15 97) -53]
Test Case: 692 | Input/Output: [(80 32 3 -19) -19]
Test Case: 693 | Input/Output: [(-64 51 23 31) -64]
Test Case: 694 | Input/Output: [(60 90 -38 -70) -70]
Test Case: 695 | Input/Output: [(15 92 -25 55) -25]
Test Case: 696 | Input/Output: [(-97 50 -31 33) -97]
Test Case: 697 | Input/Output: [(86 -11 -22 -48) -48]
Test Case: 698 | Input/Output: [(71 -67 -85 -85) -85]
Test Case: 699 | Input/Output: [(58 -80 -41 55) -80]
Test Case: 700 | Input/Output: [(15 -59 92 -61) -61]
Test Case: 701 | Input/Output: [(19 2 -4 -14) -14]
Test Case: 702 | Input/Output: [(93 34 3 -13) -13]
Test Case: 703 | Input/Output: [(-45 -8 -95 66) -95]
Test Case: 704 | Input/Output: [(43 -53 -76 -79) -79]
Test Case: 705 | Input/Output: [(6 93 3 49) 3]
Test Case: 706 | Input/Output: [(60 9 -23 -50) -50]
Test Case: 707 | Input/Output: [(-64 -47 -83 -16) -83]
Test Case: 708 | Input/Output: [(-11 -43 -19 64) -43]
Test Case: 709 | Input/Output: [(-60 -56 -83 15) -83]
Test Case: 710 | Input/Output: [(46 -7 -95 5) -95]
Test Case: 711 | Input/Output: [(-91 79 -52 -68) -91]
Test Case: 712 | Input/Output: [(89 57 -64 -91) -91]
Test Case: 713 | Input/Output: [(82 -88 -85 -38) -88]
Test Case: 714 | Input/Output: [(68 -24 50 -99) -99]
Test Case: 715 | Input/Output: [(-63 -82 -15 -14) -82]
Test Case: 716 | Input/Output: [(-87 -7 -49 45) -87]
Test Case: 717 | Input/Output: [(-28 -51 35 -29) -51]
Test Case: 718 | Input/Output: [(-70 -38 -15 -39) -70]
Test Case: 719 | Input/Output: [(-41 1 22 55) -41]
Test Case: 720 | Input/Output: [(-84 52 5 -12) -84]
Test Case: 721 | Input/Output: [(3 65 33 -60) -60]
Test Case: 722 | Input/Output: [(-98 67 90 -69) -98]
Test Case: 723 | Input/Output: [(80 61 -85 -57) -85]
Test Case: 724 | Input/Output: [(-32 39 -50 51) -50]
Test Case: 725 | Input/Output: [(-89 21 7 -75) -89]
Test Case: 726 | Input/Output: [(11 -99 6 97) -99]
Test Case: 727 | Input/Output: [(-70 40 -66 -26) -70]
Test Case: 728 | Input/Output: [(75 -26 42 21) -26]
Test Case: 729 | Input/Output: [(-41 14 -63 2) -63]
Test Case: 730 | Input/Output: [(-19 -19 29 -90) -90]
Test Case: 731 | Input/Output: [(-10 -87 86 17) -87]
Test Case: 732 | Input/Output: [(-25 -56 -90 -37) -90]
Test Case: 733 | Input/Output: [(75 -12 -26 -23) -26]
Test Case: 734 | Input/Output: [(7 -69 60 93) -69]
Test Case: 735 | Input/Output: [(97 -66 95 82) -66]
Test Case: 736 | Input/Output: [(-22 -18 -72 13) -72]
Test Case: 737 | Input/Output: [(46 24 -30 -29) -30]
Test Case: 738 | Input/Output: [(24 22 -47 -42) -47]
Test Case: 739 | Input/Output: [(23 -38 71 -87) -87]
Test Case: 740 | Input/Output: [(-22 -6 80 27) -22]
Test Case: 741 | Input/Output: [(37 -53 -18 30) -53]
Test Case: 742 | Input/Output: [(67 43 5 25) 5]
Test Case: 743 | Input/Output: [(86 47 -73 8) -73]
Test Case: 744 | Input/Output: [(49 12 -46 -15) -46]
Test Case: 745 | Input/Output: [(-31 9 11 -32) -32]
Test Case: 746 | Input/Output: [(92 -45 42 65) -45]
Test Case: 747 | Input/Output: [(18 -52 42 -28) -52]
Test Case: 748 | Input/Output: [(-97 95 57 -48) -97]
Test Case: 749 | Input/Output: [(-50 -70 39 99) -70]
Test Case: 750 | Input/Output: [(80 -75 -34 -36) -75]
Test Case: 751 | Input/Output: [(-81 64 -91 -83) -91]
Test Case: 752 | Input/Output: [(-43 -28 -21 22) -43]
Test Case: 753 | Input/Output: [(64 -35 -3 -48) -48]
Test Case: 754 | Input/Output: [(50 -16 -97 -65) -97]
Test Case: 755 | Input/Output: [(-100 -69 25 42) -100]
Test Case: 756 | Input/Output: [(40 47 67 83) 40]
Test Case: 757 | Input/Output: [(-72 -94 -60 -8) -94]
Test Case: 758 | Input/Output: [(93 37 95 74) 37]
Test Case: 759 | Input/Output: [(-9 40 -26 -53) -53]
Test Case: 760 | Input/Output: [(85 33 60 8) 8]
Test Case: 761 | Input/Output: [(-5 90 -27 10) -27]
Test Case: 762 | Input/Output: [(86 29 20 46) 20]
Test Case: 763 | Input/Output: [(-3 -55 -88 -19) -88]
Test Case: 764 | Input/Output: [(10 9 -2 -80) -80]
Test Case: 765 | Input/Output: [(39 25 69 33) 25]
Test Case: 766 | Input/Output: [(7 -67 -13 -79) -79]
Test Case: 767 | Input/Output: [(58 4 15 -10) -10]
Test Case: 768 | Input/Output: [(-49 -71 97 82) -71]
Test Case: 769 | Input/Output: [(31 -50 -6 -44) -50]
Test Case: 770 | Input/Output: [(-78 43 -47 -87) -87]
Test Case: 771 | Input/Output: [(-21 3 -98 -34) -98]
Test Case: 772 | Input/Output: [(39 -73 -43 56) -73]
Test Case: 773 | Input/Output: [(2 -38 1 38) -38]
Test Case: 774 | Input/Output: [(42 -37 57 -75) -75]
Test Case: 775 | Input/Output: [(73 -86 70 20) -86]
Test Case: 776 | Input/Output: [(-21 75 25 -59) -59]
Test Case: 777 | Input/Output: [(-17 32 -25 -95) -95]
Test Case: 778 | Input/Output: [(92 13 -24 81) -24]
Test Case: 779 | Input/Output: [(25 -84 -79 -37) -84]
Test Case: 780 | Input/Output: [(-12 66 -31 98) -31]
Test Case: 781 | Input/Output: [(-25 33 46 -91) -91]
Test Case: 782 | Input/Output: [(-34 53 73 -83) -83]
Test Case: 783 | Input/Output: [(84 80 30 41) 30]
Test Case: 784 | Input/Output: [(80 -91 -72 56) -91]
Test Case: 785 | Input/Output: [(48 15 75 17) 15]
Test Case: 786 | Input/Output: [(36 -1 -15 58) -15]
Test Case: 787 | Input/Output: [(91 -34 -21 -97) -97]
Test Case: 788 | Input/Output: [(63 60 22 -44) -44]
Test Case: 789 | Input/Output: [(72 -35 12 33) -35]
Test Case: 790 | Input/Output: [(-80 44 71 23) -80]
Test Case: 791 | Input/Output: [(-26 -63 -66 50) -66]
Test Case: 792 | Input/Output: [(47 -62 -66 -55) -66]
Test Case: 793 | Input/Output: [(51 -58 -45 -9) -58]
Test Case: 794 | Input/Output: [(-91 6 9 -64) -91]
Test Case: 795 | Input/Output: [(-81 -9 87 37) -81]
Test Case: 796 | Input/Output: [(71 80 -56 27) -56]
Test Case: 797 | Input/Output: [(17 6 1 -36) -36]
Test Case: 798 | Input/Output: [(-21 91 76 1) -21]
Test Case: 799 | Input/Output: [(-44 -97 -64 48) -97]
Test Case: 800 | Input/Output: [(-57 -28 -58 -84) -84]
Test Case: 801 | Input/Output: [(93 76 -19 -74) -74]
Test Case: 802 | Input/Output: [(-56 95 -18 32) -56]
Test Case: 803 | Input/Output: [(43 -41 65 46) -41]
Test Case: 804 | Input/Output: [(-26 77 -94 -49) -94]
Test Case: 805 | Input/Output: [(-44 2 29 7) -44]
Test Case: 806 | Input/Output: [(-17 -97 39 -45) -97]
Test Case: 807 | Input/Output: [(28 65 77 -45) -45]
Test Case: 808 | Input/Output: [(-80 -58 -27 5) -80]
Test Case: 809 | Input/Output: [(66 -19 63 -1) -19]
Test Case: 810 | Input/Output: [(-29 76 5 -19) -29]
Test Case: 811 | Input/Output: [(-23 -96 -20 81) -96]
Test Case: 812 | Input/Output: [(65 8 -1 -31) -31]
Test Case: 813 | Input/Output: [(30 66 -95 -100) -100]
Test Case: 814 | Input/Output: [(50 26 85 10) 10]
Test Case: 815 | Input/Output: [(27 66 -59 58) -59]
Test Case: 816 | Input/Output: [(-54 -38 -71 -43) -71]
Test Case: 817 | Input/Output: [(-66 -50 -94 -19) -94]
Test Case: 818 | Input/Output: [(-59 33 -30 43) -59]
Test Case: 819 | Input/Output: [(-35 -88 -20 -61) -88]
Test Case: 820 | Input/Output: [(86 -13 71 -93) -93]
Test Case: 821 | Input/Output: [(91 38 -39 -60) -60]
Test Case: 822 | Input/Output: [(-18 -87 4 -67) -87]
Test Case: 823 | Input/Output: [(-64 13 -32 -35) -64]
Test Case: 824 | Input/Output: [(54 23 94 -29) -29]
Test Case: 825 | Input/Output: [(11 -33 46 -83) -83]
Test Case: 826 | Input/Output: [(-15 6 -9 -40) -40]
Test Case: 827 | Input/Output: [(-57 -74 -15 -25) -74]
Test Case: 828 | Input/Output: [(-80 72 80 14) -80]
Test Case: 829 | Input/Output: [(50 -46 9 62) -46]
Test Case: 830 | Input/Output: [(57 85 99 -28) -28]
Test Case: 831 | Input/Output: [(3 64 -92 -56) -92]
Test Case: 832 | Input/Output: [(50 23 -76 -11) -76]
Test Case: 833 | Input/Output: [(-93 -49 47 -8) -93]
Test Case: 834 | Input/Output: [(-10 -65 -16 -95) -95]
Test Case: 835 | Input/Output: [(63 29 -50 -73) -73]
Test Case: 836 | Input/Output: [(-79 61 -90 -1) -90]
Test Case: 837 | Input/Output: [(32 5 -21 8) -21]
Test Case: 838 | Input/Output: [(99 81 -1 -30) -30]
Test Case: 839 | Input/Output: [(10 -54 -24 61) -54]
Test Case: 840 | Input/Output: [(42 56 -48 1) -48]
Test Case: 841 | Input/Output: [(64 9 14 -69) -69]
Test Case: 842 | Input/Output: [(-89 44 -19 27) -89]
Test Case: 843 | Input/Output: [(-51 -76 -6 45) -76]
Test Case: 844 | Input/Output: [(-47 3 24 95) -47]
Test Case: 845 | Input/Output: [(80 40 7 60) 7]
Test Case: 846 | Input/Output: [(-14 -71 -93 14) -93]
Test Case: 847 | Input/Output: [(32 39 -17 79) -17]
Test Case: 848 | Input/Output: [(-85 75 16 -35) -85]
Test Case: 849 | Input/Output: [(-41 54 -89 13) -89]
Test Case: 850 | Input/Output: [(-88 72 40 -56) -88]
Test Case: 851 | Input/Output: [(83 48 -57 -2) -57]
Test Case: 852 | Input/Output: [(-75 -97 73 -34) -97]
Test Case: 853 | Input/Output: [(-54 39 -48 21) -54]
Test Case: 854 | Input/Output: [(98 100 15 32) 15]
Test Case: 855 | Input/Output: [(-73 75 -41 -5) -73]
Test Case: 856 | Input/Output: [(-88 -22 -57 98) -88]
Test Case: 857 | Input/Output: [(-61 55 -41 11) -61]
Test Case: 858 | Input/Output: [(-72 -31 96 -27) -72]
Test Case: 859 | Input/Output: [(29 -17 74 -4) -17]
Test Case: 860 | Input/Output: [(35 97 -42 14) -42]
Test Case: 861 | Input/Output: [(-93 -58 -80 -51) -93]
Test Case: 862 | Input/Output: [(-100 25 -90 -5) -100]
Test Case: 863 | Input/Output: [(48 -51 44 -54) -54]
Test Case: 864 | Input/Output: [(-46 -18 -46 -100) -100]
Test Case: 865 | Input/Output: [(87 9 58 45) 9]
Test Case: 866 | Input/Output: [(-7 -38 -9 -55) -55]
Test Case: 867 | Input/Output: [(-68 89 -49 -96) -96]
Test Case: 868 | Input/Output: [(-40 60 -5 -89) -89]
Test Case: 869 | Input/Output: [(-32 -91 77 -92) -92]
Test Case: 870 | Input/Output: [(-95 -92 -95 -51) -95]
Test Case: 871 | Input/Output: [(-89 -31 -86 59) -89]
Test Case: 872 | Input/Output: [(38 54 82 -68) -68]
Test Case: 873 | Input/Output: [(-72 54 -23 -94) -94]
Test Case: 874 | Input/Output: [(-2 -100 -92 -68) -100]
Test Case: 875 | Input/Output: [(-12 73 29 74) -12]
Test Case: 876 | Input/Output: [(51 -45 56 -77) -77]
Test Case: 877 | Input/Output: [(77 57 87 -95) -95]
Test Case: 878 | Input/Output: [(13 -75 -24 53) -75]
Test Case: 879 | Input/Output: [(-41 23 -77 37) -77]
Test Case: 880 | Input/Output: [(-14 -79 -65 -88) -88]
Test Case: 881 | Input/Output: [(14 99 -7 -83) -83]
Test Case: 882 | Input/Output: [(73 -75 -62 17) -75]
Test Case: 883 | Input/Output: [(52 79 -68 -30) -68]
Test Case: 884 | Input/Output: [(55 70 36 94) 36]
Test Case: 885 | Input/Output: [(78 57 56 -98) -98]
Test Case: 886 | Input/Output: [(-6 -60 -29 46) -60]
Test Case: 887 | Input/Output: [(63 -9 -47 -3) -47]
Test Case: 888 | Input/Output: [(30 10 -76 -82) -82]
Test Case: 889 | Input/Output: [(15 69 -24 96) -24]
Test Case: 890 | Input/Output: [(-25 79 29 2) -25]
Test Case: 891 | Input/Output: [(80 2 -77 -48) -77]
Test Case: 892 | Input/Output: [(-7 -5 -99 70) -99]
Test Case: 893 | Input/Output: [(-93 85 -65 22) -93]
Test Case: 894 | Input/Output: [(28 -84 26 92) -84]
Test Case: 895 | Input/Output: [(-71 -3 13 91) -71]
Test Case: 896 | Input/Output: [(8 -22 80 -41) -41]
Test Case: 897 | Input/Output: [(65 -95 1 63) -95]
Test Case: 898 | Input/Output: [(-69 -81 18 8) -81]
Test Case: 899 | Input/Output: [(-33 -93 -63 -29) -93]
Test Case: 900 | Input/Output: [(24 -40 84 6) -40]
Test Case: 901 | Input/Output: [(15 -15 23 -86) -86]
Test Case: 902 | Input/Output: [(-92 80 15 -55) -92]
Test Case: 903 | Input/Output: [(-66 88 -41 -75) -75]
Test Case: 904 | Input/Output: [(45 39 63 -10) -10]
Test Case: 905 | Input/Output: [(16 0 99 -4) -4]
Test Case: 906 | Input/Output: [(-42 -25 -30 53) -42]
Test Case: 907 | Input/Output: [(-49 69 20 26) -49]
Test Case: 908 | Input/Output: [(-22 78 -69 49) -69]
Test Case: 909 | Input/Output: [(-21 -39 42 41) -39]
Test Case: 910 | Input/Output: [(-90 -63 -90 60) -90]
Test Case: 911 | Input/Output: [(-16 -22 13 63) -22]
Test Case: 912 | Input/Output: [(7 -81 -71 69) -81]
Test Case: 913 | Input/Output: [(42 96 -79 47) -79]
Test Case: 914 | Input/Output: [(19 -28 26 63) -28]
Test Case: 915 | Input/Output: [(92 80 -10 88) -10]
Test Case: 916 | Input/Output: [(-96 -41 -84 -27) -96]
Test Case: 917 | Input/Output: [(37 13 -19 -75) -75]
Test Case: 918 | Input/Output: [(-76 18 94 99) -76]
Test Case: 919 | Input/Output: [(-27 -68 70 -12) -68]
Test Case: 920 | Input/Output: [(35 -16 69 48) -16]
Test Case: 921 | Input/Output: [(43 26 95 -22) -22]
Test Case: 922 | Input/Output: [(39 -88 -80 -66) -88]
Test Case: 923 | Input/Output: [(-67 -88 86 -73) -88]
Test Case: 924 | Input/Output: [(-72 99 63 5) -72]
Test Case: 925 | Input/Output: [(36 19 38 -43) -43]
Test Case: 926 | Input/Output: [(62 6 -18 38) -18]
Test Case: 927 | Input/Output: [(-92 55 95 -43) -92]
Test Case: 928 | Input/Output: [(-9 -79 98 61) -79]
Test Case: 929 | Input/Output: [(84 -62 -93 92) -93]
Test Case: 930 | Input/Output: [(-41 54 -6 17) -41]
Test Case: 931 | Input/Output: [(15 57 30 9) 9]
Test Case: 932 | Input/Output: [(-1 82 57 29) -1]
Test Case: 933 | Input/Output: [(36 41 -64 81) -64]
Test Case: 934 | Input/Output: [(58 -11 -46 29) -46]
Test Case: 935 | Input/Output: [(9 -72 -94 64) -94]
Test Case: 936 | Input/Output: [(73 78 83 -77) -77]
Test Case: 937 | Input/Output: [(-21 20 -71 21) -71]
Test Case: 938 | Input/Output: [(57 -58 74 -68) -68]
Test Case: 939 | Input/Output: [(-94 10 -64 -13) -94]
Test Case: 940 | Input/Output: [(30 -2 -28 -9) -28]
Test Case: 941 | Input/Output: [(56 -35 82 34) -35]
Test Case: 942 | Input/Output: [(-37 71 -100 -5) -100]
Test Case: 943 | Input/Output: [(-49 -62 -72 -94) -94]
Test Case: 944 | Input/Output: [(89 60 87 -72) -72]
Test Case: 945 | Input/Output: [(-76 19 53 -69) -76]
Test Case: 946 | Input/Output: [(-48 29 18 85) -48]
Test Case: 947 | Input/Output: [(73 -12 -75 14) -75]
Test Case: 948 | Input/Output: [(85 76 23 -99) -99]
Test Case: 949 | Input/Output: [(12 96 91 95) 12]
Test Case: 950 | Input/Output: [(-93 -55 -50 -26) -93]
Test Case: 951 | Input/Output: [(69 -47 21 -29) -47]
Test Case: 952 | Input/Output: [(18 -12 14 -62) -62]
Test Case: 953 | Input/Output: [(-86 79 17 81) -86]
Test Case: 954 | Input/Output: [(-52 94 19 67) -52]
Test Case: 955 | Input/Output: [(51 -12 41 -24) -24]
Test Case: 956 | Input/Output: [(-78 67 90 -60) -78]
Test Case: 957 | Input/Output: [(80 -25 -61 34) -61]
Test Case: 958 | Input/Output: [(100 -52 -56 -11) -56]
Test Case: 959 | Input/Output: [(13 73 -83 25) -83]
Test Case: 960 | Input/Output: [(33 -94 84 -90) -94]
Test Case: 961 | Input/Output: [(-54 65 -60 22) -60]
Test Case: 962 | Input/Output: [(-1 -63 -8 97) -63]
Test Case: 963 | Input/Output: [(79 91 92 93) 79]
Test Case: 964 | Input/Output: [(-52 -43 35 76) -52]
Test Case: 965 | Input/Output: [(67 -88 59 -50) -88]
Test Case: 966 | Input/Output: [(10 87 49 -62) -62]
Test Case: 967 | Input/Output: [(11 60 -51 -26) -51]
Test Case: 968 | Input/Output: [(33 -39 -9 7) -39]
Test Case: 969 | Input/Output: [(20 23 -85 -26) -85]
Test Case: 970 | Input/Output: [(-71 29 10 63) -71]
Test Case: 971 | Input/Output: [(37 88 13 6) 6]
Test Case: 972 | Input/Output: [(-79 86 49 92) -79]
Test Case: 973 | Input/Output: [(-2 82 94 100) -2]
Test Case: 974 | Input/Output: [(-3 77 -87 22) -87]
Test Case: 975 | Input/Output: [(-72 -18 -6 63) -72]
Test Case: 976 | Input/Output: [(-7 -16 49 13) -16]
Test Case: 977 | Input/Output: [(-42 -27 29 -29) -42]
Test Case: 978 | Input/Output: [(-98 38 60 -80) -98]
Test Case: 979 | Input/Output: [(65 66 -41 28) -41]
Test Case: 980 | Input/Output: [(-30 22 82 -16) -30]
Test Case: 981 | Input/Output: [(13 -6 -9 -13) -13]
Test Case: 982 | Input/Output: [(-1 -23 -91 50) -91]
Test Case: 983 | Input/Output: [(59 -49 -87 -98) -98]
Test Case: 984 | Input/Output: [(87 97 -12 -63) -63]
Test Case: 985 | Input/Output: [(14 32 -6 70) -6]
Test Case: 986 | Input/Output: [(-100 32 -3 0) -100]
Test Case: 987 | Input/Output: [(-34 92 -31 96) -34]
Test Case: 988 | Input/Output: [(73 33 -79 50) -79]
Test Case: 989 | Input/Output: [(-51 2 54 93) -51]
Test Case: 990 | Input/Output: [(2 -76 50 -11) -76]
Test Case: 991 | Input/Output: [(62 -39 46 -74) -74]
Test Case: 992 | Input/Output: [(65 78 36 -1) -1]
Test Case: 993 | Input/Output: [(80 74 15 -83) -83]
Test Case: 994 | Input/Output: [(0 -51 -4 76) -51]
Test Case: 995 | Input/Output: [(-96 -88 21 59) -96]
Test Case: 996 | Input/Output: [(-41 42 -48 -90) -90]
Test Case: 997 | Input/Output: [(45 -81 -39 -49) -81]
Test Case: 998 | Input/Output: [(22 -29 -95 -94) -95]
Test Case: 999 | Input/Output: [(-19 73 27 -100) -100]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -85 -5 -101 -1 62 -46 28 44 119 -30 -67 -39 125 99 68 -31
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-98 -100 -100 -100] -100] [[11 11 11 5] 5] [[-27 -27 -27 -42] -42] [[51 51 52 51] 51] [[40 40 -80 40] -80] [[-32 -54 -54 -54] -54] [[-1 95 95 95] -1] [[24 24 24 -43] -43] [[-93 -93 73 -93] -93] [[-97 88 88 88] -97] [(42 42 42 42) 42] [(-59 -59 -59 -59) -59] [(56 56 56 56) 56] [(100 100 100 100) 100] [(8 8 8 8) 8] [(74 50 12 78) 12] [(28 71 12 78) 12] [(58 65 23 14) 14] [(53 40 99 92) 40] [(3 72 80 92) 3] [(57 75 58 10) 10] [(1 86 89 78) 1] [(81 0 90 7) 0] [(81 27 60 78) 27] [(76 21 30 40) 21] [(17 46 81 10) 10] [(49 42 32 96) 32] [(51 94 81 1) 1] [(72 74 68 94) 68] [(52 65 96 96) 52] [(27 13 31 95) 13] [(19 36 86 41) 19] [(54 25 19 24) 19] [(36 56 7 71) 7] [(71 47 33 78) 33] [(-64 -99 44 96) -99] [(-7 10 60 -54) -54] [(-65 70 -2 -98) -98] [(-55 -58 -23 -79) -79] [(94 -85 -96 -75) -96] [(16 94 -19 -10) -19] [(-47 -77 -4 86) -77] [(67 -91 -6 -26) -91] [(-77 -73 33 14) -77] [(29 40 95 -95) -95] [(-12 -58 95 68) -58] [(-43 -28 73 -74) -74] [(94 -28 77 93) -28] [(60 18 -57 56) -57] [(11 -71 15 -30) -71] [(10 85 46 -100) -100] [(-5 -32 -93 -15) -93] [(-85 94 77 82) -85] [(54 100 90 69) 54] [(50 89 -35 74) -35] [(37 -20 66 -44) -44] [(-48 66 86 71) -48] [(-94 -81 11 -51) -94] [(-62 46 52 -59) -62] [(-2 -30 -48 43) -48] [(-32 43 -65 -2) -65] [(-93 73 88 -56) -93] [(10 -40 -57 69) -57] [(-12 14 20 36) -12] [(93 -72 -85 -25) -85] [(45 -87 70 80) -87] [(88 18 16 -96) -96] [(-62 -88 -80 -61) -88] [(19 56 49 -4) -4] [(-17 -79 -2 -38) -79] [(-1 -14 24 80) -14] [(-50 68 -96 9) -96] [(41 -55 70 91) -55] [(-93 -86 -9 -40) -93] [(64 -87 -59 73) -87] [(55 71 -17 7) -17] [(-27 13 39 11) -27] [(48 34 34 -68) -68] [(-29 45 -3 -50) -50] [(-70 -59 36 56) -70] [(28 -74 -37 -85) -85] [(-28 -9 99 -64) -64] [(36 -69 -32 -2) -69] [(100 58 -2 61) -2] [(3 63 -68 -79) -79] [(42 67 -100 37) -100] [(0 14 -92 9) -92] [(39 -81 -15 97) -81] [(35 84 -38 -43) -43] [(65 -17 90 84) -17] [(79 -63 42 -78) -78] [(-55 -24 -38 58) -55] [(-4 10 15 -100) -100] [(40 -48 61 -4) -48] [(99 100 -74 -81) -81])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_integer_227} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction 30} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_337} {:close 1, :instruction integer_min} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_dup (integer_dec) boolean_dup_items tag_integer_227 boolean_yankdup boolean_yank exec_k (exec_dup () integer_lt exec_if (integer_dup) (exec_swap (boolean_xor exec_while () boolean_frominteger boolean_dup_items exec_do*times () integer_div integer_div in4 30) (integer_mod integer_pop boolean_yankdup in1 print_boolean boolean_yankdup print_integer boolean_shove exec_s_when_autoconstructing (boolean_stackdepth exec_flush exec_y (boolean_invert_second_then_and boolean_or boolean_invert_first_then_and exec_while (boolean_xor integer_yankdup exec_yank boolean_invert_second_then_and boolean_not) boolean_not exec_flush integer_dup_times boolean_eq boolean_swap) integer_yankdup) (boolean_eq exec_y (integer_rot) integer_dec integer_mod integer_lte exec_rot (tagged_337 integer_min) (print_exec (integer_swap integer_eq boolean_rot exec_flush exec_flush exec_pop (exec_dup_items) integer_dup_times exec_y () in2 integer_pop) exec_do*times () boolean_yankdup integer_div boolean_stackdepth integer_flush integer_mod) (boolean_empty integer_swap exec_dup_times () boolean_and exec_s_when_autoconstructing () (in3 exec_dup_items exec_flush) ())) ()))) ())
Lexicase best errors: [1 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 111
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_integer_227} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction 30} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_337} {:close 1, :instruction integer_min} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_dup (integer_dec) boolean_dup_items tag_integer_227 boolean_yankdup boolean_yank exec_k (exec_dup () integer_lt exec_if (integer_dup) (exec_swap (boolean_xor exec_while () boolean_frominteger boolean_dup_items exec_do*times () integer_div integer_div in4 30) (integer_mod integer_pop boolean_yankdup in1 print_boolean boolean_yankdup print_integer boolean_shove exec_s_when_autoconstructing (boolean_stackdepth exec_flush exec_y (boolean_invert_second_then_and boolean_or boolean_invert_first_then_and exec_while (boolean_xor integer_yankdup exec_yank boolean_invert_second_then_and boolean_not) boolean_not exec_flush integer_dup_times boolean_eq boolean_swap) integer_yankdup) (boolean_eq exec_y (integer_rot) integer_dec integer_mod integer_lte exec_rot (tagged_337 integer_min) (print_exec (integer_swap integer_eq boolean_rot exec_flush exec_flush exec_pop (exec_dup_items) integer_dup_times exec_y () in2 integer_pop) exec_do*times () boolean_yankdup integer_div boolean_stackdepth integer_flush integer_mod) (boolean_empty integer_swap exec_dup_times () boolean_and exec_s_when_autoconstructing () (in3 exec_dup_items exec_flush) ())) ()))) ())
Zero cases best errors: [1 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 111
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 23 3 5 5 5 3 3 6 4)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (3 23 3 5 5 5 3 3 6 4)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty})
Best program: (boolean_empty exec_do*range (exec_yank exec_stackdepth in1 print_integer integer_yank) integer_add exec_do*while () exec_dup_items print_integer boolean_empty exec_do*while () exec_y_when_autoconstructing (integer_empty))
Errors: [1 0 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 9.94
Median total errors in population: 10
Error averages by case: (0.997 0.977 0.997 0.995 0.995 0.995 0.997 0.997 0.994 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.857
Average program size in population (points): 71.37
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 516521
--- Timings ---
Current time: 1559583393217 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.8 seconds, 32.4%
Fitness Testing:      1.5 seconds, 63.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction 30} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_337} {:close 1, :instruction integer_min} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_shove boolean_pop integer_max boolean_and in3 exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () integer_min integer_div in4 30 integer_mod integer_pop boolean_yankdup in1 print_boolean boolean_yankdup print_integer boolean_shove exec_s_when_autoconstructing (boolean_stackdepth exec_flush exec_y (boolean_invert_second_then_and boolean_or boolean_invert_first_then_and exec_while (boolean_xor integer_yankdup exec_yank boolean_invert_second_then_and boolean_not) boolean_not exec_flush integer_dup_times boolean_eq boolean_swap) integer_yankdup) (boolean_eq exec_y (integer_rot) integer_dec integer_mod integer_lte exec_rot (tagged_337 integer_min) (print_exec (integer_swap integer_eq boolean_rot exec_flush exec_flush exec_pop (exec_dup_items) integer_dup_times exec_y () in2 integer_pop) exec_do*times () boolean_yankdup integer_div boolean_stackdepth integer_flush integer_mod) (boolean_empty integer_swap exec_dup_times () boolean_and exec_s_when_autoconstructing () (in3 exec_dup_items exec_flush) ())) ())
Lexicase best errors: [0 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 117
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction 30} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_337} {:close 1, :instruction integer_min} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_shove boolean_pop integer_max boolean_and in3 exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () integer_min integer_div in4 30 integer_mod integer_pop boolean_yankdup in1 print_boolean boolean_yankdup print_integer boolean_shove exec_s_when_autoconstructing (boolean_stackdepth exec_flush exec_y (boolean_invert_second_then_and boolean_or boolean_invert_first_then_and exec_while (boolean_xor integer_yankdup exec_yank boolean_invert_second_then_and boolean_not) boolean_not exec_flush integer_dup_times boolean_eq boolean_swap) integer_yankdup) (boolean_eq exec_y (integer_rot) integer_dec integer_mod integer_lte exec_rot (tagged_337 integer_min) (print_exec (integer_swap integer_eq boolean_rot exec_flush exec_flush exec_pop (exec_dup_items) integer_dup_times exec_y () in2 integer_pop) exec_do*times () boolean_yankdup integer_div boolean_stackdepth integer_flush integer_mod) (boolean_empty integer_swap exec_dup_times () boolean_and exec_s_when_autoconstructing () (in3 exec_dup_items exec_flush) ())) ())
Zero cases best errors: [0 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 117
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (282 207 846 181 281 208 282 281 280 174)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (282 207 846 181 281 208 282 281 280 174)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty})
Best program: (boolean_empty exec_do*range (exec_yank exec_stackdepth in1 print_integer integer_yank) integer_add exec_do*while () exec_dup_items print_integer boolean_empty exec_do*while () exec_y_when_autoconstructing (integer_empty))
Errors: [0 1 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.978
Median total errors in population: 8
Error averages by case: (0.718 0.793 0.154 0.819 0.719 0.792 0.718 0.719 0.72 0.826)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.388
Average program size in population (points): 60.01
Average percent parens in population: 0.268
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.482
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.482
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1089003
--- Timings ---
Current time: 1559583395911 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.5 seconds, 47.8%
Fitness Testing:      2.2 seconds, 43.2%
Report:               0.4 seconds,  7.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: 73                 
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in3})
Lexicase best program: (integer_max integer_add boolean_yank exec_when () integer_gt exec_s (in3 integer_mult print_integer boolean_dup integer_empty) (integer_lt integer_add exec_s_when_autoconstructing (boolean_not in3) () ()) ())
Lexicase best errors: [0 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in3})
Zero cases best program: (integer_max integer_add boolean_yank exec_when () integer_gt exec_s (in3 integer_mult print_integer boolean_dup integer_empty) (integer_lt integer_add exec_s_when_autoconstructing (boolean_not in3) () ()) ())
Zero cases best errors: [0 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 108 187 105 186 108 853 108 108 186)
Population mean number of elite cases: 2.06
Count of perfect (error zero) individuals by case: (109 108 187 105 186 108 853 108 108 186)
Population mean number of perfect (error zero) cases: 2.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in3})
Best program: (integer_max integer_add boolean_yank exec_when () integer_gt exec_s (in3 integer_mult print_integer boolean_dup integer_empty) (integer_lt integer_add exec_s_when_autoconstructing (boolean_not in3) () ()) ())
Errors: [0 0 1 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 16
Size: 24
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.942
Median total errors in population: 9
Error averages by case: (0.891 0.892 0.813 0.895 0.814 0.892 0.147 0.892 0.892 0.814)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.243
Average program size in population (points): 60.221
Average percent parens in population: 0.271
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9625
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1642167
--- Timings ---
Current time: 1559583399178 milliseconds
Total Time:           8.5 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.9 seconds, 57.4%
Fitness Testing:      2.9 seconds, 34.2%
Report:               0.6 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction 16} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times})
Lexicase best program: (exec_when (exec_noop in3 print_boolean boolean_rot in2 boolean_empty) print_integer boolean_frominteger exec_pop () boolean_or in2 exec_dup () exec_pop (exec_when () boolean_and 16 integer_dup integer_mod exec_rot (in3 boolean_shove in1 exec_yankdup integer_yank integer_gte) (exec_empty integer_dup integer_fromboolean boolean_invert_second_then_and) (exec_do*times ())))
Lexicase best errors: [0 0 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction 16} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times})
Zero cases best program: (exec_when (exec_noop in3 print_boolean boolean_rot in2 boolean_empty) print_integer boolean_frominteger exec_pop () boolean_or in2 exec_dup () exec_pop (exec_when () boolean_and 16 integer_dup integer_mod exec_rot (in3 boolean_shove in1 exec_yankdup integer_yank integer_gte) (exec_empty integer_dup integer_fromboolean boolean_invert_second_then_and) (exec_do*times ())))
Zero cases best errors: [0 0 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 307 487 307 3 95 889 488 93 307)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (307 307 487 307 3 95 889 488 93 307)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 1, :instruction 30} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_337} {:close 1, :instruction integer_min} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop})
Best program: (exec_noop boolean_yank in2 integer_swap print_integer boolean_invert_second_then_and integer_pop exec_flush boolean_rot integer_stackdepth integer_dup_items integer_dup_items exec_if () (integer_dup_items) boolean_rot integer_dup_times integer_gt boolean_frominteger boolean_dup_items exec_do*times () integer_div integer_div in4 30 integer_mod integer_pop exec_k_when_autoconstructing (in1 print_boolean boolean_yankdup print_integer boolean_shove exec_s_when_autoconstructing (boolean_stackdepth exec_flush exec_y (boolean_invert_second_then_and exec_do*while (boolean_invert_first_then_and exec_while (boolean_xor integer_yankdup exec_yank boolean_invert_second_then_and boolean_not) boolean_not exec_flush integer_dup_times boolean_eq boolean_swap) integer_yankdup) boolean_eq exec_y (integer_rot) integer_dec integer_mod integer_lte exec_rot (tagged_337 integer_min) (print_exec (integer_swap integer_eq boolean_rot exec_flush exec_flush exec_pop ())) ()) () ()) ())
Errors: [0 0 1 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 67
Size: 85
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 6.717
Median total errors in population: 7
Error averages by case: (0.693 0.693 0.513 0.693 0.997 0.905 0.111 0.512 0.907 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.747
Average program size in population (points): 45.96
Average percent parens in population: 0.269
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.41875
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.547
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1971928
--- Timings ---
Current time: 1559583401789 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.9 seconds, 62.0%
Fitness Testing:      3.3 seconds, 29.7%
Report:               0.8 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 78                 
Correct output: 12                  | Program output: 78                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 92                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 94                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 95                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 71                 
Correct output: 33                  | Program output: 78                 
Correct output: -99                 | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: 86                 
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 68                 
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: 82                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: 74                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: -51                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 43                 
Correct output: -65                 | Program output: -2                 
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: 69                 
Correct output: -12                 | Program output: 36                 
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -61                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: 80                 
Correct output: -96                 | Program output: 9                  
Correct output: -55                 | Program output: 91                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: 73                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 56                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 84                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 58                 
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap})
Lexicase best program: (print_integer exec_if (boolean_invert_first_then_and exec_if (exec_do*range (exec_stackdepth exec_shove () integer_lt integer_swap) boolean_pop boolean_dup) (exec_eq boolean_or exec_do*while () exec_dup_times (integer_lt) in4 boolean_empty integer_gt integer_inc exec_y_when_autoconstructing () exec_empty in4) print_integer boolean_dup_items exec_rot (print_integer) (integer_mult exec_y (print_integer boolean_or) integer_fromboolean integer_sub boolean_eq) (integer_min exec_eq exec_noop exec_when () integer_gte exec_eq boolean_yankdup boolean_xor boolean_yank exec_swap (boolean_flush boolean_shove integer_mult boolean_and integer_add exec_dup (boolean_xor boolean_empty boolean_dup_times) exec_dup_items) (exec_empty) exec_yank in3 boolean_shove boolean_or exec_k (boolean_rot exec_dup_times () exec_do*range (in1 integer_min exec_rot () (exec_y_when_autoconstructing () boolean_swap) (boolean_dup_items) exec_swap (boolean_and integer_swap) ())) ())) ())
Lexicase best errors: [0 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 100
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap})
Zero cases best program: (print_integer exec_if (boolean_invert_first_then_and exec_if (exec_do*range (exec_stackdepth exec_shove () integer_lt integer_swap) boolean_pop boolean_dup) (exec_eq boolean_or exec_do*while () exec_dup_times (integer_lt) in4 boolean_empty integer_gt integer_inc exec_y_when_autoconstructing () exec_empty in4) print_integer boolean_dup_items exec_rot (print_integer) (integer_mult exec_y (print_integer boolean_or) integer_fromboolean integer_sub boolean_eq) (integer_min exec_eq exec_noop exec_when () integer_gte exec_eq boolean_yankdup boolean_xor boolean_yank exec_swap (boolean_flush boolean_shove integer_mult boolean_and integer_add exec_dup (boolean_xor boolean_empty boolean_dup_times) exec_dup_items) (exec_empty) exec_yank in3 boolean_shove boolean_or exec_k (boolean_rot exec_dup_times () exec_do*range (in1 integer_min exec_rot () (exec_y_when_autoconstructing () boolean_swap) (boolean_dup_items) exec_swap (boolean_and integer_swap) ())) ())) ())
Zero cases best errors: [0 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 100
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 409 204 189 90 189 203 189 205 206)
Population mean number of elite cases: 2.09
Count of perfect (error zero) individuals by case: (205 409 204 189 90 189 203 189 205 206)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot})
Best program: (exec_s (boolean_shove boolean_empty integer_dup_times in1 integer_inc exec_shove (integer_gte) in4 integer_sub print_integer exec_swap () () boolean_dup exec_dup (integer_max exec_k_when_autoconstructing (exec_y () exec_do*while (integer_lt exec_if (integer_yank) (integer_dup_times integer_swap exec_s_when_autoconstructing (integer_div in3 exec_dup_items) (exec_when () integer_shove exec_pop (boolean_invert_first_then_and boolean_dup) integer_min) (integer_yankdup integer_flush boolean_and integer_shove exec_k (exec_yank boolean_xor in3 print_boolean boolean_stackdepth exec_when (integer_gte print_integer integer_gte exec_do*range (boolean_stackdepth exec_do*range (boolean_eq boolean_empty integer_rot boolean_eq boolean_rot)))) ())))) ())) () ())
Errors: [0 1 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 79
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 7.911
Median total errors in population: 9
Error averages by case: (0.795 0.591 0.796 0.811 0.91 0.811 0.797 0.811 0.795 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.133
Average program size in population (points): 46.952
Average percent parens in population: 0.249
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.95625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2317763
--- Timings ---
Current time: 1559583404618 milliseconds
Total Time:          13.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.8 seconds, 65.0%
Fitness Testing:      3.7 seconds, 27.1%
Report:               1.0 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Lexicase best program: (integer_dup_items boolean_pop integer_max boolean_and in3 exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_rot integer_lt integer_dup exec_dup (exec_swap (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_s_when_autoconstructing (-88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ()))) () ()))
Lexicase best errors: [1 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Zero cases best program: (integer_dup_items boolean_pop integer_max boolean_and in3 exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_rot integer_lt integer_dup exec_dup (exec_swap (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_s_when_autoconstructing (-88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ()))) () ()))
Zero cases best errors: [1 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (447 73 769 73 447 247 246 91 862 442)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (447 73 769 73 447 247 246 91 862 442)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Best program: (integer_dup_items boolean_pop integer_max boolean_and in3 exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_rot integer_lt integer_dup exec_dup (exec_swap (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_s_when_autoconstructing (-88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ()))) () ()))
Errors: [1 0 0 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 45
Size: 69
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 6.303
Median total errors in population: 6
Error averages by case: (0.553 0.927 0.231 0.927 0.553 0.753 0.754 0.909 0.138 0.558)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.569
Average program size in population (points): 49.341
Average percent parens in population: 0.280
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.361375
Median age in population: 7.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2777371
--- Timings ---
Current time: 1559583407793 milliseconds
Total Time:          16.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.0 seconds, 65.6%
Fitness Testing:      4.2 seconds, 24.9%
Report:               1.5 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_323} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while})
Lexicase best program: (in2 boolean_rot integer_fromboolean exec_s (integer_stackdepth integer_dup tag_exec_323 (in3) exec_while (boolean_invert_first_then_and integer_div) integer_lt integer_gt) (exec_y_when_autoconstructing (boolean_eq) boolean_invert_first_then_and integer_swap exec_yankdup) (exec_eq) exec_k_when_autoconstructing (boolean_dup_times) (print_integer integer_inc integer_yank in4 print_integer boolean_rot integer_rot) exec_while ())
Lexicase best errors: [0 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_323} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_while})
Zero cases best program: (in2 boolean_rot integer_fromboolean exec_s (integer_stackdepth integer_dup tag_exec_323 (in3) exec_while (boolean_invert_first_then_and integer_div) integer_lt integer_gt) (exec_y_when_autoconstructing (boolean_eq) boolean_invert_first_then_and integer_swap exec_yankdup) (exec_eq) exec_k_when_autoconstructing (boolean_dup_times) (print_integer integer_inc integer_yank in4 print_integer boolean_rot integer_rot) exec_while ())
Zero cases best errors: [0 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (812 434 357 107 328 327 356 105 359 708)
Population mean number of elite cases: 3.89
Count of perfect (error zero) individuals by case: (812 434 357 107 328 327 356 105 359 708)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Best program: (integer_dup_items boolean_pop integer_max boolean_and in3 exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_rot integer_lt integer_dup exec_dup (exec_swap (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_s_when_autoconstructing (-88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ()))) () ()))
Errors: [0 0 1 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 45
Size: 69
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 6.107
Median total errors in population: 5
Error averages by case: (0.188 0.566 0.643 0.893 0.672 0.673 0.644 0.895 0.641 0.292)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.819
Average program size in population (points): 59.714
Average percent parens in population: 0.311
Minimum age in population: 6.0
Maximum age in population: 10.5625
Average age in population: 8.655375
Median age in population: 8.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 222
Genome diversity (% unique genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 228
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3474895
--- Timings ---
Current time: 1559583410994 milliseconds
Total Time:          19.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.8 seconds, 64.5%
Fitness Testing:      4.9 seconds, 24.7%
Report:               2.1 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Lexicase best program: (integer_dup_items boolean_pop integer_max boolean_and in3 exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_rot integer_lt integer_dup exec_dup (exec_swap (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_s_when_autoconstructing (-88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ()))) () ()))
Lexicase best errors: [0 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 69
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Zero cases best program: (integer_dup_items boolean_pop integer_max boolean_and in3 exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_rot integer_lt integer_dup exec_dup (exec_swap (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_s_when_autoconstructing (-88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ()))) () ()))
Zero cases best errors: [0 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 69
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (782 212 318 241 417 324 412 451 236 816)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (782 212 318 241 417 324 412 451 236 816)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Best program: (integer_dup_items boolean_pop integer_max boolean_and in3 exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_rot integer_lt integer_dup exec_dup (exec_swap (integer_min) (boolean_flush integer_min integer_sub print_integer integer_shove exec_do*while ()) integer_flush exec_do*times () exec_s_when_autoconstructing (-88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ()))) () ()))
Errors: [0 1 1 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 45
Size: 69
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 5.791
Median total errors in population: 6
Error averages by case: (0.218 0.788 0.682 0.759 0.583 0.676 0.588 0.549 0.764 0.184)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.14
Average program size in population (points): 62.728
Average percent parens in population: 0.324
Minimum age in population: 7.0
Maximum age in population: 11.796875
Average age in population: 10.231703125
Median age in population: 10.265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4247284
--- Timings ---
Current time: 1559583414344 milliseconds
Total Time:          23.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.8 seconds, 63.5%
Fitness Testing:      5.8 seconds, 24.7%
Report:               2.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 78                 
Correct output: 12                  | Program output: 78                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 92                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 94                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 95                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 71                 
Correct output: 33                  | Program output: 78                 
Correct output: -99                 | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: 86                 
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 68                 
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: 82                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: 74                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: -51                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 43                 
Correct output: -65                 | Program output: -2                 
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: 69                 
Correct output: -12                 | Program output: 36                 
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -61                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: 80                 
Correct output: -96                 | Program output: 9                  
Correct output: -55                 | Program output: 91                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: 73                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 56                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 84                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 58                 
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Lexicase best program: (integer_dup_items exec_dup_items exec_if (exec_do*range (integer_lte exec_shove () integer_lt integer_swap) exec_while (boolean_dup) exec_eq boolean_or exec_do*while () exec_dup_times (integer_lt) in4 boolean_empty integer_gt integer_inc exec_y_when_autoconstructing () exec_empty in4) (print_integer boolean_dup_items exec_rot (print_integer) (integer_mult exec_y (print_integer boolean_or) integer_fromboolean exec_flush boolean_eq) (integer_min integer_shove exec_pop (integer_flush exec_do*times () exec_s_when_autoconstructing (-88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ()))) () ()))))
Lexicase best errors: [1 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Zero cases best program: (integer_dup_items exec_dup_items exec_if (exec_do*range (integer_lte exec_shove () integer_lt integer_swap) exec_while (boolean_dup) exec_eq boolean_or exec_do*while () exec_dup_times (integer_lt) in4 boolean_empty integer_gt integer_inc exec_y_when_autoconstructing () exec_empty in4) (print_integer boolean_dup_items exec_rot (print_integer) (integer_mult exec_y (print_integer boolean_or) integer_fromboolean exec_flush boolean_eq) (integer_min integer_shove exec_pop (integer_flush exec_do*times () exec_s_when_autoconstructing (-88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ()))) () ()))))
Zero cases best errors: [1 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 377 213 220 253 399 213 373 212 215)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (383 377 213 220 253 399 213 373 212 215)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction tag_exec_323} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while})
Best program: (in2 boolean_rot integer_fromboolean exec_s (integer_stackdepth integer_dup tag_exec_323 () in3 exec_while (boolean_invert_first_then_and integer_div) integer_lt integer_gt) (exec_y_when_autoconstructing (boolean_eq) boolean_invert_first_then_and integer_swap exec_yankdup exec_eq exec_k_when_autoconstructing (boolean_dup_times) (print_integer integer_inc integer_yank in4 print_integer boolean_rot integer_rot exec_while ())) ())
Errors: [1 1 0 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 39
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.142
Median total errors in population: 6
Error averages by case: (0.617 0.623 0.787 0.78 0.747 0.601 0.787 0.627 0.788 0.785)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.483
Average program size in population (points): 65.305
Average percent parens in population: 0.332
Minimum age in population: 8.0
Maximum age in population: 13.4296875
Average age in population: 11.8187421875
Median age in population: 11.94921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5072897
--- Timings ---
Current time: 1559583417334 milliseconds
Total Time:          26.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.6 seconds, 62.4%
Fitness Testing:      6.6 seconds, 25.0%
Report:               3.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Lexicase best program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ()))))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 64
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Zero cases best program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ()))))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 64
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (823 385 369 413 382 367 436 824 394 376)
Population mean number of elite cases: 4.77
Count of perfect (error zero) individuals by case: (823 385 369 413 382 367 436 824 394 376)
Population mean number of perfect (error zero) cases: 4.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Best program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ()))))
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 43
Size: 64
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 5.231
Median total errors in population: 5
Error averages by case: (0.177 0.615 0.631 0.587 0.618 0.633 0.564 0.176 0.606 0.624)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.109
Average program size in population (points): 61.169
Average percent parens in population: 0.310
Minimum age in population: 9.0
Maximum age in population: 15.0859375
Average age in population: 13.51644921875
Median age in population: 13.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 252
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 257
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5833178
--- Timings ---
Current time: 1559583420545 milliseconds
Total Time:          29.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.4 seconds, 62.4%
Fitness Testing:      7.5 seconds, 25.3%
Report:               3.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Lexicase best program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 70
Percent parens: 0.329
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Zero cases best program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 70
Percent parens: 0.329
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 469 471 447 339 471 467 467 466 847)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (341 469 471 447 339 471 467 467 466 847)
Population mean number of perfect (error zero) cases: 4.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 2, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -88} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y})
Best program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 47
Size: 70
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 5.215
Median total errors in population: 7
Error averages by case: (0.659 0.531 0.529 0.553 0.661 0.529 0.533 0.533 0.534 0.153)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.386
Average program size in population (points): 61.796
Average percent parens in population: 0.313
Minimum age in population: 10.0
Maximum age in population: 16.611328125
Average age in population: 15.151767578125
Median age in population: 15.2529296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 233
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.01
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6623586
--- Timings ---
Current time: 1559583423814 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.2 seconds, 61.8%
Fitness Testing:      8.3 seconds, 25.4%
Report:               4.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 10
Successful program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 70


Auto-simplifying with starting size: 70
step: 0
program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 500
program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1000
program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1500
program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2000
program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2500
program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3000
program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3500
program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4000
program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4500
program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 5000
program: (integer_dup_items boolean_pop integer_max boolean_and integer_flush exec_rot () (integer_yankdup in3 boolean_xor) (exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (integer_div) in1 integer_yankdup exec_noop) integer_yank) exec_s_when_autoconstructing (boolean_rot) (in2) () integer_stackdepth exec_empty exec_do*while () exec_yank integer_inc integer_dup exec_dup (exec_k_when_autoconstructing (integer_min) (in4 integer_min exec_k_when_autoconstructing (integer_min) (boolean_flush integer_min integer_sub print_integer boolean_swap exec_do*while ()) integer_flush exec_do*times () exec_stackdepth -88 exec_k_when_autoconstructing (integer_gt) (exec_do*times (boolean_stackdepth exec_y ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
;;******************************
