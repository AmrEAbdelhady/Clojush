Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[39 -14 -14 -14] -14] [[-78 -78 -78 -12] -78] [[-39 -39 -39 47] -39] [[-88 81 -88 -88] -88] [[-53 -40 -53 -53] -53] [[90 90 -27 90] -27] [[-34 -34 -34 -19] -34] [[-80 -52 -52 -52] -80] [[42 -51 42 42] -51] [[14 14 14 -67] -67] [(25 25 25 25) 25] [(69 69 69 69) 69] [(-53 -53 -53 -53) -53] [(-73 -73 -73 -73) -73] [(-44 -44 -44 -44) -44] [(26 4 45 2) 2] [(64 32 87 52) 32] [(90 77 1 43) 1] [(93 96 9 94) 9] [(95 78 41 32) 32] [(69 52 17 81) 17] [(44 20 73 33) 20] [(26 37 62 96) 26] [(84 22 99 45) 22] [(26 11 56 23) 11] [(77 4 79 37) 4] [(8 88 91 61) 8] [(70 82 78 35) 35] [(16 29 11 48) 11] [(38 63 42 91) 38] [(59 83 82 86) 59] [(20 57 46 12) 12] [(48 63 71 75) 48] [(53 33 9 74) 9] [(17 36 58 64) 17] [(-12 -79 -72 5) -79] [(-37 -9 -42 39) -42] [(4 19 61 68) 4] [(48 -47 19 -97) -97] [(-65 -100 80 13) -100] [(-91 -56 59 -93) -93] [(-28 -67 -72 -17) -72] [(-19 93 -12 -94) -94] [(99 -50 86 56) -50] [(60 -13 57 65) -13] [(43 -2 -26 -71) -71] [(16 -99 -25 -93) -99] [(18 -53 -67 -10) -67] [(-50 17 -20 29) -50] [(-95 -83 44 8) -95] [(78 28 6 -4) -4] [(18 -70 45 -97) -97] [(31 77 7 65) 7] [(-57 69 95 -94) -94] [(-70 -54 75 -50) -70] [(59 -24 37 15) -24] [(54 -37 -2 -60) -60] [(61 -97 -95 -42) -97] [(-16 -3 -96 11) -96] [(-86 71 38 -52) -86] [(-1 9 -34 -14) -34] [(49 -68 62 -46) -68] [(-33 -46 -100 32) -100] [(-40 9 -59 22) -59] [(94 59 -61 -41) -61] [(-6 54 4 -43) -43] [(-50 23 92 -66) -66] [(15 12 17 43) 12] [(76 60 85 65) 60] [(-90 3 49 -48) -90] [(-59 6 -7 38) -59] [(-24 62 33 -81) -81] [(-83 44 74 -74) -83] [(17 -5 53 -18) -18] [(-72 -39 80 -83) -83] [(-19 -81 68 -77) -81] [(88 -23 97 65) -23] [(-37 72 17 65) -37] [(-49 12 -81 43) -81] [(-97 -46 15 -34) -97] [(14 19 59 -67) -67] [(17 35 61 -8) -8] [(53 -50 -76 70) -76] [(90 -35 72 56) -35] [(67 -38 -42 97) -42] [(25 -77 0 -66) -77] [(-22 89 67 -93) -93] [(83 -85 -59 34) -85] [(-80 -71 -100 -59) -100] [(-67 -22 19 -23) -67] [(88 -41 9 18) -41] [(93 19 -90 -37) -90] [(-6 -74 -38 50) -74] [(25 19 63 58) 19] [(72 -5 48 42) -5])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[39 -14 -14 -14] -14]
Train Case:   6 | Input/Output: [[-78 -78 -78 -12] -78]
Train Case:   7 | Input/Output: [[-39 -39 -39 47] -39]
Train Case:   8 | Input/Output: [[-88 81 -88 -88] -88]
Train Case:   9 | Input/Output: [[-53 -40 -53 -53] -53]
Train Case:  10 | Input/Output: [[90 90 -27 90] -27]
Train Case:  11 | Input/Output: [[-34 -34 -34 -19] -34]
Train Case:  12 | Input/Output: [[-80 -52 -52 -52] -80]
Train Case:  13 | Input/Output: [[42 -51 42 42] -51]
Train Case:  14 | Input/Output: [[14 14 14 -67] -67]
Train Case:  15 | Input/Output: [(25 25 25 25) 25]
Train Case:  16 | Input/Output: [(69 69 69 69) 69]
Train Case:  17 | Input/Output: [(-53 -53 -53 -53) -53]
Train Case:  18 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  19 | Input/Output: [(-44 -44 -44 -44) -44]
Train Case:  20 | Input/Output: [(26 4 45 2) 2]
Train Case:  21 | Input/Output: [(64 32 87 52) 32]
Train Case:  22 | Input/Output: [(90 77 1 43) 1]
Train Case:  23 | Input/Output: [(93 96 9 94) 9]
Train Case:  24 | Input/Output: [(95 78 41 32) 32]
Train Case:  25 | Input/Output: [(69 52 17 81) 17]
Train Case:  26 | Input/Output: [(44 20 73 33) 20]
Train Case:  27 | Input/Output: [(26 37 62 96) 26]
Train Case:  28 | Input/Output: [(84 22 99 45) 22]
Train Case:  29 | Input/Output: [(26 11 56 23) 11]
Train Case:  30 | Input/Output: [(77 4 79 37) 4]
Train Case:  31 | Input/Output: [(8 88 91 61) 8]
Train Case:  32 | Input/Output: [(70 82 78 35) 35]
Train Case:  33 | Input/Output: [(16 29 11 48) 11]
Train Case:  34 | Input/Output: [(38 63 42 91) 38]
Train Case:  35 | Input/Output: [(59 83 82 86) 59]
Train Case:  36 | Input/Output: [(20 57 46 12) 12]
Train Case:  37 | Input/Output: [(48 63 71 75) 48]
Train Case:  38 | Input/Output: [(53 33 9 74) 9]
Train Case:  39 | Input/Output: [(17 36 58 64) 17]
Train Case:  40 | Input/Output: [(-12 -79 -72 5) -79]
Train Case:  41 | Input/Output: [(-37 -9 -42 39) -42]
Train Case:  42 | Input/Output: [(4 19 61 68) 4]
Train Case:  43 | Input/Output: [(48 -47 19 -97) -97]
Train Case:  44 | Input/Output: [(-65 -100 80 13) -100]
Train Case:  45 | Input/Output: [(-91 -56 59 -93) -93]
Train Case:  46 | Input/Output: [(-28 -67 -72 -17) -72]
Train Case:  47 | Input/Output: [(-19 93 -12 -94) -94]
Train Case:  48 | Input/Output: [(99 -50 86 56) -50]
Train Case:  49 | Input/Output: [(60 -13 57 65) -13]
Train Case:  50 | Input/Output: [(43 -2 -26 -71) -71]
Train Case:  51 | Input/Output: [(16 -99 -25 -93) -99]
Train Case:  52 | Input/Output: [(18 -53 -67 -10) -67]
Train Case:  53 | Input/Output: [(-50 17 -20 29) -50]
Train Case:  54 | Input/Output: [(-95 -83 44 8) -95]
Train Case:  55 | Input/Output: [(78 28 6 -4) -4]
Train Case:  56 | Input/Output: [(18 -70 45 -97) -97]
Train Case:  57 | Input/Output: [(31 77 7 65) 7]
Train Case:  58 | Input/Output: [(-57 69 95 -94) -94]
Train Case:  59 | Input/Output: [(-70 -54 75 -50) -70]
Train Case:  60 | Input/Output: [(59 -24 37 15) -24]
Train Case:  61 | Input/Output: [(54 -37 -2 -60) -60]
Train Case:  62 | Input/Output: [(61 -97 -95 -42) -97]
Train Case:  63 | Input/Output: [(-16 -3 -96 11) -96]
Train Case:  64 | Input/Output: [(-86 71 38 -52) -86]
Train Case:  65 | Input/Output: [(-1 9 -34 -14) -34]
Train Case:  66 | Input/Output: [(49 -68 62 -46) -68]
Train Case:  67 | Input/Output: [(-33 -46 -100 32) -100]
Train Case:  68 | Input/Output: [(-40 9 -59 22) -59]
Train Case:  69 | Input/Output: [(94 59 -61 -41) -61]
Train Case:  70 | Input/Output: [(-6 54 4 -43) -43]
Train Case:  71 | Input/Output: [(-50 23 92 -66) -66]
Train Case:  72 | Input/Output: [(15 12 17 43) 12]
Train Case:  73 | Input/Output: [(76 60 85 65) 60]
Train Case:  74 | Input/Output: [(-90 3 49 -48) -90]
Train Case:  75 | Input/Output: [(-59 6 -7 38) -59]
Train Case:  76 | Input/Output: [(-24 62 33 -81) -81]
Train Case:  77 | Input/Output: [(-83 44 74 -74) -83]
Train Case:  78 | Input/Output: [(17 -5 53 -18) -18]
Train Case:  79 | Input/Output: [(-72 -39 80 -83) -83]
Train Case:  80 | Input/Output: [(-19 -81 68 -77) -81]
Train Case:  81 | Input/Output: [(88 -23 97 65) -23]
Train Case:  82 | Input/Output: [(-37 72 17 65) -37]
Train Case:  83 | Input/Output: [(-49 12 -81 43) -81]
Train Case:  84 | Input/Output: [(-97 -46 15 -34) -97]
Train Case:  85 | Input/Output: [(14 19 59 -67) -67]
Train Case:  86 | Input/Output: [(17 35 61 -8) -8]
Train Case:  87 | Input/Output: [(53 -50 -76 70) -76]
Train Case:  88 | Input/Output: [(90 -35 72 56) -35]
Train Case:  89 | Input/Output: [(67 -38 -42 97) -42]
Train Case:  90 | Input/Output: [(25 -77 0 -66) -77]
Train Case:  91 | Input/Output: [(-22 89 67 -93) -93]
Train Case:  92 | Input/Output: [(83 -85 -59 34) -85]
Train Case:  93 | Input/Output: [(-80 -71 -100 -59) -100]
Train Case:  94 | Input/Output: [(-67 -22 19 -23) -67]
Train Case:  95 | Input/Output: [(88 -41 9 18) -41]
Train Case:  96 | Input/Output: [(93 19 -90 -37) -90]
Train Case:  97 | Input/Output: [(-6 -74 -38 50) -74]
Train Case:  98 | Input/Output: [(25 19 63 58) 19]
Train Case:  99 | Input/Output: [(72 -5 48 42) -5]
Test Case:   0 | Input/Output: [[-89 -89 -65 -89] -89]
Test Case:   1 | Input/Output: [[-71 -25 -25 -25] -71]
Test Case:   2 | Input/Output: [[68 68 -32 68] -32]
Test Case:   3 | Input/Output: [[-48 -25 -25 -25] -48]
Test Case:   4 | Input/Output: [[-41 -41 -71 -41] -71]
Test Case:   5 | Input/Output: [[5 5 4 5] 4]
Test Case:   6 | Input/Output: [[-68 -16 -68 -68] -68]
Test Case:   7 | Input/Output: [[9 -52 -52 -52] -52]
Test Case:   8 | Input/Output: [[-27 -27 100 -27] -27]
Test Case:   9 | Input/Output: [[-15 -15 -15 16] -15]
Test Case:  10 | Input/Output: [[57 57 -36 57] -36]
Test Case:  11 | Input/Output: [[-29 -27 -27 -27] -29]
Test Case:  12 | Input/Output: [[-77 -82 -82 -82] -82]
Test Case:  13 | Input/Output: [[83 18 18 18] 18]
Test Case:  14 | Input/Output: [[10 -50 10 10] -50]
Test Case:  15 | Input/Output: [[17 61 61 61] 17]
Test Case:  16 | Input/Output: [[-66 -66 -66 -94] -94]
Test Case:  17 | Input/Output: [[-1 -1 -1 89] -1]
Test Case:  18 | Input/Output: [[-6 -39 -6 -6] -39]
Test Case:  19 | Input/Output: [[-86 -86 -86 40] -86]
Test Case:  20 | Input/Output: [[77 -69 -69 -69] -69]
Test Case:  21 | Input/Output: [[-82 -82 57 -82] -82]
Test Case:  22 | Input/Output: [[-57 -70 -70 -70] -70]
Test Case:  23 | Input/Output: [[-66 -66 -66 33] -66]
Test Case:  24 | Input/Output: [[-24 41 41 41] -24]
Test Case:  25 | Input/Output: [[-8 -8 87 -8] -8]
Test Case:  26 | Input/Output: [[-7 -7 -7 43] -7]
Test Case:  27 | Input/Output: [[-3 73 73 73] -3]
Test Case:  28 | Input/Output: [[70 70 70 -92] -92]
Test Case:  29 | Input/Output: [[70 -64 70 70] -64]
Test Case:  30 | Input/Output: [[-86 -86 -40 -86] -86]
Test Case:  31 | Input/Output: [[-9 -9 -9 91] -9]
Test Case:  32 | Input/Output: [[-63 -63 25 -63] -63]
Test Case:  33 | Input/Output: [[-75 -75 -75 94] -75]
Test Case:  34 | Input/Output: [[-68 -68 48 -68] -68]
Test Case:  35 | Input/Output: [[-98 93 93 93] -98]
Test Case:  36 | Input/Output: [[-41 -41 -41 98] -41]
Test Case:  37 | Input/Output: [[-60 -100 -60 -60] -100]
Test Case:  38 | Input/Output: [[-91 91 -91 -91] -91]
Test Case:  39 | Input/Output: [[57 -24 -24 -24] -24]
Test Case:  40 | Input/Output: [[55 -7 -7 -7] -7]
Test Case:  41 | Input/Output: [[39 -64 -64 -64] -64]
Test Case:  42 | Input/Output: [[-100 -52 -52 -52] -100]
Test Case:  43 | Input/Output: [[-65 -65 -65 75] -65]
Test Case:  44 | Input/Output: [[-94 -94 -94 67] -94]
Test Case:  45 | Input/Output: [[82 -65 -65 -65] -65]
Test Case:  46 | Input/Output: [[-19 -30 -19 -19] -30]
Test Case:  47 | Input/Output: [[45 45 31 45] 31]
Test Case:  48 | Input/Output: [[26 26 26 -86] -86]
Test Case:  49 | Input/Output: [[-35 -35 -35 -54] -54]
Test Case:  50 | Input/Output: [[0 14 14 14] 0]
Test Case:  51 | Input/Output: [[-64 84 84 84] -64]
Test Case:  52 | Input/Output: [[48 48 48 -98] -98]
Test Case:  53 | Input/Output: [[-66 -65 -65 -65] -66]
Test Case:  54 | Input/Output: [[-75 -75 -75 -88] -88]
Test Case:  55 | Input/Output: [[56 -11 56 56] -11]
Test Case:  56 | Input/Output: [[-59 -87 -87 -87] -87]
Test Case:  57 | Input/Output: [[0 0 -30 0] -30]
Test Case:  58 | Input/Output: [[68 68 6 68] 6]
Test Case:  59 | Input/Output: [[31 31 31 87] 31]
Test Case:  60 | Input/Output: [[19 19 6 19] 6]
Test Case:  61 | Input/Output: [[1 1 1 -23] -23]
Test Case:  62 | Input/Output: [[13 94 13 13] 13]
Test Case:  63 | Input/Output: [[-80 84 -80 -80] -80]
Test Case:  64 | Input/Output: [[-84 -84 -84 56] -84]
Test Case:  65 | Input/Output: [[42 42 42 -72] -72]
Test Case:  66 | Input/Output: [[40 33 33 33] 33]
Test Case:  67 | Input/Output: [[-93 -93 -93 -12] -93]
Test Case:  68 | Input/Output: [[-29 -29 -63 -29] -63]
Test Case:  69 | Input/Output: [[73 73 73 -26] -26]
Test Case:  70 | Input/Output: [[-88 -88 -88 -50] -88]
Test Case:  71 | Input/Output: [[-42 -42 -30 -42] -42]
Test Case:  72 | Input/Output: [[3 97 3 3] 3]
Test Case:  73 | Input/Output: [[52 52 -27 52] -27]
Test Case:  74 | Input/Output: [[33 -31 -31 -31] -31]
Test Case:  75 | Input/Output: [[98 98 98 -40] -40]
Test Case:  76 | Input/Output: [[60 4 4 4] 4]
Test Case:  77 | Input/Output: [[-100 -100 -42 -100] -100]
Test Case:  78 | Input/Output: [[-20 -76 -20 -20] -76]
Test Case:  79 | Input/Output: [[4 4 0 4] 0]
Test Case:  80 | Input/Output: [[95 -37 -37 -37] -37]
Test Case:  81 | Input/Output: [[47 47 -34 47] -34]
Test Case:  82 | Input/Output: [[74 74 74 -86] -86]
Test Case:  83 | Input/Output: [[-36 -77 -36 -36] -77]
Test Case:  84 | Input/Output: [[-79 -36 -36 -36] -79]
Test Case:  85 | Input/Output: [[-45 -45 -45 -40] -45]
Test Case:  86 | Input/Output: [[-68 -68 -98 -68] -98]
Test Case:  87 | Input/Output: [[31 53 53 53] 31]
Test Case:  88 | Input/Output: [[-70 -70 -82 -70] -82]
Test Case:  89 | Input/Output: [[46 46 46 -50] -50]
Test Case:  90 | Input/Output: [[27 27 27 11] 11]
Test Case:  91 | Input/Output: [[8 -46 8 8] -46]
Test Case:  92 | Input/Output: [[-43 -43 -32 -43] -43]
Test Case:  93 | Input/Output: [[-50 13 13 13] -50]
Test Case:  94 | Input/Output: [[-20 98 98 98] -20]
Test Case:  95 | Input/Output: [[44 -97 -97 -97] -97]
Test Case:  96 | Input/Output: [[95 95 95 30] 30]
Test Case:  97 | Input/Output: [[10 -1 10 10] -1]
Test Case:  98 | Input/Output: [[32 89 89 89] 32]
Test Case:  99 | Input/Output: [[22 22 22 -91] -91]
Test Case: 100 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 101 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 102 | Input/Output: [(34 34 34 34) 34]
Test Case: 103 | Input/Output: [(14 14 14 14) 14]
Test Case: 104 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 105 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 106 | Input/Output: [(41 41 41 41) 41]
Test Case: 107 | Input/Output: [(78 78 78 78) 78]
Test Case: 108 | Input/Output: [(26 26 26 26) 26]
Test Case: 109 | Input/Output: [(36 36 36 36) 36]
Test Case: 110 | Input/Output: [(25 25 25 25) 25]
Test Case: 111 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 112 | Input/Output: [(87 87 87 87) 87]
Test Case: 113 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 114 | Input/Output: [(14 14 14 14) 14]
Test Case: 115 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 116 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 117 | Input/Output: [(0 0 0 0) 0]
Test Case: 118 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 119 | Input/Output: [(36 36 36 36) 36]
Test Case: 120 | Input/Output: [(2 2 2 2) 2]
Test Case: 121 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 122 | Input/Output: [(59 59 59 59) 59]
Test Case: 123 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 124 | Input/Output: [(23 23 23 23) 23]
Test Case: 125 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 126 | Input/Output: [(67 67 67 67) 67]
Test Case: 127 | Input/Output: [(64 64 64 64) 64]
Test Case: 128 | Input/Output: [(22 22 22 22) 22]
Test Case: 129 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 130 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 131 | Input/Output: [(17 17 17 17) 17]
Test Case: 132 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 133 | Input/Output: [(63 63 63 63) 63]
Test Case: 134 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 135 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 136 | Input/Output: [(41 41 41 41) 41]
Test Case: 137 | Input/Output: [(100 100 100 100) 100]
Test Case: 138 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 139 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 140 | Input/Output: [(63 63 63 63) 63]
Test Case: 141 | Input/Output: [(10 10 10 10) 10]
Test Case: 142 | Input/Output: [(85 85 85 85) 85]
Test Case: 143 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 144 | Input/Output: [(27 27 27 27) 27]
Test Case: 145 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 146 | Input/Output: [(15 15 15 15) 15]
Test Case: 147 | Input/Output: [(74 74 74 74) 74]
Test Case: 148 | Input/Output: [(37 37 37 37) 37]
Test Case: 149 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 150 | Input/Output: [(92 92 92 92) 92]
Test Case: 151 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 152 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 153 | Input/Output: [(32 32 32 32) 32]
Test Case: 154 | Input/Output: [(0 0 0 0) 0]
Test Case: 155 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 156 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 157 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 158 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 159 | Input/Output: [(56 56 56 56) 56]
Test Case: 160 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 161 | Input/Output: [(60 60 60 60) 60]
Test Case: 162 | Input/Output: [(92 92 92 92) 92]
Test Case: 163 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 164 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 165 | Input/Output: [(86 86 86 86) 86]
Test Case: 166 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 167 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 168 | Input/Output: [(55 55 55 55) 55]
Test Case: 169 | Input/Output: [(58 58 58 58) 58]
Test Case: 170 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 171 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 172 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 173 | Input/Output: [(91 91 91 91) 91]
Test Case: 174 | Input/Output: [(87 87 87 87) 87]
Test Case: 175 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 176 | Input/Output: [(62 62 62 62) 62]
Test Case: 177 | Input/Output: [(35 35 35 35) 35]
Test Case: 178 | Input/Output: [(69 69 69 69) 69]
Test Case: 179 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 180 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 181 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 182 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 183 | Input/Output: [(90 90 90 90) 90]
Test Case: 184 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 185 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 186 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 187 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 188 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 189 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 190 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 191 | Input/Output: [(93 93 93 93) 93]
Test Case: 192 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 193 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 194 | Input/Output: [(29 29 29 29) 29]
Test Case: 195 | Input/Output: [(90 90 90 90) 90]
Test Case: 196 | Input/Output: [(24 24 24 24) 24]
Test Case: 197 | Input/Output: [(2 2 2 2) 2]
Test Case: 198 | Input/Output: [(12 12 12 12) 12]
Test Case: 199 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 200 | Input/Output: [(80 83 40 29) 29]
Test Case: 201 | Input/Output: [(40 76 74 47) 40]
Test Case: 202 | Input/Output: [(30 13 44 28) 13]
Test Case: 203 | Input/Output: [(98 58 26 39) 26]
Test Case: 204 | Input/Output: [(91 37 22 95) 22]
Test Case: 205 | Input/Output: [(19 40 1 49) 1]
Test Case: 206 | Input/Output: [(72 16 83 11) 11]
Test Case: 207 | Input/Output: [(5 25 27 100) 5]
Test Case: 208 | Input/Output: [(64 5 20 81) 5]
Test Case: 209 | Input/Output: [(4 48 85 6) 4]
Test Case: 210 | Input/Output: [(95 65 6 81) 6]
Test Case: 211 | Input/Output: [(1 69 52 12) 1]
Test Case: 212 | Input/Output: [(13 61 49 45) 13]
Test Case: 213 | Input/Output: [(21 50 47 71) 21]
Test Case: 214 | Input/Output: [(8 83 5 30) 5]
Test Case: 215 | Input/Output: [(82 78 50 64) 50]
Test Case: 216 | Input/Output: [(70 11 47 84) 11]
Test Case: 217 | Input/Output: [(27 35 49 56) 27]
Test Case: 218 | Input/Output: [(93 34 18 14) 14]
Test Case: 219 | Input/Output: [(67 1 85 59) 1]
Test Case: 220 | Input/Output: [(28 61 42 94) 28]
Test Case: 221 | Input/Output: [(5 35 75 31) 5]
Test Case: 222 | Input/Output: [(82 11 39 77) 11]
Test Case: 223 | Input/Output: [(51 81 10 25) 10]
Test Case: 224 | Input/Output: [(14 84 96 85) 14]
Test Case: 225 | Input/Output: [(78 71 15 80) 15]
Test Case: 226 | Input/Output: [(44 55 88 82) 44]
Test Case: 227 | Input/Output: [(40 43 16 7) 7]
Test Case: 228 | Input/Output: [(34 21 9 2) 2]
Test Case: 229 | Input/Output: [(29 70 14 64) 14]
Test Case: 230 | Input/Output: [(89 1 10 77) 1]
Test Case: 231 | Input/Output: [(56 26 56 86) 26]
Test Case: 232 | Input/Output: [(19 78 73 38) 19]
Test Case: 233 | Input/Output: [(33 55 21 2) 2]
Test Case: 234 | Input/Output: [(80 8 39 57) 8]
Test Case: 235 | Input/Output: [(95 24 4 19) 4]
Test Case: 236 | Input/Output: [(7 92 27 99) 7]
Test Case: 237 | Input/Output: [(9 75 72 69) 9]
Test Case: 238 | Input/Output: [(42 87 57 11) 11]
Test Case: 239 | Input/Output: [(85 74 77 98) 74]
Test Case: 240 | Input/Output: [(49 35 53 0) 0]
Test Case: 241 | Input/Output: [(15 27 20 57) 15]
Test Case: 242 | Input/Output: [(68 95 18 64) 18]
Test Case: 243 | Input/Output: [(85 64 37 39) 37]
Test Case: 244 | Input/Output: [(35 37 41 86) 35]
Test Case: 245 | Input/Output: [(39 21 77 67) 21]
Test Case: 246 | Input/Output: [(58 98 4 16) 4]
Test Case: 247 | Input/Output: [(55 46 58 84) 46]
Test Case: 248 | Input/Output: [(16 6 0 29) 0]
Test Case: 249 | Input/Output: [(4 62 35 59) 4]
Test Case: 250 | Input/Output: [(82 29 10 50) 10]
Test Case: 251 | Input/Output: [(72 73 61 72) 61]
Test Case: 252 | Input/Output: [(47 19 72 26) 19]
Test Case: 253 | Input/Output: [(2 57 21 21) 2]
Test Case: 254 | Input/Output: [(22 33 50 26) 22]
Test Case: 255 | Input/Output: [(8 84 1 57) 1]
Test Case: 256 | Input/Output: [(54 32 13 86) 13]
Test Case: 257 | Input/Output: [(1 44 57 7) 1]
Test Case: 258 | Input/Output: [(51 31 82 78) 31]
Test Case: 259 | Input/Output: [(39 26 64 83) 26]
Test Case: 260 | Input/Output: [(61 85 49 17) 17]
Test Case: 261 | Input/Output: [(23 11 0 64) 0]
Test Case: 262 | Input/Output: [(54 95 59 89) 54]
Test Case: 263 | Input/Output: [(3 92 40 6) 3]
Test Case: 264 | Input/Output: [(65 67 63 57) 57]
Test Case: 265 | Input/Output: [(37 77 30 10) 10]
Test Case: 266 | Input/Output: [(39 99 88 49) 39]
Test Case: 267 | Input/Output: [(67 27 90 78) 27]
Test Case: 268 | Input/Output: [(47 34 88 87) 34]
Test Case: 269 | Input/Output: [(61 12 11 89) 11]
Test Case: 270 | Input/Output: [(50 26 56 52) 26]
Test Case: 271 | Input/Output: [(4 48 93 20) 4]
Test Case: 272 | Input/Output: [(7 26 60 87) 7]
Test Case: 273 | Input/Output: [(82 28 25 38) 25]
Test Case: 274 | Input/Output: [(62 54 31 26) 26]
Test Case: 275 | Input/Output: [(41 38 16 77) 16]
Test Case: 276 | Input/Output: [(26 97 19 95) 19]
Test Case: 277 | Input/Output: [(28 96 57 52) 28]
Test Case: 278 | Input/Output: [(99 54 72 40) 40]
Test Case: 279 | Input/Output: [(77 92 76 12) 12]
Test Case: 280 | Input/Output: [(31 47 11 16) 11]
Test Case: 281 | Input/Output: [(2 87 62 68) 2]
Test Case: 282 | Input/Output: [(47 98 66 37) 37]
Test Case: 283 | Input/Output: [(41 98 27 82) 27]
Test Case: 284 | Input/Output: [(77 100 23 7) 7]
Test Case: 285 | Input/Output: [(72 2 15 80) 2]
Test Case: 286 | Input/Output: [(7 16 19 56) 7]
Test Case: 287 | Input/Output: [(48 70 64 61) 48]
Test Case: 288 | Input/Output: [(80 20 69 53) 20]
Test Case: 289 | Input/Output: [(27 85 6 17) 6]
Test Case: 290 | Input/Output: [(79 63 56 26) 26]
Test Case: 291 | Input/Output: [(14 14 44 19) 14]
Test Case: 292 | Input/Output: [(10 58 12 75) 10]
Test Case: 293 | Input/Output: [(86 37 33 97) 33]
Test Case: 294 | Input/Output: [(48 29 68 2) 2]
Test Case: 295 | Input/Output: [(68 58 63 15) 15]
Test Case: 296 | Input/Output: [(35 28 51 97) 28]
Test Case: 297 | Input/Output: [(3 87 92 67) 3]
Test Case: 298 | Input/Output: [(79 78 58 5) 5]
Test Case: 299 | Input/Output: [(24 32 80 71) 24]
Test Case: 300 | Input/Output: [(36 63 75 16) 16]
Test Case: 301 | Input/Output: [(32 59 100 86) 32]
Test Case: 302 | Input/Output: [(74 28 28 69) 28]
Test Case: 303 | Input/Output: [(68 70 45 96) 45]
Test Case: 304 | Input/Output: [(39 76 91 51) 39]
Test Case: 305 | Input/Output: [(54 65 7 29) 7]
Test Case: 306 | Input/Output: [(0 22 46 83) 0]
Test Case: 307 | Input/Output: [(37 51 64 71) 37]
Test Case: 308 | Input/Output: [(57 97 90 51) 51]
Test Case: 309 | Input/Output: [(79 71 46 86) 46]
Test Case: 310 | Input/Output: [(26 76 65 59) 26]
Test Case: 311 | Input/Output: [(8 70 6 76) 6]
Test Case: 312 | Input/Output: [(9 1 27 19) 1]
Test Case: 313 | Input/Output: [(32 39 21 45) 21]
Test Case: 314 | Input/Output: [(77 18 40 23) 18]
Test Case: 315 | Input/Output: [(69 1 69 37) 1]
Test Case: 316 | Input/Output: [(62 74 69 91) 62]
Test Case: 317 | Input/Output: [(68 69 60 100) 60]
Test Case: 318 | Input/Output: [(70 61 95 30) 30]
Test Case: 319 | Input/Output: [(37 75 60 30) 30]
Test Case: 320 | Input/Output: [(58 98 56 83) 56]
Test Case: 321 | Input/Output: [(27 100 66 28) 27]
Test Case: 322 | Input/Output: [(4 55 85 75) 4]
Test Case: 323 | Input/Output: [(73 26 88 40) 26]
Test Case: 324 | Input/Output: [(23 9 36 92) 9]
Test Case: 325 | Input/Output: [(50 46 76 29) 29]
Test Case: 326 | Input/Output: [(28 45 37 98) 28]
Test Case: 327 | Input/Output: [(31 48 71 53) 31]
Test Case: 328 | Input/Output: [(79 47 45 61) 45]
Test Case: 329 | Input/Output: [(57 45 81 79) 45]
Test Case: 330 | Input/Output: [(80 38 48 58) 38]
Test Case: 331 | Input/Output: [(43 92 59 61) 43]
Test Case: 332 | Input/Output: [(98 21 10 34) 10]
Test Case: 333 | Input/Output: [(59 43 50 45) 43]
Test Case: 334 | Input/Output: [(98 22 99 94) 22]
Test Case: 335 | Input/Output: [(33 25 83 25) 25]
Test Case: 336 | Input/Output: [(58 54 69 22) 22]
Test Case: 337 | Input/Output: [(48 2 65 67) 2]
Test Case: 338 | Input/Output: [(52 46 93 36) 36]
Test Case: 339 | Input/Output: [(50 68 10 75) 10]
Test Case: 340 | Input/Output: [(38 88 65 91) 38]
Test Case: 341 | Input/Output: [(88 100 64 31) 31]
Test Case: 342 | Input/Output: [(86 6 49 69) 6]
Test Case: 343 | Input/Output: [(24 57 62 55) 24]
Test Case: 344 | Input/Output: [(60 62 56 29) 29]
Test Case: 345 | Input/Output: [(75 97 32 53) 32]
Test Case: 346 | Input/Output: [(15 4 30 70) 4]
Test Case: 347 | Input/Output: [(73 35 12 39) 12]
Test Case: 348 | Input/Output: [(6 65 51 99) 6]
Test Case: 349 | Input/Output: [(23 27 84 40) 23]
Test Case: 350 | Input/Output: [(2 63 12 84) 2]
Test Case: 351 | Input/Output: [(71 85 33 51) 33]
Test Case: 352 | Input/Output: [(30 84 50 1) 1]
Test Case: 353 | Input/Output: [(29 97 7 29) 7]
Test Case: 354 | Input/Output: [(95 56 81 11) 11]
Test Case: 355 | Input/Output: [(58 10 36 32) 10]
Test Case: 356 | Input/Output: [(25 64 3 77) 3]
Test Case: 357 | Input/Output: [(89 20 89 55) 20]
Test Case: 358 | Input/Output: [(59 100 13 55) 13]
Test Case: 359 | Input/Output: [(21 31 4 92) 4]
Test Case: 360 | Input/Output: [(88 66 49 89) 49]
Test Case: 361 | Input/Output: [(46 47 30 4) 4]
Test Case: 362 | Input/Output: [(75 35 61 53) 35]
Test Case: 363 | Input/Output: [(61 44 11 62) 11]
Test Case: 364 | Input/Output: [(50 40 23 88) 23]
Test Case: 365 | Input/Output: [(11 99 27 52) 11]
Test Case: 366 | Input/Output: [(26 75 79 35) 26]
Test Case: 367 | Input/Output: [(10 62 44 41) 10]
Test Case: 368 | Input/Output: [(90 65 50 1) 1]
Test Case: 369 | Input/Output: [(96 85 39 80) 39]
Test Case: 370 | Input/Output: [(83 2 39 91) 2]
Test Case: 371 | Input/Output: [(36 28 34 10) 10]
Test Case: 372 | Input/Output: [(14 94 72 7) 7]
Test Case: 373 | Input/Output: [(84 79 69 97) 69]
Test Case: 374 | Input/Output: [(35 59 100 43) 35]
Test Case: 375 | Input/Output: [(15 3 50 36) 3]
Test Case: 376 | Input/Output: [(33 80 48 80) 33]
Test Case: 377 | Input/Output: [(82 45 12 50) 12]
Test Case: 378 | Input/Output: [(62 32 41 9) 9]
Test Case: 379 | Input/Output: [(32 69 98 13) 13]
Test Case: 380 | Input/Output: [(53 74 43 73) 43]
Test Case: 381 | Input/Output: [(34 67 83 65) 34]
Test Case: 382 | Input/Output: [(12 63 79 26) 12]
Test Case: 383 | Input/Output: [(33 63 65 50) 33]
Test Case: 384 | Input/Output: [(41 7 35 23) 7]
Test Case: 385 | Input/Output: [(67 32 33 84) 32]
Test Case: 386 | Input/Output: [(3 9 6 75) 3]
Test Case: 387 | Input/Output: [(29 60 7 27) 7]
Test Case: 388 | Input/Output: [(47 92 59 59) 47]
Test Case: 389 | Input/Output: [(73 84 43 33) 33]
Test Case: 390 | Input/Output: [(43 13 92 74) 13]
Test Case: 391 | Input/Output: [(32 92 0 83) 0]
Test Case: 392 | Input/Output: [(19 17 46 41) 17]
Test Case: 393 | Input/Output: [(82 64 26 3) 3]
Test Case: 394 | Input/Output: [(83 88 50 30) 30]
Test Case: 395 | Input/Output: [(44 5 70 49) 5]
Test Case: 396 | Input/Output: [(34 1 69 8) 1]
Test Case: 397 | Input/Output: [(81 34 66 43) 34]
Test Case: 398 | Input/Output: [(52 25 46 98) 25]
Test Case: 399 | Input/Output: [(19 12 53 56) 12]
Test Case: 400 | Input/Output: [(25 51 93 77) 25]
Test Case: 401 | Input/Output: [(-59 11 74 -23) -59]
Test Case: 402 | Input/Output: [(73 63 -17 96) -17]
Test Case: 403 | Input/Output: [(96 77 3 40) 3]
Test Case: 404 | Input/Output: [(-100 30 -19 -7) -100]
Test Case: 405 | Input/Output: [(-94 10 -75 -8) -94]
Test Case: 406 | Input/Output: [(59 78 -32 2) -32]
Test Case: 407 | Input/Output: [(-84 33 93 58) -84]
Test Case: 408 | Input/Output: [(5 71 -34 -57) -57]
Test Case: 409 | Input/Output: [(-78 78 17 -53) -78]
Test Case: 410 | Input/Output: [(87 6 -12 91) -12]
Test Case: 411 | Input/Output: [(-61 82 72 64) -61]
Test Case: 412 | Input/Output: [(98 -60 46 68) -60]
Test Case: 413 | Input/Output: [(-61 -12 94 67) -61]
Test Case: 414 | Input/Output: [(-59 -35 7 -77) -77]
Test Case: 415 | Input/Output: [(28 -89 -7 43) -89]
Test Case: 416 | Input/Output: [(-83 -91 13 100) -91]
Test Case: 417 | Input/Output: [(48 34 37 -66) -66]
Test Case: 418 | Input/Output: [(-52 -23 95 65) -52]
Test Case: 419 | Input/Output: [(-1 -78 -37 60) -78]
Test Case: 420 | Input/Output: [(72 3 93 -47) -47]
Test Case: 421 | Input/Output: [(59 81 81 -91) -91]
Test Case: 422 | Input/Output: [(52 -51 10 -54) -54]
Test Case: 423 | Input/Output: [(-24 -100 -27 91) -100]
Test Case: 424 | Input/Output: [(31 -33 -57 6) -57]
Test Case: 425 | Input/Output: [(29 71 -49 -6) -49]
Test Case: 426 | Input/Output: [(20 -56 53 44) -56]
Test Case: 427 | Input/Output: [(83 81 97 -56) -56]
Test Case: 428 | Input/Output: [(-82 41 -79 94) -82]
Test Case: 429 | Input/Output: [(2 -40 -10 43) -40]
Test Case: 430 | Input/Output: [(-82 -96 -74 -20) -96]
Test Case: 431 | Input/Output: [(-25 8 -85 -97) -97]
Test Case: 432 | Input/Output: [(10 64 87 -49) -49]
Test Case: 433 | Input/Output: [(-90 0 76 54) -90]
Test Case: 434 | Input/Output: [(-64 44 36 58) -64]
Test Case: 435 | Input/Output: [(45 -50 -67 -26) -67]
Test Case: 436 | Input/Output: [(-22 -59 -51 -11) -59]
Test Case: 437 | Input/Output: [(-2 12 -30 78) -30]
Test Case: 438 | Input/Output: [(55 13 60 -46) -46]
Test Case: 439 | Input/Output: [(13 -76 15 -51) -76]
Test Case: 440 | Input/Output: [(97 -82 65 43) -82]
Test Case: 441 | Input/Output: [(-9 -25 -5 -66) -66]
Test Case: 442 | Input/Output: [(71 -79 -53 3) -79]
Test Case: 443 | Input/Output: [(-25 -17 -60 -90) -90]
Test Case: 444 | Input/Output: [(-39 -95 94 93) -95]
Test Case: 445 | Input/Output: [(41 92 -72 23) -72]
Test Case: 446 | Input/Output: [(41 -78 61 71) -78]
Test Case: 447 | Input/Output: [(-86 91 -76 5) -86]
Test Case: 448 | Input/Output: [(-15 6 13 14) -15]
Test Case: 449 | Input/Output: [(29 42 17 -1) -1]
Test Case: 450 | Input/Output: [(38 58 -47 65) -47]
Test Case: 451 | Input/Output: [(-24 -13 -42 87) -42]
Test Case: 452 | Input/Output: [(30 64 -70 -92) -92]
Test Case: 453 | Input/Output: [(-81 79 -80 18) -81]
Test Case: 454 | Input/Output: [(-85 59 -94 -73) -94]
Test Case: 455 | Input/Output: [(-9 -99 93 -82) -99]
Test Case: 456 | Input/Output: [(65 -55 -72 18) -72]
Test Case: 457 | Input/Output: [(-87 -65 -90 -88) -90]
Test Case: 458 | Input/Output: [(37 -27 -20 50) -27]
Test Case: 459 | Input/Output: [(-1 -77 -33 25) -77]
Test Case: 460 | Input/Output: [(-84 -25 15 79) -84]
Test Case: 461 | Input/Output: [(-61 -76 -100 77) -100]
Test Case: 462 | Input/Output: [(91 64 26 54) 26]
Test Case: 463 | Input/Output: [(-42 41 -25 -86) -86]
Test Case: 464 | Input/Output: [(-24 94 63 3) -24]
Test Case: 465 | Input/Output: [(64 -50 68 -51) -51]
Test Case: 466 | Input/Output: [(6 -67 -14 79) -67]
Test Case: 467 | Input/Output: [(-35 -49 1 1) -49]
Test Case: 468 | Input/Output: [(82 -100 67 -35) -100]
Test Case: 469 | Input/Output: [(85 41 7 -61) -61]
Test Case: 470 | Input/Output: [(-47 -66 55 -65) -66]
Test Case: 471 | Input/Output: [(23 90 1 73) 1]
Test Case: 472 | Input/Output: [(87 -13 75 -23) -23]
Test Case: 473 | Input/Output: [(-56 52 -13 -66) -66]
Test Case: 474 | Input/Output: [(-97 99 -49 31) -97]
Test Case: 475 | Input/Output: [(-7 -30 -11 47) -30]
Test Case: 476 | Input/Output: [(48 -52 0 -84) -84]
Test Case: 477 | Input/Output: [(70 55 7 -68) -68]
Test Case: 478 | Input/Output: [(30 -39 0 -86) -86]
Test Case: 479 | Input/Output: [(94 76 -98 57) -98]
Test Case: 480 | Input/Output: [(6 -20 91 -73) -73]
Test Case: 481 | Input/Output: [(-86 -85 -35 69) -86]
Test Case: 482 | Input/Output: [(-84 86 49 43) -84]
Test Case: 483 | Input/Output: [(-2 -97 -80 -60) -97]
Test Case: 484 | Input/Output: [(57 -27 -89 49) -89]
Test Case: 485 | Input/Output: [(33 54 84 -90) -90]
Test Case: 486 | Input/Output: [(29 -50 76 14) -50]
Test Case: 487 | Input/Output: [(-72 -66 -23 90) -72]
Test Case: 488 | Input/Output: [(83 -2 -28 -11) -28]
Test Case: 489 | Input/Output: [(-5 -76 8 -64) -76]
Test Case: 490 | Input/Output: [(70 -46 -12 -65) -65]
Test Case: 491 | Input/Output: [(-72 -97 -34 -6) -97]
Test Case: 492 | Input/Output: [(25 5 -58 -28) -58]
Test Case: 493 | Input/Output: [(80 -82 41 -95) -95]
Test Case: 494 | Input/Output: [(58 4 50 -43) -43]
Test Case: 495 | Input/Output: [(33 41 -91 -84) -91]
Test Case: 496 | Input/Output: [(6 -50 -18 -62) -62]
Test Case: 497 | Input/Output: [(18 -96 -27 -32) -96]
Test Case: 498 | Input/Output: [(-93 -27 -64 -24) -93]
Test Case: 499 | Input/Output: [(-79 -3 -83 22) -83]
Test Case: 500 | Input/Output: [(-33 -41 92 -80) -80]
Test Case: 501 | Input/Output: [(-33 -2 17 -100) -100]
Test Case: 502 | Input/Output: [(19 -9 -94 -9) -94]
Test Case: 503 | Input/Output: [(-77 -13 -42 -59) -77]
Test Case: 504 | Input/Output: [(33 -49 39 91) -49]
Test Case: 505 | Input/Output: [(33 50 -5 -55) -55]
Test Case: 506 | Input/Output: [(73 -44 24 -77) -77]
Test Case: 507 | Input/Output: [(35 60 72 -8) -8]
Test Case: 508 | Input/Output: [(-29 39 -39 59) -39]
Test Case: 509 | Input/Output: [(29 -31 96 48) -31]
Test Case: 510 | Input/Output: [(28 56 -30 -14) -30]
Test Case: 511 | Input/Output: [(-58 -41 -45 -100) -100]
Test Case: 512 | Input/Output: [(43 -61 84 4) -61]
Test Case: 513 | Input/Output: [(67 6 79 -15) -15]
Test Case: 514 | Input/Output: [(-66 49 -21 -8) -66]
Test Case: 515 | Input/Output: [(-72 -89 57 3) -89]
Test Case: 516 | Input/Output: [(93 71 -35 -49) -49]
Test Case: 517 | Input/Output: [(72 55 55 -18) -18]
Test Case: 518 | Input/Output: [(-82 2 -93 79) -93]
Test Case: 519 | Input/Output: [(73 25 89 24) 24]
Test Case: 520 | Input/Output: [(-11 -21 56 -88) -88]
Test Case: 521 | Input/Output: [(-66 -61 74 25) -66]
Test Case: 522 | Input/Output: [(-62 31 -80 69) -80]
Test Case: 523 | Input/Output: [(4 -84 58 -77) -84]
Test Case: 524 | Input/Output: [(57 -2 11 -99) -99]
Test Case: 525 | Input/Output: [(-84 -61 -3 -70) -84]
Test Case: 526 | Input/Output: [(24 -7 -3 -45) -45]
Test Case: 527 | Input/Output: [(69 -59 -92 36) -92]
Test Case: 528 | Input/Output: [(-24 100 87 -30) -30]
Test Case: 529 | Input/Output: [(93 -37 -19 -43) -43]
Test Case: 530 | Input/Output: [(-89 -70 -54 -34) -89]
Test Case: 531 | Input/Output: [(75 42 -96 68) -96]
Test Case: 532 | Input/Output: [(38 86 26 -2) -2]
Test Case: 533 | Input/Output: [(21 -8 -77 -59) -77]
Test Case: 534 | Input/Output: [(35 -53 -80 71) -80]
Test Case: 535 | Input/Output: [(90 63 22 -73) -73]
Test Case: 536 | Input/Output: [(52 -74 13 79) -74]
Test Case: 537 | Input/Output: [(-18 69 39 95) -18]
Test Case: 538 | Input/Output: [(58 -57 -9 -72) -72]
Test Case: 539 | Input/Output: [(-77 -22 49 29) -77]
Test Case: 540 | Input/Output: [(39 -33 -99 85) -99]
Test Case: 541 | Input/Output: [(-10 80 0 -37) -37]
Test Case: 542 | Input/Output: [(-82 23 -22 30) -82]
Test Case: 543 | Input/Output: [(7 19 94 -100) -100]
Test Case: 544 | Input/Output: [(79 -68 16 -75) -75]
Test Case: 545 | Input/Output: [(-57 55 83 -27) -57]
Test Case: 546 | Input/Output: [(-68 -90 11 59) -90]
Test Case: 547 | Input/Output: [(-51 -82 97 -97) -97]
Test Case: 548 | Input/Output: [(-91 -51 76 -88) -91]
Test Case: 549 | Input/Output: [(-72 -34 33 -87) -87]
Test Case: 550 | Input/Output: [(-7 22 -70 16) -70]
Test Case: 551 | Input/Output: [(-86 -94 -2 -66) -94]
Test Case: 552 | Input/Output: [(-31 1 -36 -68) -68]
Test Case: 553 | Input/Output: [(-22 5 -99 -94) -99]
Test Case: 554 | Input/Output: [(52 -85 -64 83) -85]
Test Case: 555 | Input/Output: [(77 -89 67 -82) -89]
Test Case: 556 | Input/Output: [(97 30 -51 69) -51]
Test Case: 557 | Input/Output: [(-47 -20 66 25) -47]
Test Case: 558 | Input/Output: [(28 47 -97 -7) -97]
Test Case: 559 | Input/Output: [(50 44 -8 -94) -94]
Test Case: 560 | Input/Output: [(71 -91 -53 30) -91]
Test Case: 561 | Input/Output: [(-49 -48 53 -90) -90]
Test Case: 562 | Input/Output: [(-42 60 75 25) -42]
Test Case: 563 | Input/Output: [(-5 -61 -6 -42) -61]
Test Case: 564 | Input/Output: [(-18 -7 85 -66) -66]
Test Case: 565 | Input/Output: [(43 21 -70 70) -70]
Test Case: 566 | Input/Output: [(94 -35 -38 12) -38]
Test Case: 567 | Input/Output: [(-62 19 35 -15) -62]
Test Case: 568 | Input/Output: [(31 37 -40 70) -40]
Test Case: 569 | Input/Output: [(-68 -66 25 92) -68]
Test Case: 570 | Input/Output: [(-29 -48 -5 -46) -48]
Test Case: 571 | Input/Output: [(-37 47 -56 -85) -85]
Test Case: 572 | Input/Output: [(-99 -91 14 24) -99]
Test Case: 573 | Input/Output: [(2 -99 67 35) -99]
Test Case: 574 | Input/Output: [(38 41 34 17) 17]
Test Case: 575 | Input/Output: [(-42 -73 -96 70) -96]
Test Case: 576 | Input/Output: [(-71 -40 90 -7) -71]
Test Case: 577 | Input/Output: [(-60 -38 28 -16) -60]
Test Case: 578 | Input/Output: [(54 -60 27 44) -60]
Test Case: 579 | Input/Output: [(-1 13 93 90) -1]
Test Case: 580 | Input/Output: [(33 -88 -11 -16) -88]
Test Case: 581 | Input/Output: [(-67 -26 -68 90) -68]
Test Case: 582 | Input/Output: [(42 71 33 79) 33]
Test Case: 583 | Input/Output: [(-19 -22 92 -49) -49]
Test Case: 584 | Input/Output: [(52 84 25 2) 2]
Test Case: 585 | Input/Output: [(78 24 -70 38) -70]
Test Case: 586 | Input/Output: [(81 11 -34 16) -34]
Test Case: 587 | Input/Output: [(36 -19 78 -79) -79]
Test Case: 588 | Input/Output: [(-6 -1 -20 -38) -38]
Test Case: 589 | Input/Output: [(-45 -3 -84 -68) -84]
Test Case: 590 | Input/Output: [(88 -85 79 50) -85]
Test Case: 591 | Input/Output: [(-43 -49 30 -95) -95]
Test Case: 592 | Input/Output: [(35 -7 -3 -6) -7]
Test Case: 593 | Input/Output: [(-87 18 0 47) -87]
Test Case: 594 | Input/Output: [(91 14 -39 -53) -53]
Test Case: 595 | Input/Output: [(41 5 -39 50) -39]
Test Case: 596 | Input/Output: [(59 -83 -25 -75) -83]
Test Case: 597 | Input/Output: [(99 -6 98 27) -6]
Test Case: 598 | Input/Output: [(42 74 40 -1) -1]
Test Case: 599 | Input/Output: [(58 100 71 48) 48]
Test Case: 600 | Input/Output: [(-73 -68 95 -94) -94]
Test Case: 601 | Input/Output: [(77 -53 -44 77) -53]
Test Case: 602 | Input/Output: [(-26 37 -7 -22) -26]
Test Case: 603 | Input/Output: [(78 -64 54 87) -64]
Test Case: 604 | Input/Output: [(91 63 -3 -78) -78]
Test Case: 605 | Input/Output: [(-9 -74 -84 -73) -84]
Test Case: 606 | Input/Output: [(2 -14 37 -94) -94]
Test Case: 607 | Input/Output: [(-9 78 46 -15) -15]
Test Case: 608 | Input/Output: [(-44 42 78 29) -44]
Test Case: 609 | Input/Output: [(91 -7 74 1) -7]
Test Case: 610 | Input/Output: [(-15 71 69 77) -15]
Test Case: 611 | Input/Output: [(-84 73 100 -68) -84]
Test Case: 612 | Input/Output: [(45 8 82 -76) -76]
Test Case: 613 | Input/Output: [(60 66 -45 73) -45]
Test Case: 614 | Input/Output: [(-2 -45 63 99) -45]
Test Case: 615 | Input/Output: [(17 83 50 59) 17]
Test Case: 616 | Input/Output: [(-93 -56 89 -44) -93]
Test Case: 617 | Input/Output: [(93 -39 -39 -58) -58]
Test Case: 618 | Input/Output: [(-16 -91 97 6) -91]
Test Case: 619 | Input/Output: [(-84 -36 -73 -17) -84]
Test Case: 620 | Input/Output: [(69 15 -66 12) -66]
Test Case: 621 | Input/Output: [(64 -15 23 70) -15]
Test Case: 622 | Input/Output: [(-20 98 67 -90) -90]
Test Case: 623 | Input/Output: [(34 95 -86 -35) -86]
Test Case: 624 | Input/Output: [(94 -58 -49 -61) -61]
Test Case: 625 | Input/Output: [(-63 -46 99 -48) -63]
Test Case: 626 | Input/Output: [(6 -30 77 42) -30]
Test Case: 627 | Input/Output: [(54 78 -68 -60) -68]
Test Case: 628 | Input/Output: [(1 94 -14 -8) -14]
Test Case: 629 | Input/Output: [(32 -55 76 -89) -89]
Test Case: 630 | Input/Output: [(-1 -36 11 38) -36]
Test Case: 631 | Input/Output: [(-44 -99 -51 -95) -99]
Test Case: 632 | Input/Output: [(83 -84 67 74) -84]
Test Case: 633 | Input/Output: [(23 89 3 55) 3]
Test Case: 634 | Input/Output: [(-31 -82 5 96) -82]
Test Case: 635 | Input/Output: [(-84 -55 85 -98) -98]
Test Case: 636 | Input/Output: [(-95 -31 -36 -10) -95]
Test Case: 637 | Input/Output: [(-6 -53 -86 -41) -86]
Test Case: 638 | Input/Output: [(19 -73 83 67) -73]
Test Case: 639 | Input/Output: [(29 14 -82 86) -82]
Test Case: 640 | Input/Output: [(-41 88 -46 -55) -55]
Test Case: 641 | Input/Output: [(-61 88 15 83) -61]
Test Case: 642 | Input/Output: [(51 27 -52 -13) -52]
Test Case: 643 | Input/Output: [(-26 -62 -52 92) -62]
Test Case: 644 | Input/Output: [(-60 43 18 -67) -67]
Test Case: 645 | Input/Output: [(-63 32 56 -27) -63]
Test Case: 646 | Input/Output: [(7 92 -50 15) -50]
Test Case: 647 | Input/Output: [(-95 -31 -7 80) -95]
Test Case: 648 | Input/Output: [(90 -65 -3 82) -65]
Test Case: 649 | Input/Output: [(-40 74 -34 33) -40]
Test Case: 650 | Input/Output: [(34 -52 94 -60) -60]
Test Case: 651 | Input/Output: [(-67 -53 -44 -68) -68]
Test Case: 652 | Input/Output: [(-55 -10 -40 -1) -55]
Test Case: 653 | Input/Output: [(0 27 -71 29) -71]
Test Case: 654 | Input/Output: [(76 45 3 -80) -80]
Test Case: 655 | Input/Output: [(-39 -26 -35 29) -39]
Test Case: 656 | Input/Output: [(-41 -55 26 -86) -86]
Test Case: 657 | Input/Output: [(-63 98 21 -79) -79]
Test Case: 658 | Input/Output: [(76 37 18 8) 8]
Test Case: 659 | Input/Output: [(-32 -25 -93 70) -93]
Test Case: 660 | Input/Output: [(4 -87 93 -62) -87]
Test Case: 661 | Input/Output: [(-11 47 -84 -49) -84]
Test Case: 662 | Input/Output: [(32 -36 58 -5) -36]
Test Case: 663 | Input/Output: [(-27 -72 -87 90) -87]
Test Case: 664 | Input/Output: [(14 75 12 -99) -99]
Test Case: 665 | Input/Output: [(88 76 -93 -5) -93]
Test Case: 666 | Input/Output: [(-79 68 -64 8) -79]
Test Case: 667 | Input/Output: [(85 71 -25 -77) -77]
Test Case: 668 | Input/Output: [(88 -32 -93 -58) -93]
Test Case: 669 | Input/Output: [(-20 -78 63 -28) -78]
Test Case: 670 | Input/Output: [(-95 -87 -15 -43) -95]
Test Case: 671 | Input/Output: [(-6 -6 -87 55) -87]
Test Case: 672 | Input/Output: [(23 -91 26 60) -91]
Test Case: 673 | Input/Output: [(-32 33 -38 -77) -77]
Test Case: 674 | Input/Output: [(-37 -51 -5 13) -51]
Test Case: 675 | Input/Output: [(82 -100 -52 49) -100]
Test Case: 676 | Input/Output: [(46 -98 82 97) -98]
Test Case: 677 | Input/Output: [(8 -57 52 4) -57]
Test Case: 678 | Input/Output: [(-73 -49 70 -75) -75]
Test Case: 679 | Input/Output: [(72 48 -98 -74) -98]
Test Case: 680 | Input/Output: [(-3 50 -50 73) -50]
Test Case: 681 | Input/Output: [(-17 87 -36 0) -36]
Test Case: 682 | Input/Output: [(41 -97 -34 20) -97]
Test Case: 683 | Input/Output: [(-31 70 1 -30) -31]
Test Case: 684 | Input/Output: [(60 -68 -33 -46) -68]
Test Case: 685 | Input/Output: [(54 -18 17 61) -18]
Test Case: 686 | Input/Output: [(-98 33 38 77) -98]
Test Case: 687 | Input/Output: [(39 55 99 -26) -26]
Test Case: 688 | Input/Output: [(-81 -65 25 -11) -81]
Test Case: 689 | Input/Output: [(29 -16 63 19) -16]
Test Case: 690 | Input/Output: [(-83 -42 -48 -56) -83]
Test Case: 691 | Input/Output: [(-95 -50 -25 61) -95]
Test Case: 692 | Input/Output: [(56 100 -55 -56) -56]
Test Case: 693 | Input/Output: [(69 -18 32 -63) -63]
Test Case: 694 | Input/Output: [(-64 54 22 -62) -64]
Test Case: 695 | Input/Output: [(60 -95 14 -18) -95]
Test Case: 696 | Input/Output: [(-46 54 -85 81) -85]
Test Case: 697 | Input/Output: [(83 87 93 -28) -28]
Test Case: 698 | Input/Output: [(14 -6 -31 59) -31]
Test Case: 699 | Input/Output: [(83 26 -86 -7) -86]
Test Case: 700 | Input/Output: [(98 28 -36 65) -36]
Test Case: 701 | Input/Output: [(-75 -51 12 -14) -75]
Test Case: 702 | Input/Output: [(68 -18 86 -3) -18]
Test Case: 703 | Input/Output: [(-92 87 -69 68) -92]
Test Case: 704 | Input/Output: [(-30 -44 63 33) -44]
Test Case: 705 | Input/Output: [(-62 43 45 -75) -75]
Test Case: 706 | Input/Output: [(-16 99 49 -86) -86]
Test Case: 707 | Input/Output: [(46 -47 -24 -59) -59]
Test Case: 708 | Input/Output: [(99 26 -76 -68) -76]
Test Case: 709 | Input/Output: [(50 71 1 11) 1]
Test Case: 710 | Input/Output: [(-99 79 5 -95) -99]
Test Case: 711 | Input/Output: [(-3 31 91 62) -3]
Test Case: 712 | Input/Output: [(-29 65 -68 5) -68]
Test Case: 713 | Input/Output: [(91 -86 -21 -86) -86]
Test Case: 714 | Input/Output: [(-39 98 46 27) -39]
Test Case: 715 | Input/Output: [(-20 9 -2 -52) -52]
Test Case: 716 | Input/Output: [(-43 90 -33 38) -43]
Test Case: 717 | Input/Output: [(-3 57 -15 -55) -55]
Test Case: 718 | Input/Output: [(47 2 -88 -80) -88]
Test Case: 719 | Input/Output: [(-67 88 -25 19) -67]
Test Case: 720 | Input/Output: [(-25 -50 -78 -63) -78]
Test Case: 721 | Input/Output: [(47 85 10 22) 10]
Test Case: 722 | Input/Output: [(18 36 -72 70) -72]
Test Case: 723 | Input/Output: [(-33 -36 74 -88) -88]
Test Case: 724 | Input/Output: [(5 13 -21 65) -21]
Test Case: 725 | Input/Output: [(22 -67 -88 69) -88]
Test Case: 726 | Input/Output: [(19 -63 -43 -56) -63]
Test Case: 727 | Input/Output: [(-75 78 17 -90) -90]
Test Case: 728 | Input/Output: [(-7 76 38 -94) -94]
Test Case: 729 | Input/Output: [(98 82 -82 43) -82]
Test Case: 730 | Input/Output: [(-5 -33 -4 -72) -72]
Test Case: 731 | Input/Output: [(-33 83 -73 -57) -73]
Test Case: 732 | Input/Output: [(-20 8 77 -9) -20]
Test Case: 733 | Input/Output: [(-13 -1 -3 -79) -79]
Test Case: 734 | Input/Output: [(78 -62 -26 -47) -62]
Test Case: 735 | Input/Output: [(-80 64 -97 52) -97]
Test Case: 736 | Input/Output: [(-45 49 98 70) -45]
Test Case: 737 | Input/Output: [(-84 -31 -18 26) -84]
Test Case: 738 | Input/Output: [(90 -9 84 35) -9]
Test Case: 739 | Input/Output: [(-45 -90 -72 59) -90]
Test Case: 740 | Input/Output: [(27 97 68 -72) -72]
Test Case: 741 | Input/Output: [(-42 16 -10 -42) -42]
Test Case: 742 | Input/Output: [(-61 80 -19 56) -61]
Test Case: 743 | Input/Output: [(-31 -26 29 -65) -65]
Test Case: 744 | Input/Output: [(-57 -3 25 -14) -57]
Test Case: 745 | Input/Output: [(-58 -82 -70 -91) -91]
Test Case: 746 | Input/Output: [(32 15 80 78) 15]
Test Case: 747 | Input/Output: [(-15 21 38 -39) -39]
Test Case: 748 | Input/Output: [(-65 87 -70 -30) -70]
Test Case: 749 | Input/Output: [(81 -53 -49 -55) -55]
Test Case: 750 | Input/Output: [(-86 94 88 -13) -86]
Test Case: 751 | Input/Output: [(100 71 14 -6) -6]
Test Case: 752 | Input/Output: [(-68 -86 75 -37) -86]
Test Case: 753 | Input/Output: [(-87 12 -85 -92) -92]
Test Case: 754 | Input/Output: [(54 6 -81 38) -81]
Test Case: 755 | Input/Output: [(-6 57 -97 51) -97]
Test Case: 756 | Input/Output: [(26 -52 25 10) -52]
Test Case: 757 | Input/Output: [(59 -18 -61 91) -61]
Test Case: 758 | Input/Output: [(-5 -78 97 -8) -78]
Test Case: 759 | Input/Output: [(-94 57 -58 -7) -94]
Test Case: 760 | Input/Output: [(40 44 -41 64) -41]
Test Case: 761 | Input/Output: [(-99 1 36 -27) -99]
Test Case: 762 | Input/Output: [(39 -47 64 -50) -50]
Test Case: 763 | Input/Output: [(67 58 26 -87) -87]
Test Case: 764 | Input/Output: [(60 -46 -56 46) -56]
Test Case: 765 | Input/Output: [(-23 36 -71 73) -71]
Test Case: 766 | Input/Output: [(62 -48 -67 92) -67]
Test Case: 767 | Input/Output: [(-76 -96 -13 52) -96]
Test Case: 768 | Input/Output: [(-99 -99 73 -95) -99]
Test Case: 769 | Input/Output: [(16 89 44 53) 16]
Test Case: 770 | Input/Output: [(26 70 52 -70) -70]
Test Case: 771 | Input/Output: [(98 78 -26 11) -26]
Test Case: 772 | Input/Output: [(53 40 -49 80) -49]
Test Case: 773 | Input/Output: [(-67 -1 -32 51) -67]
Test Case: 774 | Input/Output: [(7 -95 -91 83) -95]
Test Case: 775 | Input/Output: [(-13 20 67 1) -13]
Test Case: 776 | Input/Output: [(-73 50 -51 -75) -75]
Test Case: 777 | Input/Output: [(9 -68 -12 20) -68]
Test Case: 778 | Input/Output: [(33 19 16 -34) -34]
Test Case: 779 | Input/Output: [(99 51 95 50) 50]
Test Case: 780 | Input/Output: [(-34 26 -73 -46) -73]
Test Case: 781 | Input/Output: [(-92 -21 -10 -73) -92]
Test Case: 782 | Input/Output: [(43 -75 -44 -12) -75]
Test Case: 783 | Input/Output: [(-82 90 -70 -13) -82]
Test Case: 784 | Input/Output: [(-78 47 93 79) -78]
Test Case: 785 | Input/Output: [(-62 -3 43 10) -62]
Test Case: 786 | Input/Output: [(-67 -78 33 -67) -78]
Test Case: 787 | Input/Output: [(41 19 99 -79) -79]
Test Case: 788 | Input/Output: [(98 -99 93 -69) -99]
Test Case: 789 | Input/Output: [(-11 13 39 95) -11]
Test Case: 790 | Input/Output: [(-23 77 53 66) -23]
Test Case: 791 | Input/Output: [(53 93 26 -13) -13]
Test Case: 792 | Input/Output: [(-100 -73 100 -95) -100]
Test Case: 793 | Input/Output: [(11 84 63 15) 11]
Test Case: 794 | Input/Output: [(99 -93 -14 -43) -93]
Test Case: 795 | Input/Output: [(61 69 10 2) 2]
Test Case: 796 | Input/Output: [(-2 -61 29 77) -61]
Test Case: 797 | Input/Output: [(-79 -100 -9 -6) -100]
Test Case: 798 | Input/Output: [(-42 96 -9 -90) -90]
Test Case: 799 | Input/Output: [(10 58 81 25) 10]
Test Case: 800 | Input/Output: [(92 -5 -54 -39) -54]
Test Case: 801 | Input/Output: [(-52 -29 -18 21) -52]
Test Case: 802 | Input/Output: [(-76 -14 -52 71) -76]
Test Case: 803 | Input/Output: [(-91 76 25 -33) -91]
Test Case: 804 | Input/Output: [(22 32 -34 -83) -83]
Test Case: 805 | Input/Output: [(69 24 -97 72) -97]
Test Case: 806 | Input/Output: [(-23 90 20 -89) -89]
Test Case: 807 | Input/Output: [(-73 36 -54 -31) -73]
Test Case: 808 | Input/Output: [(6 -38 -53 -31) -53]
Test Case: 809 | Input/Output: [(-31 -81 23 -34) -81]
Test Case: 810 | Input/Output: [(21 73 -5 -11) -11]
Test Case: 811 | Input/Output: [(26 6 -71 38) -71]
Test Case: 812 | Input/Output: [(-11 91 -60 12) -60]
Test Case: 813 | Input/Output: [(0 -45 -86 72) -86]
Test Case: 814 | Input/Output: [(8 26 -64 15) -64]
Test Case: 815 | Input/Output: [(96 -47 63 -42) -47]
Test Case: 816 | Input/Output: [(11 -27 -30 -21) -30]
Test Case: 817 | Input/Output: [(-21 78 31 -31) -31]
Test Case: 818 | Input/Output: [(-74 54 -66 100) -74]
Test Case: 819 | Input/Output: [(25 -16 -44 -90) -90]
Test Case: 820 | Input/Output: [(86 31 -70 2) -70]
Test Case: 821 | Input/Output: [(88 46 49 -42) -42]
Test Case: 822 | Input/Output: [(50 -95 -19 100) -95]
Test Case: 823 | Input/Output: [(3 15 -18 16) -18]
Test Case: 824 | Input/Output: [(-90 2 -1 66) -90]
Test Case: 825 | Input/Output: [(-72 2 99 88) -72]
Test Case: 826 | Input/Output: [(-1 -33 -80 21) -80]
Test Case: 827 | Input/Output: [(55 -11 70 0) -11]
Test Case: 828 | Input/Output: [(-76 93 22 36) -76]
Test Case: 829 | Input/Output: [(-5 -7 94 -89) -89]
Test Case: 830 | Input/Output: [(-37 79 59 94) -37]
Test Case: 831 | Input/Output: [(-30 -39 -44 -39) -44]
Test Case: 832 | Input/Output: [(73 39 -80 -72) -80]
Test Case: 833 | Input/Output: [(83 -21 73 18) -21]
Test Case: 834 | Input/Output: [(79 -8 -19 -74) -74]
Test Case: 835 | Input/Output: [(86 -61 78 29) -61]
Test Case: 836 | Input/Output: [(1 -20 -31 86) -31]
Test Case: 837 | Input/Output: [(-2 -78 -65 -42) -78]
Test Case: 838 | Input/Output: [(-32 56 19 -72) -72]
Test Case: 839 | Input/Output: [(-71 -88 -67 80) -88]
Test Case: 840 | Input/Output: [(56 65 -81 20) -81]
Test Case: 841 | Input/Output: [(-76 3 -19 23) -76]
Test Case: 842 | Input/Output: [(-4 -27 -86 -46) -86]
Test Case: 843 | Input/Output: [(-30 -45 89 58) -45]
Test Case: 844 | Input/Output: [(-17 21 72 -60) -60]
Test Case: 845 | Input/Output: [(69 -83 17 -86) -86]
Test Case: 846 | Input/Output: [(22 -70 -90 -50) -90]
Test Case: 847 | Input/Output: [(-81 -23 -45 -6) -81]
Test Case: 848 | Input/Output: [(-55 -65 -34 -28) -65]
Test Case: 849 | Input/Output: [(-2 -40 56 16) -40]
Test Case: 850 | Input/Output: [(-34 -51 -20 58) -51]
Test Case: 851 | Input/Output: [(-50 45 -81 -47) -81]
Test Case: 852 | Input/Output: [(-36 -55 -14 -59) -59]
Test Case: 853 | Input/Output: [(-22 70 75 -96) -96]
Test Case: 854 | Input/Output: [(-91 -99 -62 31) -99]
Test Case: 855 | Input/Output: [(-93 -27 65 35) -93]
Test Case: 856 | Input/Output: [(-60 89 4 -38) -60]
Test Case: 857 | Input/Output: [(76 9 -70 -64) -70]
Test Case: 858 | Input/Output: [(97 -76 44 -89) -89]
Test Case: 859 | Input/Output: [(48 -30 11 -9) -30]
Test Case: 860 | Input/Output: [(-77 76 51 -100) -100]
Test Case: 861 | Input/Output: [(83 -26 87 99) -26]
Test Case: 862 | Input/Output: [(-5 61 -16 13) -16]
Test Case: 863 | Input/Output: [(-54 15 -37 67) -54]
Test Case: 864 | Input/Output: [(3 21 75 89) 3]
Test Case: 865 | Input/Output: [(92 6 5 59) 5]
Test Case: 866 | Input/Output: [(-69 52 61 49) -69]
Test Case: 867 | Input/Output: [(29 -93 28 -75) -93]
Test Case: 868 | Input/Output: [(-41 72 54 -49) -49]
Test Case: 869 | Input/Output: [(28 -65 -26 1) -65]
Test Case: 870 | Input/Output: [(-80 -17 26 40) -80]
Test Case: 871 | Input/Output: [(13 19 90 -24) -24]
Test Case: 872 | Input/Output: [(-46 75 -77 68) -77]
Test Case: 873 | Input/Output: [(37 -89 72 -18) -89]
Test Case: 874 | Input/Output: [(7 -63 -58 9) -63]
Test Case: 875 | Input/Output: [(-18 -19 -61 -32) -61]
Test Case: 876 | Input/Output: [(-96 41 -71 10) -96]
Test Case: 877 | Input/Output: [(56 -34 29 29) -34]
Test Case: 878 | Input/Output: [(-46 -97 14 -61) -97]
Test Case: 879 | Input/Output: [(43 6 66 75) 6]
Test Case: 880 | Input/Output: [(100 -20 44 56) -20]
Test Case: 881 | Input/Output: [(-12 -83 -18 -80) -83]
Test Case: 882 | Input/Output: [(34 -12 -3 41) -12]
Test Case: 883 | Input/Output: [(-76 59 76 -64) -76]
Test Case: 884 | Input/Output: [(68 21 -69 100) -69]
Test Case: 885 | Input/Output: [(-21 -59 5 22) -59]
Test Case: 886 | Input/Output: [(35 -92 -73 -71) -92]
Test Case: 887 | Input/Output: [(-49 -99 -60 37) -99]
Test Case: 888 | Input/Output: [(70 95 -56 43) -56]
Test Case: 889 | Input/Output: [(-8 -67 -50 -46) -67]
Test Case: 890 | Input/Output: [(12 8 78 23) 8]
Test Case: 891 | Input/Output: [(-90 85 49 13) -90]
Test Case: 892 | Input/Output: [(24 36 -88 -19) -88]
Test Case: 893 | Input/Output: [(56 -43 86 20) -43]
Test Case: 894 | Input/Output: [(-47 26 67 -26) -47]
Test Case: 895 | Input/Output: [(-82 -64 2 -72) -82]
Test Case: 896 | Input/Output: [(-14 97 -15 6) -15]
Test Case: 897 | Input/Output: [(-14 1 66 -5) -14]
Test Case: 898 | Input/Output: [(87 -67 -53 39) -67]
Test Case: 899 | Input/Output: [(-84 2 -29 67) -84]
Test Case: 900 | Input/Output: [(-36 98 -84 -88) -88]
Test Case: 901 | Input/Output: [(69 59 -57 -97) -97]
Test Case: 902 | Input/Output: [(-6 83 98 -65) -65]
Test Case: 903 | Input/Output: [(-90 -97 -27 9) -97]
Test Case: 904 | Input/Output: [(71 48 49 -77) -77]
Test Case: 905 | Input/Output: [(-18 16 -56 85) -56]
Test Case: 906 | Input/Output: [(-50 87 67 -83) -83]
Test Case: 907 | Input/Output: [(-30 24 68 44) -30]
Test Case: 908 | Input/Output: [(-92 -76 -16 84) -92]
Test Case: 909 | Input/Output: [(-69 -50 93 31) -69]
Test Case: 910 | Input/Output: [(62 -30 85 14) -30]
Test Case: 911 | Input/Output: [(96 -25 94 79) -25]
Test Case: 912 | Input/Output: [(82 -66 -76 51) -76]
Test Case: 913 | Input/Output: [(73 -14 14 -86) -86]
Test Case: 914 | Input/Output: [(-42 80 90 -54) -54]
Test Case: 915 | Input/Output: [(27 -29 -43 -73) -73]
Test Case: 916 | Input/Output: [(-33 -5 64 62) -33]
Test Case: 917 | Input/Output: [(-22 -36 -91 -45) -91]
Test Case: 918 | Input/Output: [(-8 -85 -28 44) -85]
Test Case: 919 | Input/Output: [(-18 -28 95 -50) -50]
Test Case: 920 | Input/Output: [(-59 -40 43 23) -59]
Test Case: 921 | Input/Output: [(-51 99 3 -33) -51]
Test Case: 922 | Input/Output: [(-96 -97 -82 3) -97]
Test Case: 923 | Input/Output: [(55 78 81 -90) -90]
Test Case: 924 | Input/Output: [(-89 -32 2 -60) -89]
Test Case: 925 | Input/Output: [(23 -91 70 92) -91]
Test Case: 926 | Input/Output: [(-80 -10 87 79) -80]
Test Case: 927 | Input/Output: [(-66 85 53 41) -66]
Test Case: 928 | Input/Output: [(-17 -4 35 13) -17]
Test Case: 929 | Input/Output: [(72 81 -61 -57) -61]
Test Case: 930 | Input/Output: [(-9 91 79 44) -9]
Test Case: 931 | Input/Output: [(24 -39 -33 -98) -98]
Test Case: 932 | Input/Output: [(-53 5 -34 2) -53]
Test Case: 933 | Input/Output: [(-63 -78 28 72) -78]
Test Case: 934 | Input/Output: [(69 -5 -41 25) -41]
Test Case: 935 | Input/Output: [(-29 45 -75 -96) -96]
Test Case: 936 | Input/Output: [(-60 -54 30 88) -60]
Test Case: 937 | Input/Output: [(-7 41 -95 13) -95]
Test Case: 938 | Input/Output: [(90 -15 28 11) -15]
Test Case: 939 | Input/Output: [(-88 -37 88 45) -88]
Test Case: 940 | Input/Output: [(39 8 90 -7) -7]
Test Case: 941 | Input/Output: [(-25 -2 -49 95) -49]
Test Case: 942 | Input/Output: [(76 99 0 -47) -47]
Test Case: 943 | Input/Output: [(45 -98 14 72) -98]
Test Case: 944 | Input/Output: [(22 -85 -44 84) -85]
Test Case: 945 | Input/Output: [(26 -99 -67 37) -99]
Test Case: 946 | Input/Output: [(-38 39 -57 -39) -57]
Test Case: 947 | Input/Output: [(1 -94 35 -57) -94]
Test Case: 948 | Input/Output: [(6 -27 -9 -38) -38]
Test Case: 949 | Input/Output: [(7 -91 77 -13) -91]
Test Case: 950 | Input/Output: [(53 9 -73 100) -73]
Test Case: 951 | Input/Output: [(94 92 -34 73) -34]
Test Case: 952 | Input/Output: [(-96 -75 -23 64) -96]
Test Case: 953 | Input/Output: [(-21 -98 27 -93) -98]
Test Case: 954 | Input/Output: [(-18 -14 -29 42) -29]
Test Case: 955 | Input/Output: [(-34 22 66 30) -34]
Test Case: 956 | Input/Output: [(-49 -87 -34 -65) -87]
Test Case: 957 | Input/Output: [(-13 -64 -29 -5) -64]
Test Case: 958 | Input/Output: [(87 52 74 -15) -15]
Test Case: 959 | Input/Output: [(14 53 93 4) 4]
Test Case: 960 | Input/Output: [(65 78 59 -52) -52]
Test Case: 961 | Input/Output: [(1 -90 -13 85) -90]
Test Case: 962 | Input/Output: [(-22 -16 -15 -1) -22]
Test Case: 963 | Input/Output: [(-51 21 -10 59) -51]
Test Case: 964 | Input/Output: [(32 -74 -19 20) -74]
Test Case: 965 | Input/Output: [(68 54 -14 17) -14]
Test Case: 966 | Input/Output: [(-71 -12 -2 87) -71]
Test Case: 967 | Input/Output: [(30 45 40 70) 30]
Test Case: 968 | Input/Output: [(-21 -13 64 -67) -67]
Test Case: 969 | Input/Output: [(-62 -73 -57 -89) -89]
Test Case: 970 | Input/Output: [(-52 -72 -24 96) -72]
Test Case: 971 | Input/Output: [(-13 74 73 43) -13]
Test Case: 972 | Input/Output: [(66 51 48 -55) -55]
Test Case: 973 | Input/Output: [(-69 84 -26 -78) -78]
Test Case: 974 | Input/Output: [(-53 11 5 86) -53]
Test Case: 975 | Input/Output: [(82 11 -43 -65) -65]
Test Case: 976 | Input/Output: [(43 89 46 -37) -37]
Test Case: 977 | Input/Output: [(-48 72 -50 21) -50]
Test Case: 978 | Input/Output: [(-89 -20 71 -33) -89]
Test Case: 979 | Input/Output: [(-30 27 4 78) -30]
Test Case: 980 | Input/Output: [(2 -7 -27 -97) -97]
Test Case: 981 | Input/Output: [(65 10 -2 -33) -33]
Test Case: 982 | Input/Output: [(-74 12 62 -99) -99]
Test Case: 983 | Input/Output: [(55 -78 -97 65) -97]
Test Case: 984 | Input/Output: [(-62 58 67 49) -62]
Test Case: 985 | Input/Output: [(7 -28 7 -19) -28]
Test Case: 986 | Input/Output: [(-68 41 -32 5) -68]
Test Case: 987 | Input/Output: [(72 -97 -71 29) -97]
Test Case: 988 | Input/Output: [(91 8 60 2) 2]
Test Case: 989 | Input/Output: [(34 -25 -2 -60) -60]
Test Case: 990 | Input/Output: [(-51 82 -81 -47) -81]
Test Case: 991 | Input/Output: [(83 -9 71 -4) -9]
Test Case: 992 | Input/Output: [(52 66 3 -72) -72]
Test Case: 993 | Input/Output: [(-86 -93 -59 52) -93]
Test Case: 994 | Input/Output: [(28 -60 -98 18) -98]
Test Case: 995 | Input/Output: [(-55 20 32 -80) -80]
Test Case: 996 | Input/Output: [(-88 4 81 -96) -96]
Test Case: 997 | Input/Output: [(-79 55 -58 -51) -79]
Test Case: 998 | Input/Output: [(-86 34 -83 43) -86]
Test Case: 999 | Input/Output: [(22 52 -66 -25) -66]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -17 -18 27 -110 62 -82 26 -127 -121 80 76 62 68 52 73 -39
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[39 -14 -14 -14] -14] [[-78 -78 -78 -12] -78] [[-39 -39 -39 47] -39] [[-88 81 -88 -88] -88] [[-53 -40 -53 -53] -53] [[90 90 -27 90] -27] [[-34 -34 -34 -19] -34] [[-80 -52 -52 -52] -80] [[42 -51 42 42] -51] [[14 14 14 -67] -67] [(25 25 25 25) 25] [(69 69 69 69) 69] [(-53 -53 -53 -53) -53] [(-73 -73 -73 -73) -73] [(-44 -44 -44 -44) -44] [(26 4 45 2) 2] [(64 32 87 52) 32] [(90 77 1 43) 1] [(93 96 9 94) 9] [(95 78 41 32) 32] [(69 52 17 81) 17] [(44 20 73 33) 20] [(26 37 62 96) 26] [(84 22 99 45) 22] [(26 11 56 23) 11] [(77 4 79 37) 4] [(8 88 91 61) 8] [(70 82 78 35) 35] [(16 29 11 48) 11] [(38 63 42 91) 38] [(59 83 82 86) 59] [(20 57 46 12) 12] [(48 63 71 75) 48] [(53 33 9 74) 9] [(17 36 58 64) 17] [(-12 -79 -72 5) -79] [(-37 -9 -42 39) -42] [(4 19 61 68) 4] [(48 -47 19 -97) -97] [(-65 -100 80 13) -100] [(-91 -56 59 -93) -93] [(-28 -67 -72 -17) -72] [(-19 93 -12 -94) -94] [(99 -50 86 56) -50] [(60 -13 57 65) -13] [(43 -2 -26 -71) -71] [(16 -99 -25 -93) -99] [(18 -53 -67 -10) -67] [(-50 17 -20 29) -50] [(-95 -83 44 8) -95] [(78 28 6 -4) -4] [(18 -70 45 -97) -97] [(31 77 7 65) 7] [(-57 69 95 -94) -94] [(-70 -54 75 -50) -70] [(59 -24 37 15) -24] [(54 -37 -2 -60) -60] [(61 -97 -95 -42) -97] [(-16 -3 -96 11) -96] [(-86 71 38 -52) -86] [(-1 9 -34 -14) -34] [(49 -68 62 -46) -68] [(-33 -46 -100 32) -100] [(-40 9 -59 22) -59] [(94 59 -61 -41) -61] [(-6 54 4 -43) -43] [(-50 23 92 -66) -66] [(15 12 17 43) 12] [(76 60 85 65) 60] [(-90 3 49 -48) -90] [(-59 6 -7 38) -59] [(-24 62 33 -81) -81] [(-83 44 74 -74) -83] [(17 -5 53 -18) -18] [(-72 -39 80 -83) -83] [(-19 -81 68 -77) -81] [(88 -23 97 65) -23] [(-37 72 17 65) -37] [(-49 12 -81 43) -81] [(-97 -46 15 -34) -97] [(14 19 59 -67) -67] [(17 35 61 -8) -8] [(53 -50 -76 70) -76] [(90 -35 72 56) -35] [(67 -38 -42 97) -42] [(25 -77 0 -66) -77] [(-22 89 67 -93) -93] [(83 -85 -59 34) -85] [(-80 -71 -100 -59) -100] [(-67 -22 19 -23) -67] [(88 -41 9 18) -41] [(93 19 -90 -37) -90] [(-6 -74 -38 50) -74] [(25 19 63 58) 19] [(72 -5 48 42) -5])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -12                
Correct output: -39                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -19                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: 42                 
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 52                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 94                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 81                 
Correct output: 20                  | Program output: 33                 
Correct output: 26                  | Program output: 96                 
Correct output: 22                  | Program output: 45                 
Correct output: 11                  | Program output: 23                 
Correct output: 4                   | Program output: 37                 
Correct output: 8                   | Program output: 61                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 48                 
Correct output: 38                  | Program output: 91                 
Correct output: 59                  | Program output: 86                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 75                 
Correct output: 9                   | Program output: 74                 
Correct output: 17                  | Program output: 64                 
Correct output: -79                 | Program output: 5                  
Correct output: -42                 | Program output: 39                 
Correct output: 4                   | Program output: 68                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: 13                 
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: 56                 
Correct output: -13                 | Program output: 65                 
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -93                
Correct output: -67                 | Program output: -10                
Correct output: -50                 | Program output: 29                 
Correct output: -95                 | Program output: 8                  
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 65                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -50                
Correct output: -24                 | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -42                
Correct output: -96                 | Program output: 11                 
Correct output: -86                 | Program output: -52                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -46                
Correct output: -100                | Program output: 32                 
Correct output: -59                 | Program output: 22                 
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 43                 
Correct output: 60                  | Program output: 65                 
Correct output: -90                 | Program output: -48                
Correct output: -59                 | Program output: 38                 
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -77                
Correct output: -23                 | Program output: 65                 
Correct output: -37                 | Program output: 65                 
Correct output: -81                 | Program output: 43                 
Correct output: -97                 | Program output: -34                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 70                 
Correct output: -35                 | Program output: 56                 
Correct output: -42                 | Program output: 97                 
Correct output: -77                 | Program output: -66                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 34                 
Correct output: -100                | Program output: -59                
Correct output: -67                 | Program output: -23                
Correct output: -41                 | Program output: 18                 
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: 50                 
Correct output: 19                  | Program output: 58                 
Correct output: -5                  | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction tag_exec_239} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_906} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 2, :instruction exec_yank} {:close 0, :instruction tag_integer_244} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y})
Lexicase best program: (integer_swap exec_dup (boolean_dup boolean_swap tag_exec_239 (integer_flush) tagged_906 exec_while (integer_gt) integer_div) integer_eq integer_dup_times integer_eq boolean_stackdepth boolean_not exec_s (integer_rot exec_s (in3) (integer_gt in3) (exec_k_when_autoconstructing () (integer_mod integer_gt boolean_yankdup integer_dup exec_s_when_autoconstructing (exec_shove () integer_mod boolean_and) (exec_while (integer_dup_times) in3 exec_swap (boolean_empty boolean_or) (boolean_not integer_eq boolean_shove in4 print_integer exec_yank)) (tag_integer_244 integer_yank exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_y ()) ())))) () ())
Lexicase best errors: [0 1 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 70
Percent parens: 0.329
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction tag_exec_239} {:close 1, :instruction integer_flush} {:close 0, :instruction tagged_906} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 2, :instruction exec_yank} {:close 0, :instruction tag_integer_244} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y})
Zero cases best program: (integer_swap exec_dup (boolean_dup boolean_swap tag_exec_239 (integer_flush) tagged_906 exec_while (integer_gt) integer_div) integer_eq integer_dup_times integer_eq boolean_stackdepth boolean_not exec_s (integer_rot exec_s (in3) (integer_gt in3) (exec_k_when_autoconstructing () (integer_mod integer_gt boolean_yankdup integer_dup exec_s_when_autoconstructing (exec_shove () integer_mod boolean_and) (exec_while (integer_dup_times) in3 exec_swap (boolean_empty boolean_or) (boolean_not integer_eq boolean_shove in4 print_integer exec_yank)) (tag_integer_244 integer_yank exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_y ()) ())))) () ())
Zero cases best errors: [0 1 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 70
Percent parens: 0.329
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 2 2 1 6 1 6 2 4 13)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (6 2 2 1 6 1 6 2 4 13)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction 81} {:close 1, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tagged_661} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 1, :instruction tag_exec_452} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_715} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_empty})
Best program: (integer_min exec_k (exec_if () (81 in4) boolean_empty exec_dup (boolean_flush integer_lt in4) integer_shove print_integer exec_rot (boolean_flush) () (boolean_dup_times tagged_661 integer_inc) exec_swap (tag_exec_452 () boolean_and integer_fromboolean tag_boolean_715 exec_yank boolean_yank boolean_flush exec_pop () integer_min) (boolean_invert_second_then_and exec_s (boolean_or boolean_stackdepth boolean_stackdepth) (exec_yankdup integer_add in3 integer_empty) ())) ())
Errors: [0 1 1 1 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 36
Size: 52
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 9.957
Median total errors in population: 10
Error averages by case: (0.994 0.998 0.998 0.999 0.994 0.999 0.994 0.998 0.996 0.987)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.219
Average program size in population (points): 69.086
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 492589
--- Timings ---
Current time: 1559583857377 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.8 seconds, 29.4%
Fitness Testing:      1.7 seconds, 66.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 94                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 61                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 29                 
Correct output: 38                  | Program output: 63                 
Correct output: 59                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 63                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -9                 
Correct output: 4                   | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -83                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 65                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -54                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -3                 
Correct output: -86                 | Program output: -52                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: 9                  
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -48                
Correct output: -59                 | Program output: 6                  
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: 65                 
Correct output: -81                 | Program output: 12                 
Correct output: -97                 | Program output: -46                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -71                
Correct output: -67                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) () ())) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 62
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) () ())) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 62
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 114 605 271 116 116 114 873 320 164)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (164 114 605 271 116 116 114 873 320 164)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) () ())) ())
Errors: [1 0 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 42
Size: 62
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 7.143
Median total errors in population: 7
Error averages by case: (0.836 0.886 0.395 0.729 0.884 0.884 0.886 0.127 0.68 0.836)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.724
Average program size in population (points): 79.345
Average percent parens in population: 0.290
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.502
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1268826
--- Timings ---
Current time: 1559583861197 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.3 seconds, 41.4%
Fitness Testing:      2.6 seconds, 47.1%
Report:               0.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 94                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 61                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 29                 
Correct output: 38                  | Program output: 63                 
Correct output: 59                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 63                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -9                 
Correct output: 4                   | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -83                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 65                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -54                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -3                 
Correct output: -86                 | Program output: -52                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: 9                  
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -48                
Correct output: -59                 | Program output: 6                  
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: 65                 
Correct output: -81                 | Program output: 12                 
Correct output: -97                 | Program output: -46                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -71                
Correct output: -67                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean boolean_xor) boolean_dup integer_dup)) ()) ()) () ())) ())
Lexicase best errors: [0 1 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean boolean_xor) boolean_dup integer_dup)) ()) ()) () ())) ())
Zero cases best errors: [0 1 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (531 116 205 205 523 853 124 523 847 523)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (531 116 205 205 523 853 124 523 847 523)
Population mean number of perfect (error zero) cases: 4.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush})
Best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_yankdup in3 boolean_swap exec_do*times () boolean_xor) (print_integer integer_gte exec_k (exec_eq integer_div integer_add exec_s_when_autoconstructing (exec_dup (exec_y (integer_stackdepth integer_flush))) () ()) ())) () ())) ())
Errors: [0 1 1 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 61
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 5.55
Median total errors in population: 4
Error averages by case: (0.469 0.884 0.795 0.795 0.477 0.147 0.876 0.477 0.153 0.477)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.514
Average program size in population (points): 65.429
Average percent parens in population: 0.323
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.281
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 323
Genome diversity (% unique genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 324
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2410872
--- Timings ---
Current time: 1559583864893 milliseconds
Total Time:          10.2 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.2 seconds, 41.6%
Fitness Testing:      3.9 seconds, 38.4%
Report:               1.9 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 94                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 61                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 29                 
Correct output: 38                  | Program output: 63                 
Correct output: 59                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 63                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -9                 
Correct output: 4                   | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -83                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 65                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -54                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -3                 
Correct output: -86                 | Program output: -52                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: 9                  
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -48                
Correct output: -59                 | Program output: 6                  
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: 65                 
Correct output: -81                 | Program output: 12                 
Correct output: -97                 | Program output: -46                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -71                
Correct output: -67                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) () ())) ())
Lexicase best errors: [0 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) () ())) ())
Zero cases best errors: [0 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (392 830 178 390 398 233 398 394 234 241)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (392 830 178 390 398 233 398 394 234 241)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup))) ()) () ())) ())
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 44
Size: 64
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.312
Median total errors in population: 6
Error averages by case: (0.608 0.17 0.822 0.61 0.602 0.767 0.602 0.606 0.766 0.759)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.074
Average program size in population (points): 68.049
Average percent parens in population: 0.312
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.73975
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 173
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3425143
--- Timings ---
Current time: 1559583869018 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.1 seconds, 45.0%
Fitness Testing:      5.0 seconds, 36.6%
Report:               2.4 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 42                 
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 52                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 93                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 69                 
Correct output: 20                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 45                 
Correct output: 11                  | Program output: 23                 
Correct output: 4                   | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 16                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -12                
Correct output: -42                 | Program output: -37                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: 56                 
Correct output: -13                 | Program output: 60                 
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -93                
Correct output: -67                 | Program output: -10                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -42                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -46                
Correct output: -100                | Program output: -33                
Correct output: -59                 | Program output: -40                
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 15                 
Correct output: 60                  | Program output: 65                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -77                
Correct output: -23                 | Program output: 65                 
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: 53                 
Correct output: -35                 | Program output: 56                 
Correct output: -42                 | Program output: 67                 
Correct output: -77                 | Program output: -66                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 34                 
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: 18                 
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: -6                 
Correct output: 19                  | Program output: 25                 
Correct output: -5                  | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_gt exec_pop () in1 boolean_dup_times exec_rot (boolean_invert_first_then_and boolean_and integer_empty integer_sub exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_noop) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) () ())
Lexicase best errors: [1 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_gt exec_pop () in1 boolean_dup_times exec_rot (boolean_invert_first_then_and boolean_and integer_empty integer_sub exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_noop) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) () ())
Zero cases best errors: [1 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (464 81 81 302 769 300 849 462 846 457)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (464 81 81 302 769 300 849 462 846 457)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (integer_gt exec_pop () in1 boolean_dup_times exec_rot (boolean_invert_first_then_and boolean_and integer_empty integer_sub exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_noop) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) () ())
Errors: [1 0 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 44
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 5.389
Median total errors in population: 5
Error averages by case: (0.536 0.919 0.919 0.698 0.231 0.7 0.151 0.538 0.154 0.543)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.524
Average program size in population (points): 67.905
Average percent parens in population: 0.302
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.250875
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4451246
--- Timings ---
Current time: 1559583872874 milliseconds
Total Time:          17.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.0 seconds, 45.2%
Fitness Testing:      5.9 seconds, 33.6%
Report:               3.6 seconds, 20.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 94                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 61                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 29                 
Correct output: 38                  | Program output: 63                 
Correct output: 59                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 63                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -9                 
Correct output: 4                   | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -83                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 65                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -54                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -3                 
Correct output: -86                 | Program output: -52                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: 9                  
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -48                
Correct output: -59                 | Program output: 6                  
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: 65                 
Correct output: -81                 | Program output: 12                 
Correct output: -97                 | Program output: -46                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -71                
Correct output: -67                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) () ())) ())
Lexicase best errors: [0 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 58
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) () ())) ())
Zero cases best errors: [0 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 58
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 191 195 251 194 636 251 901 243 194)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (194 191 195 251 194 636 251 901 243 194)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) () ())) () ())) ())
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 70
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 6.75
Median total errors in population: 8
Error averages by case: (0.806 0.809 0.805 0.749 0.806 0.364 0.749 0.099 0.757 0.806)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.19
Average program size in population (points): 56.651
Average percent parens in population: 0.291
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.4755
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 299
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 304
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5591840
--- Timings ---
Current time: 1559583876994 milliseconds
Total Time:          21.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.8 seconds, 45.3%
Fitness Testing:      7.0 seconds, 32.6%
Report:               4.6 seconds, 21.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 94                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 61                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 29                 
Correct output: 38                  | Program output: 63                 
Correct output: 59                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 63                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -9                 
Correct output: 4                   | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -83                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 65                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -54                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -3                 
Correct output: -86                 | Program output: -52                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: 9                  
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -48                
Correct output: -59                 | Program output: 6                  
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: 65                 
Correct output: -81                 | Program output: 12                 
Correct output: -97                 | Program output: -46                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -71                
Correct output: -67                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot boolean_stackdepth integer_add) (exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items boolean_dup exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)))) ()) () ())) ())
Lexicase best errors: [1 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot boolean_stackdepth integer_add) (exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items boolean_dup exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)))) ()) () ())) ())
Zero cases best errors: [1 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 549 1000 837 1000 549 549 545 545 839)
Population mean number of elite cases: 6.70
Count of perfect (error zero) individuals by case: (290 549 0 837 0 549 549 545 545 839)
Population mean number of perfect (error zero) cases: 4.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) () ())) ())
Errors: [1 0 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 42
Size: 62
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 5.297
Median total errors in population: 3
Error averages by case: (0.71 0.451 1.0 0.163 1.0 0.451 0.451 0.455 0.455 0.161)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 45.217
Average program size in population (points): 64.474
Average percent parens in population: 0.297
Minimum age in population: 6.0
Maximum age in population: 11.25
Average age in population: 9.112875
Median age in population: 9.15625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6648519
--- Timings ---
Current time: 1559583881449 milliseconds
Total Time:          25.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.8 seconds, 45.6%
Fitness Testing:      8.1 seconds, 31.3%
Report:               5.9 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 94                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 61                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 29                 
Correct output: 38                  | Program output: 63                 
Correct output: 59                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 63                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 36                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -9                 
Correct output: 4                   | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -83                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 65                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -54                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -3                 
Correct output: -86                 | Program output: -52                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: 9                  
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -48                
Correct output: -59                 | Program output: 6                  
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -74                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: 65                 
Correct output: -81                 | Program output: 12                 
Correct output: -97                 | Program output: -46                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -71                
Correct output: -67                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) in2 boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot boolean_stackdepth integer_add) (exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup))) ()) () ()))
Lexicase best errors: [1 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_do*while (boolean_flush) exec_yankdup exec_do*while (boolean_flush) integer_dup_items tag_integer_902) in2 boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot boolean_stackdepth integer_add) (exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup))) ()) () ()))
Zero cases best errors: [1 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (149 148 707 700 707 707 707 1 148 707)
Population mean number of elite cases: 4.68
Count of perfect (error zero) individuals by case: (149 148 707 700 707 707 707 1 148 707)
Population mean number of perfect (error zero) cases: 4.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup print_newline boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup (exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_add) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ())) () ())) ())
Errors: [1 1 0 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 42
Size: 61
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 5.319
Median total errors in population: 4
Error averages by case: (0.851 0.852 0.293 0.3 0.293 0.293 0.293 0.999 0.852 0.293)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.571
Average program size in population (points): 63.174
Average percent parens in population: 0.309
Minimum age in population: 7.5
Maximum age in population: 12.8125
Average age in population: 10.638921875
Median age in population: 10.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7789198
--- Timings ---
Current time: 1559583885839 milliseconds
Total Time:          30.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.8 seconds, 45.6%
Fitness Testing:      9.2 seconds, 30.4%
Report:               7.1 seconds, 23.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 77                 
Correct output: 9                   | Program output: 93                 
Correct output: 32                  | Program output: 78                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 70                 
Correct output: 11                  | Program output: 16                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 20                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -37                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -91                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -2                 
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: 28                 
Correct output: -97                 | Program output: -70                
Correct output: 7                   | Program output: 31                 
Correct output: -94                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -1                 
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: -40                
Correct output: -61                 | Program output: 59                 
Correct output: -43                 | Program output: -6                 
Correct output: -66                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -5                 
Correct output: -83                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: 14                 
Correct output: -8                  | Program output: 17                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -22                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth integer_gte boolean_rot exec_dup_times (integer_add) boolean_dup_items) (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup exec_while ()) ()) ()) () ())) ())
Lexicase best errors: [0 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth integer_gte boolean_rot exec_dup_times (integer_add) boolean_dup_items) (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup exec_while ()) ()) ()) () ())) ())
Zero cases best errors: [0 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (855 580 265 580 267 324 271 578 265 324)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (855 580 265 580 267 324 271 578 265 324)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth integer_gte boolean_rot exec_dup_times (integer_add) boolean_dup_items) (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup) ()) ()) () ())) ())
Errors: [0 0 1 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 41
Size: 58
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 5.691
Median total errors in population: 5
Error averages by case: (0.145 0.42 0.735 0.42 0.733 0.676 0.729 0.422 0.735 0.676)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.463
Average program size in population (points): 61.272
Average percent parens in population: 0.288
Minimum age in population: 9.0
Maximum age in population: 13.8984375
Average age in population: 12.2840859375
Median age in population: 12.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 201
Genome diversity (% unique genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8921625
--- Timings ---
Current time: 1559583890937 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.5 seconds, 46.6%
Fitness Testing:     10.4 seconds, 29.3%
Report:               8.4 seconds, 23.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 77                 
Correct output: 9                   | Program output: 93                 
Correct output: 32                  | Program output: 78                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 70                 
Correct output: 11                  | Program output: 16                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 20                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -37                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -91                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -2                 
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: 28                 
Correct output: -97                 | Program output: -70                
Correct output: 7                   | Program output: 31                 
Correct output: -94                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -1                 
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: -40                
Correct output: -61                 | Program output: 59                 
Correct output: -43                 | Program output: -6                 
Correct output: -66                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -5                 
Correct output: -83                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: 14                 
Correct output: -8                  | Program output: 17                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -22                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_swap boolean_not boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_fromboolean tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger boolean_shove in2 exec_if (exec_while () in4 integer_min print_integer in2 exec_stackdepth integer_gte boolean_rot exec_dup_times (boolean_not) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) () ())) ())
Lexicase best errors: [0 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_swap boolean_not boolean_dup_items exec_yankdup exec_do*while (boolean_flush) integer_fromboolean tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger boolean_shove in2 exec_if (exec_while () in4 integer_min print_integer in2 exec_stackdepth integer_gte boolean_rot exec_dup_times (boolean_not) exec_swap () (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) () ())) ())
Zero cases best errors: [0 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (253 289 253 506 421 426 511 511 511 604)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (253 289 253 506 421 426 511 511 511 604)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth integer_gte boolean_rot exec_dup_times (integer_add) boolean_dup_items) (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup) ()) ()) () ())) ())
Errors: [1 1 1 0 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 41
Size: 58
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 5.715
Median total errors in population: 4
Error averages by case: (0.747 0.711 0.747 0.494 0.579 0.574 0.489 0.489 0.489 0.396)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.236
Average program size in population (points): 60.916
Average percent parens in population: 0.287
Minimum age in population: 11.0625
Maximum age in population: 15.6015625
Average age in population: 13.65930078125
Median age in population: 13.71875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 10014350
--- Timings ---
Current time: 1559583895115 milliseconds
Total Time:          39.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.3 seconds, 46.3%
Fitness Testing:     11.4 seconds, 28.8%
Report:               9.7 seconds, 24.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 206
Test mean error for best: 0.20600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 93                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 16                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -37                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: -40                
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) ()) () ())) ())
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 63
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) ()) () ())) ())
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 63
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 891 91 673 461 460 438 673 665 673)
Population mean number of elite cases: 5.12
Count of perfect (error zero) individuals by case: (91 891 91 673 461 460 438 673 665 673)
Population mean number of perfect (error zero) cases: 5.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) ()) () ())) ())
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 43
Size: 63
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 4.884
Median total errors in population: 4
Error averages by case: (0.909 0.109 0.909 0.327 0.539 0.54 0.562 0.327 0.335 0.327)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.793
Average program size in population (points): 61.757
Average percent parens in population: 0.305
Minimum age in population: 12.5234375
Maximum age in population: 16.95703125
Average age in population: 15.129439453125
Median age in population: 15.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 11158711
--- Timings ---
Current time: 1559583899464 milliseconds
Total Time:          44.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.3 seconds, 46.2%
Fitness Testing:     12.5 seconds, 28.5%
Report:              11.0 seconds, 25.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 206
Test mean error for best: 0.20600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 93                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 16                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -37                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: -40                
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger) (integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) () ()) ()) ()) ())) ())
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 63
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger) (integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) () ()) ()) ()) ())) ())
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 63
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (662 227 660 660 226 659 657 662 668 664)
Population mean number of elite cases: 5.74
Count of perfect (error zero) individuals by case: (662 227 660 660 226 659 657 662 668 664)
Population mean number of perfect (error zero) cases: 5.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 2, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (boolean_swap exec_pop () boolean_dup_items exec_yankdup boolean_flush integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) ()) () ())) ())
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 43
Size: 63
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 4.255
Median total errors in population: 2
Error averages by case: (0.338 0.773 0.34 0.34 0.774 0.341 0.343 0.338 0.332 0.336)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.148
Average program size in population (points): 61.857
Average percent parens in population: 0.300
Minimum age in population: 13.625
Maximum age in population: 17.890625
Average age in population: 16.630248046875
Median age in population: 16.828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 378
Genome diversity (% unique genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 382
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 12367373
--- Timings ---
Current time: 1559583903845 milliseconds
Total Time:          48.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.2 seconds, 45.9%
Fitness Testing:     13.7 seconds, 28.4%
Report:              12.3 seconds, 25.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 206
Test mean error for best: 0.20600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 93                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 16                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -37                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: -40                
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_lt boolean_yankdup boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) ()) () ())) ())
Lexicase best errors: [0 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 65
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_lt boolean_yankdup boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) ()) () ())) ())
Zero cases best errors: [0 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 65
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (706 703 160 160 710 703 701 160 160 705)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (706 703 160 160 710 703 701 160 160 705)
Population mean number of perfect (error zero) cases: 4.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) ()) () ())) ())
Errors: [0 0 1 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 63
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 5.132
Median total errors in population: 4
Error averages by case: (0.294 0.297 0.84 0.84 0.29 0.297 0.299 0.84 0.84 0.295)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.932
Average program size in population (points): 61.846
Average percent parens in population: 0.303
Minimum age in population: 14.76171875
Maximum age in population: 19.54248046875
Average age in population: 18.1242958984375
Median age in population: 18.09375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 245
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 250
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 13596172
--- Timings ---
Current time: 1559583908143 milliseconds
Total Time:          52.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.9 seconds, 45.5%
Fitness Testing:     15.0 seconds, 28.5%
Report:              13.6 seconds, 25.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 206
Test mean error for best: 0.20600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 90                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: -67                
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 2                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 43                 
Correct output: 9                   | Program output: 93                 
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 52                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 16                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 33                 
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -37                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -72                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: 7                   | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -46                
Correct output: -59                 | Program output: -40                
Correct output: -61                 | Program output: -41                
Correct output: -43                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: -67                
Correct output: -8                  | Program output: -8                 
Correct output: -76                 | Program output: -50                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -37                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_if (exec_while () in1 integer_min exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) ()) () ())) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 62
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_if (exec_while () in1 integer_min exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) ()) () ())) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 62
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (900 486 484 481 39 482 895 481 479 484)
Population mean number of elite cases: 5.21
Count of perfect (error zero) individuals by case: (900 486 484 481 39 482 895 481 479 484)
Population mean number of perfect (error zero) cases: 5.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (exec_while () in4 integer_min print_integer exec_s_when_autoconstructing (boolean_dup_times exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ()) ()) ()) () ())) ())
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 43
Size: 63
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 4.789
Median total errors in population: 7
Error averages by case: (0.1 0.514 0.516 0.519 0.961 0.518 0.105 0.519 0.521 0.516)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.18
Average program size in population (points): 62.68
Average percent parens in population: 0.311
Minimum age in population: 17.53125
Maximum age in population: 21.09375
Average age in population: 19.1446962890625
Median age in population: 19.09375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 240
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 243
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 14755065
--- Timings ---
Current time: 1559583912536 milliseconds
Total Time:          57.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.8 seconds, 45.2%
Fitness Testing:     16.3 seconds, 28.6%
Report:              14.8 seconds, 26.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 222
Test mean error for best: 0.22200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 41                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 70                 
Correct output: 11                  | Program output: 11                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 20                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -26                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: 6                  
Correct output: -97                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -34                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -59                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -43                 | Program output: -6                 
Correct output: -66                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -5                 
Correct output: -83                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: 14                 
Correct output: -8                  | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -22                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Lexicase best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (integer_min print_integer exec_s_when_autoconstructing (integer_eq exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 61
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Zero cases best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (integer_min print_integer exec_s_when_autoconstructing (integer_eq exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 61
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (887 840 449 455 835 833 826 831 455 893)
Population mean number of elite cases: 7.30
Count of perfect (error zero) individuals by case: (887 840 449 455 835 833 826 831 455 893)
Population mean number of perfect (error zero) cases: 7.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_902} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup})
Best program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 43
Size: 62
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 2.696
Median total errors in population: 3
Error averages by case: (0.113 0.16 0.551 0.545 0.165 0.167 0.174 0.169 0.545 0.107)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.925
Average program size in population (points): 62.427
Average percent parens in population: 0.312
Minimum age in population: 19.09375
Maximum age in population: 22.59375
Average age in population: 20.72852111816406
Median age in population: 20.84375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 16022135
--- Timings ---
Current time: 1559583916852 milliseconds
Total Time:          61.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.5 seconds, 44.9%
Fitness Testing:     17.6 seconds, 28.6%
Report:              16.1 seconds, 26.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 62


Auto-simplifying with starting size: 62
step: 0
program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 500
program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 1000
program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 1500
program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 2000
program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 2500
program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 3000
program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 3500
program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 4000
program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 4500
program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 5000
program: (boolean_swap exec_pop (boolean_dup_items exec_yankdup boolean_flush) integer_dup_items tag_integer_902 exec_swap (boolean_yank exec_do*while (integer_add exec_s_when_autoconstructing (boolean_swap integer_shove boolean_frominteger integer_empty in2 exec_dup () exec_if (exec_while () in1 integer_min exec_if (in3) (boolean_or integer_min print_integer exec_s_when_autoconstructing (in2 exec_stackdepth) (integer_gte boolean_rot exec_dup_times (integer_empty boolean_stackdepth integer_flush exec_y (integer_dup_items integer_dec integer_fromboolean in3) boolean_dup integer_dup)) ())) ()) () ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 222
Test mean error for best: 0.22200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -14                 | Program output: -14                
Correct output: -78                 | Program output: -78                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -67                 | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 69                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: 2                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 41                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 70                 
Correct output: 11                  | Program output: 11                 
Correct output: 38                  | Program output: 38                 
Correct output: 59                  | Program output: 59                 
Correct output: 12                  | Program output: 20                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 17                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: 4                   | Program output: 4                  
Correct output: -97                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -19                
Correct output: -50                 | Program output: -50                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -26                
Correct output: -99                 | Program output: -99                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: 6                  
Correct output: -97                 | Program output: -70                
Correct output: 7                   | Program output: 7                  
Correct output: -94                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -24                 | Program output: -24                
Correct output: -60                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -34                 | Program output: -34                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -59                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -43                 | Program output: -6                 
Correct output: -66                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: 60                  | Program output: 60                 
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -81                 | Program output: -24                
Correct output: -83                 | Program output: -83                
Correct output: -18                 | Program output: -5                 
Correct output: -83                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -37                 | Program output: -37                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: -67                 | Program output: 14                 
Correct output: -8                  | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -35                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -93                 | Program output: -22                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -5                  | Program output: -5                 
;;******************************
