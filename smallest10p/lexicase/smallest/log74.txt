Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-58 -58 4 -58] -58] [[-87 -87 -87 -50] -87] [[36 36 25 36] 25] [[65 50 50 50] 50] [[-75 -92 -75 -75] -92] [[-23 -80 -23 -23] -80] [[-39 -39 -93 -39] -93] [[2 24 24 24] 2] [[66 -47 66 66] -47] [[7 -70 -70 -70] -70] [(-2 -2 -2 -2) -2] [(-98 -98 -98 -98) -98] [(75 75 75 75) 75] [(39 39 39 39) 39] [(-74 -74 -74 -74) -74] [(47 11 95 32) 11] [(15 89 41 43) 15] [(64 60 96 49) 49] [(55 70 48 53) 48] [(9 67 62 95) 9] [(8 51 31 94) 8] [(63 86 91 98) 63] [(50 56 76 32) 32] [(36 37 75 35) 35] [(67 42 25 69) 25] [(30 91 95 87) 30] [(27 11 63 98) 11] [(30 23 0 41) 0] [(8 45 21 38) 8] [(43 45 68 73) 43] [(88 38 91 66) 38] [(10 11 1 59) 1] [(82 88 98 98) 82] [(38 84 17 17) 17] [(85 56 17 84) 17] [(-26 -58 -86 -61) -86] [(-34 49 -36 -21) -36] [(-16 -100 -79 17) -100] [(40 85 59 100) 40] [(40 -58 37 22) -58] [(20 -53 56 -19) -53] [(52 26 2 -76) -76] [(72 -52 57 12) -52] [(62 52 -88 79) -88] [(-21 -90 -91 19) -91] [(-24 -72 70 -59) -72] [(-77 66 2 24) -77] [(-78 -10 -16 -4) -78] [(-11 61 55 -5) -11] [(49 18 -72 80) -72] [(-7 100 43 -31) -31] [(22 74 40 30) 22] [(-2 82 18 -94) -94] [(56 96 -48 -11) -48] [(50 -35 57 -58) -58] [(99 11 53 -22) -22] [(69 69 18 -15) -15] [(35 34 48 48) 34] [(-14 30 -72 64) -72] [(-89 29 -54 67) -89] [(-20 -95 92 -25) -95] [(-45 -66 37 -17) -66] [(21 -47 85 55) -47] [(44 50 -59 44) -59] [(41 52 -78 -44) -78] [(68 94 87 44) 44] [(-83 -77 8 -78) -83] [(-7 -74 29 37) -74] [(-79 -66 61 -74) -79] [(-46 41 -99 27) -99] [(38 56 26 -17) -17] [(-84 5 -35 63) -84] [(48 -69 81 33) -69] [(-94 57 -93 52) -94] [(-78 2 -52 13) -78] [(-61 25 57 64) -61] [(93 -68 57 -38) -68] [(-11 -78 55 -27) -78] [(-94 -53 -57 50) -94] [(-43 53 47 -62) -62] [(-77 35 -87 7) -87] [(78 10 -22 -57) -57] [(5 -79 -75 -44) -79] [(-71 -52 -3 -89) -89] [(-82 30 -38 75) -82] [(75 -35 -9 37) -35] [(-11 -67 9 90) -67] [(49 71 -34 82) -34] [(-91 -77 -55 -44) -91] [(1 -3 83 -27) -27] [(87 -29 -80 73) -80] [(-20 6 37 -10) -20] [(-3 59 -62 24) -62] [(-49 -93 75 36) -93] [(8 54 -36 -25) -36])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-58 -58 4 -58] -58]
Train Case:   6 | Input/Output: [[-87 -87 -87 -50] -87]
Train Case:   7 | Input/Output: [[36 36 25 36] 25]
Train Case:   8 | Input/Output: [[65 50 50 50] 50]
Train Case:   9 | Input/Output: [[-75 -92 -75 -75] -92]
Train Case:  10 | Input/Output: [[-23 -80 -23 -23] -80]
Train Case:  11 | Input/Output: [[-39 -39 -93 -39] -93]
Train Case:  12 | Input/Output: [[2 24 24 24] 2]
Train Case:  13 | Input/Output: [[66 -47 66 66] -47]
Train Case:  14 | Input/Output: [[7 -70 -70 -70] -70]
Train Case:  15 | Input/Output: [(-2 -2 -2 -2) -2]
Train Case:  16 | Input/Output: [(-98 -98 -98 -98) -98]
Train Case:  17 | Input/Output: [(75 75 75 75) 75]
Train Case:  18 | Input/Output: [(39 39 39 39) 39]
Train Case:  19 | Input/Output: [(-74 -74 -74 -74) -74]
Train Case:  20 | Input/Output: [(47 11 95 32) 11]
Train Case:  21 | Input/Output: [(15 89 41 43) 15]
Train Case:  22 | Input/Output: [(64 60 96 49) 49]
Train Case:  23 | Input/Output: [(55 70 48 53) 48]
Train Case:  24 | Input/Output: [(9 67 62 95) 9]
Train Case:  25 | Input/Output: [(8 51 31 94) 8]
Train Case:  26 | Input/Output: [(63 86 91 98) 63]
Train Case:  27 | Input/Output: [(50 56 76 32) 32]
Train Case:  28 | Input/Output: [(36 37 75 35) 35]
Train Case:  29 | Input/Output: [(67 42 25 69) 25]
Train Case:  30 | Input/Output: [(30 91 95 87) 30]
Train Case:  31 | Input/Output: [(27 11 63 98) 11]
Train Case:  32 | Input/Output: [(30 23 0 41) 0]
Train Case:  33 | Input/Output: [(8 45 21 38) 8]
Train Case:  34 | Input/Output: [(43 45 68 73) 43]
Train Case:  35 | Input/Output: [(88 38 91 66) 38]
Train Case:  36 | Input/Output: [(10 11 1 59) 1]
Train Case:  37 | Input/Output: [(82 88 98 98) 82]
Train Case:  38 | Input/Output: [(38 84 17 17) 17]
Train Case:  39 | Input/Output: [(85 56 17 84) 17]
Train Case:  40 | Input/Output: [(-26 -58 -86 -61) -86]
Train Case:  41 | Input/Output: [(-34 49 -36 -21) -36]
Train Case:  42 | Input/Output: [(-16 -100 -79 17) -100]
Train Case:  43 | Input/Output: [(40 85 59 100) 40]
Train Case:  44 | Input/Output: [(40 -58 37 22) -58]
Train Case:  45 | Input/Output: [(20 -53 56 -19) -53]
Train Case:  46 | Input/Output: [(52 26 2 -76) -76]
Train Case:  47 | Input/Output: [(72 -52 57 12) -52]
Train Case:  48 | Input/Output: [(62 52 -88 79) -88]
Train Case:  49 | Input/Output: [(-21 -90 -91 19) -91]
Train Case:  50 | Input/Output: [(-24 -72 70 -59) -72]
Train Case:  51 | Input/Output: [(-77 66 2 24) -77]
Train Case:  52 | Input/Output: [(-78 -10 -16 -4) -78]
Train Case:  53 | Input/Output: [(-11 61 55 -5) -11]
Train Case:  54 | Input/Output: [(49 18 -72 80) -72]
Train Case:  55 | Input/Output: [(-7 100 43 -31) -31]
Train Case:  56 | Input/Output: [(22 74 40 30) 22]
Train Case:  57 | Input/Output: [(-2 82 18 -94) -94]
Train Case:  58 | Input/Output: [(56 96 -48 -11) -48]
Train Case:  59 | Input/Output: [(50 -35 57 -58) -58]
Train Case:  60 | Input/Output: [(99 11 53 -22) -22]
Train Case:  61 | Input/Output: [(69 69 18 -15) -15]
Train Case:  62 | Input/Output: [(35 34 48 48) 34]
Train Case:  63 | Input/Output: [(-14 30 -72 64) -72]
Train Case:  64 | Input/Output: [(-89 29 -54 67) -89]
Train Case:  65 | Input/Output: [(-20 -95 92 -25) -95]
Train Case:  66 | Input/Output: [(-45 -66 37 -17) -66]
Train Case:  67 | Input/Output: [(21 -47 85 55) -47]
Train Case:  68 | Input/Output: [(44 50 -59 44) -59]
Train Case:  69 | Input/Output: [(41 52 -78 -44) -78]
Train Case:  70 | Input/Output: [(68 94 87 44) 44]
Train Case:  71 | Input/Output: [(-83 -77 8 -78) -83]
Train Case:  72 | Input/Output: [(-7 -74 29 37) -74]
Train Case:  73 | Input/Output: [(-79 -66 61 -74) -79]
Train Case:  74 | Input/Output: [(-46 41 -99 27) -99]
Train Case:  75 | Input/Output: [(38 56 26 -17) -17]
Train Case:  76 | Input/Output: [(-84 5 -35 63) -84]
Train Case:  77 | Input/Output: [(48 -69 81 33) -69]
Train Case:  78 | Input/Output: [(-94 57 -93 52) -94]
Train Case:  79 | Input/Output: [(-78 2 -52 13) -78]
Train Case:  80 | Input/Output: [(-61 25 57 64) -61]
Train Case:  81 | Input/Output: [(93 -68 57 -38) -68]
Train Case:  82 | Input/Output: [(-11 -78 55 -27) -78]
Train Case:  83 | Input/Output: [(-94 -53 -57 50) -94]
Train Case:  84 | Input/Output: [(-43 53 47 -62) -62]
Train Case:  85 | Input/Output: [(-77 35 -87 7) -87]
Train Case:  86 | Input/Output: [(78 10 -22 -57) -57]
Train Case:  87 | Input/Output: [(5 -79 -75 -44) -79]
Train Case:  88 | Input/Output: [(-71 -52 -3 -89) -89]
Train Case:  89 | Input/Output: [(-82 30 -38 75) -82]
Train Case:  90 | Input/Output: [(75 -35 -9 37) -35]
Train Case:  91 | Input/Output: [(-11 -67 9 90) -67]
Train Case:  92 | Input/Output: [(49 71 -34 82) -34]
Train Case:  93 | Input/Output: [(-91 -77 -55 -44) -91]
Train Case:  94 | Input/Output: [(1 -3 83 -27) -27]
Train Case:  95 | Input/Output: [(87 -29 -80 73) -80]
Train Case:  96 | Input/Output: [(-20 6 37 -10) -20]
Train Case:  97 | Input/Output: [(-3 59 -62 24) -62]
Train Case:  98 | Input/Output: [(-49 -93 75 36) -93]
Train Case:  99 | Input/Output: [(8 54 -36 -25) -36]
Test Case:   0 | Input/Output: [[-62 92 -62 -62] -62]
Test Case:   1 | Input/Output: [[27 27 -52 27] -52]
Test Case:   2 | Input/Output: [[-65 26 26 26] -65]
Test Case:   3 | Input/Output: [[95 -76 -76 -76] -76]
Test Case:   4 | Input/Output: [[75 -72 -72 -72] -72]
Test Case:   5 | Input/Output: [[-37 -6 -6 -6] -37]
Test Case:   6 | Input/Output: [[97 97 97 5] 5]
Test Case:   7 | Input/Output: [[-46 -22 -46 -46] -46]
Test Case:   8 | Input/Output: [[51 -47 51 51] -47]
Test Case:   9 | Input/Output: [[11 6 11 11] 6]
Test Case:  10 | Input/Output: [[3 -91 -91 -91] -91]
Test Case:  11 | Input/Output: [[-20 -64 -64 -64] -64]
Test Case:  12 | Input/Output: [[79 81 79 79] 79]
Test Case:  13 | Input/Output: [[35 35 35 35] 35]
Test Case:  14 | Input/Output: [[0 0 0 4] 0]
Test Case:  15 | Input/Output: [[45 -15 45 45] -15]
Test Case:  16 | Input/Output: [[84 -9 -9 -9] -9]
Test Case:  17 | Input/Output: [[-49 -49 -49 -35] -49]
Test Case:  18 | Input/Output: [[-66 -66 -24 -66] -66]
Test Case:  19 | Input/Output: [[72 72 72 -63] -63]
Test Case:  20 | Input/Output: [[-39 -21 -39 -39] -39]
Test Case:  21 | Input/Output: [[-70 -99 -99 -99] -99]
Test Case:  22 | Input/Output: [[54 54 54 46] 46]
Test Case:  23 | Input/Output: [[16 16 26 16] 16]
Test Case:  24 | Input/Output: [[-7 -7 -7 26] -7]
Test Case:  25 | Input/Output: [[-15 -15 81 -15] -15]
Test Case:  26 | Input/Output: [[-12 -12 -75 -12] -75]
Test Case:  27 | Input/Output: [[77 -96 77 77] -96]
Test Case:  28 | Input/Output: [[19 -84 -84 -84] -84]
Test Case:  29 | Input/Output: [[96 96 96 -87] -87]
Test Case:  30 | Input/Output: [[57 57 57 59] 57]
Test Case:  31 | Input/Output: [[-61 -61 -69 -61] -69]
Test Case:  32 | Input/Output: [[31 -97 31 31] -97]
Test Case:  33 | Input/Output: [[-26 -26 -26 -51] -51]
Test Case:  34 | Input/Output: [[-81 -27 -81 -81] -81]
Test Case:  35 | Input/Output: [[-30 -14 -14 -14] -30]
Test Case:  36 | Input/Output: [[69 -96 -96 -96] -96]
Test Case:  37 | Input/Output: [[-51 -51 -86 -51] -86]
Test Case:  38 | Input/Output: [[88 88 89 88] 88]
Test Case:  39 | Input/Output: [[13 57 13 13] 13]
Test Case:  40 | Input/Output: [[58 87 58 58] 58]
Test Case:  41 | Input/Output: [[-32 -32 14 -32] -32]
Test Case:  42 | Input/Output: [[-94 -94 92 -94] -94]
Test Case:  43 | Input/Output: [[38 38 38 60] 38]
Test Case:  44 | Input/Output: [[-53 -53 -53 39] -53]
Test Case:  45 | Input/Output: [[-5 -5 -5 26] -5]
Test Case:  46 | Input/Output: [[12 -49 -49 -49] -49]
Test Case:  47 | Input/Output: [[-51 39 -51 -51] -51]
Test Case:  48 | Input/Output: [[-7 -60 -60 -60] -60]
Test Case:  49 | Input/Output: [[-4 -85 -85 -85] -85]
Test Case:  50 | Input/Output: [[48 8 8 8] 8]
Test Case:  51 | Input/Output: [[52 52 56 52] 52]
Test Case:  52 | Input/Output: [[-41 81 -41 -41] -41]
Test Case:  53 | Input/Output: [[93 93 28 93] 28]
Test Case:  54 | Input/Output: [[34 -21 34 34] -21]
Test Case:  55 | Input/Output: [[55 -48 -48 -48] -48]
Test Case:  56 | Input/Output: [[56 56 -84 56] -84]
Test Case:  57 | Input/Output: [[-90 -90 -90 52] -90]
Test Case:  58 | Input/Output: [[17 9 9 9] 9]
Test Case:  59 | Input/Output: [[92 -86 92 92] -86]
Test Case:  60 | Input/Output: [[9 29 29 29] 9]
Test Case:  61 | Input/Output: [[-60 -36 -36 -36] -60]
Test Case:  62 | Input/Output: [[-100 70 -100 -100] -100]
Test Case:  63 | Input/Output: [[54 42 42 42] 42]
Test Case:  64 | Input/Output: [[81 81 -19 81] -19]
Test Case:  65 | Input/Output: [[60 26 26 26] 26]
Test Case:  66 | Input/Output: [[9 28 28 28] 9]
Test Case:  67 | Input/Output: [[-65 -65 16 -65] -65]
Test Case:  68 | Input/Output: [[-56 34 34 34] -56]
Test Case:  69 | Input/Output: [[18 18 -32 18] -32]
Test Case:  70 | Input/Output: [[36 36 36 -87] -87]
Test Case:  71 | Input/Output: [[-13 -30 -30 -30] -30]
Test Case:  72 | Input/Output: [[-96 -96 -96 54] -96]
Test Case:  73 | Input/Output: [[92 32 92 92] 32]
Test Case:  74 | Input/Output: [[-21 -21 -21 -25] -25]
Test Case:  75 | Input/Output: [[-39 -39 -39 77] -39]
Test Case:  76 | Input/Output: [[-79 -79 -26 -79] -79]
Test Case:  77 | Input/Output: [[32 82 82 82] 32]
Test Case:  78 | Input/Output: [[-92 -20 -20 -20] -92]
Test Case:  79 | Input/Output: [[76 76 2 76] 2]
Test Case:  80 | Input/Output: [[1 1 -59 1] -59]
Test Case:  81 | Input/Output: [[-70 -70 98 -70] -70]
Test Case:  82 | Input/Output: [[90 -47 90 90] -47]
Test Case:  83 | Input/Output: [[-88 -88 -88 -65] -88]
Test Case:  84 | Input/Output: [[13 13 13 58] 13]
Test Case:  85 | Input/Output: [[71 71 -83 71] -83]
Test Case:  86 | Input/Output: [[-73 -47 -47 -47] -73]
Test Case:  87 | Input/Output: [[47 47 47 73] 47]
Test Case:  88 | Input/Output: [[77 -48 -48 -48] -48]
Test Case:  89 | Input/Output: [[75 11 75 75] 11]
Test Case:  90 | Input/Output: [[-79 79 79 79] -79]
Test Case:  91 | Input/Output: [[71 98 71 71] 71]
Test Case:  92 | Input/Output: [[100 100 78 100] 78]
Test Case:  93 | Input/Output: [[-44 76 -44 -44] -44]
Test Case:  94 | Input/Output: [[20 20 -32 20] -32]
Test Case:  95 | Input/Output: [[42 48 42 42] 42]
Test Case:  96 | Input/Output: [[-2 -2 -2 80] -2]
Test Case:  97 | Input/Output: [[94 94 -97 94] -97]
Test Case:  98 | Input/Output: [[-67 31 -67 -67] -67]
Test Case:  99 | Input/Output: [[-49 -49 -49 -80] -80]
Test Case: 100 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 101 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 102 | Input/Output: [(80 80 80 80) 80]
Test Case: 103 | Input/Output: [(10 10 10 10) 10]
Test Case: 104 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 105 | Input/Output: [(25 25 25 25) 25]
Test Case: 106 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 107 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 108 | Input/Output: [(83 83 83 83) 83]
Test Case: 109 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 110 | Input/Output: [(98 98 98 98) 98]
Test Case: 111 | Input/Output: [(96 96 96 96) 96]
Test Case: 112 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 113 | Input/Output: [(84 84 84 84) 84]
Test Case: 114 | Input/Output: [(10 10 10 10) 10]
Test Case: 115 | Input/Output: [(3 3 3 3) 3]
Test Case: 116 | Input/Output: [(13 13 13 13) 13]
Test Case: 117 | Input/Output: [(5 5 5 5) 5]
Test Case: 118 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 119 | Input/Output: [(78 78 78 78) 78]
Test Case: 120 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 121 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 122 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 123 | Input/Output: [(77 77 77 77) 77]
Test Case: 124 | Input/Output: [(48 48 48 48) 48]
Test Case: 125 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 126 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 127 | Input/Output: [(0 0 0 0) 0]
Test Case: 128 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 129 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 130 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 131 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 132 | Input/Output: [(63 63 63 63) 63]
Test Case: 133 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 134 | Input/Output: [(59 59 59 59) 59]
Test Case: 135 | Input/Output: [(55 55 55 55) 55]
Test Case: 136 | Input/Output: [(48 48 48 48) 48]
Test Case: 137 | Input/Output: [(73 73 73 73) 73]
Test Case: 138 | Input/Output: [(36 36 36 36) 36]
Test Case: 139 | Input/Output: [(57 57 57 57) 57]
Test Case: 140 | Input/Output: [(31 31 31 31) 31]
Test Case: 141 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 142 | Input/Output: [(13 13 13 13) 13]
Test Case: 143 | Input/Output: [(40 40 40 40) 40]
Test Case: 144 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 145 | Input/Output: [(92 92 92 92) 92]
Test Case: 146 | Input/Output: [(1 1 1 1) 1]
Test Case: 147 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 148 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 149 | Input/Output: [(66 66 66 66) 66]
Test Case: 150 | Input/Output: [(62 62 62 62) 62]
Test Case: 151 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 152 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 153 | Input/Output: [(12 12 12 12) 12]
Test Case: 154 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 155 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 156 | Input/Output: [(94 94 94 94) 94]
Test Case: 157 | Input/Output: [(1 1 1 1) 1]
Test Case: 158 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 159 | Input/Output: [(96 96 96 96) 96]
Test Case: 160 | Input/Output: [(63 63 63 63) 63]
Test Case: 161 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 162 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 163 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 164 | Input/Output: [(70 70 70 70) 70]
Test Case: 165 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 166 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 167 | Input/Output: [(72 72 72 72) 72]
Test Case: 168 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 169 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 170 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 171 | Input/Output: [(74 74 74 74) 74]
Test Case: 172 | Input/Output: [(84 84 84 84) 84]
Test Case: 173 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 174 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 175 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 176 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 177 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 178 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 179 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 180 | Input/Output: [(78 78 78 78) 78]
Test Case: 181 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 182 | Input/Output: [(88 88 88 88) 88]
Test Case: 183 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 184 | Input/Output: [(18 18 18 18) 18]
Test Case: 185 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 186 | Input/Output: [(63 63 63 63) 63]
Test Case: 187 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 188 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 189 | Input/Output: [(16 16 16 16) 16]
Test Case: 190 | Input/Output: [(97 97 97 97) 97]
Test Case: 191 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 192 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 193 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 194 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 195 | Input/Output: [(76 76 76 76) 76]
Test Case: 196 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 197 | Input/Output: [(57 57 57 57) 57]
Test Case: 198 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 199 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 200 | Input/Output: [(82 24 55 72) 24]
Test Case: 201 | Input/Output: [(69 24 52 74) 24]
Test Case: 202 | Input/Output: [(55 75 27 80) 27]
Test Case: 203 | Input/Output: [(11 67 17 58) 11]
Test Case: 204 | Input/Output: [(68 89 47 51) 47]
Test Case: 205 | Input/Output: [(53 81 63 63) 53]
Test Case: 206 | Input/Output: [(70 83 22 82) 22]
Test Case: 207 | Input/Output: [(42 78 93 14) 14]
Test Case: 208 | Input/Output: [(98 43 46 39) 39]
Test Case: 209 | Input/Output: [(37 72 58 43) 37]
Test Case: 210 | Input/Output: [(65 54 94 58) 54]
Test Case: 211 | Input/Output: [(5 5 19 52) 5]
Test Case: 212 | Input/Output: [(83 80 88 33) 33]
Test Case: 213 | Input/Output: [(83 4 99 61) 4]
Test Case: 214 | Input/Output: [(54 96 89 63) 54]
Test Case: 215 | Input/Output: [(73 84 38 74) 38]
Test Case: 216 | Input/Output: [(39 22 93 42) 22]
Test Case: 217 | Input/Output: [(78 38 86 40) 38]
Test Case: 218 | Input/Output: [(10 0 43 65) 0]
Test Case: 219 | Input/Output: [(67 66 75 69) 66]
Test Case: 220 | Input/Output: [(48 22 19 99) 19]
Test Case: 221 | Input/Output: [(92 98 25 98) 25]
Test Case: 222 | Input/Output: [(29 84 45 55) 29]
Test Case: 223 | Input/Output: [(32 8 43 15) 8]
Test Case: 224 | Input/Output: [(27 80 62 22) 22]
Test Case: 225 | Input/Output: [(15 77 33 68) 15]
Test Case: 226 | Input/Output: [(87 35 72 88) 35]
Test Case: 227 | Input/Output: [(20 77 96 13) 13]
Test Case: 228 | Input/Output: [(35 60 68 17) 17]
Test Case: 229 | Input/Output: [(31 60 1 22) 1]
Test Case: 230 | Input/Output: [(83 96 100 12) 12]
Test Case: 231 | Input/Output: [(78 46 67 54) 46]
Test Case: 232 | Input/Output: [(34 43 7 16) 7]
Test Case: 233 | Input/Output: [(64 31 51 59) 31]
Test Case: 234 | Input/Output: [(22 94 65 78) 22]
Test Case: 235 | Input/Output: [(53 92 9 96) 9]
Test Case: 236 | Input/Output: [(55 3 36 52) 3]
Test Case: 237 | Input/Output: [(58 84 61 52) 52]
Test Case: 238 | Input/Output: [(91 100 18 6) 6]
Test Case: 239 | Input/Output: [(80 27 18 3) 3]
Test Case: 240 | Input/Output: [(6 26 75 83) 6]
Test Case: 241 | Input/Output: [(71 7 90 8) 7]
Test Case: 242 | Input/Output: [(74 47 27 45) 27]
Test Case: 243 | Input/Output: [(2 8 65 84) 2]
Test Case: 244 | Input/Output: [(83 83 48 72) 48]
Test Case: 245 | Input/Output: [(77 34 62 47) 34]
Test Case: 246 | Input/Output: [(34 30 13 18) 13]
Test Case: 247 | Input/Output: [(91 41 0 70) 0]
Test Case: 248 | Input/Output: [(48 98 56 37) 37]
Test Case: 249 | Input/Output: [(79 46 70 7) 7]
Test Case: 250 | Input/Output: [(12 53 0 54) 0]
Test Case: 251 | Input/Output: [(29 70 14 13) 13]
Test Case: 252 | Input/Output: [(0 48 32 30) 0]
Test Case: 253 | Input/Output: [(77 54 78 55) 54]
Test Case: 254 | Input/Output: [(67 78 72 5) 5]
Test Case: 255 | Input/Output: [(53 28 58 22) 22]
Test Case: 256 | Input/Output: [(83 4 6 61) 4]
Test Case: 257 | Input/Output: [(21 81 3 46) 3]
Test Case: 258 | Input/Output: [(6 98 95 83) 6]
Test Case: 259 | Input/Output: [(55 55 53 40) 40]
Test Case: 260 | Input/Output: [(75 2 27 47) 2]
Test Case: 261 | Input/Output: [(17 19 31 22) 17]
Test Case: 262 | Input/Output: [(91 98 39 64) 39]
Test Case: 263 | Input/Output: [(48 63 83 23) 23]
Test Case: 264 | Input/Output: [(59 55 91 65) 55]
Test Case: 265 | Input/Output: [(75 85 19 0) 0]
Test Case: 266 | Input/Output: [(89 88 33 12) 12]
Test Case: 267 | Input/Output: [(12 10 61 46) 10]
Test Case: 268 | Input/Output: [(33 23 5 6) 5]
Test Case: 269 | Input/Output: [(73 71 11 57) 11]
Test Case: 270 | Input/Output: [(62 13 44 18) 13]
Test Case: 271 | Input/Output: [(1 62 69 7) 1]
Test Case: 272 | Input/Output: [(86 5 91 40) 5]
Test Case: 273 | Input/Output: [(82 72 59 12) 12]
Test Case: 274 | Input/Output: [(32 11 40 4) 4]
Test Case: 275 | Input/Output: [(50 14 65 23) 14]
Test Case: 276 | Input/Output: [(1 58 86 7) 1]
Test Case: 277 | Input/Output: [(21 63 25 3) 3]
Test Case: 278 | Input/Output: [(25 12 5 62) 5]
Test Case: 279 | Input/Output: [(73 40 51 12) 12]
Test Case: 280 | Input/Output: [(6 20 51 87) 6]
Test Case: 281 | Input/Output: [(29 59 91 39) 29]
Test Case: 282 | Input/Output: [(84 7 81 25) 7]
Test Case: 283 | Input/Output: [(4 16 51 4) 4]
Test Case: 284 | Input/Output: [(51 79 4 91) 4]
Test Case: 285 | Input/Output: [(12 25 24 92) 12]
Test Case: 286 | Input/Output: [(28 100 91 10) 10]
Test Case: 287 | Input/Output: [(44 84 74 8) 8]
Test Case: 288 | Input/Output: [(13 89 48 48) 13]
Test Case: 289 | Input/Output: [(90 59 0 51) 0]
Test Case: 290 | Input/Output: [(62 46 3 14) 3]
Test Case: 291 | Input/Output: [(84 61 44 46) 44]
Test Case: 292 | Input/Output: [(76 39 27 16) 16]
Test Case: 293 | Input/Output: [(92 26 94 73) 26]
Test Case: 294 | Input/Output: [(64 42 22 80) 22]
Test Case: 295 | Input/Output: [(71 85 6 16) 6]
Test Case: 296 | Input/Output: [(88 47 72 66) 47]
Test Case: 297 | Input/Output: [(5 6 46 38) 5]
Test Case: 298 | Input/Output: [(81 37 37 47) 37]
Test Case: 299 | Input/Output: [(68 30 85 95) 30]
Test Case: 300 | Input/Output: [(67 25 77 88) 25]
Test Case: 301 | Input/Output: [(15 75 74 23) 15]
Test Case: 302 | Input/Output: [(54 2 79 83) 2]
Test Case: 303 | Input/Output: [(5 95 1 76) 1]
Test Case: 304 | Input/Output: [(87 72 19 70) 19]
Test Case: 305 | Input/Output: [(56 82 7 83) 7]
Test Case: 306 | Input/Output: [(19 69 56 95) 19]
Test Case: 307 | Input/Output: [(3 0 78 41) 0]
Test Case: 308 | Input/Output: [(35 29 57 22) 22]
Test Case: 309 | Input/Output: [(72 26 23 80) 23]
Test Case: 310 | Input/Output: [(24 64 39 98) 24]
Test Case: 311 | Input/Output: [(17 22 70 3) 3]
Test Case: 312 | Input/Output: [(48 96 67 99) 48]
Test Case: 313 | Input/Output: [(17 41 0 68) 0]
Test Case: 314 | Input/Output: [(69 38 18 27) 18]
Test Case: 315 | Input/Output: [(71 71 79 26) 26]
Test Case: 316 | Input/Output: [(47 21 15 93) 15]
Test Case: 317 | Input/Output: [(55 88 55 71) 55]
Test Case: 318 | Input/Output: [(92 44 21 36) 21]
Test Case: 319 | Input/Output: [(69 9 77 9) 9]
Test Case: 320 | Input/Output: [(7 96 33 38) 7]
Test Case: 321 | Input/Output: [(79 59 57 90) 57]
Test Case: 322 | Input/Output: [(68 87 84 100) 68]
Test Case: 323 | Input/Output: [(68 5 81 26) 5]
Test Case: 324 | Input/Output: [(1 4 49 95) 1]
Test Case: 325 | Input/Output: [(87 0 71 65) 0]
Test Case: 326 | Input/Output: [(55 58 86 34) 34]
Test Case: 327 | Input/Output: [(43 43 74 85) 43]
Test Case: 328 | Input/Output: [(51 55 53 98) 51]
Test Case: 329 | Input/Output: [(40 28 30 91) 28]
Test Case: 330 | Input/Output: [(45 78 62 54) 45]
Test Case: 331 | Input/Output: [(4 71 35 39) 4]
Test Case: 332 | Input/Output: [(79 81 67 64) 64]
Test Case: 333 | Input/Output: [(7 37 44 40) 7]
Test Case: 334 | Input/Output: [(66 72 66 59) 59]
Test Case: 335 | Input/Output: [(32 18 35 94) 18]
Test Case: 336 | Input/Output: [(85 75 70 99) 70]
Test Case: 337 | Input/Output: [(21 44 23 20) 20]
Test Case: 338 | Input/Output: [(87 11 41 2) 2]
Test Case: 339 | Input/Output: [(13 27 88 29) 13]
Test Case: 340 | Input/Output: [(85 41 87 19) 19]
Test Case: 341 | Input/Output: [(56 15 7 26) 7]
Test Case: 342 | Input/Output: [(15 21 21 62) 15]
Test Case: 343 | Input/Output: [(83 14 61 96) 14]
Test Case: 344 | Input/Output: [(64 51 39 87) 39]
Test Case: 345 | Input/Output: [(87 30 17 46) 17]
Test Case: 346 | Input/Output: [(88 83 30 82) 30]
Test Case: 347 | Input/Output: [(74 61 86 85) 61]
Test Case: 348 | Input/Output: [(69 48 61 70) 48]
Test Case: 349 | Input/Output: [(37 66 11 0) 0]
Test Case: 350 | Input/Output: [(7 18 34 2) 2]
Test Case: 351 | Input/Output: [(39 79 91 47) 39]
Test Case: 352 | Input/Output: [(80 38 75 65) 38]
Test Case: 353 | Input/Output: [(19 43 95 17) 17]
Test Case: 354 | Input/Output: [(27 27 66 63) 27]
Test Case: 355 | Input/Output: [(73 52 0 66) 0]
Test Case: 356 | Input/Output: [(2 70 37 63) 2]
Test Case: 357 | Input/Output: [(51 48 14 72) 14]
Test Case: 358 | Input/Output: [(92 38 89 49) 38]
Test Case: 359 | Input/Output: [(40 64 45 83) 40]
Test Case: 360 | Input/Output: [(84 11 82 30) 11]
Test Case: 361 | Input/Output: [(53 40 52 48) 40]
Test Case: 362 | Input/Output: [(53 100 100 52) 52]
Test Case: 363 | Input/Output: [(4 82 19 37) 4]
Test Case: 364 | Input/Output: [(6 71 8 76) 6]
Test Case: 365 | Input/Output: [(39 14 81 45) 14]
Test Case: 366 | Input/Output: [(54 75 82 43) 43]
Test Case: 367 | Input/Output: [(66 77 10 95) 10]
Test Case: 368 | Input/Output: [(56 77 41 9) 9]
Test Case: 369 | Input/Output: [(88 20 46 19) 19]
Test Case: 370 | Input/Output: [(26 39 61 56) 26]
Test Case: 371 | Input/Output: [(93 96 93 21) 21]
Test Case: 372 | Input/Output: [(18 89 73 31) 18]
Test Case: 373 | Input/Output: [(2 80 7 3) 2]
Test Case: 374 | Input/Output: [(32 70 0 43) 0]
Test Case: 375 | Input/Output: [(50 21 91 6) 6]
Test Case: 376 | Input/Output: [(84 100 82 93) 82]
Test Case: 377 | Input/Output: [(16 39 34 98) 16]
Test Case: 378 | Input/Output: [(55 46 77 37) 37]
Test Case: 379 | Input/Output: [(50 17 10 21) 10]
Test Case: 380 | Input/Output: [(92 39 37 40) 37]
Test Case: 381 | Input/Output: [(81 83 17 48) 17]
Test Case: 382 | Input/Output: [(84 68 22 80) 22]
Test Case: 383 | Input/Output: [(35 99 6 9) 6]
Test Case: 384 | Input/Output: [(42 47 92 42) 42]
Test Case: 385 | Input/Output: [(37 46 11 21) 11]
Test Case: 386 | Input/Output: [(70 23 69 35) 23]
Test Case: 387 | Input/Output: [(3 32 43 10) 3]
Test Case: 388 | Input/Output: [(17 57 86 35) 17]
Test Case: 389 | Input/Output: [(26 72 49 36) 26]
Test Case: 390 | Input/Output: [(13 98 13 4) 4]
Test Case: 391 | Input/Output: [(78 80 52 27) 27]
Test Case: 392 | Input/Output: [(72 10 34 12) 10]
Test Case: 393 | Input/Output: [(35 66 47 10) 10]
Test Case: 394 | Input/Output: [(12 86 61 32) 12]
Test Case: 395 | Input/Output: [(91 68 66 39) 39]
Test Case: 396 | Input/Output: [(93 19 7 99) 7]
Test Case: 397 | Input/Output: [(0 37 35 39) 0]
Test Case: 398 | Input/Output: [(41 37 27 50) 27]
Test Case: 399 | Input/Output: [(84 66 98 61) 61]
Test Case: 400 | Input/Output: [(70 -10 -91 -82) -91]
Test Case: 401 | Input/Output: [(-52 -29 -24 -66) -66]
Test Case: 402 | Input/Output: [(-39 -57 56 78) -57]
Test Case: 403 | Input/Output: [(85 -74 45 5) -74]
Test Case: 404 | Input/Output: [(-61 -10 -76 47) -76]
Test Case: 405 | Input/Output: [(29 -76 -63 56) -76]
Test Case: 406 | Input/Output: [(18 96 -53 87) -53]
Test Case: 407 | Input/Output: [(76 91 -13 72) -13]
Test Case: 408 | Input/Output: [(31 -36 60 -33) -36]
Test Case: 409 | Input/Output: [(33 -80 -94 -31) -94]
Test Case: 410 | Input/Output: [(-55 -45 -76 -33) -76]
Test Case: 411 | Input/Output: [(-54 -97 72 48) -97]
Test Case: 412 | Input/Output: [(-20 -68 99 58) -68]
Test Case: 413 | Input/Output: [(19 64 -36 94) -36]
Test Case: 414 | Input/Output: [(-44 49 14 -48) -48]
Test Case: 415 | Input/Output: [(32 -69 69 -63) -69]
Test Case: 416 | Input/Output: [(67 22 -87 -85) -87]
Test Case: 417 | Input/Output: [(26 -1 42 25) -1]
Test Case: 418 | Input/Output: [(87 -59 -90 -97) -97]
Test Case: 419 | Input/Output: [(-18 83 81 -99) -99]
Test Case: 420 | Input/Output: [(-85 81 -63 -82) -85]
Test Case: 421 | Input/Output: [(60 8 -24 52) -24]
Test Case: 422 | Input/Output: [(-33 -6 73 -18) -33]
Test Case: 423 | Input/Output: [(-23 -21 49 78) -23]
Test Case: 424 | Input/Output: [(-54 -72 -97 26) -97]
Test Case: 425 | Input/Output: [(30 11 5 -13) -13]
Test Case: 426 | Input/Output: [(-35 -34 -11 -80) -80]
Test Case: 427 | Input/Output: [(7 15 84 -100) -100]
Test Case: 428 | Input/Output: [(-17 58 -6 -73) -73]
Test Case: 429 | Input/Output: [(-59 -96 41 -28) -96]
Test Case: 430 | Input/Output: [(-70 -96 -49 -35) -96]
Test Case: 431 | Input/Output: [(-13 -92 71 -15) -92]
Test Case: 432 | Input/Output: [(-59 -30 -100 -49) -100]
Test Case: 433 | Input/Output: [(-91 -79 -3 -64) -91]
Test Case: 434 | Input/Output: [(59 -34 -26 24) -34]
Test Case: 435 | Input/Output: [(-20 -75 -59 92) -75]
Test Case: 436 | Input/Output: [(-24 -39 19 13) -39]
Test Case: 437 | Input/Output: [(-44 89 76 -78) -78]
Test Case: 438 | Input/Output: [(43 28 6 -73) -73]
Test Case: 439 | Input/Output: [(44 38 74 29) 29]
Test Case: 440 | Input/Output: [(-70 -81 -37 87) -81]
Test Case: 441 | Input/Output: [(-62 32 -78 50) -78]
Test Case: 442 | Input/Output: [(74 -22 8 -25) -25]
Test Case: 443 | Input/Output: [(-97 26 96 -13) -97]
Test Case: 444 | Input/Output: [(-61 58 44 -30) -61]
Test Case: 445 | Input/Output: [(-55 -100 44 54) -100]
Test Case: 446 | Input/Output: [(11 47 21 95) 11]
Test Case: 447 | Input/Output: [(-99 82 -74 50) -99]
Test Case: 448 | Input/Output: [(-93 -57 50 13) -93]
Test Case: 449 | Input/Output: [(-88 5 41 98) -88]
Test Case: 450 | Input/Output: [(40 41 -89 51) -89]
Test Case: 451 | Input/Output: [(-22 -11 100 -87) -87]
Test Case: 452 | Input/Output: [(80 -41 44 -5) -41]
Test Case: 453 | Input/Output: [(-46 36 -100 -19) -100]
Test Case: 454 | Input/Output: [(-95 -46 -11 48) -95]
Test Case: 455 | Input/Output: [(-37 27 33 7) -37]
Test Case: 456 | Input/Output: [(-26 59 -87 -54) -87]
Test Case: 457 | Input/Output: [(89 6 -12 43) -12]
Test Case: 458 | Input/Output: [(4 -27 -45 -41) -45]
Test Case: 459 | Input/Output: [(-97 85 -99 30) -99]
Test Case: 460 | Input/Output: [(-18 98 18 -93) -93]
Test Case: 461 | Input/Output: [(-55 -6 33 12) -55]
Test Case: 462 | Input/Output: [(-31 55 61 78) -31]
Test Case: 463 | Input/Output: [(-63 -39 38 54) -63]
Test Case: 464 | Input/Output: [(10 12 -13 31) -13]
Test Case: 465 | Input/Output: [(-75 40 -79 -71) -79]
Test Case: 466 | Input/Output: [(-71 -42 35 95) -71]
Test Case: 467 | Input/Output: [(89 -44 62 -77) -77]
Test Case: 468 | Input/Output: [(-80 87 -99 -66) -99]
Test Case: 469 | Input/Output: [(73 -49 74 18) -49]
Test Case: 470 | Input/Output: [(41 -4 81 -97) -97]
Test Case: 471 | Input/Output: [(49 44 78 -64) -64]
Test Case: 472 | Input/Output: [(-8 27 -63 -36) -63]
Test Case: 473 | Input/Output: [(-62 16 -45 69) -62]
Test Case: 474 | Input/Output: [(-87 -85 53 88) -87]
Test Case: 475 | Input/Output: [(-55 -63 15 16) -63]
Test Case: 476 | Input/Output: [(19 29 19 14) 14]
Test Case: 477 | Input/Output: [(91 -68 -2 -80) -80]
Test Case: 478 | Input/Output: [(29 -35 -93 22) -93]
Test Case: 479 | Input/Output: [(38 -66 23 -21) -66]
Test Case: 480 | Input/Output: [(-67 -98 83 73) -98]
Test Case: 481 | Input/Output: [(44 -40 -62 52) -62]
Test Case: 482 | Input/Output: [(-25 30 72 89) -25]
Test Case: 483 | Input/Output: [(55 70 10 60) 10]
Test Case: 484 | Input/Output: [(92 33 -11 -69) -69]
Test Case: 485 | Input/Output: [(-6 37 -71 67) -71]
Test Case: 486 | Input/Output: [(67 -71 15 40) -71]
Test Case: 487 | Input/Output: [(39 -81 21 -36) -81]
Test Case: 488 | Input/Output: [(3 24 -95 24) -95]
Test Case: 489 | Input/Output: [(-97 52 -75 73) -97]
Test Case: 490 | Input/Output: [(98 62 -39 5) -39]
Test Case: 491 | Input/Output: [(-34 97 12 80) -34]
Test Case: 492 | Input/Output: [(27 88 -47 -79) -79]
Test Case: 493 | Input/Output: [(34 -88 -82 -26) -88]
Test Case: 494 | Input/Output: [(-11 -12 83 41) -12]
Test Case: 495 | Input/Output: [(-8 54 -73 77) -73]
Test Case: 496 | Input/Output: [(-3 -80 5 64) -80]
Test Case: 497 | Input/Output: [(-60 38 -18 -36) -60]
Test Case: 498 | Input/Output: [(-50 -52 4 2) -52]
Test Case: 499 | Input/Output: [(-90 -63 -84 29) -90]
Test Case: 500 | Input/Output: [(-4 67 32 16) -4]
Test Case: 501 | Input/Output: [(79 75 12 49) 12]
Test Case: 502 | Input/Output: [(-12 -64 28 -42) -64]
Test Case: 503 | Input/Output: [(70 39 86 79) 39]
Test Case: 504 | Input/Output: [(-53 -30 12 58) -53]
Test Case: 505 | Input/Output: [(-66 -59 37 95) -66]
Test Case: 506 | Input/Output: [(60 5 -7 58) -7]
Test Case: 507 | Input/Output: [(83 10 -55 -4) -55]
Test Case: 508 | Input/Output: [(16 31 -13 -25) -25]
Test Case: 509 | Input/Output: [(75 56 100 -19) -19]
Test Case: 510 | Input/Output: [(80 66 -44 -10) -44]
Test Case: 511 | Input/Output: [(-88 15 -67 60) -88]
Test Case: 512 | Input/Output: [(-20 -52 -84 10) -84]
Test Case: 513 | Input/Output: [(35 -19 -26 65) -26]
Test Case: 514 | Input/Output: [(63 31 70 18) 18]
Test Case: 515 | Input/Output: [(50 -45 21 -8) -45]
Test Case: 516 | Input/Output: [(-76 58 73 -9) -76]
Test Case: 517 | Input/Output: [(11 -56 -31 -67) -67]
Test Case: 518 | Input/Output: [(68 -93 5 -64) -93]
Test Case: 519 | Input/Output: [(99 100 37 -13) -13]
Test Case: 520 | Input/Output: [(87 -57 94 28) -57]
Test Case: 521 | Input/Output: [(96 99 -93 15) -93]
Test Case: 522 | Input/Output: [(12 -72 15 29) -72]
Test Case: 523 | Input/Output: [(93 -99 -94 50) -99]
Test Case: 524 | Input/Output: [(72 55 31 66) 31]
Test Case: 525 | Input/Output: [(-25 -91 -75 41) -91]
Test Case: 526 | Input/Output: [(-47 -96 -8 1) -96]
Test Case: 527 | Input/Output: [(-49 73 -65 -14) -65]
Test Case: 528 | Input/Output: [(-27 -1 -43 90) -43]
Test Case: 529 | Input/Output: [(2 -9 3 50) -9]
Test Case: 530 | Input/Output: [(-3 -18 -69 44) -69]
Test Case: 531 | Input/Output: [(-80 -99 -20 -78) -99]
Test Case: 532 | Input/Output: [(-42 -3 -45 -37) -45]
Test Case: 533 | Input/Output: [(66 -21 -42 66) -42]
Test Case: 534 | Input/Output: [(99 61 -33 76) -33]
Test Case: 535 | Input/Output: [(-31 18 -1 -92) -92]
Test Case: 536 | Input/Output: [(37 -23 -67 -49) -67]
Test Case: 537 | Input/Output: [(-48 19 9 -30) -48]
Test Case: 538 | Input/Output: [(46 11 -49 54) -49]
Test Case: 539 | Input/Output: [(-12 -20 -25 53) -25]
Test Case: 540 | Input/Output: [(73 -21 -37 -49) -49]
Test Case: 541 | Input/Output: [(-95 -73 -31 74) -95]
Test Case: 542 | Input/Output: [(-88 83 -62 8) -88]
Test Case: 543 | Input/Output: [(-6 -48 22 29) -48]
Test Case: 544 | Input/Output: [(81 -90 75 91) -90]
Test Case: 545 | Input/Output: [(29 -35 -75 67) -75]
Test Case: 546 | Input/Output: [(-45 88 100 -13) -45]
Test Case: 547 | Input/Output: [(-51 60 94 -59) -59]
Test Case: 548 | Input/Output: [(27 57 13 -35) -35]
Test Case: 549 | Input/Output: [(87 -2 74 36) -2]
Test Case: 550 | Input/Output: [(8 -87 -28 64) -87]
Test Case: 551 | Input/Output: [(70 47 -41 -49) -49]
Test Case: 552 | Input/Output: [(-2 9 -18 -98) -98]
Test Case: 553 | Input/Output: [(-58 100 -51 41) -58]
Test Case: 554 | Input/Output: [(62 -6 27 -28) -28]
Test Case: 555 | Input/Output: [(-21 8 -52 -51) -52]
Test Case: 556 | Input/Output: [(-56 -26 -68 -32) -68]
Test Case: 557 | Input/Output: [(-28 83 95 47) -28]
Test Case: 558 | Input/Output: [(3 -70 56 -53) -70]
Test Case: 559 | Input/Output: [(52 44 77 19) 19]
Test Case: 560 | Input/Output: [(-37 40 49 -72) -72]
Test Case: 561 | Input/Output: [(98 -90 91 82) -90]
Test Case: 562 | Input/Output: [(-53 -73 69 28) -73]
Test Case: 563 | Input/Output: [(70 100 10 44) 10]
Test Case: 564 | Input/Output: [(64 -6 97 79) -6]
Test Case: 565 | Input/Output: [(-28 44 -2 37) -28]
Test Case: 566 | Input/Output: [(-3 55 62 -59) -59]
Test Case: 567 | Input/Output: [(53 -7 -26 42) -26]
Test Case: 568 | Input/Output: [(-53 -13 32 -21) -53]
Test Case: 569 | Input/Output: [(84 29 -45 85) -45]
Test Case: 570 | Input/Output: [(-22 -2 -71 -40) -71]
Test Case: 571 | Input/Output: [(95 34 29 71) 29]
Test Case: 572 | Input/Output: [(56 -38 -89 39) -89]
Test Case: 573 | Input/Output: [(22 -47 -98 -35) -98]
Test Case: 574 | Input/Output: [(-5 -3 23 78) -5]
Test Case: 575 | Input/Output: [(-84 33 4 100) -84]
Test Case: 576 | Input/Output: [(17 -33 82 96) -33]
Test Case: 577 | Input/Output: [(-55 -61 -2 -79) -79]
Test Case: 578 | Input/Output: [(87 67 42 -49) -49]
Test Case: 579 | Input/Output: [(-39 -60 20 10) -60]
Test Case: 580 | Input/Output: [(-5 -71 -7 89) -71]
Test Case: 581 | Input/Output: [(-77 -95 -94 1) -95]
Test Case: 582 | Input/Output: [(-5 19 28 -14) -14]
Test Case: 583 | Input/Output: [(-82 40 12 37) -82]
Test Case: 584 | Input/Output: [(63 -88 -34 -24) -88]
Test Case: 585 | Input/Output: [(-32 99 -99 8) -99]
Test Case: 586 | Input/Output: [(74 29 40 -34) -34]
Test Case: 587 | Input/Output: [(43 -8 19 -58) -58]
Test Case: 588 | Input/Output: [(40 -8 1 76) -8]
Test Case: 589 | Input/Output: [(61 34 65 -15) -15]
Test Case: 590 | Input/Output: [(67 -38 1 -6) -38]
Test Case: 591 | Input/Output: [(-100 52 -66 -24) -100]
Test Case: 592 | Input/Output: [(-32 -77 69 1) -77]
Test Case: 593 | Input/Output: [(-26 28 -83 -29) -83]
Test Case: 594 | Input/Output: [(-75 98 -62 -9) -75]
Test Case: 595 | Input/Output: [(-16 94 -21 86) -21]
Test Case: 596 | Input/Output: [(-80 -83 95 -11) -83]
Test Case: 597 | Input/Output: [(20 93 65 -61) -61]
Test Case: 598 | Input/Output: [(96 -39 -70 44) -70]
Test Case: 599 | Input/Output: [(41 -55 -4 -49) -55]
Test Case: 600 | Input/Output: [(89 28 96 0) 0]
Test Case: 601 | Input/Output: [(-5 3 91 70) -5]
Test Case: 602 | Input/Output: [(29 69 -4 -74) -74]
Test Case: 603 | Input/Output: [(51 -29 49 -7) -29]
Test Case: 604 | Input/Output: [(67 88 95 -77) -77]
Test Case: 605 | Input/Output: [(-16 -76 -88 16) -88]
Test Case: 606 | Input/Output: [(88 -85 -39 -20) -85]
Test Case: 607 | Input/Output: [(-30 39 17 -45) -45]
Test Case: 608 | Input/Output: [(-64 -1 -77 -72) -77]
Test Case: 609 | Input/Output: [(-77 -66 -36 34) -77]
Test Case: 610 | Input/Output: [(56 -85 -31 89) -85]
Test Case: 611 | Input/Output: [(40 -56 -34 47) -56]
Test Case: 612 | Input/Output: [(46 -14 61 -51) -51]
Test Case: 613 | Input/Output: [(82 -30 -33 -79) -79]
Test Case: 614 | Input/Output: [(-28 79 -54 89) -54]
Test Case: 615 | Input/Output: [(-81 46 18 -53) -81]
Test Case: 616 | Input/Output: [(1 -20 -49 -21) -49]
Test Case: 617 | Input/Output: [(31 -6 87 94) -6]
Test Case: 618 | Input/Output: [(58 -31 -74 42) -74]
Test Case: 619 | Input/Output: [(-45 42 66 47) -45]
Test Case: 620 | Input/Output: [(-33 12 9 -46) -46]
Test Case: 621 | Input/Output: [(-80 -88 91 -46) -88]
Test Case: 622 | Input/Output: [(-51 88 -42 -87) -87]
Test Case: 623 | Input/Output: [(-99 40 -13 61) -99]
Test Case: 624 | Input/Output: [(-35 -59 12 70) -59]
Test Case: 625 | Input/Output: [(-43 67 31 33) -43]
Test Case: 626 | Input/Output: [(-43 -97 24 -48) -97]
Test Case: 627 | Input/Output: [(53 -8 -39 34) -39]
Test Case: 628 | Input/Output: [(-72 96 49 -86) -86]
Test Case: 629 | Input/Output: [(100 25 -16 65) -16]
Test Case: 630 | Input/Output: [(-56 37 -86 -84) -86]
Test Case: 631 | Input/Output: [(68 -91 88 96) -91]
Test Case: 632 | Input/Output: [(25 -14 -49 -26) -49]
Test Case: 633 | Input/Output: [(43 88 91 -78) -78]
Test Case: 634 | Input/Output: [(-3 63 95 70) -3]
Test Case: 635 | Input/Output: [(53 90 -80 -20) -80]
Test Case: 636 | Input/Output: [(-72 47 75 79) -72]
Test Case: 637 | Input/Output: [(64 29 -58 -36) -58]
Test Case: 638 | Input/Output: [(0 -67 86 42) -67]
Test Case: 639 | Input/Output: [(-13 47 -34 93) -34]
Test Case: 640 | Input/Output: [(57 36 -91 -24) -91]
Test Case: 641 | Input/Output: [(27 36 -99 96) -99]
Test Case: 642 | Input/Output: [(-6 97 10 82) -6]
Test Case: 643 | Input/Output: [(-29 -24 48 -97) -97]
Test Case: 644 | Input/Output: [(-2 -4 29 14) -4]
Test Case: 645 | Input/Output: [(-16 56 -69 75) -69]
Test Case: 646 | Input/Output: [(-37 2 22 81) -37]
Test Case: 647 | Input/Output: [(91 -18 46 -95) -95]
Test Case: 648 | Input/Output: [(57 -44 11 91) -44]
Test Case: 649 | Input/Output: [(97 54 -54 -96) -96]
Test Case: 650 | Input/Output: [(33 79 -16 -82) -82]
Test Case: 651 | Input/Output: [(-35 94 -65 -86) -86]
Test Case: 652 | Input/Output: [(-58 -21 -99 -2) -99]
Test Case: 653 | Input/Output: [(-95 48 51 61) -95]
Test Case: 654 | Input/Output: [(50 57 -38 9) -38]
Test Case: 655 | Input/Output: [(-16 -87 85 15) -87]
Test Case: 656 | Input/Output: [(45 -57 18 17) -57]
Test Case: 657 | Input/Output: [(69 -47 -4 -41) -47]
Test Case: 658 | Input/Output: [(14 -79 82 70) -79]
Test Case: 659 | Input/Output: [(90 -83 99 -57) -83]
Test Case: 660 | Input/Output: [(-30 91 -38 -2) -38]
Test Case: 661 | Input/Output: [(-97 -72 22 -77) -97]
Test Case: 662 | Input/Output: [(70 73 -53 11) -53]
Test Case: 663 | Input/Output: [(89 78 -99 90) -99]
Test Case: 664 | Input/Output: [(48 -92 -91 2) -92]
Test Case: 665 | Input/Output: [(-25 53 86 49) -25]
Test Case: 666 | Input/Output: [(75 -11 -84 46) -84]
Test Case: 667 | Input/Output: [(-5 64 98 -67) -67]
Test Case: 668 | Input/Output: [(-28 -19 57 -64) -64]
Test Case: 669 | Input/Output: [(-92 -26 -17 -49) -92]
Test Case: 670 | Input/Output: [(21 94 79 61) 21]
Test Case: 671 | Input/Output: [(-90 -76 -36 59) -90]
Test Case: 672 | Input/Output: [(75 -14 -36 69) -36]
Test Case: 673 | Input/Output: [(16 46 -78 54) -78]
Test Case: 674 | Input/Output: [(18 24 -82 -99) -99]
Test Case: 675 | Input/Output: [(-43 58 98 62) -43]
Test Case: 676 | Input/Output: [(64 -35 -89 -41) -89]
Test Case: 677 | Input/Output: [(-23 -1 36 70) -23]
Test Case: 678 | Input/Output: [(-71 -13 55 -19) -71]
Test Case: 679 | Input/Output: [(93 -62 81 94) -62]
Test Case: 680 | Input/Output: [(39 -59 -32 79) -59]
Test Case: 681 | Input/Output: [(46 -4 -76 -37) -76]
Test Case: 682 | Input/Output: [(79 -43 96 -93) -93]
Test Case: 683 | Input/Output: [(-43 23 66 -67) -67]
Test Case: 684 | Input/Output: [(44 51 16 -17) -17]
Test Case: 685 | Input/Output: [(75 -3 14 27) -3]
Test Case: 686 | Input/Output: [(-81 -100 40 -40) -100]
Test Case: 687 | Input/Output: [(65 82 -25 15) -25]
Test Case: 688 | Input/Output: [(96 82 -33 8) -33]
Test Case: 689 | Input/Output: [(38 27 -98 21) -98]
Test Case: 690 | Input/Output: [(-62 -89 -95 100) -95]
Test Case: 691 | Input/Output: [(4 -71 58 -21) -71]
Test Case: 692 | Input/Output: [(10 62 -100 66) -100]
Test Case: 693 | Input/Output: [(58 49 10 96) 10]
Test Case: 694 | Input/Output: [(-1 -2 -19 -33) -33]
Test Case: 695 | Input/Output: [(-66 45 55 72) -66]
Test Case: 696 | Input/Output: [(-70 -19 -80 44) -80]
Test Case: 697 | Input/Output: [(-15 -32 18 -67) -67]
Test Case: 698 | Input/Output: [(-49 -8 11 -15) -49]
Test Case: 699 | Input/Output: [(0 47 12 -37) -37]
Test Case: 700 | Input/Output: [(28 -49 27 2) -49]
Test Case: 701 | Input/Output: [(-95 46 -47 -95) -95]
Test Case: 702 | Input/Output: [(19 28 -17 46) -17]
Test Case: 703 | Input/Output: [(-11 -38 30 -5) -38]
Test Case: 704 | Input/Output: [(-6 42 -28 -72) -72]
Test Case: 705 | Input/Output: [(27 11 92 -46) -46]
Test Case: 706 | Input/Output: [(-66 34 -76 -81) -81]
Test Case: 707 | Input/Output: [(-20 -76 51 -10) -76]
Test Case: 708 | Input/Output: [(-30 -18 83 42) -30]
Test Case: 709 | Input/Output: [(-77 25 -78 22) -78]
Test Case: 710 | Input/Output: [(-7 28 66 -24) -24]
Test Case: 711 | Input/Output: [(-29 57 31 14) -29]
Test Case: 712 | Input/Output: [(-32 -60 -4 -14) -60]
Test Case: 713 | Input/Output: [(7 59 -23 99) -23]
Test Case: 714 | Input/Output: [(86 -48 82 20) -48]
Test Case: 715 | Input/Output: [(98 -13 -22 47) -22]
Test Case: 716 | Input/Output: [(84 70 91 45) 45]
Test Case: 717 | Input/Output: [(3 97 21 25) 3]
Test Case: 718 | Input/Output: [(20 24 3 -25) -25]
Test Case: 719 | Input/Output: [(-31 91 -19 -76) -76]
Test Case: 720 | Input/Output: [(83 6 -25 -18) -25]
Test Case: 721 | Input/Output: [(75 -100 -59 -65) -100]
Test Case: 722 | Input/Output: [(17 -91 31 -14) -91]
Test Case: 723 | Input/Output: [(91 76 -99 -19) -99]
Test Case: 724 | Input/Output: [(-89 -86 -44 -17) -89]
Test Case: 725 | Input/Output: [(61 -50 8 19) -50]
Test Case: 726 | Input/Output: [(15 -8 -38 44) -38]
Test Case: 727 | Input/Output: [(40 -41 19 76) -41]
Test Case: 728 | Input/Output: [(-45 9 17 -53) -53]
Test Case: 729 | Input/Output: [(-6 35 -78 57) -78]
Test Case: 730 | Input/Output: [(39 -68 -79 -94) -94]
Test Case: 731 | Input/Output: [(96 72 41 99) 41]
Test Case: 732 | Input/Output: [(6 -57 -71 5) -71]
Test Case: 733 | Input/Output: [(70 -85 -83 -82) -85]
Test Case: 734 | Input/Output: [(7 64 -50 -44) -50]
Test Case: 735 | Input/Output: [(80 22 36 89) 22]
Test Case: 736 | Input/Output: [(6 -92 46 38) -92]
Test Case: 737 | Input/Output: [(-79 83 1 -78) -79]
Test Case: 738 | Input/Output: [(12 -80 -44 91) -80]
Test Case: 739 | Input/Output: [(-40 75 39 -2) -40]
Test Case: 740 | Input/Output: [(-90 13 -25 -70) -90]
Test Case: 741 | Input/Output: [(-38 69 27 15) -38]
Test Case: 742 | Input/Output: [(-51 -49 100 -35) -51]
Test Case: 743 | Input/Output: [(-87 78 82 56) -87]
Test Case: 744 | Input/Output: [(-41 21 -42 88) -42]
Test Case: 745 | Input/Output: [(-12 -7 -20 12) -20]
Test Case: 746 | Input/Output: [(26 82 57 24) 24]
Test Case: 747 | Input/Output: [(-69 -82 -76 95) -82]
Test Case: 748 | Input/Output: [(86 -12 15 29) -12]
Test Case: 749 | Input/Output: [(9 27 -44 -89) -89]
Test Case: 750 | Input/Output: [(28 87 -99 -12) -99]
Test Case: 751 | Input/Output: [(100 27 -23 -14) -23]
Test Case: 752 | Input/Output: [(-93 -1 -89 82) -93]
Test Case: 753 | Input/Output: [(-98 5 23 -86) -98]
Test Case: 754 | Input/Output: [(59 27 -19 70) -19]
Test Case: 755 | Input/Output: [(-8 25 9 -46) -46]
Test Case: 756 | Input/Output: [(92 -17 -80 -86) -86]
Test Case: 757 | Input/Output: [(-56 36 55 -12) -56]
Test Case: 758 | Input/Output: [(-8 -45 93 63) -45]
Test Case: 759 | Input/Output: [(-85 50 51 82) -85]
Test Case: 760 | Input/Output: [(79 58 100 -64) -64]
Test Case: 761 | Input/Output: [(-43 -4 99 34) -43]
Test Case: 762 | Input/Output: [(-20 -64 96 28) -64]
Test Case: 763 | Input/Output: [(99 -5 75 -36) -36]
Test Case: 764 | Input/Output: [(47 85 88 -99) -99]
Test Case: 765 | Input/Output: [(47 73 -81 -41) -81]
Test Case: 766 | Input/Output: [(62 -47 79 -51) -51]
Test Case: 767 | Input/Output: [(-70 11 -20 90) -70]
Test Case: 768 | Input/Output: [(-80 -38 41 56) -80]
Test Case: 769 | Input/Output: [(-95 -31 71 -91) -95]
Test Case: 770 | Input/Output: [(30 37 -5 50) -5]
Test Case: 771 | Input/Output: [(89 -93 -19 56) -93]
Test Case: 772 | Input/Output: [(-92 85 34 -73) -92]
Test Case: 773 | Input/Output: [(58 -93 17 26) -93]
Test Case: 774 | Input/Output: [(98 -66 -31 -32) -66]
Test Case: 775 | Input/Output: [(35 11 -98 76) -98]
Test Case: 776 | Input/Output: [(-73 45 65 95) -73]
Test Case: 777 | Input/Output: [(57 65 76 -14) -14]
Test Case: 778 | Input/Output: [(-56 56 13 -54) -56]
Test Case: 779 | Input/Output: [(45 -46 -17 97) -46]
Test Case: 780 | Input/Output: [(90 -44 52 42) -44]
Test Case: 781 | Input/Output: [(-99 -2 -10 51) -99]
Test Case: 782 | Input/Output: [(33 58 -1 -57) -57]
Test Case: 783 | Input/Output: [(-72 -5 -8 -89) -89]
Test Case: 784 | Input/Output: [(32 23 81 61) 23]
Test Case: 785 | Input/Output: [(76 32 94 -15) -15]
Test Case: 786 | Input/Output: [(19 49 67 48) 19]
Test Case: 787 | Input/Output: [(61 -90 -69 -25) -90]
Test Case: 788 | Input/Output: [(14 54 39 27) 14]
Test Case: 789 | Input/Output: [(-88 92 -95 33) -95]
Test Case: 790 | Input/Output: [(-90 55 -40 -90) -90]
Test Case: 791 | Input/Output: [(-98 71 93 67) -98]
Test Case: 792 | Input/Output: [(43 10 25 33) 10]
Test Case: 793 | Input/Output: [(7 -7 -66 12) -66]
Test Case: 794 | Input/Output: [(79 -18 98 28) -18]
Test Case: 795 | Input/Output: [(9 -80 88 -75) -80]
Test Case: 796 | Input/Output: [(-51 75 30 33) -51]
Test Case: 797 | Input/Output: [(-91 -80 -99 48) -99]
Test Case: 798 | Input/Output: [(-42 -36 99 -49) -49]
Test Case: 799 | Input/Output: [(-71 -39 -67 -71) -71]
Test Case: 800 | Input/Output: [(-91 64 -17 -84) -91]
Test Case: 801 | Input/Output: [(81 2 33 90) 2]
Test Case: 802 | Input/Output: [(-39 -96 -14 -53) -96]
Test Case: 803 | Input/Output: [(-49 57 61 65) -49]
Test Case: 804 | Input/Output: [(-56 -65 -75 72) -75]
Test Case: 805 | Input/Output: [(0 -38 19 90) -38]
Test Case: 806 | Input/Output: [(-7 -78 -23 17) -78]
Test Case: 807 | Input/Output: [(23 0 90 -35) -35]
Test Case: 808 | Input/Output: [(-2 -6 91 -78) -78]
Test Case: 809 | Input/Output: [(-32 22 77 77) -32]
Test Case: 810 | Input/Output: [(-37 2 26 53) -37]
Test Case: 811 | Input/Output: [(21 47 -94 -58) -94]
Test Case: 812 | Input/Output: [(-35 26 59 -92) -92]
Test Case: 813 | Input/Output: [(-31 -35 79 -69) -69]
Test Case: 814 | Input/Output: [(-54 27 -89 -9) -89]
Test Case: 815 | Input/Output: [(9 -95 -37 -28) -95]
Test Case: 816 | Input/Output: [(6 46 -70 -11) -70]
Test Case: 817 | Input/Output: [(-84 -96 -42 7) -96]
Test Case: 818 | Input/Output: [(-93 -12 -91 0) -93]
Test Case: 819 | Input/Output: [(36 26 -13 39) -13]
Test Case: 820 | Input/Output: [(74 50 55 -63) -63]
Test Case: 821 | Input/Output: [(79 18 17 94) 17]
Test Case: 822 | Input/Output: [(-30 -64 -97 80) -97]
Test Case: 823 | Input/Output: [(8 -61 -66 -98) -98]
Test Case: 824 | Input/Output: [(-15 68 -20 -7) -20]
Test Case: 825 | Input/Output: [(-85 35 79 -19) -85]
Test Case: 826 | Input/Output: [(-31 -56 -39 74) -56]
Test Case: 827 | Input/Output: [(40 -17 -99 -14) -99]
Test Case: 828 | Input/Output: [(23 -19 77 -82) -82]
Test Case: 829 | Input/Output: [(95 -68 19 -26) -68]
Test Case: 830 | Input/Output: [(84 93 -51 -98) -98]
Test Case: 831 | Input/Output: [(25 -40 -69 78) -69]
Test Case: 832 | Input/Output: [(-19 -75 -68 -64) -75]
Test Case: 833 | Input/Output: [(25 59 43 5) 5]
Test Case: 834 | Input/Output: [(-68 -27 -25 42) -68]
Test Case: 835 | Input/Output: [(57 52 -88 81) -88]
Test Case: 836 | Input/Output: [(9 31 97 4) 4]
Test Case: 837 | Input/Output: [(24 -43 24 -36) -43]
Test Case: 838 | Input/Output: [(29 45 -98 58) -98]
Test Case: 839 | Input/Output: [(30 9 79 24) 9]
Test Case: 840 | Input/Output: [(-68 -26 44 -7) -68]
Test Case: 841 | Input/Output: [(-93 -95 40 81) -95]
Test Case: 842 | Input/Output: [(-8 75 -38 -41) -41]
Test Case: 843 | Input/Output: [(50 58 38 -33) -33]
Test Case: 844 | Input/Output: [(-41 -26 -17 -13) -41]
Test Case: 845 | Input/Output: [(93 -21 68 7) -21]
Test Case: 846 | Input/Output: [(-29 52 81 10) -29]
Test Case: 847 | Input/Output: [(-76 -56 87 30) -76]
Test Case: 848 | Input/Output: [(16 -83 66 -22) -83]
Test Case: 849 | Input/Output: [(-65 -58 2 28) -65]
Test Case: 850 | Input/Output: [(-19 9 -30 58) -30]
Test Case: 851 | Input/Output: [(-43 -4 -87 45) -87]
Test Case: 852 | Input/Output: [(26 13 -34 -48) -48]
Test Case: 853 | Input/Output: [(12 39 -66 72) -66]
Test Case: 854 | Input/Output: [(25 -89 74 47) -89]
Test Case: 855 | Input/Output: [(-68 -9 -35 80) -68]
Test Case: 856 | Input/Output: [(74 -88 71 14) -88]
Test Case: 857 | Input/Output: [(17 -86 44 84) -86]
Test Case: 858 | Input/Output: [(78 22 -19 -10) -19]
Test Case: 859 | Input/Output: [(39 35 29 -34) -34]
Test Case: 860 | Input/Output: [(-12 44 99 38) -12]
Test Case: 861 | Input/Output: [(40 82 -52 -53) -53]
Test Case: 862 | Input/Output: [(-8 -68 58 20) -68]
Test Case: 863 | Input/Output: [(-99 71 78 -50) -99]
Test Case: 864 | Input/Output: [(9 -42 -72 -65) -72]
Test Case: 865 | Input/Output: [(39 14 18 4) 4]
Test Case: 866 | Input/Output: [(95 84 -26 51) -26]
Test Case: 867 | Input/Output: [(13 92 57 75) 13]
Test Case: 868 | Input/Output: [(15 36 -86 -74) -86]
Test Case: 869 | Input/Output: [(92 -89 93 -66) -89]
Test Case: 870 | Input/Output: [(76 68 86 -28) -28]
Test Case: 871 | Input/Output: [(10 -64 86 -8) -64]
Test Case: 872 | Input/Output: [(-96 36 -48 -96) -96]
Test Case: 873 | Input/Output: [(7 95 61 -94) -94]
Test Case: 874 | Input/Output: [(-90 51 -50 -60) -90]
Test Case: 875 | Input/Output: [(15 -27 -50 -76) -76]
Test Case: 876 | Input/Output: [(-45 -57 13 -15) -57]
Test Case: 877 | Input/Output: [(59 -15 66 -71) -71]
Test Case: 878 | Input/Output: [(-42 10 -77 -100) -100]
Test Case: 879 | Input/Output: [(76 -63 -54 -38) -63]
Test Case: 880 | Input/Output: [(68 -94 24 -78) -94]
Test Case: 881 | Input/Output: [(6 -89 90 -50) -89]
Test Case: 882 | Input/Output: [(-62 22 23 -32) -62]
Test Case: 883 | Input/Output: [(46 -34 18 11) -34]
Test Case: 884 | Input/Output: [(23 82 22 51) 22]
Test Case: 885 | Input/Output: [(26 66 -31 11) -31]
Test Case: 886 | Input/Output: [(-58 -26 -4 96) -58]
Test Case: 887 | Input/Output: [(80 -59 1 96) -59]
Test Case: 888 | Input/Output: [(88 9 6 35) 6]
Test Case: 889 | Input/Output: [(-51 22 -92 14) -92]
Test Case: 890 | Input/Output: [(7 -73 2 -12) -73]
Test Case: 891 | Input/Output: [(-100 -87 68 9) -100]
Test Case: 892 | Input/Output: [(11 -14 -12 -18) -18]
Test Case: 893 | Input/Output: [(88 -10 -12 13) -12]
Test Case: 894 | Input/Output: [(-21 -33 -64 -50) -64]
Test Case: 895 | Input/Output: [(84 43 -53 61) -53]
Test Case: 896 | Input/Output: [(37 -43 67 -81) -81]
Test Case: 897 | Input/Output: [(-36 -79 -87 26) -87]
Test Case: 898 | Input/Output: [(-98 30 -41 -82) -98]
Test Case: 899 | Input/Output: [(-56 52 -65 38) -65]
Test Case: 900 | Input/Output: [(54 -43 -52 -37) -52]
Test Case: 901 | Input/Output: [(40 61 -54 -24) -54]
Test Case: 902 | Input/Output: [(-65 34 -80 -77) -80]
Test Case: 903 | Input/Output: [(96 32 -77 84) -77]
Test Case: 904 | Input/Output: [(-16 -12 -46 -77) -77]
Test Case: 905 | Input/Output: [(-51 59 -40 46) -51]
Test Case: 906 | Input/Output: [(-74 -74 -77 -7) -77]
Test Case: 907 | Input/Output: [(-83 -67 93 -31) -83]
Test Case: 908 | Input/Output: [(-25 1 -35 -24) -35]
Test Case: 909 | Input/Output: [(-14 0 -95 59) -95]
Test Case: 910 | Input/Output: [(-9 -59 -2 -48) -59]
Test Case: 911 | Input/Output: [(69 -96 7 -100) -100]
Test Case: 912 | Input/Output: [(91 -85 -33 -83) -85]
Test Case: 913 | Input/Output: [(-9 88 -32 -29) -32]
Test Case: 914 | Input/Output: [(-23 -93 23 19) -93]
Test Case: 915 | Input/Output: [(-50 95 -20 -100) -100]
Test Case: 916 | Input/Output: [(50 -20 80 -64) -64]
Test Case: 917 | Input/Output: [(-82 99 71 17) -82]
Test Case: 918 | Input/Output: [(-96 -69 100 -72) -96]
Test Case: 919 | Input/Output: [(-19 -88 -25 3) -88]
Test Case: 920 | Input/Output: [(90 13 6 -35) -35]
Test Case: 921 | Input/Output: [(89 37 -14 -94) -94]
Test Case: 922 | Input/Output: [(8 85 -29 65) -29]
Test Case: 923 | Input/Output: [(-88 52 37 -57) -88]
Test Case: 924 | Input/Output: [(-79 78 -76 47) -79]
Test Case: 925 | Input/Output: [(78 -6 6 -50) -50]
Test Case: 926 | Input/Output: [(-52 -3 75 -61) -61]
Test Case: 927 | Input/Output: [(95 -68 -36 51) -68]
Test Case: 928 | Input/Output: [(-75 69 14 -55) -75]
Test Case: 929 | Input/Output: [(-73 -81 74 44) -81]
Test Case: 930 | Input/Output: [(-1 11 33 -80) -80]
Test Case: 931 | Input/Output: [(45 39 -55 -29) -55]
Test Case: 932 | Input/Output: [(89 -63 -41 -53) -63]
Test Case: 933 | Input/Output: [(81 44 67 -91) -91]
Test Case: 934 | Input/Output: [(86 67 67 -80) -80]
Test Case: 935 | Input/Output: [(29 33 22 -22) -22]
Test Case: 936 | Input/Output: [(23 -95 4 -87) -95]
Test Case: 937 | Input/Output: [(-4 17 -9 -1) -9]
Test Case: 938 | Input/Output: [(55 26 48 65) 26]
Test Case: 939 | Input/Output: [(-100 -2 35 -65) -100]
Test Case: 940 | Input/Output: [(-13 -22 -18 26) -22]
Test Case: 941 | Input/Output: [(64 -50 -91 -44) -91]
Test Case: 942 | Input/Output: [(46 -87 -40 -100) -100]
Test Case: 943 | Input/Output: [(26 95 82 44) 26]
Test Case: 944 | Input/Output: [(-20 7 -10 -90) -90]
Test Case: 945 | Input/Output: [(28 37 29 2) 2]
Test Case: 946 | Input/Output: [(-44 21 -30 24) -44]
Test Case: 947 | Input/Output: [(8 -33 -67 -20) -67]
Test Case: 948 | Input/Output: [(3 15 44 -43) -43]
Test Case: 949 | Input/Output: [(-40 80 29 81) -40]
Test Case: 950 | Input/Output: [(-61 -28 -89 65) -89]
Test Case: 951 | Input/Output: [(-34 59 -40 -37) -40]
Test Case: 952 | Input/Output: [(-67 -99 93 -77) -99]
Test Case: 953 | Input/Output: [(-58 -82 -36 -5) -82]
Test Case: 954 | Input/Output: [(-7 -7 85 29) -7]
Test Case: 955 | Input/Output: [(38 -7 35 -19) -19]
Test Case: 956 | Input/Output: [(8 -7 80 58) -7]
Test Case: 957 | Input/Output: [(-66 -14 7 52) -66]
Test Case: 958 | Input/Output: [(-90 -47 -39 -38) -90]
Test Case: 959 | Input/Output: [(19 1 -19 -88) -88]
Test Case: 960 | Input/Output: [(-38 -12 -76 27) -76]
Test Case: 961 | Input/Output: [(-26 62 8 -86) -86]
Test Case: 962 | Input/Output: [(1 -10 -49 -73) -73]
Test Case: 963 | Input/Output: [(-65 -84 51 96) -84]
Test Case: 964 | Input/Output: [(-60 -62 -50 34) -62]
Test Case: 965 | Input/Output: [(11 93 16 -33) -33]
Test Case: 966 | Input/Output: [(43 -26 -91 -74) -91]
Test Case: 967 | Input/Output: [(-40 94 -43 -86) -86]
Test Case: 968 | Input/Output: [(48 -77 -79 -55) -79]
Test Case: 969 | Input/Output: [(69 -28 -30 -23) -30]
Test Case: 970 | Input/Output: [(-56 83 89 80) -56]
Test Case: 971 | Input/Output: [(46 29 94 -70) -70]
Test Case: 972 | Input/Output: [(31 37 -55 51) -55]
Test Case: 973 | Input/Output: [(9 94 12 -98) -98]
Test Case: 974 | Input/Output: [(-47 -43 -68 -5) -68]
Test Case: 975 | Input/Output: [(33 45 37 -1) -1]
Test Case: 976 | Input/Output: [(-70 15 34 66) -70]
Test Case: 977 | Input/Output: [(-14 89 -14 44) -14]
Test Case: 978 | Input/Output: [(8 47 -59 22) -59]
Test Case: 979 | Input/Output: [(-10 97 -73 -40) -73]
Test Case: 980 | Input/Output: [(-99 -3 60 -25) -99]
Test Case: 981 | Input/Output: [(-45 7 21 16) -45]
Test Case: 982 | Input/Output: [(83 -73 -71 94) -73]
Test Case: 983 | Input/Output: [(-49 76 -48 37) -49]
Test Case: 984 | Input/Output: [(-65 -79 -79 -10) -79]
Test Case: 985 | Input/Output: [(35 36 89 -25) -25]
Test Case: 986 | Input/Output: [(-9 38 -86 -57) -86]
Test Case: 987 | Input/Output: [(-53 8 -96 -47) -96]
Test Case: 988 | Input/Output: [(46 44 95 11) 11]
Test Case: 989 | Input/Output: [(64 -16 97 -28) -28]
Test Case: 990 | Input/Output: [(-53 97 -49 45) -53]
Test Case: 991 | Input/Output: [(-80 -15 62 40) -80]
Test Case: 992 | Input/Output: [(-88 57 59 -9) -88]
Test Case: 993 | Input/Output: [(-47 73 -25 64) -47]
Test Case: 994 | Input/Output: [(-57 -74 82 -48) -74]
Test Case: 995 | Input/Output: [(27 12 22 -72) -72]
Test Case: 996 | Input/Output: [(-57 -95 -5 -79) -95]
Test Case: 997 | Input/Output: [(8 -12 -12 -16) -16]
Test Case: 998 | Input/Output: [(35 -63 -7 30) -63]
Test Case: 999 | Input/Output: [(3 18 -49 35) -49]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -86 -21 -115 -52 -102 125 -47 27 25 -77 -61 -13 -114 -110 -7 -26
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-58 -58 4 -58] -58] [[-87 -87 -87 -50] -87] [[36 36 25 36] 25] [[65 50 50 50] 50] [[-75 -92 -75 -75] -92] [[-23 -80 -23 -23] -80] [[-39 -39 -93 -39] -93] [[2 24 24 24] 2] [[66 -47 66 66] -47] [[7 -70 -70 -70] -70] [(-2 -2 -2 -2) -2] [(-98 -98 -98 -98) -98] [(75 75 75 75) 75] [(39 39 39 39) 39] [(-74 -74 -74 -74) -74] [(47 11 95 32) 11] [(15 89 41 43) 15] [(64 60 96 49) 49] [(55 70 48 53) 48] [(9 67 62 95) 9] [(8 51 31 94) 8] [(63 86 91 98) 63] [(50 56 76 32) 32] [(36 37 75 35) 35] [(67 42 25 69) 25] [(30 91 95 87) 30] [(27 11 63 98) 11] [(30 23 0 41) 0] [(8 45 21 38) 8] [(43 45 68 73) 43] [(88 38 91 66) 38] [(10 11 1 59) 1] [(82 88 98 98) 82] [(38 84 17 17) 17] [(85 56 17 84) 17] [(-26 -58 -86 -61) -86] [(-34 49 -36 -21) -36] [(-16 -100 -79 17) -100] [(40 85 59 100) 40] [(40 -58 37 22) -58] [(20 -53 56 -19) -53] [(52 26 2 -76) -76] [(72 -52 57 12) -52] [(62 52 -88 79) -88] [(-21 -90 -91 19) -91] [(-24 -72 70 -59) -72] [(-77 66 2 24) -77] [(-78 -10 -16 -4) -78] [(-11 61 55 -5) -11] [(49 18 -72 80) -72] [(-7 100 43 -31) -31] [(22 74 40 30) 22] [(-2 82 18 -94) -94] [(56 96 -48 -11) -48] [(50 -35 57 -58) -58] [(99 11 53 -22) -22] [(69 69 18 -15) -15] [(35 34 48 48) 34] [(-14 30 -72 64) -72] [(-89 29 -54 67) -89] [(-20 -95 92 -25) -95] [(-45 -66 37 -17) -66] [(21 -47 85 55) -47] [(44 50 -59 44) -59] [(41 52 -78 -44) -78] [(68 94 87 44) 44] [(-83 -77 8 -78) -83] [(-7 -74 29 37) -74] [(-79 -66 61 -74) -79] [(-46 41 -99 27) -99] [(38 56 26 -17) -17] [(-84 5 -35 63) -84] [(48 -69 81 33) -69] [(-94 57 -93 52) -94] [(-78 2 -52 13) -78] [(-61 25 57 64) -61] [(93 -68 57 -38) -68] [(-11 -78 55 -27) -78] [(-94 -53 -57 50) -94] [(-43 53 47 -62) -62] [(-77 35 -87 7) -87] [(78 10 -22 -57) -57] [(5 -79 -75 -44) -79] [(-71 -52 -3 -89) -89] [(-82 30 -38 75) -82] [(75 -35 -9 37) -35] [(-11 -67 9 90) -67] [(49 71 -34 82) -34] [(-91 -77 -55 -44) -91] [(1 -3 83 -27) -27] [(87 -29 -80 73) -80] [(-20 6 37 -10) -20] [(-3 59 -62 24) -62] [(-49 -93 75 36) -93] [(8 54 -36 -25) -36])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 36                 
Correct output: 50                  | Program output: 65                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: 7                  
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 47                 
Correct output: 15                  | Program output: 15                 
Correct output: 49                  | Program output: 64                 
Correct output: 48                  | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 50                 
Correct output: 35                  | Program output: 36                 
Correct output: 25                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 27                 
Correct output: 0                   | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: 38                  | Program output: 88                 
Correct output: 1                   | Program output: 10                 
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 38                 
Correct output: 17                  | Program output: 85                 
Correct output: -86                 | Program output: -26                
Correct output: -36                 | Program output: -34                
Correct output: -100                | Program output: -16                
Correct output: 40                  | Program output: 40                 
Correct output: -58                 | Program output: 40                 
Correct output: -53                 | Program output: 20                 
Correct output: -76                 | Program output: 52                 
Correct output: -52                 | Program output: 72                 
Correct output: -88                 | Program output: 62                 
Correct output: -91                 | Program output: -21                
Correct output: -72                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -11                 | Program output: -11                
Correct output: -72                 | Program output: 49                 
Correct output: -31                 | Program output: -7                 
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -2                 
Correct output: -48                 | Program output: 56                 
Correct output: -58                 | Program output: 50                 
Correct output: -22                 | Program output: 99                 
Correct output: -15                 | Program output: 69                 
Correct output: 34                  | Program output: 35                 
Correct output: -72                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -20                
Correct output: -66                 | Program output: -45                
Correct output: -47                 | Program output: 21                 
Correct output: -59                 | Program output: 44                 
Correct output: -78                 | Program output: 41                 
Correct output: 44                  | Program output: 68                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -7                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -46                
Correct output: -17                 | Program output: 38                 
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: 93                 
Correct output: -78                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -43                
Correct output: -87                 | Program output: -77                
Correct output: -57                 | Program output: 78                 
Correct output: -79                 | Program output: 5                  
Correct output: -89                 | Program output: -71                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: 75                 
Correct output: -67                 | Program output: -11                
Correct output: -34                 | Program output: 49                 
Correct output: -91                 | Program output: -91                
Correct output: -27                 | Program output: 1                  
Correct output: -80                 | Program output: 87                 
Correct output: -20                 | Program output: -20                
Correct output: -62                 | Program output: -3                 
Correct output: -93                 | Program output: -49                
Correct output: -36                 | Program output: 8                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_443} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_944} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_flush})
Lexicase best program: (boolean_invert_first_then_and integer_mod boolean_eq boolean_invert_second_then_and exec_when () boolean_shove integer_flush exec_do*count (tagged_443 exec_shove () in1 print_integer tag_boolean_944 exec_if (exec_when () integer_flush) (integer_yank integer_yankdup exec_dup_items exec_k_when_autoconstructing (boolean_yankdup) (exec_if (exec_eq) (integer_mult exec_flush)))))
Lexicase best errors: [0 0 0 1 1 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_443} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_944} {:close 0, :instruction exec_if} {:close 1, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_flush})
Zero cases best program: (boolean_invert_first_then_and integer_mod boolean_eq boolean_invert_second_then_and exec_when () boolean_shove integer_flush exec_do*count (tagged_443 exec_shove () in1 print_integer tag_boolean_944 exec_if (exec_when () integer_flush) (integer_yank integer_yankdup exec_dup_items exec_k_when_autoconstructing (boolean_yankdup) (exec_if (exec_eq) (integer_mult exec_flush)))))
Zero cases best errors: [0 0 0 1 1 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 11 7 1000 3 1 1000 14 3 1000)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (14 11 7 0 3 1 0 14 3 0)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (exec_eq integer_add print_boolean integer_yank boolean_not exec_s_when_autoconstructing () (boolean_empty in1 print_integer exec_while () boolean_dup boolean_rot in2 boolean_dup_times exec_yankdup integer_div) (exec_do*count (integer_empty integer_inc) boolean_shove))
Errors: [0 0 0 1 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 9.947
Median total errors in population: 10
Error averages by case: (0.986 0.989 0.993 1.0 0.997 0.999 1.0 0.986 0.997 1.0)
Error minima by case: (0 0 0 1 0 0 1 0 0 1)
Average genome size in population (length): 49.464
Average program size in population (points): 68.112
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 439408
--- Timings ---
Current time: 1559584141867 milliseconds
Total Time:           2.9 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.7 seconds, 25.1%
Fitness Testing:      2.0 seconds, 71.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 11                 
Correct output: 15                  | Program output: 89                 
Correct output: 49                  | Program output: 60                 
Correct output: 48                  | Program output: 70                 
Correct output: 9                   | Program output: 67                 
Correct output: 8                   | Program output: 51                 
Correct output: 63                  | Program output: 86                 
Correct output: 32                  | Program output: 56                 
Correct output: 35                  | Program output: 37                 
Correct output: 25                  | Program output: 42                 
Correct output: 30                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 23                 
Correct output: 8                   | Program output: 45                 
Correct output: 43                  | Program output: 45                 
Correct output: 38                  | Program output: 38                 
Correct output: 1                   | Program output: 11                 
Correct output: 82                  | Program output: 88                 
Correct output: 17                  | Program output: 84                 
Correct output: 17                  | Program output: 56                 
Correct output: -86                 | Program output: -58                
Correct output: -36                 | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: 40                  | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -76                 | Program output: 26                 
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: 52                 
Correct output: -91                 | Program output: -90                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: 66                 
Correct output: -78                 | Program output: -10                
Correct output: -11                 | Program output: 61                 
Correct output: -72                 | Program output: 18                 
Correct output: -31                 | Program output: 100                
Correct output: 22                  | Program output: 74                 
Correct output: -94                 | Program output: 82                 
Correct output: -48                 | Program output: 96                 
Correct output: -58                 | Program output: -35                
Correct output: -22                 | Program output: 11                 
Correct output: -15                 | Program output: 69                 
Correct output: 34                  | Program output: 34                 
Correct output: -72                 | Program output: 30                 
Correct output: -89                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -47                
Correct output: -59                 | Program output: 50                 
Correct output: -78                 | Program output: 52                 
Correct output: 44                  | Program output: 94                 
Correct output: -83                 | Program output: -77                
Correct output: -74                 | Program output: -74                
Correct output: -79                 | Program output: -66                
Correct output: -99                 | Program output: 41                 
Correct output: -17                 | Program output: 56                 
Correct output: -84                 | Program output: 5                  
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: 57                 
Correct output: -78                 | Program output: 2                  
Correct output: -61                 | Program output: 25                 
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -53                
Correct output: -62                 | Program output: 53                 
Correct output: -87                 | Program output: 35                 
Correct output: -57                 | Program output: 10                 
Correct output: -79                 | Program output: -79                
Correct output: -89                 | Program output: -52                
Correct output: -82                 | Program output: 30                 
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -34                 | Program output: 71                 
Correct output: -91                 | Program output: -77                
Correct output: -27                 | Program output: -3                 
Correct output: -80                 | Program output: -29                
Correct output: -20                 | Program output: 6                  
Correct output: -62                 | Program output: 59                 
Correct output: -93                 | Program output: -93                
Correct output: -36                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_dup () boolean_pop integer_gt integer_mult exec_do*times () integer_rot exec_s_when_autoconstructing (exec_do*range (boolean_dup_items boolean_empty in2) print_integer integer_lte) (boolean_dup_items boolean_rot exec_dup_items exec_y_when_autoconstructing () integer_div) (exec_yankdup integer_empty integer_inc) boolean_shove)
Lexicase best errors: [0 0 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_dup () boolean_pop integer_gt integer_mult exec_do*times () integer_rot exec_s_when_autoconstructing (exec_do*range (boolean_dup_items boolean_empty in2) print_integer integer_lte) (boolean_dup_items boolean_rot exec_dup_items exec_y_when_autoconstructing () integer_div) (exec_yankdup integer_empty integer_inc) boolean_shove)
Zero cases best errors: [0 0 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 8 366 110 2 802 366 239 604 128)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (110 8 366 110 2 802 366 239 604 128)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in2} {:close 0, :instruction print_integer})
Best program: (exec_dup () boolean_pop integer_gt integer_mult exec_do*times () integer_rot exec_s_when_autoconstructing (exec_do*range (boolean_dup_items boolean_empty in2) print_integer) () ())
Errors: [0 0 1 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 12
Size: 19
Percent parens: 0.368
--- Population Statistics ---
Average total errors in population: 7.265
Median total errors in population: 6
Error averages by case: (0.89 0.992 0.634 0.89 0.998 0.198 0.634 0.761 0.396 0.872)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.597
Average program size in population (points): 55.996
Average percent parens in population: 0.264
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.477
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 948304
--- Timings ---
Current time: 1559584144302 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 44.0%
Fitness Testing:      2.6 seconds, 47.8%
Report:               0.3 seconds,  6.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 36                 
Correct output: 50                  | Program output: 65                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: 7                  
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 47                 
Correct output: 15                  | Program output: 15                 
Correct output: 49                  | Program output: 64                 
Correct output: 48                  | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 50                 
Correct output: 35                  | Program output: 36                 
Correct output: 25                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 27                 
Correct output: 0                   | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: 38                  | Program output: 88                 
Correct output: 1                   | Program output: 10                 
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 38                 
Correct output: 17                  | Program output: 85                 
Correct output: -86                 | Program output: -26                
Correct output: -36                 | Program output: -34                
Correct output: -100                | Program output: -16                
Correct output: 40                  | Program output: 40                 
Correct output: -58                 | Program output: 40                 
Correct output: -53                 | Program output: 20                 
Correct output: -76                 | Program output: 52                 
Correct output: -52                 | Program output: 72                 
Correct output: -88                 | Program output: 62                 
Correct output: -91                 | Program output: -21                
Correct output: -72                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -11                 | Program output: -11                
Correct output: -72                 | Program output: 49                 
Correct output: -31                 | Program output: -7                 
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -2                 
Correct output: -48                 | Program output: 56                 
Correct output: -58                 | Program output: 50                 
Correct output: -22                 | Program output: 99                 
Correct output: -15                 | Program output: 69                 
Correct output: 34                  | Program output: 35                 
Correct output: -72                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -20                
Correct output: -66                 | Program output: -45                
Correct output: -47                 | Program output: 21                 
Correct output: -59                 | Program output: 44                 
Correct output: -78                 | Program output: 41                 
Correct output: 44                  | Program output: 68                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -7                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -46                
Correct output: -17                 | Program output: 38                 
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: 93                 
Correct output: -78                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -43                
Correct output: -87                 | Program output: -77                
Correct output: -57                 | Program output: 78                 
Correct output: -79                 | Program output: 5                  
Correct output: -89                 | Program output: -71                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: 75                 
Correct output: -67                 | Program output: -11                
Correct output: -34                 | Program output: 49                 
Correct output: -91                 | Program output: -91                
Correct output: -27                 | Program output: 1                  
Correct output: -80                 | Program output: 87                 
Correct output: -20                 | Program output: -20                
Correct output: -62                 | Program output: -3                 
Correct output: -93                 | Program output: -49                
Correct output: -36                 | Program output: 8                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Lexicase best program: (integer_rot integer_sub in1 print_integer)
Lexicase best errors: [1 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Zero cases best program: (integer_rot integer_sub in1 print_integer)
Zero cases best errors: [1 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 377 377 143 154 391 248 248 921 248)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (334 377 377 143 154 391 248 248 921 248)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (exec_eq integer_add print_boolean integer_yank boolean_not exec_s_when_autoconstructing () (boolean_empty in1 print_integer exec_while () boolean_dup boolean_rot in2 boolean_dup_times exec_yankdup integer_div) (exec_do*count (integer_empty integer_inc) boolean_shove))
Errors: [1 1 1 1 1 0 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.559
Median total errors in population: 6
Error averages by case: (0.666 0.623 0.623 0.857 0.846 0.609 0.752 0.752 0.079 0.752)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.125
Average program size in population (points): 55.106
Average percent parens in population: 0.267
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.198
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.535
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1361450
--- Timings ---
Current time: 1559584147154 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 54.9%
Fitness Testing:      3.1 seconds, 37.3%
Report:               0.5 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -50                
Correct output: 25                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 32                 
Correct output: 15                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 53                 
Correct output: 9                   | Program output: 95                 
Correct output: 8                   | Program output: 94                 
Correct output: 63                  | Program output: 98                 
Correct output: 32                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 69                 
Correct output: 30                  | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 0                   | Program output: 41                 
Correct output: 8                   | Program output: 38                 
Correct output: 43                  | Program output: 73                 
Correct output: 38                  | Program output: 66                 
Correct output: 1                   | Program output: 59                 
Correct output: 82                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 84                 
Correct output: -86                 | Program output: -61                
Correct output: -36                 | Program output: -21                
Correct output: -100                | Program output: 17                 
Correct output: 40                  | Program output: 100                
Correct output: -58                 | Program output: 22                 
Correct output: -53                 | Program output: -19                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 12                 
Correct output: -88                 | Program output: 79                 
Correct output: -91                 | Program output: 19                 
Correct output: -72                 | Program output: -59                
Correct output: -77                 | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -11                 | Program output: -5                 
Correct output: -72                 | Program output: 80                 
Correct output: -31                 | Program output: -31                
Correct output: 22                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
Correct output: 34                  | Program output: 48                 
Correct output: -72                 | Program output: 64                 
Correct output: -89                 | Program output: 67                 
Correct output: -95                 | Program output: -25                
Correct output: -66                 | Program output: -17                
Correct output: -47                 | Program output: 55                 
Correct output: -59                 | Program output: 44                 
Correct output: -78                 | Program output: -44                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -78                
Correct output: -74                 | Program output: 37                 
Correct output: -79                 | Program output: -74                
Correct output: -99                 | Program output: 27                 
Correct output: -17                 | Program output: -17                
Correct output: -84                 | Program output: 63                 
Correct output: -69                 | Program output: 33                 
Correct output: -94                 | Program output: 52                 
Correct output: -78                 | Program output: 13                 
Correct output: -61                 | Program output: 64                 
Correct output: -68                 | Program output: -38                
Correct output: -78                 | Program output: -27                
Correct output: -94                 | Program output: 50                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: 7                  
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -44                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: 75                 
Correct output: -35                 | Program output: 37                 
Correct output: -67                 | Program output: 90                 
Correct output: -34                 | Program output: 82                 
Correct output: -91                 | Program output: -44                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: 73                 
Correct output: -20                 | Program output: -10                
Correct output: -62                 | Program output: 24                 
Correct output: -93                 | Program output: 36                 
Correct output: -36                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_do*while (in4 integer_gt boolean_yank integer_mult) print_integer boolean_dup_items exec_swap () (exec_flush integer_yankdup integer_gte exec_yankdup exec_while (exec_k_when_autoconstructing () (exec_noop tagged_142 exec_empty boolean_not exec_yankdup integer_lte exec_do*times (boolean_xor integer_add exec_yank exec_do*times (boolean_yank integer_div exec_y_when_autoconstructing () integer_yankdup print_exec (exec_s_when_autoconstructing (exec_empty boolean_yankdup exec_stackdepth) (exec_yankdup) (exec_if () (exec_when (exec_y_when_autoconstructing (boolean_eq boolean_invert_second_then_and) integer_div) boolean_shove) exec_do*count (integer_pop boolean_eq) integer_pop) exec_do*range () exec_do*count (boolean_dup_items exec_rot (exec_if (exec_empty boolean_invert_second_then_and integer_mult integer_dup integer_mult print_newline integer_yank exec_stackdepth) (boolean_yank)) () ()))))))))
Lexicase best errors: [1 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_do*while (in4 integer_gt boolean_yank integer_mult) print_integer boolean_dup_items exec_swap () (exec_flush integer_yankdup integer_gte exec_yankdup exec_while (exec_k_when_autoconstructing () (exec_noop tagged_142 exec_empty boolean_not exec_yankdup integer_lte exec_do*times (boolean_xor integer_add exec_yank exec_do*times (boolean_yank integer_div exec_y_when_autoconstructing () integer_yankdup print_exec (exec_s_when_autoconstructing (exec_empty boolean_yankdup exec_stackdepth) (exec_yankdup) (exec_if () (exec_when (exec_y_when_autoconstructing (boolean_eq boolean_invert_second_then_and) integer_div) boolean_shove) exec_do*count (integer_pop boolean_eq) integer_pop) exec_do*range () exec_do*count (boolean_dup_items exec_rot (exec_if (exec_empty boolean_invert_second_then_and integer_mult integer_dup integer_mult print_newline integer_yank exec_stackdepth) (boolean_yank)) () ()))))))))
Zero cases best errors: [1 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 923 130 109 284 109 109 128 236 129)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (283 923 130 109 284 109 109 128 236 129)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty})
Best program: (exec_do*while (in4 integer_gt boolean_yank integer_mult) print_integer boolean_dup_items exec_swap () (exec_flush integer_yankdup integer_gte exec_yankdup exec_while (exec_k_when_autoconstructing () (exec_noop tagged_142 exec_empty))))
Errors: [1 0 1 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 7.56
Median total errors in population: 7
Error averages by case: (0.717 0.077 0.87 0.891 0.716 0.891 0.891 0.872 0.764 0.871)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.758
Average program size in population (points): 48.852
Average percent parens in population: 0.261
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.62675
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1740652
--- Timings ---
Current time: 1559584149862 milliseconds
Total Time:          11.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.7 seconds, 60.3%
Fitness Testing:      3.5 seconds, 31.8%
Report:               0.8 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -50                
Correct output: 25                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 32                 
Correct output: 15                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 53                 
Correct output: 9                   | Program output: 95                 
Correct output: 8                   | Program output: 94                 
Correct output: 63                  | Program output: 98                 
Correct output: 32                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 69                 
Correct output: 30                  | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 0                   | Program output: 41                 
Correct output: 8                   | Program output: 38                 
Correct output: 43                  | Program output: 73                 
Correct output: 38                  | Program output: 66                 
Correct output: 1                   | Program output: 59                 
Correct output: 82                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 84                 
Correct output: -86                 | Program output: -61                
Correct output: -36                 | Program output: -21                
Correct output: -100                | Program output: 17                 
Correct output: 40                  | Program output: 100                
Correct output: -58                 | Program output: 22                 
Correct output: -53                 | Program output: -19                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 12                 
Correct output: -88                 | Program output: 79                 
Correct output: -91                 | Program output: 19                 
Correct output: -72                 | Program output: -59                
Correct output: -77                 | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -11                 | Program output: -5                 
Correct output: -72                 | Program output: 80                 
Correct output: -31                 | Program output: -31                
Correct output: 22                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
Correct output: 34                  | Program output: 48                 
Correct output: -72                 | Program output: 64                 
Correct output: -89                 | Program output: 67                 
Correct output: -95                 | Program output: -25                
Correct output: -66                 | Program output: -17                
Correct output: -47                 | Program output: 55                 
Correct output: -59                 | Program output: 44                 
Correct output: -78                 | Program output: -44                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -78                
Correct output: -74                 | Program output: 37                 
Correct output: -79                 | Program output: -74                
Correct output: -99                 | Program output: 27                 
Correct output: -17                 | Program output: -17                
Correct output: -84                 | Program output: 63                 
Correct output: -69                 | Program output: 33                 
Correct output: -94                 | Program output: 52                 
Correct output: -78                 | Program output: 13                 
Correct output: -61                 | Program output: 64                 
Correct output: -68                 | Program output: -38                
Correct output: -78                 | Program output: -27                
Correct output: -94                 | Program output: 50                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: 7                  
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -44                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: 75                 
Correct output: -35                 | Program output: 37                 
Correct output: -67                 | Program output: 90                 
Correct output: -34                 | Program output: 82                 
Correct output: -91                 | Program output: -44                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: 73                 
Correct output: -20                 | Program output: -10                
Correct output: -62                 | Program output: 24                 
Correct output: -93                 | Program output: 36                 
Correct output: -36                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_do*while (in4 integer_gt boolean_yank integer_mult) print_integer boolean_dup_items exec_swap () (exec_flush integer_yankdup integer_gte exec_yankdup exec_while (exec_k_when_autoconstructing () (boolean_invert_second_then_and tagged_142 exec_empty boolean_not exec_yankdup integer_lte boolean_frominteger integer_inc) boolean_shove)))
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_do*while (in4 integer_gt boolean_yank integer_mult) print_integer boolean_dup_items exec_swap () (exec_flush integer_yankdup integer_gte exec_yankdup exec_while (exec_k_when_autoconstructing () (boolean_invert_second_then_and tagged_142 exec_empty boolean_not exec_yankdup integer_lte boolean_frominteger integer_inc) boolean_shove)))
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 921 690 233 1000 921 332 362 1000 362)
Population mean number of elite cases: 6.82
Count of perfect (error zero) individuals by case: (0 921 690 233 0 921 332 362 0 362)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction 94} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot})
Best program: (exec_do*while (in4 integer_gt boolean_yank boolean_and) print_integer boolean_dup_items exec_swap () (exec_flush integer_yankdup integer_gte exec_yankdup exec_while (exec_k_when_autoconstructing () (exec_noop tagged_142 exec_empty boolean_not exec_yankdup integer_lte exec_do*times (boolean_xor integer_add exec_yank exec_do*times (boolean_yank integer_div exec_y_when_autoconstructing () integer_yankdup print_exec (exec_s_when_autoconstructing (exec_empty integer_yankdup exec_stackdepth) (exec_yankdup) (exec_if () (exec_when (exec_y_when_autoconstructing (boolean_eq boolean_invert_second_then_and) 94) boolean_shove) exec_do*count (integer_pop boolean_eq) integer_pop) exec_do*range () exec_do*count (boolean_dup_items exec_rot () () ()))))))))
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 74
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.179
Median total errors in population: 6
Error averages by case: (1.0 0.079 0.31 0.767 1.0 0.079 0.668 0.638 1.0 0.638)
Error minima by case: (1 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 47.319
Average program size in population (points): 66.095
Average percent parens in population: 0.283
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.112875
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2125561
--- Timings ---
Current time: 1559584152666 milliseconds
Total Time:          13.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 64.1%
Fitness Testing:      3.9 seconds, 28.4%
Report:               0.9 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 615
Test mean error for best: 0.61500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 95                 
Correct output: 15                  | Program output: 41                 
Correct output: 49                  | Program output: 96                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 62                 
Correct output: 8                   | Program output: 31                 
Correct output: 63                  | Program output: 91                 
Correct output: 32                  | Program output: 76                 
Correct output: 35                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 21                 
Correct output: 43                  | Program output: 68                 
Correct output: 38                  | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 59                 
Correct output: -58                 | Program output: 37                 
Correct output: -53                 | Program output: 56                 
Correct output: -76                 | Program output: 2                  
Correct output: -52                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 70                 
Correct output: -77                 | Program output: 2                  
Correct output: -78                 | Program output: -16                
Correct output: -11                 | Program output: 55                 
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: 43                 
Correct output: 22                  | Program output: 40                 
Correct output: -94                 | Program output: 18                 
Correct output: -48                 | Program output: -48                
Correct output: -58                 | Program output: 57                 
Correct output: -22                 | Program output: 53                 
Correct output: -15                 | Program output: 18                 
Correct output: 34                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -54                
Correct output: -95                 | Program output: 92                 
Correct output: -66                 | Program output: 37                 
Correct output: -47                 | Program output: 85                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -78                
Correct output: 44                  | Program output: 87                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 29                 
Correct output: -79                 | Program output: 61                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: 26                 
Correct output: -84                 | Program output: -35                
Correct output: -69                 | Program output: 81                 
Correct output: -94                 | Program output: -93                
Correct output: -78                 | Program output: -52                
Correct output: -61                 | Program output: 57                 
Correct output: -68                 | Program output: 57                 
Correct output: -78                 | Program output: 55                 
Correct output: -94                 | Program output: -57                
Correct output: -62                 | Program output: 47                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -22                
Correct output: -79                 | Program output: -75                
Correct output: -89                 | Program output: -3                 
Correct output: -82                 | Program output: -38                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: 9                  
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -55                
Correct output: -27                 | Program output: 83                 
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: 37                 
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: 75                 
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_yank exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4)) integer_fromboolean boolean_shove exec_when (integer_dup_times boolean_invert_first_then_and integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer exec_dup_times (boolean_shove) integer_sub exec_do*times (boolean_xor integer_add exec_yank exec_do*times (boolean_yank integer_div))) ()))
Lexicase best errors: [0 1 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_yank exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4)) integer_fromboolean boolean_shove exec_when (integer_dup_times boolean_invert_first_then_and integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer exec_dup_times (boolean_shove) integer_sub exec_do*times (boolean_xor integer_add exec_yank exec_do*times (boolean_yank integer_div))) ()))
Zero cases best errors: [0 1 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (250 1000 492 251 189 190 250 1000 250 1000)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (250 0 492 251 189 190 250 0 250 0)
Population mean number of perfect (error zero) cases: 1.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt})
Best program: (exec_dup () boolean_pop integer_gt exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop in3) boolean_shove boolean_dup_items in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) (integer_dec integer_sub exec_flush) integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) ()))
Errors: [0 1 1 0 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 40
Size: 55
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 8.128
Median total errors in population: 9
Error averages by case: (0.75 1.0 0.508 0.749 0.811 0.81 0.75 1.0 0.75 1.0)
Error minima by case: (0 1 0 0 0 0 0 1 0 1)
Average genome size in population (length): 46.581
Average program size in population (points): 65.089
Average percent parens in population: 0.282
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.5495625
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2456794
--- Timings ---
Current time: 1559584155516 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.0 seconds, 66.6%
Fitness Testing:      4.3 seconds, 26.0%
Report:               1.1 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 615
Test mean error for best: 0.61500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 95                 
Correct output: 15                  | Program output: 41                 
Correct output: 49                  | Program output: 96                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 62                 
Correct output: 8                   | Program output: 31                 
Correct output: 63                  | Program output: 91                 
Correct output: 32                  | Program output: 76                 
Correct output: 35                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 21                 
Correct output: 43                  | Program output: 68                 
Correct output: 38                  | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 59                 
Correct output: -58                 | Program output: 37                 
Correct output: -53                 | Program output: 56                 
Correct output: -76                 | Program output: 2                  
Correct output: -52                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 70                 
Correct output: -77                 | Program output: 2                  
Correct output: -78                 | Program output: -16                
Correct output: -11                 | Program output: 55                 
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: 43                 
Correct output: 22                  | Program output: 40                 
Correct output: -94                 | Program output: 18                 
Correct output: -48                 | Program output: -48                
Correct output: -58                 | Program output: 57                 
Correct output: -22                 | Program output: 53                 
Correct output: -15                 | Program output: 18                 
Correct output: 34                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -54                
Correct output: -95                 | Program output: 92                 
Correct output: -66                 | Program output: 37                 
Correct output: -47                 | Program output: 85                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -78                
Correct output: 44                  | Program output: 87                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 29                 
Correct output: -79                 | Program output: 61                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: 26                 
Correct output: -84                 | Program output: -35                
Correct output: -69                 | Program output: 81                 
Correct output: -94                 | Program output: -93                
Correct output: -78                 | Program output: -52                
Correct output: -61                 | Program output: 57                 
Correct output: -68                 | Program output: 57                 
Correct output: -78                 | Program output: 55                 
Correct output: -94                 | Program output: -57                
Correct output: -62                 | Program output: 47                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -22                
Correct output: -79                 | Program output: -75                
Correct output: -89                 | Program output: -3                 
Correct output: -82                 | Program output: -38                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: 9                  
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -55                
Correct output: -27                 | Program output: 83                 
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: 37                 
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: 75                 
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_252} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop})
Lexicase best program: (boolean_yank exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4)) boolean_dup_items in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer) (exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub exec_noop exec_eq) integer_dec integer_sub) exec_flush integer_sub integer_stackdepth exec_do*range (exec_do*times (integer_dup_items exec_dup_items boolean_and exec_y_when_autoconstructing (boolean_invert_second_then_and boolean_dup_times integer_min in1) exec_s_when_autoconstructing (in1 boolean_dup_times in4) (exec_swap (integer_mult exec_y_when_autoconstructing (in4 in3 boolean_invert_first_then_and integer_yank) integer_dup) (boolean_invert_first_then_and integer_max integer_mod) integer_stackdepth) (exec_when (exec_stackdepth exec_dup_items integer_dec) exec_rot (exec_noop boolean_invert_second_then_and exec_dup_items integer_swap exec_dup_times (exec_when (integer_yank tag_integer_252 exec_rot (exec_pop ()) () ()))) () ()))))
Lexicase best errors: [1 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 107
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_252} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop})
Zero cases best program: (boolean_yank exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4)) boolean_dup_items in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer) (exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub exec_noop exec_eq) integer_dec integer_sub) exec_flush integer_sub integer_stackdepth exec_do*range (exec_do*times (integer_dup_items exec_dup_items boolean_and exec_y_when_autoconstructing (boolean_invert_second_then_and boolean_dup_times integer_min in1) exec_s_when_autoconstructing (in1 boolean_dup_times in4) (exec_swap (integer_mult exec_y_when_autoconstructing (in4 in3 boolean_invert_first_then_and integer_yank) integer_dup) (boolean_invert_first_then_and integer_max integer_mod) integer_stackdepth) (exec_when (exec_stackdepth exec_dup_items integer_dec) exec_rot (exec_noop boolean_invert_second_then_and exec_dup_items integer_swap exec_dup_times (exec_when (integer_yank tag_integer_252 exec_rot (exec_pop ()) () ()))) () ()))))
Zero cases best errors: [1 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 107
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (289 1000 134 502 502 491 502 792 926 134)
Population mean number of elite cases: 5.27
Count of perfect (error zero) individuals by case: (289 0 134 502 502 491 502 792 926 134)
Population mean number of perfect (error zero) cases: 4.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing})
Best program: (boolean_yank exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (boolean_frominteger) exec_do*count (boolean_pop in3 boolean_frominteger in4) integer_fromboolean exec_yankdup exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) (integer_dec integer_sub) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () () ()))
Errors: [1 1 1 0 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 48
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 5.728
Median total errors in population: 5
Error averages by case: (0.711 1.0 0.866 0.498 0.498 0.509 0.498 0.208 0.074 0.866)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.213
Average program size in population (points): 63.737
Average percent parens in population: 0.274
Minimum age in population: 6.625
Maximum age in population: 10.6875
Average age in population: 9.00975
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2854806
--- Timings ---
Current time: 1559584158290 milliseconds
Total Time:          19.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.9 seconds, 67.3%
Fitness Testing:      4.7 seconds, 24.3%
Report:               1.5 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 615
Test mean error for best: 0.61500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 95                 
Correct output: 15                  | Program output: 41                 
Correct output: 49                  | Program output: 96                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 62                 
Correct output: 8                   | Program output: 31                 
Correct output: 63                  | Program output: 91                 
Correct output: 32                  | Program output: 76                 
Correct output: 35                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 21                 
Correct output: 43                  | Program output: 68                 
Correct output: 38                  | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 59                 
Correct output: -58                 | Program output: 37                 
Correct output: -53                 | Program output: 56                 
Correct output: -76                 | Program output: 2                  
Correct output: -52                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 70                 
Correct output: -77                 | Program output: 2                  
Correct output: -78                 | Program output: -16                
Correct output: -11                 | Program output: 55                 
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: 43                 
Correct output: 22                  | Program output: 40                 
Correct output: -94                 | Program output: 18                 
Correct output: -48                 | Program output: -48                
Correct output: -58                 | Program output: 57                 
Correct output: -22                 | Program output: 53                 
Correct output: -15                 | Program output: 18                 
Correct output: 34                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -54                
Correct output: -95                 | Program output: 92                 
Correct output: -66                 | Program output: 37                 
Correct output: -47                 | Program output: 85                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -78                
Correct output: 44                  | Program output: 87                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 29                 
Correct output: -79                 | Program output: 61                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: 26                 
Correct output: -84                 | Program output: -35                
Correct output: -69                 | Program output: 81                 
Correct output: -94                 | Program output: -93                
Correct output: -78                 | Program output: -52                
Correct output: -61                 | Program output: 57                 
Correct output: -68                 | Program output: 57                 
Correct output: -78                 | Program output: 55                 
Correct output: -94                 | Program output: -57                
Correct output: -62                 | Program output: 47                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -22                
Correct output: -79                 | Program output: -75                
Correct output: -89                 | Program output: -3                 
Correct output: -82                 | Program output: -38                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: 9                  
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -55                
Correct output: -27                 | Program output: 83                 
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: 37                 
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: 75                 
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_479} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_859} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt})
Lexicase best program: (boolean_yank exec_shove () exec_do*times () exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop) boolean_dup_items in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) (integer_dec integer_sub) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_eq integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_479 integer_gt) (exec_flush print_boolean) integer_pop integer_max exec_eq integer_dup_items tagged_859 exec_shove (exec_k (exec_when (exec_yank) boolean_flush) (boolean_rot boolean_dup_times boolean_yankdup exec_rot () (print_exec (exec_empty boolean_eq) integer_mod) (in4 boolean_frominteger exec_shove (integer_max exec_while (integer_stackdepth exec_rot (boolean_swap integer_gt) () ()))))))))
Lexicase best errors: [0 1 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 102
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_479} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_859} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt})
Zero cases best program: (boolean_yank exec_shove () exec_do*times () exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop) boolean_dup_items in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) (integer_dec integer_sub) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_eq integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_479 integer_gt) (exec_flush print_boolean) integer_pop integer_max exec_eq integer_dup_items tagged_859 exec_shove (exec_k (exec_when (exec_yank) boolean_flush) (boolean_rot boolean_dup_times boolean_yankdup exec_rot () (print_exec (exec_empty boolean_eq) integer_mod) (in4 boolean_frominteger exec_shove (integer_max exec_while (integer_stackdepth exec_rot (boolean_swap integer_gt) () ()))))))))
Zero cases best errors: [0 1 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 102
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (549 1 916 1 548 546 222 915 1 1)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (549 1 916 1 548 546 222 915 1 1)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_859} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction in4})
Best program: (boolean_yank exec_shove (exec_do*times () exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4) integer_fromboolean) boolean_shove) exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3) (print_integer exec_dup_times (boolean_shove) integer_sub) integer_yank integer_sub integer_lte exec_eq integer_dec integer_sub exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing (tag_integer_519 integer_gt) (exec_flush print_boolean integer_pop integer_max exec_eq integer_dup_items tagged_859 exec_shove (exec_k (exec_when (exec_yank) boolean_flush) () boolean_rot boolean_dup_times boolean_yankdup exec_rot () (print_exec (exec_empty boolean_eq) integer_mod in4) ())) ()))
Errors: [0 1 0 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 59
Size: 81
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 6.3
Median total errors in population: 5
Error averages by case: (0.451 0.999 0.084 0.999 0.452 0.454 0.778 0.085 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.799
Average program size in population (points): 65.94
Average percent parens in population: 0.273
Minimum age in population: 8.1875
Maximum age in population: 12.390625
Average age in population: 10.479109375
Median age in population: 10.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3331719
--- Timings ---
Current time: 1559584161121 milliseconds
Total Time:          22.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.9 seconds, 67.6%
Fitness Testing:      5.1 seconds, 23.3%
Report:               1.9 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 615
Test mean error for best: 0.61500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 95                 
Correct output: 15                  | Program output: 41                 
Correct output: 49                  | Program output: 96                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 62                 
Correct output: 8                   | Program output: 31                 
Correct output: 63                  | Program output: 91                 
Correct output: 32                  | Program output: 76                 
Correct output: 35                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 21                 
Correct output: 43                  | Program output: 68                 
Correct output: 38                  | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 59                 
Correct output: -58                 | Program output: 37                 
Correct output: -53                 | Program output: 56                 
Correct output: -76                 | Program output: 2                  
Correct output: -52                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 70                 
Correct output: -77                 | Program output: 2                  
Correct output: -78                 | Program output: -16                
Correct output: -11                 | Program output: 55                 
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: 43                 
Correct output: 22                  | Program output: 40                 
Correct output: -94                 | Program output: 18                 
Correct output: -48                 | Program output: -48                
Correct output: -58                 | Program output: 57                 
Correct output: -22                 | Program output: 53                 
Correct output: -15                 | Program output: 18                 
Correct output: 34                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -54                
Correct output: -95                 | Program output: 92                 
Correct output: -66                 | Program output: 37                 
Correct output: -47                 | Program output: 85                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -78                
Correct output: 44                  | Program output: 87                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 29                 
Correct output: -79                 | Program output: 61                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: 26                 
Correct output: -84                 | Program output: -35                
Correct output: -69                 | Program output: 81                 
Correct output: -94                 | Program output: -93                
Correct output: -78                 | Program output: -52                
Correct output: -61                 | Program output: 57                 
Correct output: -68                 | Program output: 57                 
Correct output: -78                 | Program output: 55                 
Correct output: -94                 | Program output: -57                
Correct output: -62                 | Program output: 47                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -22                
Correct output: -79                 | Program output: -75                
Correct output: -89                 | Program output: -3                 
Correct output: -82                 | Program output: -38                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: 9                  
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -55                
Correct output: -27                 | Program output: 83                 
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: 37                 
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: 75                 
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_859} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq})
Lexicase best program: (boolean_yank exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4)) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3) (print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) integer_dec integer_sub) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_flush print_boolean) integer_pop integer_max exec_eq integer_dup_items tagged_859 exec_shove (exec_k (exec_when (exec_yank) boolean_flush) () boolean_rot boolean_dup_times boolean_yankdup exec_rot () (print_exec (exec_empty boolean_eq)) ()))
Lexicase best errors: [0 1 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 79
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_859} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq})
Zero cases best program: (boolean_yank exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4)) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3) (print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) integer_dec integer_sub) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_flush print_boolean) integer_pop integer_max exec_eq integer_dup_items tagged_859 exec_shove (exec_k (exec_when (exec_yank) boolean_flush) () boolean_rot boolean_dup_times boolean_yankdup exec_rot () (print_exec (exec_empty boolean_eq)) ()))
Zero cases best errors: [0 1 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 79
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (382 411 129 1000 384 384 1000 129 1000 1000)
Population mean number of elite cases: 5.82
Count of perfect (error zero) individuals by case: (382 411 129 0 384 384 0 129 0 0)
Population mean number of perfect (error zero) cases: 1.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_859} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt})
Best program: (boolean_yank exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop boolean_pop in3 boolean_shove boolean_dup_items in4)) integer_fromboolean boolean_shove exec_when (integer_dup_times) integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) () (in3 print_integer exec_dup_times (boolean_shove) integer_sub boolean_eq integer_sub integer_lte exec_eq) integer_dec integer_sub exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt exec_flush print_boolean) (integer_pop integer_max exec_eq integer_dup_items tagged_859 exec_shove (exec_yank) boolean_flush) exec_k (exec_when (exec_yank) boolean_flush) (boolean_rot boolean_dup_times boolean_yankdup exec_rot () (print_exec (exec_empty boolean_eq) integer_mod) (in4 boolean_frominteger exec_shove (integer_max exec_while (integer_stackdepth exec_rot (boolean_swap integer_gt) () ())))))
Errors: [0 1 1 1 0 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 70
Size: 97
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 8.181
Median total errors in population: 8
Error averages by case: (0.618 0.589 0.871 1.0 0.616 0.616 1.0 0.871 1.0 1.0)
Error minima by case: (0 0 0 1 0 0 1 0 1 1)
Average genome size in population (length): 51.586
Average program size in population (points): 74.103
Average percent parens in population: 0.300
Minimum age in population: 9.25
Maximum age in population: 13.6796875
Average age in population: 12.345140625
Median age in population: 12.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 197
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 198
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3629187
--- Timings ---
Current time: 1559584163781 milliseconds
Total Time:          24.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.9 seconds, 68.3%
Fitness Testing:      5.4 seconds, 22.1%
Report:               2.3 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 615
Test mean error for best: 0.61500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 95                 
Correct output: 15                  | Program output: 41                 
Correct output: 49                  | Program output: 96                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 62                 
Correct output: 8                   | Program output: 31                 
Correct output: 63                  | Program output: 91                 
Correct output: 32                  | Program output: 76                 
Correct output: 35                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 21                 
Correct output: 43                  | Program output: 68                 
Correct output: 38                  | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 59                 
Correct output: -58                 | Program output: 37                 
Correct output: -53                 | Program output: 56                 
Correct output: -76                 | Program output: 2                  
Correct output: -52                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 70                 
Correct output: -77                 | Program output: 2                  
Correct output: -78                 | Program output: -16                
Correct output: -11                 | Program output: 55                 
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: 43                 
Correct output: 22                  | Program output: 40                 
Correct output: -94                 | Program output: 18                 
Correct output: -48                 | Program output: -48                
Correct output: -58                 | Program output: 57                 
Correct output: -22                 | Program output: 53                 
Correct output: -15                 | Program output: 18                 
Correct output: 34                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -54                
Correct output: -95                 | Program output: 92                 
Correct output: -66                 | Program output: 37                 
Correct output: -47                 | Program output: 85                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -78                
Correct output: 44                  | Program output: 87                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 29                 
Correct output: -79                 | Program output: 61                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: 26                 
Correct output: -84                 | Program output: -35                
Correct output: -69                 | Program output: 81                 
Correct output: -94                 | Program output: -93                
Correct output: -78                 | Program output: -52                
Correct output: -61                 | Program output: 57                 
Correct output: -68                 | Program output: 57                 
Correct output: -78                 | Program output: 55                 
Correct output: -94                 | Program output: -57                
Correct output: -62                 | Program output: 47                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -22                
Correct output: -79                 | Program output: -75                
Correct output: -89                 | Program output: -3                 
Correct output: -82                 | Program output: -38                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: 9                  
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -55                
Correct output: -27                 | Program output: 83                 
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: 37                 
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: 75                 
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 2, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*while (in4 integer_gt) boolean_yank in1 print_integer exec_do*while () exec_swap (exec_flush integer_yankdup integer_gte exec_yankdup) (exec_while (exec_k_when_autoconstructing () () exec_noop tagged_142 exec_empty exec_do*count (exec_yankdup integer_lte exec_do*times (boolean_xor) integer_add boolean_or exec_do*times (boolean_yank integer_div exec_y_when_autoconstructing (integer_yankdup print_boolean exec_s_when_autoconstructing (exec_empty boolean_yankdup) (exec_stackdepth) (exec_yankdup) exec_if () () exec_when (exec_y_when_autoconstructing (boolean_eq boolean_invert_second_then_and) integer_inc) boolean_shove) exec_do*count (integer_pop boolean_eq) integer_pop) exec_do*range () exec_do*count (boolean_dup_items exec_rot (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()) () ())))))
Lexicase best errors: [0 1 1 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 81
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 2, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*while (in4 integer_gt) boolean_yank in1 print_integer exec_do*while () exec_swap (exec_flush integer_yankdup integer_gte exec_yankdup) (exec_while (exec_k_when_autoconstructing () () exec_noop tagged_142 exec_empty exec_do*count (exec_yankdup integer_lte exec_do*times (boolean_xor) integer_add boolean_or exec_do*times (boolean_yank integer_div exec_y_when_autoconstructing (integer_yankdup print_boolean exec_s_when_autoconstructing (exec_empty boolean_yankdup) (exec_stackdepth) (exec_yankdup) exec_if () () exec_when (exec_y_when_autoconstructing (boolean_eq boolean_invert_second_then_and) integer_inc) boolean_shove) exec_do*count (integer_pop boolean_eq) integer_pop) exec_do*range () exec_do*count (boolean_dup_items exec_rot (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()) () ())))))
Zero cases best errors: [0 1 1 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 81
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 295 453 295 454 452 154 1000 1000 155)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (154 295 453 295 454 452 154 0 0 155)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_859})
Best program: (boolean_yank exec_shove (exec_do*times ()) boolean_yank exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup) integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) (integer_dec integer_sub) exec_flush integer_sub boolean_and) boolean_and exec_s_when_autoconstructing () (exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_flush print_boolean) integer_pop integer_max integer_eq integer_dup_items tagged_859) ())
Errors: [1 1 0 1 0 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 49
Size: 68
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 7.588
Median total errors in population: 7
Error averages by case: (0.846 0.705 0.547 0.705 0.546 0.548 0.846 1.0 1.0 0.845)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 48.255
Average program size in population (points): 67.953
Average percent parens in population: 0.286
Minimum age in population: 10.375
Maximum age in population: 15.4140625
Average age in population: 13.6112265625
Median age in population: 13.658203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3987296
--- Timings ---
Current time: 1559584166644 milliseconds
Total Time:          27.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.9 seconds, 68.8%
Fitness Testing:      5.8 seconds, 21.1%
Report:               2.7 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 36                 
Correct output: 50                  | Program output: 65                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: 7                  
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 47                 
Correct output: 15                  | Program output: 15                 
Correct output: 49                  | Program output: 64                 
Correct output: 48                  | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 50                 
Correct output: 35                  | Program output: 36                 
Correct output: 25                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 27                 
Correct output: 0                   | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: 38                  | Program output: 88                 
Correct output: 1                   | Program output: 10                 
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 38                 
Correct output: 17                  | Program output: 85                 
Correct output: -86                 | Program output: -26                
Correct output: -36                 | Program output: -34                
Correct output: -100                | Program output: -16                
Correct output: 40                  | Program output: 40                 
Correct output: -58                 | Program output: 40                 
Correct output: -53                 | Program output: 20                 
Correct output: -76                 | Program output: 52                 
Correct output: -52                 | Program output: 72                 
Correct output: -88                 | Program output: 62                 
Correct output: -91                 | Program output: -21                
Correct output: -72                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -11                 | Program output: -11                
Correct output: -72                 | Program output: 49                 
Correct output: -31                 | Program output: -7                 
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -2                 
Correct output: -48                 | Program output: 56                 
Correct output: -58                 | Program output: 50                 
Correct output: -22                 | Program output: 99                 
Correct output: -15                 | Program output: 69                 
Correct output: 34                  | Program output: 35                 
Correct output: -72                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -20                
Correct output: -66                 | Program output: -45                
Correct output: -47                 | Program output: 21                 
Correct output: -59                 | Program output: 44                 
Correct output: -78                 | Program output: 41                 
Correct output: 44                  | Program output: 68                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -7                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -46                
Correct output: -17                 | Program output: 38                 
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: 93                 
Correct output: -78                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -43                
Correct output: -87                 | Program output: -77                
Correct output: -57                 | Program output: 78                 
Correct output: -79                 | Program output: 5                  
Correct output: -89                 | Program output: -71                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: 75                 
Correct output: -67                 | Program output: -11                
Correct output: -34                 | Program output: 49                 
Correct output: -91                 | Program output: -91                
Correct output: -27                 | Program output: 1                  
Correct output: -80                 | Program output: 87                 
Correct output: -20                 | Program output: -20                
Correct output: -62                 | Program output: -3                 
Correct output: -93                 | Program output: -49                
Correct output: -36                 | Program output: 8                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_252} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_do*while (in4 integer_gt boolean_yank in1) print_integer exec_do*while () exec_swap (exec_flush integer_yankdup integer_gte exec_yankdup) (exec_while (exec_k_when_autoconstructing () () exec_noop tagged_142 exec_empty exec_do*count (exec_yankdup integer_lte exec_do*times (boolean_xor integer_add boolean_xor integer_add exec_yank exec_do*times (boolean_yank integer_div exec_y_when_autoconstructing () exec_swap (print_exec (integer_rot integer_pop boolean_shove) boolean_flush exec_eq in1 boolean_pop exec_dup_times () boolean_pop boolean_pop integer_inc exec_dup_items integer_dec exec_rot (exec_noop boolean_invert_second_then_and exec_dup_items integer_swap exec_dup_times (exec_when (integer_yank tag_integer_252 exec_rot (exec_pop ()) () ()))) () ()) ()))))))
Lexicase best errors: [0 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 81
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_252} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_do*while (in4 integer_gt boolean_yank in1) print_integer exec_do*while () exec_swap (exec_flush integer_yankdup integer_gte exec_yankdup) (exec_while (exec_k_when_autoconstructing () () exec_noop tagged_142 exec_empty exec_do*count (exec_yankdup integer_lte exec_do*times (boolean_xor integer_add boolean_xor integer_add exec_yank exec_do*times (boolean_yank integer_div exec_y_when_autoconstructing () exec_swap (print_exec (integer_rot integer_pop boolean_shove) boolean_flush exec_eq in1 boolean_pop exec_dup_times () boolean_pop boolean_pop integer_inc exec_dup_items integer_dec exec_rot (exec_noop boolean_invert_second_then_and exec_dup_items integer_swap exec_dup_times (exec_when (integer_yank tag_integer_252 exec_rot (exec_pop ()) () ()))) () ()) ()))))))
Zero cases best errors: [0 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 81
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 358 332 918 357 228 1000 1000 1000 332)
Population mean number of elite cases: 5.86
Count of perfect (error zero) individuals by case: (332 358 332 918 357 228 0 0 0 332)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction exec_while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Best program: (exec_do*while (integer_lte integer_gt boolean_yank in1) print_integer exec_do*while () exec_swap (exec_flush integer_yankdup integer_gte integer_div) (exec_while (exec_k_when_autoconstructing () () exec_noop tagged_142 exec_empty exec_do*count (exec_yankdup integer_lte exec_do*times (boolean_xor integer_add boolean_or exec_do*times (boolean_yank integer_div exec_y_when_autoconstructing () integer_yankdup print_boolean exec_s_when_autoconstructing (exec_empty boolean_yankdup) (exec_stackdepth) (exec_yankdup) exec_if () (exec_when (exec_y_when_autoconstructing (boolean_eq boolean_invert_second_then_and) integer_inc) boolean_shove) exec_do*count (integer_pop boolean_eq) integer_pop) exec_do*range () exec_do*count (boolean_dup_items exec_rot (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()) () ()))))))
Errors: [0 1 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 54
Size: 81
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.143
Median total errors in population: 7
Error averages by case: (0.668 0.642 0.668 0.082 0.643 0.772 1.0 1.0 1.0 0.668)
Error minima by case: (0 0 0 0 0 0 1 1 1 0)
Average genome size in population (length): 47.699
Average program size in population (points): 67.741
Average percent parens in population: 0.292
Minimum age in population: 11.375
Maximum age in population: 16.798828125
Average age in population: 15.16541796875
Median age in population: 15.236328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4283755
--- Timings ---
Current time: 1559584169077 milliseconds
Total Time:          30.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.9 seconds, 69.0%
Fitness Testing:      6.1 seconds, 20.3%
Report:               3.1 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 615
Test mean error for best: 0.61500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 95                 
Correct output: 15                  | Program output: 41                 
Correct output: 49                  | Program output: 96                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 62                 
Correct output: 8                   | Program output: 31                 
Correct output: 63                  | Program output: 91                 
Correct output: 32                  | Program output: 76                 
Correct output: 35                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 21                 
Correct output: 43                  | Program output: 68                 
Correct output: 38                  | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 59                 
Correct output: -58                 | Program output: 37                 
Correct output: -53                 | Program output: 56                 
Correct output: -76                 | Program output: 2                  
Correct output: -52                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 70                 
Correct output: -77                 | Program output: 2                  
Correct output: -78                 | Program output: -16                
Correct output: -11                 | Program output: 55                 
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: 43                 
Correct output: 22                  | Program output: 40                 
Correct output: -94                 | Program output: 18                 
Correct output: -48                 | Program output: -48                
Correct output: -58                 | Program output: 57                 
Correct output: -22                 | Program output: 53                 
Correct output: -15                 | Program output: 18                 
Correct output: 34                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -54                
Correct output: -95                 | Program output: 92                 
Correct output: -66                 | Program output: 37                 
Correct output: -47                 | Program output: 85                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -78                
Correct output: 44                  | Program output: 87                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 29                 
Correct output: -79                 | Program output: 61                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: 26                 
Correct output: -84                 | Program output: -35                
Correct output: -69                 | Program output: 81                 
Correct output: -94                 | Program output: -93                
Correct output: -78                 | Program output: -52                
Correct output: -61                 | Program output: 57                 
Correct output: -68                 | Program output: 57                 
Correct output: -78                 | Program output: 55                 
Correct output: -94                 | Program output: -57                
Correct output: -62                 | Program output: 47                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -22                
Correct output: -79                 | Program output: -75                
Correct output: -89                 | Program output: -3                 
Correct output: -82                 | Program output: -38                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: 9                  
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -55                
Correct output: -27                 | Program output: 83                 
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: 37                 
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: 75                 
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 1, :instruction in3} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_859} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_yank exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4)) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer boolean_dup boolean_shove) (integer_add integer_yank integer_sub boolean_shove) exec_rot (integer_yank integer_sub integer_lte exec_shove () integer_dec integer_sub) (exec_flush in3) (boolean_flush exec_eq) boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_flush in1) integer_pop integer_max exec_eq integer_dup_items tagged_859 exec_shove (exec_k (exec_when (exec_yank) boolean_flush) (boolean_rot boolean_dup_times boolean_yankdup boolean_swap) print_exec (exec_empty boolean_eq) integer_mod) in4 boolean_frominteger exec_shove (integer_max)))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 90
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 1, :instruction in3} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_859} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_yank exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4)) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer boolean_dup boolean_shove) (integer_add integer_yank integer_sub boolean_shove) exec_rot (integer_yank integer_sub integer_lte exec_shove () integer_dec integer_sub) (exec_flush in3) (boolean_flush exec_eq) boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_flush in1) integer_pop integer_max exec_eq integer_dup_items tagged_859 exec_shove (exec_k (exec_when (exec_yank) boolean_flush) (boolean_rot boolean_dup_times boolean_yankdup boolean_swap) print_exec (exec_empty boolean_eq) integer_mod) in4 boolean_frominteger exec_shove (integer_max)))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 90
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (155 1000 272 900 473 276 1000 431 273 427)
Population mean number of elite cases: 5.21
Count of perfect (error zero) individuals by case: (155 0 272 900 473 276 0 431 273 427)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Best program: (integer_yankdup integer_gte exec_yankdup in3 exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer exec_yankdup integer_lte exec_do*times (boolean_xor integer_yankdup boolean_or integer_fromboolean boolean_yank integer_div exec_y_when_autoconstructing () integer_yankdup print_boolean exec_s_when_autoconstructing (exec_empty boolean_yankdup) (exec_stackdepth) (exec_yankdup) exec_if () (exec_when (exec_y_when_autoconstructing (exec_pop (boolean_invert_second_then_and) integer_inc) boolean_shove) exec_do*count (integer_lt boolean_eq) integer_pop) exec_do*range () exec_do*count (exec_dup (boolean_frominteger exec_if (exec_empty boolean_invert_second_then_and integer_mult) ())))) ()))
Errors: [1 1 0 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 80
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.793
Median total errors in population: 8
Error averages by case: (0.845 1.0 0.728 0.1 0.527 0.724 1.0 0.569 0.727 0.573)
Error minima by case: (0 1 0 0 0 0 1 0 0 0)
Average genome size in population (length): 48.114
Average program size in population (points): 68.851
Average percent parens in population: 0.297
Minimum age in population: 13.875
Maximum age in population: 18.5751953125
Average age in population: 16.676734375
Median age in population: 16.728515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4586787
--- Timings ---
Current time: 1559584171956 milliseconds
Total Time:          32.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.9 seconds, 69.9%
Fitness Testing:      6.4 seconds, 19.7%
Report:               3.3 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 615
Test mean error for best: 0.61500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 95                 
Correct output: 15                  | Program output: 41                 
Correct output: 49                  | Program output: 96                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 62                 
Correct output: 8                   | Program output: 31                 
Correct output: 63                  | Program output: 91                 
Correct output: 32                  | Program output: 76                 
Correct output: 35                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 21                 
Correct output: 43                  | Program output: 68                 
Correct output: 38                  | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 59                 
Correct output: -58                 | Program output: 37                 
Correct output: -53                 | Program output: 56                 
Correct output: -76                 | Program output: 2                  
Correct output: -52                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 70                 
Correct output: -77                 | Program output: 2                  
Correct output: -78                 | Program output: -16                
Correct output: -11                 | Program output: 55                 
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: 43                 
Correct output: 22                  | Program output: 40                 
Correct output: -94                 | Program output: 18                 
Correct output: -48                 | Program output: -48                
Correct output: -58                 | Program output: 57                 
Correct output: -22                 | Program output: 53                 
Correct output: -15                 | Program output: 18                 
Correct output: 34                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -54                
Correct output: -95                 | Program output: 92                 
Correct output: -66                 | Program output: 37                 
Correct output: -47                 | Program output: 85                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -78                
Correct output: 44                  | Program output: 87                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 29                 
Correct output: -79                 | Program output: 61                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: 26                 
Correct output: -84                 | Program output: -35                
Correct output: -69                 | Program output: 81                 
Correct output: -94                 | Program output: -93                
Correct output: -78                 | Program output: -52                
Correct output: -61                 | Program output: 57                 
Correct output: -68                 | Program output: 57                 
Correct output: -78                 | Program output: 55                 
Correct output: -94                 | Program output: -57                
Correct output: -62                 | Program output: 47                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -22                
Correct output: -79                 | Program output: -75                
Correct output: -89                 | Program output: -3                 
Correct output: -82                 | Program output: -38                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: 9                  
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -55                
Correct output: -27                 | Program output: 83                 
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: 37                 
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: 75                 
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Lexicase best program: (boolean_yank exec_shove (exec_do*times ()) boolean_invert_first_then_and in3 exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) (integer_dec integer_sub) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt boolean_yankdup exec_flush print_boolean) (integer_pop integer_max exec_eq exec_shove (integer_inc) boolean_shove) exec_do*count (integer_pop boolean_eq) integer_pop) exec_do*range () exec_do*count (boolean_dup_items exec_rot (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()) () ()))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 81
Percent parens: 0.272
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Zero cases best program: (boolean_yank exec_shove (exec_do*times ()) boolean_invert_first_then_and in3 exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) (integer_dec integer_sub) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt boolean_yankdup exec_flush print_boolean) (integer_pop integer_max exec_eq exec_shove (integer_inc) boolean_shove) exec_do*count (integer_pop boolean_eq) integer_pop) exec_do*range () exec_do*count (boolean_dup_items exec_rot (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()) () ()))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 81
Percent parens: 0.272
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 218 571 573 1000 784 218 568 932 142)
Population mean number of elite cases: 5.15
Count of perfect (error zero) individuals by case: (142 218 571 573 0 784 218 568 932 142)
Population mean number of perfect (error zero) cases: 4.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519})
Best program: (boolean_yank exec_shove (exec_do*times ()) exec_yankdup exec_dup_times (exec_swap () (boolean_invert_second_then_and boolean_pop in3 boolean_shove boolean_dup_items in4)) integer_fromboolean exec_while () exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (in3 print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) (integer_dec integer_sub exec_flush exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519) ())))
Errors: [1 1 0 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 5.852
Median total errors in population: 5
Error averages by case: (0.858 0.782 0.429 0.427 1.0 0.216 0.782 0.432 0.068 0.858)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 45.767
Average program size in population (points): 63.688
Average percent parens in population: 0.277
Minimum age in population: 15.0234375
Maximum age in population: 19.99462890625
Average age in population: 18.0723623046875
Median age in population: 18.171142578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4992366
--- Timings ---
Current time: 1559584174722 milliseconds
Total Time:          35.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.9 seconds, 69.7%
Fitness Testing:      6.8 seconds, 19.2%
Report:               3.9 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 36                 
Correct output: 50                  | Program output: 65                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: 7                  
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 47                 
Correct output: 15                  | Program output: 15                 
Correct output: 49                  | Program output: 64                 
Correct output: 48                  | Program output: 55                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 50                 
Correct output: 35                  | Program output: 36                 
Correct output: 25                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 27                 
Correct output: 0                   | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: 38                  | Program output: 88                 
Correct output: 1                   | Program output: 10                 
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 38                 
Correct output: 17                  | Program output: 85                 
Correct output: -86                 | Program output: -26                
Correct output: -36                 | Program output: -34                
Correct output: -100                | Program output: -16                
Correct output: 40                  | Program output: 40                 
Correct output: -58                 | Program output: 40                 
Correct output: -53                 | Program output: 20                 
Correct output: -76                 | Program output: 52                 
Correct output: -52                 | Program output: 72                 
Correct output: -88                 | Program output: 62                 
Correct output: -91                 | Program output: -21                
Correct output: -72                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -11                 | Program output: -11                
Correct output: -72                 | Program output: 49                 
Correct output: -31                 | Program output: -7                 
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -2                 
Correct output: -48                 | Program output: 56                 
Correct output: -58                 | Program output: 50                 
Correct output: -22                 | Program output: 99                 
Correct output: -15                 | Program output: 69                 
Correct output: 34                  | Program output: 35                 
Correct output: -72                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -20                
Correct output: -66                 | Program output: -45                
Correct output: -47                 | Program output: 21                 
Correct output: -59                 | Program output: 44                 
Correct output: -78                 | Program output: 41                 
Correct output: 44                  | Program output: 68                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -7                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -46                
Correct output: -17                 | Program output: 38                 
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: 93                 
Correct output: -78                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -43                
Correct output: -87                 | Program output: -77                
Correct output: -57                 | Program output: 78                 
Correct output: -79                 | Program output: 5                  
Correct output: -89                 | Program output: -71                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: 75                 
Correct output: -67                 | Program output: -11                
Correct output: -34                 | Program output: 49                 
Correct output: -91                 | Program output: -91                
Correct output: -27                 | Program output: 1                  
Correct output: -80                 | Program output: 87                 
Correct output: -20                 | Program output: -20                
Correct output: -62                 | Program output: -3                 
Correct output: -93                 | Program output: -49                
Correct output: -36                 | Program output: 8                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_859} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*while (in4 integer_gt boolean_yank in1) print_integer exec_do*while () exec_swap (exec_flush integer_yankdup integer_gte exec_yankdup) (exec_while (exec_k_when_autoconstructing () () exec_noop tagged_142 exec_empty exec_do*count (exec_yankdup boolean_dup_items exec_do*times (boolean_xor exec_swap (integer_yank exec_s_when_autoconstructing (boolean_rot in3 print_integer exec_do*while (boolean_shove) integer_sub integer_yank) (integer_lte exec_eq) (integer_dec integer_sub) exec_flush integer_sub boolean_and exec_s (exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_flush in1) integer_pop integer_max exec_eq integer_dup_items tagged_859 integer_pop boolean_eq) (integer_pop) (exec_do*range () exec_do*count (boolean_dup_items exec_rot (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()) () ()))) ())))))
Lexicase best errors: [1 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 90
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_859} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*while (in4 integer_gt boolean_yank in1) print_integer exec_do*while () exec_swap (exec_flush integer_yankdup integer_gte exec_yankdup) (exec_while (exec_k_when_autoconstructing () () exec_noop tagged_142 exec_empty exec_do*count (exec_yankdup boolean_dup_items exec_do*times (boolean_xor exec_swap (integer_yank exec_s_when_autoconstructing (boolean_rot in3 print_integer exec_do*while (boolean_shove) integer_sub integer_yank) (integer_lte exec_eq) (integer_dec integer_sub) exec_flush integer_sub boolean_and exec_s (exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_flush in1) integer_pop integer_max exec_eq integer_dup_items tagged_859 integer_pop boolean_eq) (integer_pop) (exec_do*range () exec_do*count (boolean_dup_items exec_rot (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()) () ()))) ())))))
Zero cases best errors: [1 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 90
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (308 409 1000 723 1000 222 222 222 410 530)
Population mean number of elite cases: 5.05
Count of perfect (error zero) individuals by case: (308 409 0 723 0 222 222 222 410 530)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Best program: (exec_do*while (in4 integer_gt boolean_yank in1) print_integer exec_do*while () exec_swap (exec_flush integer_yankdup integer_gte exec_yankdup) (exec_while (exec_k_when_autoconstructing () () exec_noop tagged_142 exec_empty exec_do*count (exec_yankdup integer_lte exec_do*times (boolean_xor integer_add boolean_or exec_do*times (boolean_yank integer_div exec_y_when_autoconstructing () integer_yankdup print_boolean exec_s_when_autoconstructing (exec_empty boolean_yankdup) (exec_stackdepth) (exec_yankdup) exec_if () (exec_when (exec_y_when_autoconstructing (boolean_eq boolean_invert_second_then_and) integer_inc) boolean_shove) exec_do*count (integer_pop boolean_eq) integer_pop) exec_do*range () exec_do*count (boolean_dup_items exec_rot (boolean_frominteger exec_empty boolean_invert_second_then_and integer_mult) () ()))))))
Errors: [1 1 1 1 1 0 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 54
Size: 79
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 6.954
Median total errors in population: 7
Error averages by case: (0.692 0.591 1.0 0.277 1.0 0.778 0.778 0.778 0.59 0.47)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 43.625
Average program size in population (points): 61.09
Average percent parens in population: 0.282
Minimum age in population: 16.03125
Maximum age in population: 21.525390625
Average age in population: 19.56412353515625
Median age in population: 19.6549072265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5292715
--- Timings ---
Current time: 1559584177081 milliseconds
Total Time:          38.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.7 seconds, 69.9%
Fitness Testing:      7.2 seconds, 18.7%
Report:               4.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -50                
Correct output: 25                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 32                 
Correct output: 15                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 53                 
Correct output: 9                   | Program output: 95                 
Correct output: 8                   | Program output: 94                 
Correct output: 63                  | Program output: 98                 
Correct output: 32                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 69                 
Correct output: 30                  | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 0                   | Program output: 41                 
Correct output: 8                   | Program output: 38                 
Correct output: 43                  | Program output: 73                 
Correct output: 38                  | Program output: 66                 
Correct output: 1                   | Program output: 59                 
Correct output: 82                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 84                 
Correct output: -86                 | Program output: -61                
Correct output: -36                 | Program output: -21                
Correct output: -100                | Program output: 17                 
Correct output: 40                  | Program output: 100                
Correct output: -58                 | Program output: 22                 
Correct output: -53                 | Program output: -19                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 12                 
Correct output: -88                 | Program output: 79                 
Correct output: -91                 | Program output: 19                 
Correct output: -72                 | Program output: -59                
Correct output: -77                 | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -11                 | Program output: -5                 
Correct output: -72                 | Program output: 80                 
Correct output: -31                 | Program output: -31                
Correct output: 22                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
Correct output: 34                  | Program output: 48                 
Correct output: -72                 | Program output: 64                 
Correct output: -89                 | Program output: 67                 
Correct output: -95                 | Program output: -25                
Correct output: -66                 | Program output: -17                
Correct output: -47                 | Program output: 55                 
Correct output: -59                 | Program output: 44                 
Correct output: -78                 | Program output: -44                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -78                
Correct output: -74                 | Program output: 37                 
Correct output: -79                 | Program output: -74                
Correct output: -99                 | Program output: 27                 
Correct output: -17                 | Program output: -17                
Correct output: -84                 | Program output: 63                 
Correct output: -69                 | Program output: 33                 
Correct output: -94                 | Program output: 52                 
Correct output: -78                 | Program output: 13                 
Correct output: -61                 | Program output: 64                 
Correct output: -68                 | Program output: -38                
Correct output: -78                 | Program output: -27                
Correct output: -94                 | Program output: 50                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: 7                  
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -44                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: 75                 
Correct output: -35                 | Program output: 37                 
Correct output: -67                 | Program output: 90                 
Correct output: -34                 | Program output: 82                 
Correct output: -91                 | Program output: -44                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: 73                 
Correct output: -20                 | Program output: -10                
Correct output: -62                 | Program output: 24                 
Correct output: -93                 | Program output: 36                 
Correct output: -36                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_do*while (in4 integer_gt boolean_yank integer_mult) print_integer boolean_dup_items exec_swap () (exec_flush integer_yankdup integer_gte exec_yankdup exec_while (exec_k_when_autoconstructing () (exec_noop tagged_142 exec_rot (exec_while () boolean_dup boolean_rot in2 boolean_dup_times exec_yankdup integer_div) (exec_do*count (integer_dec integer_inc) boolean_shove) ()))))
Lexicase best errors: [1 1 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 40
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_do*while (in4 integer_gt boolean_yank integer_mult) print_integer boolean_dup_items exec_swap () (exec_flush integer_yankdup integer_gte exec_yankdup exec_while (exec_k_when_autoconstructing () (exec_noop tagged_142 exec_rot (exec_while () boolean_dup boolean_rot in2 boolean_dup_times exec_yankdup integer_div) (exec_do*count (integer_dec integer_inc) boolean_shove) ()))))
Zero cases best errors: [1 1 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 40
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (264 1000 252 1000 252 1000 252 251 1000 410)
Population mean number of elite cases: 5.68
Count of perfect (error zero) individuals by case: (264 0 252 0 252 0 252 251 0 410)
Population mean number of perfect (error zero) cases: 1.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tagged_859} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot})
Best program: (exec_do*while (in4 integer_gt integer_shove integer_mult) print_integer boolean_dup_items exec_swap () (exec_flush integer_yankdup integer_gte exec_yankdup exec_while (boolean_shove) boolean_dup_items in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank integer_div boolean_pop in3 print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) integer_dec integer_sub exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt exec_flush integer_inc integer_pop integer_max exec_eq integer_dup_items tagged_859) (exec_shove (integer_rot exec_when (exec_yank) boolean_flush) boolean_rot boolean_dup_times boolean_yankdup exec_rot () () ()))
Errors: [1 1 0 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 58
Size: 73
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 8.319
Median total errors in population: 9
Error averages by case: (0.736 1.0 0.748 1.0 0.748 1.0 0.748 0.749 1.0 0.59)
Error minima by case: (0 1 0 1 0 1 0 0 1 0)
Average genome size in population (length): 42.451
Average program size in population (points): 59.989
Average percent parens in population: 0.288
Minimum age in population: 18.324462890625
Maximum age in population: 23.0885009765625
Average age in population: 21.07391882324219
Median age in population: 21.12255859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5581913
--- Timings ---
Current time: 1559584179596 milliseconds
Total Time:          40.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.8 seconds, 70.5%
Fitness Testing:      7.5 seconds, 18.3%
Report:               4.4 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -50                
Correct output: 25                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 32                 
Correct output: 15                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 53                 
Correct output: 9                   | Program output: 95                 
Correct output: 8                   | Program output: 94                 
Correct output: 63                  | Program output: 98                 
Correct output: 32                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 69                 
Correct output: 30                  | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 0                   | Program output: 41                 
Correct output: 8                   | Program output: 38                 
Correct output: 43                  | Program output: 73                 
Correct output: 38                  | Program output: 66                 
Correct output: 1                   | Program output: 59                 
Correct output: 82                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 84                 
Correct output: -86                 | Program output: -61                
Correct output: -36                 | Program output: -21                
Correct output: -100                | Program output: 17                 
Correct output: 40                  | Program output: 100                
Correct output: -58                 | Program output: 22                 
Correct output: -53                 | Program output: -19                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 12                 
Correct output: -88                 | Program output: 79                 
Correct output: -91                 | Program output: 19                 
Correct output: -72                 | Program output: -59                
Correct output: -77                 | Program output: 24                 
Correct output: -78                 | Program output: -4                 
Correct output: -11                 | Program output: -5                 
Correct output: -72                 | Program output: 80                 
Correct output: -31                 | Program output: -31                
Correct output: 22                  | Program output: 30                 
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
Correct output: 34                  | Program output: 48                 
Correct output: -72                 | Program output: 64                 
Correct output: -89                 | Program output: 67                 
Correct output: -95                 | Program output: -25                
Correct output: -66                 | Program output: -17                
Correct output: -47                 | Program output: 55                 
Correct output: -59                 | Program output: 44                 
Correct output: -78                 | Program output: -44                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -78                
Correct output: -74                 | Program output: 37                 
Correct output: -79                 | Program output: -74                
Correct output: -99                 | Program output: 27                 
Correct output: -17                 | Program output: -17                
Correct output: -84                 | Program output: 63                 
Correct output: -69                 | Program output: 33                 
Correct output: -94                 | Program output: 52                 
Correct output: -78                 | Program output: 13                 
Correct output: -61                 | Program output: 64                 
Correct output: -68                 | Program output: -38                
Correct output: -78                 | Program output: -27                
Correct output: -94                 | Program output: 50                 
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: 7                  
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -44                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: 75                 
Correct output: -35                 | Program output: 37                 
Correct output: -67                 | Program output: 90                 
Correct output: -34                 | Program output: 82                 
Correct output: -91                 | Program output: -44                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: 73                 
Correct output: -20                 | Program output: -10                
Correct output: -62                 | Program output: 24                 
Correct output: -93                 | Program output: 36                 
Correct output: -36                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction tagged_859} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq})
Lexicase best program: (exec_do*while (in4 integer_gt integer_shove integer_mult) print_integer boolean_dup_items exec_swap () (exec_flush integer_yankdup integer_gte exec_yankdup exec_while (boolean_shove boolean_dup_items in4) integer_fromboolean boolean_shove) exec_when (integer_dup_times integer_dup integer_yank integer_div boolean_pop in3 print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) integer_dec integer_sub exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt exec_flush integer_inc) (integer_pop integer_max exec_eq integer_dup_items) tagged_859 exec_shove (integer_rot exec_when (exec_yank) boolean_flush) boolean_rot boolean_dup_times boolean_yankdup exec_rot () (print_exec (exec_empty) boolean_eq) (integer_mod) in4 boolean_frominteger print_exec (exec_empty boolean_eq))
Lexicase best errors: [1 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 84
Percent parens: 0.202
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction tagged_859} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq})
Zero cases best program: (exec_do*while (in4 integer_gt integer_shove integer_mult) print_integer boolean_dup_items exec_swap () (exec_flush integer_yankdup integer_gte exec_yankdup exec_while (boolean_shove boolean_dup_items in4) integer_fromboolean boolean_shove) exec_when (integer_dup_times integer_dup integer_yank integer_div boolean_pop in3 print_integer exec_dup_times (boolean_shove) integer_sub integer_yank integer_sub integer_lte exec_eq) integer_dec integer_sub exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt exec_flush integer_inc) (integer_pop integer_max exec_eq integer_dup_items) tagged_859 exec_shove (integer_rot exec_when (exec_yank) boolean_flush) boolean_rot boolean_dup_times boolean_yankdup exec_rot () (print_exec (exec_empty) boolean_eq) (integer_mod) in4 boolean_frominteger print_exec (exec_empty boolean_eq))
Zero cases best errors: [1 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 84
Percent parens: 0.202
--- Lexicase Population Statistics ---
Count of elite individuals by case: (161 607 160 607 940 169 607 161 170 170)
Population mean number of elite cases: 3.75
Count of perfect (error zero) individuals by case: (161 607 160 607 940 169 607 161 170 170)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_142} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_859} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt})
Best program: (exec_shove (in4 integer_gt boolean_yank exec_do*while () print_integer exec_do*while () exec_swap (exec_flush integer_yankdup exec_dup_times (exec_yankdup) exec_while (exec_k_when_autoconstructing () () exec_noop tagged_142 exec_empty exec_do*count (exec_yankdup integer_lte exec_do*times (boolean_xor integer_add boolean_or exec_do*times (integer_lte exec_eq) integer_dec integer_sub) exec_flush boolean_not boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt exec_flush) (print_boolean) exec_rot (integer_max exec_do*while (integer_dup_items tagged_859 exec_shove (exec_k (exec_when (exec_yank) boolean_flush) (boolean_rot boolean_dup_times boolean_yankdup in4) print_exec (exec_empty boolean_eq) integer_mod) in4 boolean_frominteger exec_shove (integer_max exec_while (integer_stackdepth) exec_rot (boolean_swap integer_gt) () ()))) () ()))) ()))
Errors: [1 0 1 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 65
Size: 95
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 6.248
Median total errors in population: 6
Error averages by case: (0.839 0.393 0.84 0.393 0.06 0.831 0.393 0.839 0.83 0.83)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.631
Average program size in population (points): 53.845
Average percent parens in population: 0.281
Minimum age in population: 19.324462890625
Maximum age in population: 24.5057373046875
Average age in population: 22.53246649169922
Median age in population: 22.56942749023438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5787076
--- Timings ---
Current time: 1559584182037 milliseconds
Total Time:          43.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.8 seconds, 71.3%
Fitness Testing:      7.7 seconds, 17.8%
Report:               4.6 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 493
Test mean error for best: 0.49300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -50                
Correct output: 25                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 53                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 67                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 27                 
Correct output: 0                   | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: 38                  | Program output: 66                 
Correct output: 1                   | Program output: 10                 
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 84                 
Correct output: -86                 | Program output: -61                
Correct output: -36                 | Program output: -21                
Correct output: -100                | Program output: -16                
Correct output: 40                  | Program output: 40                 
Correct output: -58                 | Program output: 22                 
Correct output: -53                 | Program output: -19                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 12                 
Correct output: -88                 | Program output: 62                 
Correct output: -91                 | Program output: -21                
Correct output: -72                 | Program output: -59                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -4                 
Correct output: -11                 | Program output: -5                 
Correct output: -72                 | Program output: 49                 
Correct output: -31                 | Program output: -31                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
Correct output: 34                  | Program output: 35                 
Correct output: -72                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -25                
Correct output: -66                 | Program output: -17                
Correct output: -47                 | Program output: 21                 
Correct output: -59                 | Program output: 44                 
Correct output: -78                 | Program output: -44                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -78                
Correct output: -74                 | Program output: -7                 
Correct output: -79                 | Program output: -74                
Correct output: -99                 | Program output: -46                
Correct output: -17                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: 33                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: -38                
Correct output: -78                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -77                
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -44                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: 37                 
Correct output: -67                 | Program output: -11                
Correct output: -34                 | Program output: 49                 
Correct output: -91                 | Program output: -44                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: 73                 
Correct output: -20                 | Program output: -10                
Correct output: -62                 | Program output: -3                 
Correct output: -93                 | Program output: -49                
Correct output: -36                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 boolean_flush boolean_dup_items in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))))
Lexicase best errors: [1 1 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 boolean_flush boolean_dup_items in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))))
Zero cases best errors: [1 1 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (285 1000 279 1000 1000 373 372 1000 278 278)
Population mean number of elite cases: 5.86
Count of perfect (error zero) individuals by case: (285 0 279 0 0 373 372 0 278 278)
Population mean number of perfect (error zero) cases: 1.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 boolean_flush boolean_dup_items in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))))
Errors: [1 1 0 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 52
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.135
Median total errors in population: 8
Error averages by case: (0.715 1.0 0.721 1.0 1.0 0.627 0.628 1.0 0.722 0.722)
Error minima by case: (0 1 0 1 1 0 0 1 0 0)
Average genome size in population (length): 39.395
Average program size in population (points): 55.134
Average percent parens in population: 0.282
Minimum age in population: 20.56689453125
Maximum age in population: 25.90859985351562
Average age in population: 24.03632568359375
Median age in population: 24.13641357421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6048846
--- Timings ---
Current time: 1559584184825 milliseconds
Total Time:          45.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.7 seconds, 71.8%
Fitness Testing:      8.0 seconds, 17.5%
Report:               4.8 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 577
Test mean error for best: 0.57700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 65                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: 7                  
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 47                 
Correct output: 15                  | Program output: 41                 
Correct output: 49                  | Program output: 64                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 62                 
Correct output: 8                   | Program output: 31                 
Correct output: 63                  | Program output: 91                 
Correct output: 32                  | Program output: 50                 
Correct output: 35                  | Program output: 36                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 21                 
Correct output: 43                  | Program output: 68                 
Correct output: 38                  | Program output: 88                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -26                
Correct output: -36                 | Program output: -34                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 59                 
Correct output: -58                 | Program output: 40                 
Correct output: -53                 | Program output: 20                 
Correct output: -76                 | Program output: 52                 
Correct output: -52                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -24                
Correct output: -77                 | Program output: 2                  
Correct output: -78                 | Program output: -78                
Correct output: -11                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: -7                 
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -2                 
Correct output: -48                 | Program output: 56                 
Correct output: -58                 | Program output: 50                 
Correct output: -22                 | Program output: 99                 
Correct output: -15                 | Program output: 69                 
Correct output: 34                  | Program output: 35                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -54                
Correct output: -95                 | Program output: -20                
Correct output: -66                 | Program output: -45                
Correct output: -47                 | Program output: 21                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: 41                 
Correct output: 44                  | Program output: 68                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 29                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: 38                 
Correct output: -84                 | Program output: -35                
Correct output: -69                 | Program output: 48                 
Correct output: -94                 | Program output: -93                
Correct output: -78                 | Program output: -52                
Correct output: -61                 | Program output: 57                 
Correct output: -68                 | Program output: 93                 
Correct output: -78                 | Program output: -11                
Correct output: -94                 | Program output: -57                
Correct output: -62                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: 78                 
Correct output: -79                 | Program output: 5                  
Correct output: -89                 | Program output: -71                
Correct output: -82                 | Program output: -38                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: 9                  
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -27                 | Program output: 1                  
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: -20                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -49                
Correct output: -36                 | Program output: 8                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 boolean_flush exec_s (in4) () () integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))))
Lexicase best errors: [1 0 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 boolean_flush exec_s (in4) () () integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))))
Zero cases best errors: [1 0 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (755 153 150 922 1 1 21 156 20 1)
Population mean number of elite cases: 2.18
Count of perfect (error zero) individuals by case: (755 153 150 922 1 1 21 156 20 1)
Population mean number of perfect (error zero) cases: 2.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 in3 boolean_flush boolean_dup_items integer_rot integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))))
Errors: [1 0 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 40
Size: 53
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 7.82
Median total errors in population: 8
Error averages by case: (0.245 0.847 0.85 0.078 0.999 0.999 0.979 0.844 0.98 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.028
Average program size in population (points): 52.277
Average percent parens in population: 0.252
Minimum age in population: 22.412109375
Maximum age in population: 27.48208618164062
Average age in population: 26.38854754638672
Median age in population: 26.05557250976562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 444
Genome diversity (% unique genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 452
Syntactic diversity (% unique Push programs):	 0.505
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6993726
--- Timings ---
Current time: 1559584188356 milliseconds
Total Time:          49.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.7 seconds, 70.7%
Fitness Testing:      8.9 seconds, 18.1%
Report:               5.4 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 326
Test mean error for best: 0.32600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: 38                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -61                
Correct output: -36                 | Program output: -21                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 40                 
Correct output: -58                 | Program output: 22                 
Correct output: -53                 | Program output: -19                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -59                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -4                 
Correct output: -11                 | Program output: -5                 
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: -31                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
Correct output: 34                  | Program output: 35                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -25                
Correct output: -66                 | Program output: -17                
Correct output: -47                 | Program output: 21                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -44                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -78                
Correct output: -74                 | Program output: -7                 
Correct output: -79                 | Program output: -74                
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: 33                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: -38                
Correct output: -78                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -44                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: -11                
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -44                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -49                
Correct output: -36                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 boolean_flush integer_min in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 boolean_flush integer_min in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (915 677 399 317 542 399 11 562 859 704)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (915 677 399 317 542 399 11 562 859 704)
Population mean number of perfect (error zero) cases: 5.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and})
Best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 boolean_flush integer_min in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) boolean_dup_items integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and)))
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 40
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.615
Median total errors in population: 5
Error averages by case: (0.085 0.323 0.601 0.683 0.458 0.601 0.989 0.438 0.141 0.296)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.955
Average program size in population (points): 52.609
Average percent parens in population: 0.259
Minimum age in population: 23.412109375
Maximum age in population: 29.11592102050781
Average age in population: 27.77495965576172
Median age in population: 28.04524993896484
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 191
Genome diversity (% unique genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 195
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.009
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8206335
--- Timings ---
Current time: 1559584191973 milliseconds
Total Time:          52.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.5 seconds, 69.3%
Fitness Testing:     10.0 seconds, 19.1%
Report:               6.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 326
Test mean error for best: 0.32600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -50                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: 38                  | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -61                
Correct output: -36                 | Program output: -21                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 40                 
Correct output: -58                 | Program output: 22                 
Correct output: -53                 | Program output: -19                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -59                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -4                 
Correct output: -11                 | Program output: -5                 
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: -31                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
Correct output: 34                  | Program output: 35                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -25                
Correct output: -66                 | Program output: -17                
Correct output: -47                 | Program output: 21                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -44                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -78                
Correct output: -74                 | Program output: -7                 
Correct output: -79                 | Program output: -74                
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: 33                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: -38                
Correct output: -78                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -44                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: -11                
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -44                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -49                
Correct output: -36                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*while (boolean_flush in2 boolean_yank in1) in3 boolean_flush boolean_dup_items in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_do*range (boolean_invert_second_then_and integer_mult)) ()))))
Lexicase best errors: [0 0 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*while (boolean_flush in2 boolean_yank in1) in3 boolean_flush boolean_dup_items in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_do*range (boolean_invert_second_then_and integer_mult)) ()))))
Zero cases best errors: [0 0 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (831 351 914 469 239 742 817 74 482 343)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (831 351 914 469 239 742 817 74 482 343)
Population mean number of perfect (error zero) cases: 5.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and})
Best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 boolean_flush integer_min in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) boolean_dup_items integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and)))
Errors: [0 1 0 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 32
Size: 40
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.738
Median total errors in population: 4
Error averages by case: (0.169 0.649 0.086 0.531 0.761 0.258 0.183 0.926 0.518 0.657)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.089
Average program size in population (points): 52.738
Average percent parens in population: 0.258
Minimum age in population: 27.44980239868164
Maximum age in population: 30.55557250976562
Average age in population: 29.0898585357666
Median age in population: 29.05557250976562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.521
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.007
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 9326952
--- Timings ---
Current time: 1559584195524 milliseconds
Total Time:          56.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.4 seconds, 68.3%
Fitness Testing:     11.1 seconds, 19.7%
Report:               6.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 346
Test mean error for best: 0.34600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 47                 
Correct output: 15                  | Program output: 15                 
Correct output: 49                  | Program output: 64                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 50                 
Correct output: 35                  | Program output: 36                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: 38                  | Program output: 88                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 40                 
Correct output: -58                 | Program output: 37                 
Correct output: -53                 | Program output: -19                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -11                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: -7                 
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
Correct output: 34                  | Program output: 35                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -20                
Correct output: -66                 | Program output: -45                
Correct output: -47                 | Program output: 21                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -78                
Correct output: 44                  | Program output: 68                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -7                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: 48                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: -38                
Correct output: -78                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -22                
Correct output: -79                 | Program output: -75                
Correct output: -89                 | Program output: -71                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: -11                
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: -20                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -49                
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*while (exec_rot (in2 boolean_yank in1) (in3 boolean_flush integer_min in4) ()) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_noop boolean_pop) boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*while (exec_rot (in2 boolean_yank in1) (in3 boolean_flush integer_min in4) ()) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_noop boolean_pop) boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (379 559 918 328 551 381 382 521 472 12)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (379 559 918 328 551 381 382 521 472 12)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 boolean_flush integer_min in4 integer_fromboolean boolean_shove in3 boolean_flush boolean_dup_items in4 integer_fromboolean boolean_flush integer_min in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))))
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 49
Size: 62
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 5.497
Median total errors in population: 5
Error averages by case: (0.621 0.441 0.082 0.672 0.449 0.619 0.618 0.479 0.528 0.988)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.695
Average program size in population (points): 54.132
Average percent parens in population: 0.266
Minimum age in population: 28.9190673828125
Maximum age in population: 32.17342758178711
Average age in population: 30.65407630729675
Median age in population: 30.79783058166504
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.009
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 10327096
--- Timings ---
Current time: 1559584199105 milliseconds
Total Time:          59.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.3 seconds, 67.5%
Fitness Testing:     12.0 seconds, 20.2%
Report:               7.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 403
Test mean error for best: 0.40300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -75                
Correct output: -80                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 24                 
Correct output: -47                 | Program output: 66                 
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 32                 
Correct output: 15                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 53                 
Correct output: 9                   | Program output: 95                 
Correct output: 8                   | Program output: 94                 
Correct output: 63                  | Program output: 98                 
Correct output: 32                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 69                 
Correct output: 30                  | Program output: 87                 
Correct output: 11                  | Program output: 98                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 38                 
Correct output: 43                  | Program output: 73                 
Correct output: 38                  | Program output: 66                 
Correct output: 1                   | Program output: 11                 
Correct output: 82                  | Program output: 98                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 84                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 100                
Correct output: -58                 | Program output: 22                 
Correct output: -53                 | Program output: -19                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -11                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: -7                 
Correct output: 22                  | Program output: 30                 
Correct output: -94                 | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
Correct output: 34                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -20                
Correct output: -66                 | Program output: -45                
Correct output: -47                 | Program output: 55                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -78                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -7                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: 33                 
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: -38                
Correct output: -78                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -22                
Correct output: -79                 | Program output: -75                
Correct output: -89                 | Program output: -71                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: -11                
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -27                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: -20                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -49                
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 boolean_flush boolean_yank in1 in3 boolean_flush boolean_flush integer_min in4 integer_fromboolean boolean_shove exec_when (integer_pop integer_dup integer_yank exec_s_when_autoconstructing (exec_pop () boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub integer_yank) (integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ())))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 67
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*while (in4 integer_gt boolean_yank in1) in3 boolean_flush boolean_yank in1 in3 boolean_flush boolean_flush integer_min in4 integer_fromboolean boolean_shove exec_when (integer_pop integer_dup integer_yank exec_s_when_autoconstructing (exec_pop () boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub integer_yank) (integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ())))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 67
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 154 923 399 736 555 434 734 895 809)
Population mean number of elite cases: 5.87
Count of perfect (error zero) individuals by case: (230 154 923 399 736 555 434 734 895 809)
Population mean number of perfect (error zero) cases: 5.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Best program: (exec_do*while (in4 in2 boolean_yank in1) in3 integer_min in4 integer_fromboolean boolean_shove integer_yankdup boolean_shove exec_when (integer_pop integer_dup integer_yank exec_s_when_autoconstructing (exec_pop () boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub boolean_and boolean_and exec_s_when_autoconstructing () (tag_integer_519 integer_gt) (exec_if (exec_empty boolean_invert_second_then_and integer_mult) ())) ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 40
Size: 54
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 4.131
Median total errors in population: 4
Error averages by case: (0.77 0.846 0.077 0.601 0.264 0.445 0.566 0.266 0.105 0.191)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.629
Average program size in population (points): 55.746
Average percent parens in population: 0.253
Minimum age in population: 30.30041122436523
Maximum age in population: 33.40096378326416
Average age in population: 32.15525765609741
Median age in population: 32.05041122436523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.01
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 11294385
--- Timings ---
Current time: 1559584202315 milliseconds
Total Time:          63.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.2 seconds, 66.7%
Fitness Testing:     12.9 seconds, 20.4%
Report:               8.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 337
Test mean error for best: 0.33700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -39                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 11                 
Correct output: 15                  | Program output: 15                 
Correct output: 49                  | Program output: 60                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 56                 
Correct output: 35                  | Program output: 37                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: 38                  | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -58                
Correct output: -36                 | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: 40                  | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -76                 | Program output: 26                 
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -10                
Correct output: -11                 | Program output: 61                 
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: 100                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: 82                 
Correct output: -48                 | Program output: 96                 
Correct output: -58                 | Program output: -35                
Correct output: -22                 | Program output: 11                 
Correct output: -15                 | Program output: 69                 
Correct output: 34                  | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -47                
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: 52                 
Correct output: 44                  | Program output: 94                 
Correct output: -83                 | Program output: -77                
Correct output: -74                 | Program output: -74                
Correct output: -79                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: 56                 
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: 10                 
Correct output: -79                 | Program output: -79                
Correct output: -89                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -77                
Correct output: -27                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: 6                  
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -93                
Correct output: -36                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*while (exec_rot (in2 boolean_yank in1) (in3 boolean_flush integer_min boolean_swap) ()) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub tag_integer_519 integer_gt) exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 58
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*while (exec_rot (in2 boolean_yank in1) (in3 boolean_flush integer_min boolean_swap) ()) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub tag_integer_519 integer_gt) exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 58
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (264 508 143 402 340 220 55 742 218 228)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (264 508 143 402 340 220 55 742 218 228)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Best program: (exec_do*while (exec_rot (in2 boolean_yank in1) (in3 boolean_flush integer_min boolean_swap) ()) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub tag_integer_519 integer_gt) exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 44
Size: 58
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 6.88
Median total errors in population: 7
Error averages by case: (0.736 0.492 0.857 0.598 0.66 0.78 0.945 0.258 0.782 0.772)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.007
Average program size in population (points): 57.05
Average percent parens in population: 0.246
Minimum age in population: 32.54912090301514
Maximum age in population: 35.17541122436523
Average age in population: 33.8271535243988
Median age in population: 33.92154026031494
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.01
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 12378422
--- Timings ---
Current time: 1559584205578 milliseconds
Total Time:          66.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.1 seconds, 66.3%
Fitness Testing:     13.8 seconds, 20.8%
Report:               8.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 152
Test mean error for best: 0.15200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 11                 
Correct output: 15                  | Program output: 15                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: 38                  | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -79                
Correct output: 40                  | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -16                
Correct output: -11                 | Program output: -5                 
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: -31                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
Correct output: 34                  | Program output: 35                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: 21                 
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -78                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -78                
Correct output: -74                 | Program output: -7                 
Correct output: -79                 | Program output: -74                
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -9                 
Correct output: -67                 | Program output: -11                
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -77                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -49                
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*while (in4 in2 boolean_yank boolean_yank in1) in3 boolean_flush integer_min boolean_swap integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub tag_integer_519 integer_gt) exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 56
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 3, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*while (in4 in2 boolean_yank boolean_yank in1) in3 boolean_flush integer_min boolean_swap integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub tag_integer_519 integer_gt) exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 56
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (743 402 833 848 314 649 402 58 733 852)
Population mean number of elite cases: 5.83
Count of perfect (error zero) individuals by case: (743 402 833 848 314 649 402 58 733 852)
Population mean number of perfect (error zero) cases: 5.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_519} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Best program: (exec_do*while (in4 in2 boolean_yank integer_min) in3 integer_min in1 in3 integer_min in4 boolean_shove exec_when (in4) integer_fromboolean exec_dup_times () exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (boolean_shove integer_sub integer_yank) integer_sub integer_lte exec_eq) (exec_y (-40) exec_flush integer_sub tag_integer_519 integer_gt) exec_if (exec_empty boolean_invert_second_then_and integer_mult) ()))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 41
Size: 53
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 4.166
Median total errors in population: 4
Error averages by case: (0.257 0.598 0.167 0.152 0.686 0.351 0.598 0.942 0.267 0.148)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.965
Average program size in population (points): 60.108
Average percent parens in population: 0.251
Minimum age in population: 35.54912090301514
Maximum age in population: 36.92218542098999
Average age in population: 36.38546114659309
Median age in population: 35.92218542098999
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 263
Genome diversity (% unique genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 272
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.01
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 13157003
--- Timings ---
Current time: 1559584208649 milliseconds
Total Time:          69.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.0 seconds, 66.2%
Fitness Testing:     14.6 seconds, 21.0%
Report:               8.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 11                 
Correct output: 15                  | Program output: 15                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: 38                  | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: 40                  | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -11                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: -31                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
Correct output: 34                  | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -47                
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -78                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -74                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: -20                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -93                
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 3, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction exec_when} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 69
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 3, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction exec_when} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 69
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (648 812 605 796 794 729 298 648 570 699)
Population mean number of elite cases: 6.60
Count of perfect (error zero) individuals by case: (648 812 605 796 794 729 298 648 570 699)
Population mean number of perfect (error zero) cases: 6.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_min} {:close 3, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 3, :instruction in4} {:close 0, :instruction exec_when} {:close 3, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y} {:close 1, :instruction -40} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult})
Best program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 3.401
Median total errors in population: 3
Error averages by case: (0.352 0.188 0.395 0.204 0.206 0.271 0.702 0.352 0.43 0.301)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.5
Average program size in population (points): 57.979
Average percent parens in population: 0.231
Minimum age in population: 36.86226606369019
Maximum age in population: 38.92218542098999
Average age in population: 38.11377570235729
Median age in population: 37.92218542098999
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.011
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 13973765
--- Timings ---
Current time: 1559584211852 milliseconds
Total Time:          72.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.9 seconds, 66.0%
Fitness Testing:     15.3 seconds, 21.1%
Report:               9.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 24
Successful program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 69


Auto-simplifying with starting size: 69
step: 0
program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 500
program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 1000
program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 1500
program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 2000
program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 2500
program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 3000
program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 3500
program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 4000
program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 4500
program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 5000
program: (exec_do*while (boolean_yank in1) in3 integer_min in4 boolean_shove exec_when (integer_min boolean_swap) integer_fromboolean boolean_shove exec_when (integer_fromboolean boolean_shove) in2 integer_min in4 exec_when (in4) integer_fromboolean boolean_shove exec_when (integer_dup_times integer_dup integer_yank exec_s_when_autoconstructing (boolean_pop) (boolean_invert_first_then_and print_integer exec_dup_times (exec_while (exec_k_when_autoconstructing (boolean_shove) (integer_sub integer_yank) integer_sub integer_lte exec_eq) exec_y (-40) exec_flush integer_sub boolean_and boolean_and boolean_and boolean_and exec_s_when_autoconstructing () (exec_do*range (boolean_invert_second_then_and integer_mult)) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: 25                  | Program output: 25                 
Correct output: 50                  | Program output: 50                 
Correct output: -92                 | Program output: -92                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: 2                   | Program output: 2                  
Correct output: -47                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -98                 | Program output: -98                
Correct output: 75                  | Program output: 75                 
Correct output: 39                  | Program output: 39                 
Correct output: -74                 | Program output: -74                
Correct output: 11                  | Program output: 11                 
Correct output: 15                  | Program output: 15                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 63                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: 38                  | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 82                  | Program output: 82                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: 40                  | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: -77                
Correct output: -78                 | Program output: -78                
Correct output: -11                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -31                 | Program output: -31                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -15                 | Program output: -15                
Correct output: 34                  | Program output: 34                 
Correct output: -72                 | Program output: -72                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -47                 | Program output: -47                
Correct output: -59                 | Program output: -59                
Correct output: -78                 | Program output: -78                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: -74                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -69                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -61                 | Program output: -61                
Correct output: -68                 | Program output: -68                
Correct output: -78                 | Program output: -78                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -87                 | Program output: -87                
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -27                 | Program output: -27                
Correct output: -80                 | Program output: -80                
Correct output: -20                 | Program output: -20                
Correct output: -62                 | Program output: -62                
Correct output: -93                 | Program output: -93                
Correct output: -36                 | Program output: -36                
;;******************************
