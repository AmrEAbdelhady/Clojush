Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[82 82 82 18] 18] [[-46 -46 -95 -46] -95] [[-4 -4 -4 67] -4] [[18 18 18 -24] -24] [[-1 73 73 73] -1] [[16 16 16 61] 16] [[37 68 68 68] 37] [[27 27 -59 27] -59] [[49 -38 49 49] -38] [[-53 95 95 95] -53] [(27 27 27 27) 27] [(91 91 91 91) 91] [(-15 -15 -15 -15) -15] [(27 27 27 27) 27] [(-3 -3 -3 -3) -3] [(30 20 29 12) 12] [(62 45 91 91) 45] [(92 97 11 16) 11] [(52 54 9 24) 9] [(36 43 67 66) 36] [(25 9 34 22) 9] [(85 91 51 60) 51] [(95 27 55 56) 27] [(86 21 74 50) 21] [(51 63 79 51) 51] [(2 93 67 33) 2] [(70 22 84 5) 5] [(26 34 4 66) 4] [(71 67 4 1) 1] [(100 35 31 10) 10] [(98 50 64 87) 50] [(59 29 48 24) 24] [(53 79 49 0) 0] [(92 60 25 28) 25] [(78 30 57 27) 27] [(36 -77 -45 -26) -77] [(-38 -63 63 87) -63] [(-76 -8 -92 6) -92] [(87 -34 -36 31) -36] [(-63 -64 -73 8) -73] [(-28 -17 -21 -58) -58] [(64 95 -55 12) -55] [(-62 -90 -78 -7) -90] [(62 -50 -60 39) -60] [(47 100 -92 -71) -92] [(32 -14 11 -21) -21] [(-69 -30 -41 -85) -85] [(66 -59 -2 80) -59] [(96 86 70 -17) -17] [(-4 92 -94 -57) -94] [(14 73 85 4) 4] [(-53 79 19 67) -53] [(40 -63 -77 64) -77] [(36 -61 -40 8) -61] [(92 30 -12 -69) -69] [(8 -42 -11 18) -42] [(-85 86 76 -73) -85] [(-96 96 77 -29) -96] [(-46 -20 44 -40) -46] [(-28 -91 -8 -84) -91] [(3 -45 85 18) -45] [(-91 13 -77 -30) -91] [(-98 90 -90 3) -98] [(26 -22 -56 39) -56] [(-62 -14 -93 -23) -93] [(-44 74 -32 1) -44] [(27 -51 76 14) -51] [(32 25 -73 -8) -73] [(-51 91 -39 20) -51] [(-46 -52 -91 -30) -91] [(-6 51 72 -89) -89] [(81 -36 82 66) -36] [(-20 -26 -4 -31) -31] [(14 72 -47 -57) -57] [(-96 -17 78 -61) -96] [(56 -43 54 92) -43] [(-62 13 -100 78) -100] [(-95 86 -51 -67) -95] [(-28 34 59 97) -28] [(85 61 -14 79) -14] [(-56 85 -57 -93) -93] [(-85 -71 -48 -88) -88] [(-50 -36 -6 17) -50] [(48 17 -44 -48) -48] [(44 33 5 74) 5] [(30 53 61 -25) -25] [(79 -20 -96 -96) -96] [(81 69 -68 33) -68] [(-61 -26 34 51) -61] [(-70 -59 -80 100) -80] [(9 -19 -39 77) -39] [(17 -52 80 15) -52] [(-27 -31 36 98) -31] [(-87 -70 -88 17) -88] [(57 -6 -78 -47) -78])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[82 82 82 18] 18]
Train Case:   6 | Input/Output: [[-46 -46 -95 -46] -95]
Train Case:   7 | Input/Output: [[-4 -4 -4 67] -4]
Train Case:   8 | Input/Output: [[18 18 18 -24] -24]
Train Case:   9 | Input/Output: [[-1 73 73 73] -1]
Train Case:  10 | Input/Output: [[16 16 16 61] 16]
Train Case:  11 | Input/Output: [[37 68 68 68] 37]
Train Case:  12 | Input/Output: [[27 27 -59 27] -59]
Train Case:  13 | Input/Output: [[49 -38 49 49] -38]
Train Case:  14 | Input/Output: [[-53 95 95 95] -53]
Train Case:  15 | Input/Output: [(27 27 27 27) 27]
Train Case:  16 | Input/Output: [(91 91 91 91) 91]
Train Case:  17 | Input/Output: [(-15 -15 -15 -15) -15]
Train Case:  18 | Input/Output: [(27 27 27 27) 27]
Train Case:  19 | Input/Output: [(-3 -3 -3 -3) -3]
Train Case:  20 | Input/Output: [(30 20 29 12) 12]
Train Case:  21 | Input/Output: [(62 45 91 91) 45]
Train Case:  22 | Input/Output: [(92 97 11 16) 11]
Train Case:  23 | Input/Output: [(52 54 9 24) 9]
Train Case:  24 | Input/Output: [(36 43 67 66) 36]
Train Case:  25 | Input/Output: [(25 9 34 22) 9]
Train Case:  26 | Input/Output: [(85 91 51 60) 51]
Train Case:  27 | Input/Output: [(95 27 55 56) 27]
Train Case:  28 | Input/Output: [(86 21 74 50) 21]
Train Case:  29 | Input/Output: [(51 63 79 51) 51]
Train Case:  30 | Input/Output: [(2 93 67 33) 2]
Train Case:  31 | Input/Output: [(70 22 84 5) 5]
Train Case:  32 | Input/Output: [(26 34 4 66) 4]
Train Case:  33 | Input/Output: [(71 67 4 1) 1]
Train Case:  34 | Input/Output: [(100 35 31 10) 10]
Train Case:  35 | Input/Output: [(98 50 64 87) 50]
Train Case:  36 | Input/Output: [(59 29 48 24) 24]
Train Case:  37 | Input/Output: [(53 79 49 0) 0]
Train Case:  38 | Input/Output: [(92 60 25 28) 25]
Train Case:  39 | Input/Output: [(78 30 57 27) 27]
Train Case:  40 | Input/Output: [(36 -77 -45 -26) -77]
Train Case:  41 | Input/Output: [(-38 -63 63 87) -63]
Train Case:  42 | Input/Output: [(-76 -8 -92 6) -92]
Train Case:  43 | Input/Output: [(87 -34 -36 31) -36]
Train Case:  44 | Input/Output: [(-63 -64 -73 8) -73]
Train Case:  45 | Input/Output: [(-28 -17 -21 -58) -58]
Train Case:  46 | Input/Output: [(64 95 -55 12) -55]
Train Case:  47 | Input/Output: [(-62 -90 -78 -7) -90]
Train Case:  48 | Input/Output: [(62 -50 -60 39) -60]
Train Case:  49 | Input/Output: [(47 100 -92 -71) -92]
Train Case:  50 | Input/Output: [(32 -14 11 -21) -21]
Train Case:  51 | Input/Output: [(-69 -30 -41 -85) -85]
Train Case:  52 | Input/Output: [(66 -59 -2 80) -59]
Train Case:  53 | Input/Output: [(96 86 70 -17) -17]
Train Case:  54 | Input/Output: [(-4 92 -94 -57) -94]
Train Case:  55 | Input/Output: [(14 73 85 4) 4]
Train Case:  56 | Input/Output: [(-53 79 19 67) -53]
Train Case:  57 | Input/Output: [(40 -63 -77 64) -77]
Train Case:  58 | Input/Output: [(36 -61 -40 8) -61]
Train Case:  59 | Input/Output: [(92 30 -12 -69) -69]
Train Case:  60 | Input/Output: [(8 -42 -11 18) -42]
Train Case:  61 | Input/Output: [(-85 86 76 -73) -85]
Train Case:  62 | Input/Output: [(-96 96 77 -29) -96]
Train Case:  63 | Input/Output: [(-46 -20 44 -40) -46]
Train Case:  64 | Input/Output: [(-28 -91 -8 -84) -91]
Train Case:  65 | Input/Output: [(3 -45 85 18) -45]
Train Case:  66 | Input/Output: [(-91 13 -77 -30) -91]
Train Case:  67 | Input/Output: [(-98 90 -90 3) -98]
Train Case:  68 | Input/Output: [(26 -22 -56 39) -56]
Train Case:  69 | Input/Output: [(-62 -14 -93 -23) -93]
Train Case:  70 | Input/Output: [(-44 74 -32 1) -44]
Train Case:  71 | Input/Output: [(27 -51 76 14) -51]
Train Case:  72 | Input/Output: [(32 25 -73 -8) -73]
Train Case:  73 | Input/Output: [(-51 91 -39 20) -51]
Train Case:  74 | Input/Output: [(-46 -52 -91 -30) -91]
Train Case:  75 | Input/Output: [(-6 51 72 -89) -89]
Train Case:  76 | Input/Output: [(81 -36 82 66) -36]
Train Case:  77 | Input/Output: [(-20 -26 -4 -31) -31]
Train Case:  78 | Input/Output: [(14 72 -47 -57) -57]
Train Case:  79 | Input/Output: [(-96 -17 78 -61) -96]
Train Case:  80 | Input/Output: [(56 -43 54 92) -43]
Train Case:  81 | Input/Output: [(-62 13 -100 78) -100]
Train Case:  82 | Input/Output: [(-95 86 -51 -67) -95]
Train Case:  83 | Input/Output: [(-28 34 59 97) -28]
Train Case:  84 | Input/Output: [(85 61 -14 79) -14]
Train Case:  85 | Input/Output: [(-56 85 -57 -93) -93]
Train Case:  86 | Input/Output: [(-85 -71 -48 -88) -88]
Train Case:  87 | Input/Output: [(-50 -36 -6 17) -50]
Train Case:  88 | Input/Output: [(48 17 -44 -48) -48]
Train Case:  89 | Input/Output: [(44 33 5 74) 5]
Train Case:  90 | Input/Output: [(30 53 61 -25) -25]
Train Case:  91 | Input/Output: [(79 -20 -96 -96) -96]
Train Case:  92 | Input/Output: [(81 69 -68 33) -68]
Train Case:  93 | Input/Output: [(-61 -26 34 51) -61]
Train Case:  94 | Input/Output: [(-70 -59 -80 100) -80]
Train Case:  95 | Input/Output: [(9 -19 -39 77) -39]
Train Case:  96 | Input/Output: [(17 -52 80 15) -52]
Train Case:  97 | Input/Output: [(-27 -31 36 98) -31]
Train Case:  98 | Input/Output: [(-87 -70 -88 17) -88]
Train Case:  99 | Input/Output: [(57 -6 -78 -47) -78]
Test Case:   0 | Input/Output: [[100 32 100 100] 32]
Test Case:   1 | Input/Output: [[49 -33 49 49] -33]
Test Case:   2 | Input/Output: [[-48 -48 -48 36] -48]
Test Case:   3 | Input/Output: [[41 41 41 -58] -58]
Test Case:   4 | Input/Output: [[39 99 39 39] 39]
Test Case:   5 | Input/Output: [[51 -43 51 51] -43]
Test Case:   6 | Input/Output: [[82 82 1 82] 1]
Test Case:   7 | Input/Output: [[-75 73 73 73] -75]
Test Case:   8 | Input/Output: [[28 28 28 92] 28]
Test Case:   9 | Input/Output: [[-55 -55 56 -55] -55]
Test Case:  10 | Input/Output: [[-23 0 0 0] -23]
Test Case:  11 | Input/Output: [[87 87 87 87] 87]
Test Case:  12 | Input/Output: [[59 59 26 59] 26]
Test Case:  13 | Input/Output: [[13 13 -23 13] -23]
Test Case:  14 | Input/Output: [[-49 -49 60 -49] -49]
Test Case:  15 | Input/Output: [[45 15 15 15] 15]
Test Case:  16 | Input/Output: [[47 47 47 -50] -50]
Test Case:  17 | Input/Output: [[-46 10 -46 -46] -46]
Test Case:  18 | Input/Output: [[-93 -93 62 -93] -93]
Test Case:  19 | Input/Output: [[-21 54 54 54] -21]
Test Case:  20 | Input/Output: [[-55 -87 -55 -55] -87]
Test Case:  21 | Input/Output: [[92 92 92 -89] -89]
Test Case:  22 | Input/Output: [[30 4 4 4] 4]
Test Case:  23 | Input/Output: [[49 -3 49 49] -3]
Test Case:  24 | Input/Output: [[-98 61 -98 -98] -98]
Test Case:  25 | Input/Output: [[-30 -30 -30 -55] -55]
Test Case:  26 | Input/Output: [[45 45 94 45] 45]
Test Case:  27 | Input/Output: [[-37 71 -37 -37] -37]
Test Case:  28 | Input/Output: [[28 -94 -94 -94] -94]
Test Case:  29 | Input/Output: [[73 73 3 73] 3]
Test Case:  30 | Input/Output: [[42 42 42 19] 19]
Test Case:  31 | Input/Output: [[74 74 74 12] 12]
Test Case:  32 | Input/Output: [[18 18 18 -100] -100]
Test Case:  33 | Input/Output: [[28 28 28 -16] -16]
Test Case:  34 | Input/Output: [[-6 -6 47 -6] -6]
Test Case:  35 | Input/Output: [[-16 -16 47 -16] -16]
Test Case:  36 | Input/Output: [[-44 45 -44 -44] -44]
Test Case:  37 | Input/Output: [[63 66 63 63] 63]
Test Case:  38 | Input/Output: [[-72 -72 77 -72] -72]
Test Case:  39 | Input/Output: [[-45 80 -45 -45] -45]
Test Case:  40 | Input/Output: [[-16 -16 77 -16] -16]
Test Case:  41 | Input/Output: [[22 14 14 14] 14]
Test Case:  42 | Input/Output: [[52 52 52 -41] -41]
Test Case:  43 | Input/Output: [[49 49 49 46] 46]
Test Case:  44 | Input/Output: [[25 -7 25 25] -7]
Test Case:  45 | Input/Output: [[-30 33 33 33] -30]
Test Case:  46 | Input/Output: [[-62 -10 -10 -10] -62]
Test Case:  47 | Input/Output: [[3 3 65 3] 3]
Test Case:  48 | Input/Output: [[-41 -41 -41 23] -41]
Test Case:  49 | Input/Output: [[3 3 -77 3] -77]
Test Case:  50 | Input/Output: [[-42 -42 -42 41] -42]
Test Case:  51 | Input/Output: [[49 49 49 -88] -88]
Test Case:  52 | Input/Output: [[8 8 8 5] 5]
Test Case:  53 | Input/Output: [[-27 -27 47 -27] -27]
Test Case:  54 | Input/Output: [[9 9 9 35] 9]
Test Case:  55 | Input/Output: [[56 56 1 56] 1]
Test Case:  56 | Input/Output: [[-28 -87 -87 -87] -87]
Test Case:  57 | Input/Output: [[-70 -70 -17 -70] -70]
Test Case:  58 | Input/Output: [[-19 -33 -19 -19] -33]
Test Case:  59 | Input/Output: [[34 -86 -86 -86] -86]
Test Case:  60 | Input/Output: [[-67 -67 -67 44] -67]
Test Case:  61 | Input/Output: [[-92 -92 -92 -91] -92]
Test Case:  62 | Input/Output: [[75 75 75 -10] -10]
Test Case:  63 | Input/Output: [[-99 -99 -99 -95] -99]
Test Case:  64 | Input/Output: [[-13 -13 -13 -43] -43]
Test Case:  65 | Input/Output: [[-22 -21 -22 -22] -22]
Test Case:  66 | Input/Output: [[-59 -59 45 -59] -59]
Test Case:  67 | Input/Output: [[-73 -51 -51 -51] -73]
Test Case:  68 | Input/Output: [[-56 -29 -56 -56] -56]
Test Case:  69 | Input/Output: [[-87 -87 -87 -52] -87]
Test Case:  70 | Input/Output: [[33 -46 -46 -46] -46]
Test Case:  71 | Input/Output: [[81 81 1 81] 1]
Test Case:  72 | Input/Output: [[25 -49 25 25] -49]
Test Case:  73 | Input/Output: [[-12 -12 -12 3] -12]
Test Case:  74 | Input/Output: [[-23 34 34 34] -23]
Test Case:  75 | Input/Output: [[10 -4 10 10] -4]
Test Case:  76 | Input/Output: [[43 -53 43 43] -53]
Test Case:  77 | Input/Output: [[-4 -75 -4 -4] -75]
Test Case:  78 | Input/Output: [[-96 -96 89 -96] -96]
Test Case:  79 | Input/Output: [[71 -14 71 71] -14]
Test Case:  80 | Input/Output: [[24 24 -44 24] -44]
Test Case:  81 | Input/Output: [[-47 41 -47 -47] -47]
Test Case:  82 | Input/Output: [[1 1 1 42] 1]
Test Case:  83 | Input/Output: [[83 -4 -4 -4] -4]
Test Case:  84 | Input/Output: [[23 0 0 0] 0]
Test Case:  85 | Input/Output: [[82 82 82 -76] -76]
Test Case:  86 | Input/Output: [[-73 -73 -73 -29] -73]
Test Case:  87 | Input/Output: [[-77 -77 -77 -65] -77]
Test Case:  88 | Input/Output: [[99 99 21 99] 21]
Test Case:  89 | Input/Output: [[63 37 37 37] 37]
Test Case:  90 | Input/Output: [[68 -47 68 68] -47]
Test Case:  91 | Input/Output: [[-74 -74 -80 -74] -80]
Test Case:  92 | Input/Output: [[59 -11 -11 -11] -11]
Test Case:  93 | Input/Output: [[45 94 45 45] 45]
Test Case:  94 | Input/Output: [[85 85 48 85] 48]
Test Case:  95 | Input/Output: [[-97 -97 -46 -97] -97]
Test Case:  96 | Input/Output: [[-72 82 82 82] -72]
Test Case:  97 | Input/Output: [[-5 -5 -5 -97] -97]
Test Case:  98 | Input/Output: [[-54 -44 -44 -44] -54]
Test Case:  99 | Input/Output: [[82 30 82 82] 30]
Test Case: 100 | Input/Output: [(48 48 48 48) 48]
Test Case: 101 | Input/Output: [(63 63 63 63) 63]
Test Case: 102 | Input/Output: [(16 16 16 16) 16]
Test Case: 103 | Input/Output: [(76 76 76 76) 76]
Test Case: 104 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 105 | Input/Output: [(54 54 54 54) 54]
Test Case: 106 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 107 | Input/Output: [(73 73 73 73) 73]
Test Case: 108 | Input/Output: [(32 32 32 32) 32]
Test Case: 109 | Input/Output: [(26 26 26 26) 26]
Test Case: 110 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 111 | Input/Output: [(17 17 17 17) 17]
Test Case: 112 | Input/Output: [(2 2 2 2) 2]
Test Case: 113 | Input/Output: [(53 53 53 53) 53]
Test Case: 114 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 115 | Input/Output: [(10 10 10 10) 10]
Test Case: 116 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 117 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 118 | Input/Output: [(70 70 70 70) 70]
Test Case: 119 | Input/Output: [(25 25 25 25) 25]
Test Case: 120 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 121 | Input/Output: [(13 13 13 13) 13]
Test Case: 122 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 123 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 124 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 125 | Input/Output: [(70 70 70 70) 70]
Test Case: 126 | Input/Output: [(20 20 20 20) 20]
Test Case: 127 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 128 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 129 | Input/Output: [(88 88 88 88) 88]
Test Case: 130 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 131 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 132 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 133 | Input/Output: [(80 80 80 80) 80]
Test Case: 134 | Input/Output: [(10 10 10 10) 10]
Test Case: 135 | Input/Output: [(76 76 76 76) 76]
Test Case: 136 | Input/Output: [(22 22 22 22) 22]
Test Case: 137 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 138 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 139 | Input/Output: [(15 15 15 15) 15]
Test Case: 140 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 141 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 142 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 143 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 144 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 145 | Input/Output: [(89 89 89 89) 89]
Test Case: 146 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 147 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 148 | Input/Output: [(58 58 58 58) 58]
Test Case: 149 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 150 | Input/Output: [(5 5 5 5) 5]
Test Case: 151 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 152 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 153 | Input/Output: [(12 12 12 12) 12]
Test Case: 154 | Input/Output: [(34 34 34 34) 34]
Test Case: 155 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 156 | Input/Output: [(48 48 48 48) 48]
Test Case: 157 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 158 | Input/Output: [(88 88 88 88) 88]
Test Case: 159 | Input/Output: [(52 52 52 52) 52]
Test Case: 160 | Input/Output: [(72 72 72 72) 72]
Test Case: 161 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 162 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 163 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 164 | Input/Output: [(99 99 99 99) 99]
Test Case: 165 | Input/Output: [(12 12 12 12) 12]
Test Case: 166 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 167 | Input/Output: [(89 89 89 89) 89]
Test Case: 168 | Input/Output: [(66 66 66 66) 66]
Test Case: 169 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 170 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 171 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 172 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 173 | Input/Output: [(31 31 31 31) 31]
Test Case: 174 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 175 | Input/Output: [(6 6 6 6) 6]
Test Case: 176 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 177 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 178 | Input/Output: [(52 52 52 52) 52]
Test Case: 179 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 180 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 181 | Input/Output: [(1 1 1 1) 1]
Test Case: 182 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 183 | Input/Output: [(78 78 78 78) 78]
Test Case: 184 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 185 | Input/Output: [(30 30 30 30) 30]
Test Case: 186 | Input/Output: [(44 44 44 44) 44]
Test Case: 187 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 188 | Input/Output: [(56 56 56 56) 56]
Test Case: 189 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 190 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 191 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 192 | Input/Output: [(84 84 84 84) 84]
Test Case: 193 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 194 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 195 | Input/Output: [(43 43 43 43) 43]
Test Case: 196 | Input/Output: [(48 48 48 48) 48]
Test Case: 197 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 198 | Input/Output: [(51 51 51 51) 51]
Test Case: 199 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 200 | Input/Output: [(19 91 27 89) 19]
Test Case: 201 | Input/Output: [(73 14 54 26) 14]
Test Case: 202 | Input/Output: [(2 33 59 80) 2]
Test Case: 203 | Input/Output: [(27 47 83 95) 27]
Test Case: 204 | Input/Output: [(37 64 29 10) 10]
Test Case: 205 | Input/Output: [(54 44 30 22) 22]
Test Case: 206 | Input/Output: [(85 60 19 29) 19]
Test Case: 207 | Input/Output: [(31 74 14 40) 14]
Test Case: 208 | Input/Output: [(67 11 53 63) 11]
Test Case: 209 | Input/Output: [(17 18 67 56) 17]
Test Case: 210 | Input/Output: [(76 13 52 49) 13]
Test Case: 211 | Input/Output: [(88 73 40 80) 40]
Test Case: 212 | Input/Output: [(31 19 58 17) 17]
Test Case: 213 | Input/Output: [(55 88 95 79) 55]
Test Case: 214 | Input/Output: [(68 82 6 51) 6]
Test Case: 215 | Input/Output: [(100 20 50 29) 20]
Test Case: 216 | Input/Output: [(77 26 47 67) 26]
Test Case: 217 | Input/Output: [(64 71 53 18) 18]
Test Case: 218 | Input/Output: [(39 33 84 78) 33]
Test Case: 219 | Input/Output: [(2 5 49 42) 2]
Test Case: 220 | Input/Output: [(36 88 50 25) 25]
Test Case: 221 | Input/Output: [(5 6 73 42) 5]
Test Case: 222 | Input/Output: [(87 99 68 38) 38]
Test Case: 223 | Input/Output: [(98 22 2 20) 2]
Test Case: 224 | Input/Output: [(92 20 46 82) 20]
Test Case: 225 | Input/Output: [(62 83 37 23) 23]
Test Case: 226 | Input/Output: [(34 39 25 68) 25]
Test Case: 227 | Input/Output: [(59 63 65 88) 59]
Test Case: 228 | Input/Output: [(13 98 97 62) 13]
Test Case: 229 | Input/Output: [(93 84 76 29) 29]
Test Case: 230 | Input/Output: [(39 39 1 68) 1]
Test Case: 231 | Input/Output: [(41 76 85 32) 32]
Test Case: 232 | Input/Output: [(59 52 35 35) 35]
Test Case: 233 | Input/Output: [(61 83 55 76) 55]
Test Case: 234 | Input/Output: [(46 47 35 98) 35]
Test Case: 235 | Input/Output: [(30 27 43 25) 25]
Test Case: 236 | Input/Output: [(18 37 85 17) 17]
Test Case: 237 | Input/Output: [(16 95 65 1) 1]
Test Case: 238 | Input/Output: [(78 4 77 5) 4]
Test Case: 239 | Input/Output: [(29 13 70 55) 13]
Test Case: 240 | Input/Output: [(66 2 1 90) 1]
Test Case: 241 | Input/Output: [(39 28 48 26) 26]
Test Case: 242 | Input/Output: [(73 24 16 13) 13]
Test Case: 243 | Input/Output: [(99 4 89 21) 4]
Test Case: 244 | Input/Output: [(90 71 41 59) 41]
Test Case: 245 | Input/Output: [(47 73 23 62) 23]
Test Case: 246 | Input/Output: [(18 100 16 28) 16]
Test Case: 247 | Input/Output: [(64 37 89 14) 14]
Test Case: 248 | Input/Output: [(55 45 2 92) 2]
Test Case: 249 | Input/Output: [(34 29 65 78) 29]
Test Case: 250 | Input/Output: [(72 88 94 70) 70]
Test Case: 251 | Input/Output: [(42 26 27 78) 26]
Test Case: 252 | Input/Output: [(89 87 15 32) 15]
Test Case: 253 | Input/Output: [(91 76 30 48) 30]
Test Case: 254 | Input/Output: [(61 67 32 59) 32]
Test Case: 255 | Input/Output: [(31 26 39 100) 26]
Test Case: 256 | Input/Output: [(7 25 46 90) 7]
Test Case: 257 | Input/Output: [(99 94 26 60) 26]
Test Case: 258 | Input/Output: [(56 16 74 30) 16]
Test Case: 259 | Input/Output: [(86 96 30 38) 30]
Test Case: 260 | Input/Output: [(70 46 19 0) 0]
Test Case: 261 | Input/Output: [(43 9 20 25) 9]
Test Case: 262 | Input/Output: [(78 72 35 76) 35]
Test Case: 263 | Input/Output: [(9 34 61 25) 9]
Test Case: 264 | Input/Output: [(32 18 87 97) 18]
Test Case: 265 | Input/Output: [(76 14 39 99) 14]
Test Case: 266 | Input/Output: [(65 62 18 54) 18]
Test Case: 267 | Input/Output: [(2 64 38 31) 2]
Test Case: 268 | Input/Output: [(60 37 100 13) 13]
Test Case: 269 | Input/Output: [(57 50 28 77) 28]
Test Case: 270 | Input/Output: [(25 60 21 15) 15]
Test Case: 271 | Input/Output: [(61 26 19 79) 19]
Test Case: 272 | Input/Output: [(10 0 9 100) 0]
Test Case: 273 | Input/Output: [(38 77 87 100) 38]
Test Case: 274 | Input/Output: [(58 5 0 31) 0]
Test Case: 275 | Input/Output: [(17 50 62 21) 17]
Test Case: 276 | Input/Output: [(32 79 60 48) 32]
Test Case: 277 | Input/Output: [(45 81 99 35) 35]
Test Case: 278 | Input/Output: [(64 27 67 27) 27]
Test Case: 279 | Input/Output: [(52 43 42 53) 42]
Test Case: 280 | Input/Output: [(59 69 39 40) 39]
Test Case: 281 | Input/Output: [(49 51 36 0) 0]
Test Case: 282 | Input/Output: [(96 26 97 53) 26]
Test Case: 283 | Input/Output: [(65 91 4 87) 4]
Test Case: 284 | Input/Output: [(29 22 69 30) 22]
Test Case: 285 | Input/Output: [(26 25 68 10) 10]
Test Case: 286 | Input/Output: [(5 58 51 6) 5]
Test Case: 287 | Input/Output: [(67 40 57 18) 18]
Test Case: 288 | Input/Output: [(98 9 40 37) 9]
Test Case: 289 | Input/Output: [(10 40 80 75) 10]
Test Case: 290 | Input/Output: [(12 100 4 23) 4]
Test Case: 291 | Input/Output: [(38 86 94 67) 38]
Test Case: 292 | Input/Output: [(26 27 93 55) 26]
Test Case: 293 | Input/Output: [(65 52 70 13) 13]
Test Case: 294 | Input/Output: [(99 20 40 21) 20]
Test Case: 295 | Input/Output: [(97 68 85 18) 18]
Test Case: 296 | Input/Output: [(27 25 49 63) 25]
Test Case: 297 | Input/Output: [(25 88 2 33) 2]
Test Case: 298 | Input/Output: [(40 41 52 22) 22]
Test Case: 299 | Input/Output: [(57 14 18 99) 14]
Test Case: 300 | Input/Output: [(62 34 3 19) 3]
Test Case: 301 | Input/Output: [(76 89 55 46) 46]
Test Case: 302 | Input/Output: [(3 64 95 65) 3]
Test Case: 303 | Input/Output: [(23 97 60 41) 23]
Test Case: 304 | Input/Output: [(54 57 86 92) 54]
Test Case: 305 | Input/Output: [(73 63 16 29) 16]
Test Case: 306 | Input/Output: [(54 44 6 41) 6]
Test Case: 307 | Input/Output: [(44 17 38 85) 17]
Test Case: 308 | Input/Output: [(4 82 8 30) 4]
Test Case: 309 | Input/Output: [(9 97 29 11) 9]
Test Case: 310 | Input/Output: [(2 11 51 59) 2]
Test Case: 311 | Input/Output: [(87 53 2 94) 2]
Test Case: 312 | Input/Output: [(47 40 46 79) 40]
Test Case: 313 | Input/Output: [(82 48 71 2) 2]
Test Case: 314 | Input/Output: [(69 34 83 35) 34]
Test Case: 315 | Input/Output: [(0 4 95 18) 0]
Test Case: 316 | Input/Output: [(85 68 53 93) 53]
Test Case: 317 | Input/Output: [(78 62 54 5) 5]
Test Case: 318 | Input/Output: [(99 72 60 40) 40]
Test Case: 319 | Input/Output: [(98 58 87 20) 20]
Test Case: 320 | Input/Output: [(24 77 90 37) 24]
Test Case: 321 | Input/Output: [(46 5 4 57) 4]
Test Case: 322 | Input/Output: [(84 17 74 44) 17]
Test Case: 323 | Input/Output: [(86 34 3 80) 3]
Test Case: 324 | Input/Output: [(11 26 58 0) 0]
Test Case: 325 | Input/Output: [(43 9 51 74) 9]
Test Case: 326 | Input/Output: [(40 95 98 8) 8]
Test Case: 327 | Input/Output: [(65 74 66 43) 43]
Test Case: 328 | Input/Output: [(100 17 22 7) 7]
Test Case: 329 | Input/Output: [(7 52 16 3) 3]
Test Case: 330 | Input/Output: [(87 26 85 26) 26]
Test Case: 331 | Input/Output: [(53 92 58 9) 9]
Test Case: 332 | Input/Output: [(94 52 61 0) 0]
Test Case: 333 | Input/Output: [(54 81 34 37) 34]
Test Case: 334 | Input/Output: [(99 77 70 34) 34]
Test Case: 335 | Input/Output: [(22 34 69 58) 22]
Test Case: 336 | Input/Output: [(49 2 58 67) 2]
Test Case: 337 | Input/Output: [(88 43 35 28) 28]
Test Case: 338 | Input/Output: [(79 82 45 14) 14]
Test Case: 339 | Input/Output: [(37 91 61 94) 37]
Test Case: 340 | Input/Output: [(84 53 63 5) 5]
Test Case: 341 | Input/Output: [(75 48 32 31) 31]
Test Case: 342 | Input/Output: [(46 93 10 0) 0]
Test Case: 343 | Input/Output: [(39 11 10 39) 10]
Test Case: 344 | Input/Output: [(100 77 88 48) 48]
Test Case: 345 | Input/Output: [(49 35 59 7) 7]
Test Case: 346 | Input/Output: [(60 89 42 75) 42]
Test Case: 347 | Input/Output: [(100 87 9 36) 9]
Test Case: 348 | Input/Output: [(95 39 34 6) 6]
Test Case: 349 | Input/Output: [(37 14 55 67) 14]
Test Case: 350 | Input/Output: [(53 94 79 16) 16]
Test Case: 351 | Input/Output: [(18 2 95 48) 2]
Test Case: 352 | Input/Output: [(55 11 37 27) 11]
Test Case: 353 | Input/Output: [(38 46 17 55) 17]
Test Case: 354 | Input/Output: [(14 12 64 39) 12]
Test Case: 355 | Input/Output: [(9 20 43 26) 9]
Test Case: 356 | Input/Output: [(28 94 93 72) 28]
Test Case: 357 | Input/Output: [(54 43 16 14) 14]
Test Case: 358 | Input/Output: [(13 54 3 33) 3]
Test Case: 359 | Input/Output: [(20 57 67 11) 11]
Test Case: 360 | Input/Output: [(83 89 31 32) 31]
Test Case: 361 | Input/Output: [(81 19 58 41) 19]
Test Case: 362 | Input/Output: [(64 81 90 96) 64]
Test Case: 363 | Input/Output: [(25 90 37 27) 25]
Test Case: 364 | Input/Output: [(99 66 77 77) 66]
Test Case: 365 | Input/Output: [(44 93 59 22) 22]
Test Case: 366 | Input/Output: [(85 25 85 21) 21]
Test Case: 367 | Input/Output: [(53 92 9 92) 9]
Test Case: 368 | Input/Output: [(86 53 91 40) 40]
Test Case: 369 | Input/Output: [(20 94 30 57) 20]
Test Case: 370 | Input/Output: [(34 14 95 20) 14]
Test Case: 371 | Input/Output: [(31 48 92 8) 8]
Test Case: 372 | Input/Output: [(0 93 99 75) 0]
Test Case: 373 | Input/Output: [(88 26 43 15) 15]
Test Case: 374 | Input/Output: [(96 42 41 81) 41]
Test Case: 375 | Input/Output: [(64 18 28 62) 18]
Test Case: 376 | Input/Output: [(13 73 64 18) 13]
Test Case: 377 | Input/Output: [(35 32 43 83) 32]
Test Case: 378 | Input/Output: [(38 85 54 54) 38]
Test Case: 379 | Input/Output: [(59 98 97 99) 59]
Test Case: 380 | Input/Output: [(5 73 41 25) 5]
Test Case: 381 | Input/Output: [(2 33 42 76) 2]
Test Case: 382 | Input/Output: [(69 4 94 90) 4]
Test Case: 383 | Input/Output: [(61 11 60 32) 11]
Test Case: 384 | Input/Output: [(38 94 48 26) 26]
Test Case: 385 | Input/Output: [(95 15 4 62) 4]
Test Case: 386 | Input/Output: [(81 0 64 65) 0]
Test Case: 387 | Input/Output: [(89 16 40 11) 11]
Test Case: 388 | Input/Output: [(53 74 82 28) 28]
Test Case: 389 | Input/Output: [(18 98 11 84) 11]
Test Case: 390 | Input/Output: [(31 33 54 27) 27]
Test Case: 391 | Input/Output: [(26 22 60 18) 18]
Test Case: 392 | Input/Output: [(22 90 98 24) 22]
Test Case: 393 | Input/Output: [(26 49 36 47) 26]
Test Case: 394 | Input/Output: [(34 57 6 99) 6]
Test Case: 395 | Input/Output: [(26 89 19 99) 19]
Test Case: 396 | Input/Output: [(6 64 45 50) 6]
Test Case: 397 | Input/Output: [(5 22 32 15) 5]
Test Case: 398 | Input/Output: [(52 22 17 21) 17]
Test Case: 399 | Input/Output: [(24 55 99 57) 24]
Test Case: 400 | Input/Output: [(-36 37 -94 -3) -94]
Test Case: 401 | Input/Output: [(-83 -35 96 46) -83]
Test Case: 402 | Input/Output: [(86 66 26 -39) -39]
Test Case: 403 | Input/Output: [(63 23 -73 4) -73]
Test Case: 404 | Input/Output: [(7 42 -41 65) -41]
Test Case: 405 | Input/Output: [(43 9 -71 79) -71]
Test Case: 406 | Input/Output: [(-66 -93 80 -28) -93]
Test Case: 407 | Input/Output: [(25 84 42 -9) -9]
Test Case: 408 | Input/Output: [(-16 -8 -78 81) -78]
Test Case: 409 | Input/Output: [(-89 62 -72 -33) -89]
Test Case: 410 | Input/Output: [(-19 68 -68 41) -68]
Test Case: 411 | Input/Output: [(39 30 68 -7) -7]
Test Case: 412 | Input/Output: [(-3 -95 -4 93) -95]
Test Case: 413 | Input/Output: [(-40 97 -59 6) -59]
Test Case: 414 | Input/Output: [(-93 100 63 -69) -93]
Test Case: 415 | Input/Output: [(-83 -14 -57 -54) -83]
Test Case: 416 | Input/Output: [(-98 53 66 78) -98]
Test Case: 417 | Input/Output: [(70 72 54 22) 22]
Test Case: 418 | Input/Output: [(25 -73 21 -68) -73]
Test Case: 419 | Input/Output: [(1 -75 -71 17) -75]
Test Case: 420 | Input/Output: [(-7 -3 24 -29) -29]
Test Case: 421 | Input/Output: [(-18 -14 77 -40) -40]
Test Case: 422 | Input/Output: [(12 -91 29 56) -91]
Test Case: 423 | Input/Output: [(83 -33 -32 36) -33]
Test Case: 424 | Input/Output: [(38 60 30 27) 27]
Test Case: 425 | Input/Output: [(-72 -86 81 0) -86]
Test Case: 426 | Input/Output: [(-89 -51 -93 -51) -93]
Test Case: 427 | Input/Output: [(-48 -69 -93 -36) -93]
Test Case: 428 | Input/Output: [(71 -50 -7 43) -50]
Test Case: 429 | Input/Output: [(16 -29 47 77) -29]
Test Case: 430 | Input/Output: [(13 24 -48 -78) -78]
Test Case: 431 | Input/Output: [(10 -77 78 -69) -77]
Test Case: 432 | Input/Output: [(41 70 22 62) 22]
Test Case: 433 | Input/Output: [(68 68 -86 4) -86]
Test Case: 434 | Input/Output: [(-73 84 30 69) -73]
Test Case: 435 | Input/Output: [(39 -53 53 -74) -74]
Test Case: 436 | Input/Output: [(13 74 53 -41) -41]
Test Case: 437 | Input/Output: [(13 9 -42 -84) -84]
Test Case: 438 | Input/Output: [(-21 91 28 -73) -73]
Test Case: 439 | Input/Output: [(-62 39 57 -86) -86]
Test Case: 440 | Input/Output: [(-8 -51 -10 68) -51]
Test Case: 441 | Input/Output: [(-29 -75 5 -50) -75]
Test Case: 442 | Input/Output: [(4 73 -83 22) -83]
Test Case: 443 | Input/Output: [(-53 -3 7 20) -53]
Test Case: 444 | Input/Output: [(-77 56 -75 41) -77]
Test Case: 445 | Input/Output: [(70 -91 8 32) -91]
Test Case: 446 | Input/Output: [(-23 30 -56 73) -56]
Test Case: 447 | Input/Output: [(60 92 -48 62) -48]
Test Case: 448 | Input/Output: [(-29 18 8 28) -29]
Test Case: 449 | Input/Output: [(20 -30 68 23) -30]
Test Case: 450 | Input/Output: [(100 -89 3 1) -89]
Test Case: 451 | Input/Output: [(54 -23 -2 84) -23]
Test Case: 452 | Input/Output: [(-25 75 55 -70) -70]
Test Case: 453 | Input/Output: [(-28 87 -52 -100) -100]
Test Case: 454 | Input/Output: [(-80 74 -25 7) -80]
Test Case: 455 | Input/Output: [(28 91 2 9) 2]
Test Case: 456 | Input/Output: [(100 53 -10 10) -10]
Test Case: 457 | Input/Output: [(-31 56 -33 36) -33]
Test Case: 458 | Input/Output: [(96 -89 -63 28) -89]
Test Case: 459 | Input/Output: [(-11 -56 -81 0) -81]
Test Case: 460 | Input/Output: [(84 45 -88 -1) -88]
Test Case: 461 | Input/Output: [(-22 -5 -98 -64) -98]
Test Case: 462 | Input/Output: [(-6 -15 56 42) -15]
Test Case: 463 | Input/Output: [(-42 -82 96 96) -82]
Test Case: 464 | Input/Output: [(61 -90 -55 -8) -90]
Test Case: 465 | Input/Output: [(43 -56 16 -7) -56]
Test Case: 466 | Input/Output: [(-12 -60 -71 44) -71]
Test Case: 467 | Input/Output: [(52 42 81 25) 25]
Test Case: 468 | Input/Output: [(-37 -10 67 87) -37]
Test Case: 469 | Input/Output: [(46 99 59 11) 11]
Test Case: 470 | Input/Output: [(9 13 -40 45) -40]
Test Case: 471 | Input/Output: [(1 89 17 47) 1]
Test Case: 472 | Input/Output: [(-26 13 -26 -39) -39]
Test Case: 473 | Input/Output: [(-91 6 40 2) -91]
Test Case: 474 | Input/Output: [(100 -56 -18 -85) -85]
Test Case: 475 | Input/Output: [(93 85 -49 -29) -49]
Test Case: 476 | Input/Output: [(-90 -67 -94 52) -94]
Test Case: 477 | Input/Output: [(-63 35 22 -91) -91]
Test Case: 478 | Input/Output: [(80 68 8 -33) -33]
Test Case: 479 | Input/Output: [(33 20 -43 -100) -100]
Test Case: 480 | Input/Output: [(-58 -62 62 -76) -76]
Test Case: 481 | Input/Output: [(-47 62 -28 37) -47]
Test Case: 482 | Input/Output: [(38 -26 16 -77) -77]
Test Case: 483 | Input/Output: [(88 17 78 -60) -60]
Test Case: 484 | Input/Output: [(0 -22 -62 49) -62]
Test Case: 485 | Input/Output: [(-4 -77 7 -11) -77]
Test Case: 486 | Input/Output: [(56 81 -99 -81) -99]
Test Case: 487 | Input/Output: [(38 44 29 -89) -89]
Test Case: 488 | Input/Output: [(-5 76 -32 19) -32]
Test Case: 489 | Input/Output: [(-55 4 9 -3) -55]
Test Case: 490 | Input/Output: [(48 85 9 -27) -27]
Test Case: 491 | Input/Output: [(96 -62 -40 -93) -93]
Test Case: 492 | Input/Output: [(60 48 -18 79) -18]
Test Case: 493 | Input/Output: [(-46 -70 -83 43) -83]
Test Case: 494 | Input/Output: [(98 -58 88 -3) -58]
Test Case: 495 | Input/Output: [(-17 36 18 -69) -69]
Test Case: 496 | Input/Output: [(10 99 -16 -6) -16]
Test Case: 497 | Input/Output: [(36 -69 2 -41) -69]
Test Case: 498 | Input/Output: [(-8 80 -34 66) -34]
Test Case: 499 | Input/Output: [(24 -29 -99 -59) -99]
Test Case: 500 | Input/Output: [(-8 -21 4 52) -21]
Test Case: 501 | Input/Output: [(-14 -50 30 46) -50]
Test Case: 502 | Input/Output: [(71 24 58 74) 24]
Test Case: 503 | Input/Output: [(-91 96 92 -71) -91]
Test Case: 504 | Input/Output: [(70 -26 12 -97) -97]
Test Case: 505 | Input/Output: [(6 26 -10 83) -10]
Test Case: 506 | Input/Output: [(-43 6 -95 -97) -97]
Test Case: 507 | Input/Output: [(11 -85 -67 -13) -85]
Test Case: 508 | Input/Output: [(-78 -63 -56 -85) -85]
Test Case: 509 | Input/Output: [(16 96 -27 100) -27]
Test Case: 510 | Input/Output: [(43 -40 17 -44) -44]
Test Case: 511 | Input/Output: [(81 -54 68 8) -54]
Test Case: 512 | Input/Output: [(-59 -22 -53 95) -59]
Test Case: 513 | Input/Output: [(49 12 31 -51) -51]
Test Case: 514 | Input/Output: [(-93 -45 -14 75) -93]
Test Case: 515 | Input/Output: [(48 -27 16 17) -27]
Test Case: 516 | Input/Output: [(-11 -58 95 100) -58]
Test Case: 517 | Input/Output: [(82 -34 -24 80) -34]
Test Case: 518 | Input/Output: [(-49 -16 66 41) -49]
Test Case: 519 | Input/Output: [(-53 77 50 -91) -91]
Test Case: 520 | Input/Output: [(-67 -86 22 26) -86]
Test Case: 521 | Input/Output: [(58 5 59 -42) -42]
Test Case: 522 | Input/Output: [(-30 17 74 56) -30]
Test Case: 523 | Input/Output: [(57 55 85 68) 55]
Test Case: 524 | Input/Output: [(-13 -62 -19 16) -62]
Test Case: 525 | Input/Output: [(0 96 62 -84) -84]
Test Case: 526 | Input/Output: [(71 -95 3 35) -95]
Test Case: 527 | Input/Output: [(98 -47 30 -47) -47]
Test Case: 528 | Input/Output: [(-75 -55 0 12) -75]
Test Case: 529 | Input/Output: [(-79 -41 -38 -54) -79]
Test Case: 530 | Input/Output: [(-59 54 58 -17) -59]
Test Case: 531 | Input/Output: [(89 58 37 -37) -37]
Test Case: 532 | Input/Output: [(-74 44 -51 -28) -74]
Test Case: 533 | Input/Output: [(-43 -72 -50 -84) -84]
Test Case: 534 | Input/Output: [(35 95 29 -81) -81]
Test Case: 535 | Input/Output: [(-27 52 9 -76) -76]
Test Case: 536 | Input/Output: [(89 85 -69 -7) -69]
Test Case: 537 | Input/Output: [(91 13 93 -24) -24]
Test Case: 538 | Input/Output: [(40 -81 60 -98) -98]
Test Case: 539 | Input/Output: [(-75 -10 16 55) -75]
Test Case: 540 | Input/Output: [(-37 30 0 -21) -37]
Test Case: 541 | Input/Output: [(68 40 84 48) 40]
Test Case: 542 | Input/Output: [(-6 44 -66 86) -66]
Test Case: 543 | Input/Output: [(-80 87 -74 -49) -80]
Test Case: 544 | Input/Output: [(-25 -67 -6 -78) -78]
Test Case: 545 | Input/Output: [(-87 87 52 90) -87]
Test Case: 546 | Input/Output: [(47 -29 64 79) -29]
Test Case: 547 | Input/Output: [(84 30 89 -79) -79]
Test Case: 548 | Input/Output: [(99 88 -24 46) -24]
Test Case: 549 | Input/Output: [(-99 -58 -46 -37) -99]
Test Case: 550 | Input/Output: [(10 5 97 50) 5]
Test Case: 551 | Input/Output: [(-97 30 -47 -5) -97]
Test Case: 552 | Input/Output: [(54 82 48 -63) -63]
Test Case: 553 | Input/Output: [(-67 -15 45 -69) -69]
Test Case: 554 | Input/Output: [(76 76 -7 35) -7]
Test Case: 555 | Input/Output: [(-10 -81 0 -60) -81]
Test Case: 556 | Input/Output: [(-66 30 99 -5) -66]
Test Case: 557 | Input/Output: [(-4 -17 -32 19) -32]
Test Case: 558 | Input/Output: [(-72 39 -89 80) -89]
Test Case: 559 | Input/Output: [(-32 -20 -26 85) -32]
Test Case: 560 | Input/Output: [(-41 -1 29 14) -41]
Test Case: 561 | Input/Output: [(63 -2 52 90) -2]
Test Case: 562 | Input/Output: [(85 5 0 33) 0]
Test Case: 563 | Input/Output: [(-89 45 31 -65) -89]
Test Case: 564 | Input/Output: [(-26 19 -20 63) -26]
Test Case: 565 | Input/Output: [(-84 56 63 91) -84]
Test Case: 566 | Input/Output: [(78 78 90 12) 12]
Test Case: 567 | Input/Output: [(21 -9 -51 5) -51]
Test Case: 568 | Input/Output: [(52 -2 24 62) -2]
Test Case: 569 | Input/Output: [(76 -68 -19 77) -68]
Test Case: 570 | Input/Output: [(15 9 -55 -74) -74]
Test Case: 571 | Input/Output: [(-73 57 -30 2) -73]
Test Case: 572 | Input/Output: [(53 -100 -1 -12) -100]
Test Case: 573 | Input/Output: [(31 60 22 76) 22]
Test Case: 574 | Input/Output: [(-55 65 41 -47) -55]
Test Case: 575 | Input/Output: [(49 -19 87 -58) -58]
Test Case: 576 | Input/Output: [(14 -82 24 -29) -82]
Test Case: 577 | Input/Output: [(-57 83 37 -45) -57]
Test Case: 578 | Input/Output: [(40 41 58 -33) -33]
Test Case: 579 | Input/Output: [(-60 18 41 -77) -77]
Test Case: 580 | Input/Output: [(-84 -67 -25 -60) -84]
Test Case: 581 | Input/Output: [(0 -88 97 -95) -95]
Test Case: 582 | Input/Output: [(-96 -57 -62 27) -96]
Test Case: 583 | Input/Output: [(7 85 -12 -52) -52]
Test Case: 584 | Input/Output: [(56 -95 92 -36) -95]
Test Case: 585 | Input/Output: [(88 -42 38 90) -42]
Test Case: 586 | Input/Output: [(-86 -95 5 -78) -95]
Test Case: 587 | Input/Output: [(-59 -42 -4 -68) -68]
Test Case: 588 | Input/Output: [(-32 -61 -12 -27) -61]
Test Case: 589 | Input/Output: [(72 -15 -1 -24) -24]
Test Case: 590 | Input/Output: [(59 -64 27 -97) -97]
Test Case: 591 | Input/Output: [(-82 -30 32 26) -82]
Test Case: 592 | Input/Output: [(-90 -80 -28 -52) -90]
Test Case: 593 | Input/Output: [(-77 73 -2 -79) -79]
Test Case: 594 | Input/Output: [(-45 78 -66 71) -66]
Test Case: 595 | Input/Output: [(0 14 -53 86) -53]
Test Case: 596 | Input/Output: [(90 -66 -6 -40) -66]
Test Case: 597 | Input/Output: [(90 -49 -76 -95) -95]
Test Case: 598 | Input/Output: [(-30 -53 -99 62) -99]
Test Case: 599 | Input/Output: [(99 0 -81 -90) -90]
Test Case: 600 | Input/Output: [(91 -79 82 6) -79]
Test Case: 601 | Input/Output: [(100 64 -16 2) -16]
Test Case: 602 | Input/Output: [(-35 -5 67 -24) -35]
Test Case: 603 | Input/Output: [(-75 -69 -36 39) -75]
Test Case: 604 | Input/Output: [(77 82 -75 72) -75]
Test Case: 605 | Input/Output: [(60 4 -45 31) -45]
Test Case: 606 | Input/Output: [(80 30 95 -4) -4]
Test Case: 607 | Input/Output: [(25 -67 17 96) -67]
Test Case: 608 | Input/Output: [(-91 40 -15 24) -91]
Test Case: 609 | Input/Output: [(-11 -83 66 -84) -84]
Test Case: 610 | Input/Output: [(19 90 -11 58) -11]
Test Case: 611 | Input/Output: [(-74 -32 75 -27) -74]
Test Case: 612 | Input/Output: [(-19 -73 0 -19) -73]
Test Case: 613 | Input/Output: [(-39 80 -44 -25) -44]
Test Case: 614 | Input/Output: [(-34 19 27 68) -34]
Test Case: 615 | Input/Output: [(-73 97 -32 -20) -73]
Test Case: 616 | Input/Output: [(-97 -98 70 15) -98]
Test Case: 617 | Input/Output: [(20 70 66 96) 20]
Test Case: 618 | Input/Output: [(40 -79 -19 17) -79]
Test Case: 619 | Input/Output: [(34 69 -68 -92) -92]
Test Case: 620 | Input/Output: [(59 -85 27 75) -85]
Test Case: 621 | Input/Output: [(-43 -27 96 -79) -79]
Test Case: 622 | Input/Output: [(88 -99 -23 -36) -99]
Test Case: 623 | Input/Output: [(11 17 6 21) 6]
Test Case: 624 | Input/Output: [(-6 -9 -69 78) -69]
Test Case: 625 | Input/Output: [(42 75 -75 99) -75]
Test Case: 626 | Input/Output: [(-63 52 51 -90) -90]
Test Case: 627 | Input/Output: [(-67 -2 -98 -76) -98]
Test Case: 628 | Input/Output: [(28 -52 80 81) -52]
Test Case: 629 | Input/Output: [(45 9 18 -28) -28]
Test Case: 630 | Input/Output: [(-45 -97 62 28) -97]
Test Case: 631 | Input/Output: [(94 -39 -43 -14) -43]
Test Case: 632 | Input/Output: [(44 -87 31 -48) -87]
Test Case: 633 | Input/Output: [(-5 8 -54 -31) -54]
Test Case: 634 | Input/Output: [(-51 53 -89 42) -89]
Test Case: 635 | Input/Output: [(42 47 -89 69) -89]
Test Case: 636 | Input/Output: [(40 -57 -43 -57) -57]
Test Case: 637 | Input/Output: [(87 -75 -70 41) -75]
Test Case: 638 | Input/Output: [(14 81 89 89) 14]
Test Case: 639 | Input/Output: [(54 -55 -96 5) -96]
Test Case: 640 | Input/Output: [(61 -10 -57 -39) -57]
Test Case: 641 | Input/Output: [(-97 14 50 92) -97]
Test Case: 642 | Input/Output: [(-11 57 -69 89) -69]
Test Case: 643 | Input/Output: [(-88 43 72 -13) -88]
Test Case: 644 | Input/Output: [(2 100 84 27) 2]
Test Case: 645 | Input/Output: [(-56 -45 53 87) -56]
Test Case: 646 | Input/Output: [(-25 -42 50 8) -42]
Test Case: 647 | Input/Output: [(-69 6 -72 50) -72]
Test Case: 648 | Input/Output: [(42 -57 35 -32) -57]
Test Case: 649 | Input/Output: [(-23 59 98 11) -23]
Test Case: 650 | Input/Output: [(-22 96 50 -98) -98]
Test Case: 651 | Input/Output: [(-17 -10 64 73) -17]
Test Case: 652 | Input/Output: [(-16 -83 48 -41) -83]
Test Case: 653 | Input/Output: [(33 38 17 14) 14]
Test Case: 654 | Input/Output: [(9 100 26 -52) -52]
Test Case: 655 | Input/Output: [(-16 47 70 87) -16]
Test Case: 656 | Input/Output: [(90 -5 -79 49) -79]
Test Case: 657 | Input/Output: [(-56 77 100 -32) -56]
Test Case: 658 | Input/Output: [(39 82 60 -64) -64]
Test Case: 659 | Input/Output: [(-52 26 26 95) -52]
Test Case: 660 | Input/Output: [(53 -97 -92 9) -97]
Test Case: 661 | Input/Output: [(-100 -89 -42 99) -100]
Test Case: 662 | Input/Output: [(-99 1 9 19) -99]
Test Case: 663 | Input/Output: [(80 -100 -98 -38) -100]
Test Case: 664 | Input/Output: [(21 48 -24 6) -24]
Test Case: 665 | Input/Output: [(18 18 79 53) 18]
Test Case: 666 | Input/Output: [(78 -52 -16 35) -52]
Test Case: 667 | Input/Output: [(40 -62 -95 64) -95]
Test Case: 668 | Input/Output: [(-81 5 -59 50) -81]
Test Case: 669 | Input/Output: [(87 -60 -22 43) -60]
Test Case: 670 | Input/Output: [(-73 -89 0 -89) -89]
Test Case: 671 | Input/Output: [(20 -42 37 54) -42]
Test Case: 672 | Input/Output: [(34 -61 -14 60) -61]
Test Case: 673 | Input/Output: [(-17 92 -89 20) -89]
Test Case: 674 | Input/Output: [(88 94 -30 -2) -30]
Test Case: 675 | Input/Output: [(8 71 47 79) 8]
Test Case: 676 | Input/Output: [(-78 53 73 94) -78]
Test Case: 677 | Input/Output: [(40 94 45 35) 35]
Test Case: 678 | Input/Output: [(-52 -38 -68 100) -68]
Test Case: 679 | Input/Output: [(-99 -23 -36 -42) -99]
Test Case: 680 | Input/Output: [(90 9 -71 -20) -71]
Test Case: 681 | Input/Output: [(-65 -35 -58 100) -65]
Test Case: 682 | Input/Output: [(91 26 -61 -42) -61]
Test Case: 683 | Input/Output: [(77 0 58 -48) -48]
Test Case: 684 | Input/Output: [(-43 -58 -96 3) -96]
Test Case: 685 | Input/Output: [(94 12 -76 88) -76]
Test Case: 686 | Input/Output: [(88 42 27 36) 27]
Test Case: 687 | Input/Output: [(57 -83 -56 87) -83]
Test Case: 688 | Input/Output: [(71 67 85 -44) -44]
Test Case: 689 | Input/Output: [(-10 76 -19 -92) -92]
Test Case: 690 | Input/Output: [(-64 82 -28 34) -64]
Test Case: 691 | Input/Output: [(-50 29 39 -72) -72]
Test Case: 692 | Input/Output: [(-93 15 -28 -64) -93]
Test Case: 693 | Input/Output: [(3 23 11 -8) -8]
Test Case: 694 | Input/Output: [(-60 26 26 -36) -60]
Test Case: 695 | Input/Output: [(-16 -8 87 2) -16]
Test Case: 696 | Input/Output: [(-61 31 -28 -85) -85]
Test Case: 697 | Input/Output: [(-10 90 -79 -86) -86]
Test Case: 698 | Input/Output: [(-75 -62 78 -33) -75]
Test Case: 699 | Input/Output: [(16 87 42 -91) -91]
Test Case: 700 | Input/Output: [(3 5 15 -62) -62]
Test Case: 701 | Input/Output: [(-12 62 52 -97) -97]
Test Case: 702 | Input/Output: [(39 -94 -30 21) -94]
Test Case: 703 | Input/Output: [(-46 82 -33 1) -46]
Test Case: 704 | Input/Output: [(-61 97 64 -54) -61]
Test Case: 705 | Input/Output: [(-28 88 80 -54) -54]
Test Case: 706 | Input/Output: [(-44 36 -55 46) -55]
Test Case: 707 | Input/Output: [(4 -90 53 -97) -97]
Test Case: 708 | Input/Output: [(-76 9 4 2) -76]
Test Case: 709 | Input/Output: [(-93 2 -89 0) -93]
Test Case: 710 | Input/Output: [(99 11 44 2) 2]
Test Case: 711 | Input/Output: [(80 -41 91 -17) -41]
Test Case: 712 | Input/Output: [(-21 -89 77 -70) -89]
Test Case: 713 | Input/Output: [(1 57 -4 45) -4]
Test Case: 714 | Input/Output: [(-71 -30 12 -47) -71]
Test Case: 715 | Input/Output: [(-67 11 82 60) -67]
Test Case: 716 | Input/Output: [(-86 -64 23 20) -86]
Test Case: 717 | Input/Output: [(-46 93 18 -27) -46]
Test Case: 718 | Input/Output: [(-8 -90 -24 -4) -90]
Test Case: 719 | Input/Output: [(-36 50 -57 82) -57]
Test Case: 720 | Input/Output: [(62 -41 -97 -31) -97]
Test Case: 721 | Input/Output: [(-73 -65 58 -69) -73]
Test Case: 722 | Input/Output: [(73 4 91 8) 4]
Test Case: 723 | Input/Output: [(-40 74 24 -74) -74]
Test Case: 724 | Input/Output: [(-75 -93 -17 41) -93]
Test Case: 725 | Input/Output: [(20 -14 32 -55) -55]
Test Case: 726 | Input/Output: [(-15 90 -77 26) -77]
Test Case: 727 | Input/Output: [(90 -71 -81 91) -81]
Test Case: 728 | Input/Output: [(28 -84 40 -47) -84]
Test Case: 729 | Input/Output: [(-41 98 -63 57) -63]
Test Case: 730 | Input/Output: [(25 -58 -15 -99) -99]
Test Case: 731 | Input/Output: [(-30 71 19 47) -30]
Test Case: 732 | Input/Output: [(-1 52 24 -68) -68]
Test Case: 733 | Input/Output: [(-20 -45 -22 -46) -46]
Test Case: 734 | Input/Output: [(17 3 5 -97) -97]
Test Case: 735 | Input/Output: [(-58 51 31 56) -58]
Test Case: 736 | Input/Output: [(-50 -5 -79 28) -79]
Test Case: 737 | Input/Output: [(-42 25 -24 -68) -68]
Test Case: 738 | Input/Output: [(43 49 -42 -98) -98]
Test Case: 739 | Input/Output: [(47 52 -84 -42) -84]
Test Case: 740 | Input/Output: [(-95 -22 48 -47) -95]
Test Case: 741 | Input/Output: [(72 93 -89 -37) -89]
Test Case: 742 | Input/Output: [(0 -99 -68 21) -99]
Test Case: 743 | Input/Output: [(-92 88 81 -77) -92]
Test Case: 744 | Input/Output: [(3 90 78 -26) -26]
Test Case: 745 | Input/Output: [(89 67 -48 93) -48]
Test Case: 746 | Input/Output: [(-31 96 69 -22) -31]
Test Case: 747 | Input/Output: [(73 -65 -10 -9) -65]
Test Case: 748 | Input/Output: [(94 -18 -6 -26) -26]
Test Case: 749 | Input/Output: [(42 64 66 -8) -8]
Test Case: 750 | Input/Output: [(-27 87 -25 94) -27]
Test Case: 751 | Input/Output: [(-8 -91 -73 -19) -91]
Test Case: 752 | Input/Output: [(-36 18 14 -77) -77]
Test Case: 753 | Input/Output: [(98 -26 -99 -43) -99]
Test Case: 754 | Input/Output: [(94 -60 81 30) -60]
Test Case: 755 | Input/Output: [(-35 -87 44 -41) -87]
Test Case: 756 | Input/Output: [(-93 3 25 -3) -93]
Test Case: 757 | Input/Output: [(23 -19 42 -53) -53]
Test Case: 758 | Input/Output: [(-2 -88 35 37) -88]
Test Case: 759 | Input/Output: [(-10 71 -15 -100) -100]
Test Case: 760 | Input/Output: [(-93 63 -96 -16) -96]
Test Case: 761 | Input/Output: [(11 -29 35 1) -29]
Test Case: 762 | Input/Output: [(55 3 -10 -31) -31]
Test Case: 763 | Input/Output: [(68 50 63 -17) -17]
Test Case: 764 | Input/Output: [(71 0 -72 9) -72]
Test Case: 765 | Input/Output: [(-29 -22 -45 -50) -50]
Test Case: 766 | Input/Output: [(91 79 1 -9) -9]
Test Case: 767 | Input/Output: [(-100 13 13 -19) -100]
Test Case: 768 | Input/Output: [(-42 -73 -34 88) -73]
Test Case: 769 | Input/Output: [(50 18 81 34) 18]
Test Case: 770 | Input/Output: [(-12 -54 21 52) -54]
Test Case: 771 | Input/Output: [(45 -88 34 83) -88]
Test Case: 772 | Input/Output: [(-26 -99 25 27) -99]
Test Case: 773 | Input/Output: [(27 92 57 78) 27]
Test Case: 774 | Input/Output: [(10 -69 73 -6) -69]
Test Case: 775 | Input/Output: [(-4 -83 94 -22) -83]
Test Case: 776 | Input/Output: [(-34 5 43 -30) -34]
Test Case: 777 | Input/Output: [(19 15 -96 -24) -96]
Test Case: 778 | Input/Output: [(91 63 -81 6) -81]
Test Case: 779 | Input/Output: [(-18 -64 -93 -31) -93]
Test Case: 780 | Input/Output: [(72 7 17 -41) -41]
Test Case: 781 | Input/Output: [(42 65 46 -34) -34]
Test Case: 782 | Input/Output: [(93 -47 -26 -20) -47]
Test Case: 783 | Input/Output: [(-44 41 16 71) -44]
Test Case: 784 | Input/Output: [(18 -44 -71 -80) -80]
Test Case: 785 | Input/Output: [(-35 -12 44 -6) -35]
Test Case: 786 | Input/Output: [(7 71 49 -12) -12]
Test Case: 787 | Input/Output: [(-50 7 -42 -4) -50]
Test Case: 788 | Input/Output: [(-27 -98 64 86) -98]
Test Case: 789 | Input/Output: [(-100 56 -61 -58) -100]
Test Case: 790 | Input/Output: [(27 -64 28 18) -64]
Test Case: 791 | Input/Output: [(90 88 45 96) 45]
Test Case: 792 | Input/Output: [(9 76 -36 82) -36]
Test Case: 793 | Input/Output: [(-37 33 6 70) -37]
Test Case: 794 | Input/Output: [(96 -99 7 -96) -99]
Test Case: 795 | Input/Output: [(-89 56 57 -39) -89]
Test Case: 796 | Input/Output: [(65 -82 -48 -69) -82]
Test Case: 797 | Input/Output: [(85 -88 -82 -70) -88]
Test Case: 798 | Input/Output: [(-57 39 66 -15) -57]
Test Case: 799 | Input/Output: [(-53 -55 34 55) -55]
Test Case: 800 | Input/Output: [(-38 -89 23 73) -89]
Test Case: 801 | Input/Output: [(97 95 81 -20) -20]
Test Case: 802 | Input/Output: [(-79 98 -89 91) -89]
Test Case: 803 | Input/Output: [(-29 -67 -67 64) -67]
Test Case: 804 | Input/Output: [(34 18 62 15) 15]
Test Case: 805 | Input/Output: [(-41 1 62 44) -41]
Test Case: 806 | Input/Output: [(45 -52 -22 -82) -82]
Test Case: 807 | Input/Output: [(48 -75 59 -78) -78]
Test Case: 808 | Input/Output: [(67 93 -53 -7) -53]
Test Case: 809 | Input/Output: [(-46 -95 -32 56) -95]
Test Case: 810 | Input/Output: [(97 -72 86 14) -72]
Test Case: 811 | Input/Output: [(-66 -89 20 -63) -89]
Test Case: 812 | Input/Output: [(68 94 -86 37) -86]
Test Case: 813 | Input/Output: [(-48 -5 92 -88) -88]
Test Case: 814 | Input/Output: [(76 61 89 -3) -3]
Test Case: 815 | Input/Output: [(-49 78 27 -84) -84]
Test Case: 816 | Input/Output: [(-67 -18 19 -64) -67]
Test Case: 817 | Input/Output: [(41 -66 -11 42) -66]
Test Case: 818 | Input/Output: [(66 66 16 62) 16]
Test Case: 819 | Input/Output: [(3 -12 79 -80) -80]
Test Case: 820 | Input/Output: [(32 -41 41 -5) -41]
Test Case: 821 | Input/Output: [(-21 88 26 13) -21]
Test Case: 822 | Input/Output: [(-85 72 -13 100) -85]
Test Case: 823 | Input/Output: [(85 18 -34 -45) -45]
Test Case: 824 | Input/Output: [(-55 -28 94 31) -55]
Test Case: 825 | Input/Output: [(36 -84 95 65) -84]
Test Case: 826 | Input/Output: [(53 -12 -14 -3) -14]
Test Case: 827 | Input/Output: [(88 23 -62 -25) -62]
Test Case: 828 | Input/Output: [(-23 71 10 91) -23]
Test Case: 829 | Input/Output: [(38 87 -98 63) -98]
Test Case: 830 | Input/Output: [(97 57 -62 33) -62]
Test Case: 831 | Input/Output: [(-57 43 -55 -37) -57]
Test Case: 832 | Input/Output: [(-20 -20 3 -67) -67]
Test Case: 833 | Input/Output: [(-72 -11 -84 -64) -84]
Test Case: 834 | Input/Output: [(-46 43 -7 92) -46]
Test Case: 835 | Input/Output: [(0 83 30 -16) -16]
Test Case: 836 | Input/Output: [(0 -5 92 -51) -51]
Test Case: 837 | Input/Output: [(-70 -77 -68 -15) -77]
Test Case: 838 | Input/Output: [(60 -45 49 -24) -45]
Test Case: 839 | Input/Output: [(92 -53 18 64) -53]
Test Case: 840 | Input/Output: [(-76 58 -40 -10) -76]
Test Case: 841 | Input/Output: [(49 23 -37 -82) -82]
Test Case: 842 | Input/Output: [(71 -82 -69 85) -82]
Test Case: 843 | Input/Output: [(41 -69 -38 55) -69]
Test Case: 844 | Input/Output: [(71 44 -35 81) -35]
Test Case: 845 | Input/Output: [(-23 71 -77 -90) -90]
Test Case: 846 | Input/Output: [(44 -74 -84 -48) -84]
Test Case: 847 | Input/Output: [(-59 -52 -18 21) -59]
Test Case: 848 | Input/Output: [(70 44 -74 -34) -74]
Test Case: 849 | Input/Output: [(19 -77 70 -8) -77]
Test Case: 850 | Input/Output: [(-30 40 8 26) -30]
Test Case: 851 | Input/Output: [(87 36 42 -27) -27]
Test Case: 852 | Input/Output: [(74 94 -64 -85) -85]
Test Case: 853 | Input/Output: [(40 -34 -37 -23) -37]
Test Case: 854 | Input/Output: [(-96 63 -70 -23) -96]
Test Case: 855 | Input/Output: [(42 -32 22 25) -32]
Test Case: 856 | Input/Output: [(16 -93 -4 -12) -93]
Test Case: 857 | Input/Output: [(-79 -82 84 48) -82]
Test Case: 858 | Input/Output: [(81 -56 -76 -84) -84]
Test Case: 859 | Input/Output: [(66 -77 -83 -87) -87]
Test Case: 860 | Input/Output: [(63 -83 21 -83) -83]
Test Case: 861 | Input/Output: [(-27 -92 77 40) -92]
Test Case: 862 | Input/Output: [(13 -29 -77 -29) -77]
Test Case: 863 | Input/Output: [(-100 13 -93 -58) -100]
Test Case: 864 | Input/Output: [(-45 56 -43 52) -45]
Test Case: 865 | Input/Output: [(-27 -16 -2 -89) -89]
Test Case: 866 | Input/Output: [(58 79 14 70) 14]
Test Case: 867 | Input/Output: [(-72 32 -12 48) -72]
Test Case: 868 | Input/Output: [(48 -2 94 -8) -8]
Test Case: 869 | Input/Output: [(-19 77 53 68) -19]
Test Case: 870 | Input/Output: [(-30 4 10 85) -30]
Test Case: 871 | Input/Output: [(9 -79 81 -24) -79]
Test Case: 872 | Input/Output: [(45 -51 -46 -59) -59]
Test Case: 873 | Input/Output: [(-32 15 53 82) -32]
Test Case: 874 | Input/Output: [(-54 -19 -35 -91) -91]
Test Case: 875 | Input/Output: [(-73 -55 -79 -34) -79]
Test Case: 876 | Input/Output: [(59 81 25 63) 25]
Test Case: 877 | Input/Output: [(-3 44 -82 87) -82]
Test Case: 878 | Input/Output: [(92 44 83 67) 44]
Test Case: 879 | Input/Output: [(-4 2 97 32) -4]
Test Case: 880 | Input/Output: [(-68 -14 7 -32) -68]
Test Case: 881 | Input/Output: [(-30 83 100 63) -30]
Test Case: 882 | Input/Output: [(-62 76 49 57) -62]
Test Case: 883 | Input/Output: [(89 20 -23 -49) -49]
Test Case: 884 | Input/Output: [(-13 0 -76 -69) -76]
Test Case: 885 | Input/Output: [(60 78 95 99) 60]
Test Case: 886 | Input/Output: [(-98 98 -61 50) -98]
Test Case: 887 | Input/Output: [(-26 2 -4 -35) -35]
Test Case: 888 | Input/Output: [(-12 -75 -33 -42) -75]
Test Case: 889 | Input/Output: [(-8 91 45 82) -8]
Test Case: 890 | Input/Output: [(63 8 17 79) 8]
Test Case: 891 | Input/Output: [(-100 32 -3 2) -100]
Test Case: 892 | Input/Output: [(27 24 28 90) 24]
Test Case: 893 | Input/Output: [(-99 -39 -53 -25) -99]
Test Case: 894 | Input/Output: [(-77 45 73 81) -77]
Test Case: 895 | Input/Output: [(68 -11 71 -26) -26]
Test Case: 896 | Input/Output: [(-1 59 93 -19) -19]
Test Case: 897 | Input/Output: [(-56 -21 18 84) -56]
Test Case: 898 | Input/Output: [(21 63 69 74) 21]
Test Case: 899 | Input/Output: [(9 -38 -96 65) -96]
Test Case: 900 | Input/Output: [(85 -52 -61 21) -61]
Test Case: 901 | Input/Output: [(72 92 51 -7) -7]
Test Case: 902 | Input/Output: [(-12 -63 9 66) -63]
Test Case: 903 | Input/Output: [(6 42 36 -99) -99]
Test Case: 904 | Input/Output: [(-79 35 -49 26) -79]
Test Case: 905 | Input/Output: [(-58 -27 39 27) -58]
Test Case: 906 | Input/Output: [(-84 -78 -93 -38) -93]
Test Case: 907 | Input/Output: [(-26 14 78 82) -26]
Test Case: 908 | Input/Output: [(61 85 -5 85) -5]
Test Case: 909 | Input/Output: [(-16 -6 16 -30) -30]
Test Case: 910 | Input/Output: [(-53 42 60 -30) -53]
Test Case: 911 | Input/Output: [(-98 66 7 53) -98]
Test Case: 912 | Input/Output: [(-29 -52 58 54) -52]
Test Case: 913 | Input/Output: [(7 -16 63 -46) -46]
Test Case: 914 | Input/Output: [(-49 66 53 -45) -49]
Test Case: 915 | Input/Output: [(5 -61 39 64) -61]
Test Case: 916 | Input/Output: [(68 -32 -76 31) -76]
Test Case: 917 | Input/Output: [(-17 13 -60 64) -60]
Test Case: 918 | Input/Output: [(28 -12 27 -8) -12]
Test Case: 919 | Input/Output: [(29 -30 19 -68) -68]
Test Case: 920 | Input/Output: [(29 94 -92 5) -92]
Test Case: 921 | Input/Output: [(-19 -89 -70 95) -89]
Test Case: 922 | Input/Output: [(-83 -44 59 38) -83]
Test Case: 923 | Input/Output: [(35 93 48 51) 35]
Test Case: 924 | Input/Output: [(51 24 96 -30) -30]
Test Case: 925 | Input/Output: [(21 72 -9 -19) -19]
Test Case: 926 | Input/Output: [(98 1 25 38) 1]
Test Case: 927 | Input/Output: [(-21 61 -65 -72) -72]
Test Case: 928 | Input/Output: [(-12 48 -52 77) -52]
Test Case: 929 | Input/Output: [(19 -47 28 45) -47]
Test Case: 930 | Input/Output: [(-14 -71 29 60) -71]
Test Case: 931 | Input/Output: [(-2 -36 60 -92) -92]
Test Case: 932 | Input/Output: [(64 37 69 48) 37]
Test Case: 933 | Input/Output: [(-44 70 -66 19) -66]
Test Case: 934 | Input/Output: [(54 -12 -92 20) -92]
Test Case: 935 | Input/Output: [(-52 56 -5 60) -52]
Test Case: 936 | Input/Output: [(17 7 -17 64) -17]
Test Case: 937 | Input/Output: [(28 52 17 29) 17]
Test Case: 938 | Input/Output: [(-75 91 -22 -96) -96]
Test Case: 939 | Input/Output: [(-40 -91 -78 -71) -91]
Test Case: 940 | Input/Output: [(55 -42 -41 -13) -42]
Test Case: 941 | Input/Output: [(18 5 -91 -94) -94]
Test Case: 942 | Input/Output: [(27 79 22 5) 5]
Test Case: 943 | Input/Output: [(97 -38 79 84) -38]
Test Case: 944 | Input/Output: [(-52 52 48 13) -52]
Test Case: 945 | Input/Output: [(48 -60 -69 -26) -69]
Test Case: 946 | Input/Output: [(88 -35 -49 71) -49]
Test Case: 947 | Input/Output: [(20 19 -34 21) -34]
Test Case: 948 | Input/Output: [(-64 83 87 28) -64]
Test Case: 949 | Input/Output: [(-10 55 95 -25) -25]
Test Case: 950 | Input/Output: [(85 20 54 -20) -20]
Test Case: 951 | Input/Output: [(-99 -39 48 -16) -99]
Test Case: 952 | Input/Output: [(-12 -85 -32 -32) -85]
Test Case: 953 | Input/Output: [(74 -53 83 -15) -53]
Test Case: 954 | Input/Output: [(70 -74 72 -26) -74]
Test Case: 955 | Input/Output: [(31 71 -53 63) -53]
Test Case: 956 | Input/Output: [(-14 77 92 -25) -25]
Test Case: 957 | Input/Output: [(64 -91 -7 77) -91]
Test Case: 958 | Input/Output: [(-69 -54 52 49) -69]
Test Case: 959 | Input/Output: [(-21 68 94 88) -21]
Test Case: 960 | Input/Output: [(-3 -45 25 42) -45]
Test Case: 961 | Input/Output: [(-1 -71 -35 32) -71]
Test Case: 962 | Input/Output: [(-50 -56 64 -19) -56]
Test Case: 963 | Input/Output: [(65 -20 97 -15) -20]
Test Case: 964 | Input/Output: [(-8 22 -91 -7) -91]
Test Case: 965 | Input/Output: [(44 71 -26 -46) -46]
Test Case: 966 | Input/Output: [(17 -14 -44 -19) -44]
Test Case: 967 | Input/Output: [(1 -50 18 -15) -50]
Test Case: 968 | Input/Output: [(-94 -55 69 -41) -94]
Test Case: 969 | Input/Output: [(-8 8 97 -28) -28]
Test Case: 970 | Input/Output: [(58 -80 40 96) -80]
Test Case: 971 | Input/Output: [(-22 58 42 6) -22]
Test Case: 972 | Input/Output: [(-12 -98 -88 73) -98]
Test Case: 973 | Input/Output: [(1 21 -41 -1) -41]
Test Case: 974 | Input/Output: [(-40 30 -22 92) -40]
Test Case: 975 | Input/Output: [(-37 63 -71 -35) -71]
Test Case: 976 | Input/Output: [(-35 -55 -76 89) -76]
Test Case: 977 | Input/Output: [(6 -44 31 -70) -70]
Test Case: 978 | Input/Output: [(4 -69 80 33) -69]
Test Case: 979 | Input/Output: [(-69 13 38 76) -69]
Test Case: 980 | Input/Output: [(56 52 75 -12) -12]
Test Case: 981 | Input/Output: [(40 -52 55 8) -52]
Test Case: 982 | Input/Output: [(27 57 86 19) 19]
Test Case: 983 | Input/Output: [(75 18 20 -44) -44]
Test Case: 984 | Input/Output: [(11 -16 39 59) -16]
Test Case: 985 | Input/Output: [(-38 24 25 -49) -49]
Test Case: 986 | Input/Output: [(-84 -66 29 -70) -84]
Test Case: 987 | Input/Output: [(99 64 87 92) 64]
Test Case: 988 | Input/Output: [(44 95 -68 19) -68]
Test Case: 989 | Input/Output: [(-30 -16 -85 98) -85]
Test Case: 990 | Input/Output: [(51 80 69 79) 51]
Test Case: 991 | Input/Output: [(61 98 -23 -90) -90]
Test Case: 992 | Input/Output: [(89 23 32 96) 23]
Test Case: 993 | Input/Output: [(29 -43 -53 -89) -89]
Test Case: 994 | Input/Output: [(82 38 46 -57) -57]
Test Case: 995 | Input/Output: [(-10 94 37 -75) -75]
Test Case: 996 | Input/Output: [(-75 -42 -16 -65) -75]
Test Case: 997 | Input/Output: [(-32 28 92 62) -32]
Test Case: 998 | Input/Output: [(-90 -51 94 -89) -90]
Test Case: 999 | Input/Output: [(70 5 -77 69) -77]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -4 110 -56 -60 -115 -47 96 -15 110 -80 -38 -11 -40 -51 -29 -117
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[82 82 82 18] 18] [[-46 -46 -95 -46] -95] [[-4 -4 -4 67] -4] [[18 18 18 -24] -24] [[-1 73 73 73] -1] [[16 16 16 61] 16] [[37 68 68 68] 37] [[27 27 -59 27] -59] [[49 -38 49 49] -38] [[-53 95 95 95] -53] [(27 27 27 27) 27] [(91 91 91 91) 91] [(-15 -15 -15 -15) -15] [(27 27 27 27) 27] [(-3 -3 -3 -3) -3] [(30 20 29 12) 12] [(62 45 91 91) 45] [(92 97 11 16) 11] [(52 54 9 24) 9] [(36 43 67 66) 36] [(25 9 34 22) 9] [(85 91 51 60) 51] [(95 27 55 56) 27] [(86 21 74 50) 21] [(51 63 79 51) 51] [(2 93 67 33) 2] [(70 22 84 5) 5] [(26 34 4 66) 4] [(71 67 4 1) 1] [(100 35 31 10) 10] [(98 50 64 87) 50] [(59 29 48 24) 24] [(53 79 49 0) 0] [(92 60 25 28) 25] [(78 30 57 27) 27] [(36 -77 -45 -26) -77] [(-38 -63 63 87) -63] [(-76 -8 -92 6) -92] [(87 -34 -36 31) -36] [(-63 -64 -73 8) -73] [(-28 -17 -21 -58) -58] [(64 95 -55 12) -55] [(-62 -90 -78 -7) -90] [(62 -50 -60 39) -60] [(47 100 -92 -71) -92] [(32 -14 11 -21) -21] [(-69 -30 -41 -85) -85] [(66 -59 -2 80) -59] [(96 86 70 -17) -17] [(-4 92 -94 -57) -94] [(14 73 85 4) 4] [(-53 79 19 67) -53] [(40 -63 -77 64) -77] [(36 -61 -40 8) -61] [(92 30 -12 -69) -69] [(8 -42 -11 18) -42] [(-85 86 76 -73) -85] [(-96 96 77 -29) -96] [(-46 -20 44 -40) -46] [(-28 -91 -8 -84) -91] [(3 -45 85 18) -45] [(-91 13 -77 -30) -91] [(-98 90 -90 3) -98] [(26 -22 -56 39) -56] [(-62 -14 -93 -23) -93] [(-44 74 -32 1) -44] [(27 -51 76 14) -51] [(32 25 -73 -8) -73] [(-51 91 -39 20) -51] [(-46 -52 -91 -30) -91] [(-6 51 72 -89) -89] [(81 -36 82 66) -36] [(-20 -26 -4 -31) -31] [(14 72 -47 -57) -57] [(-96 -17 78 -61) -96] [(56 -43 54 92) -43] [(-62 13 -100 78) -100] [(-95 86 -51 -67) -95] [(-28 34 59 97) -28] [(85 61 -14 79) -14] [(-56 85 -57 -93) -93] [(-85 -71 -48 -88) -88] [(-50 -36 -6 17) -50] [(48 17 -44 -48) -48] [(44 33 5 74) 5] [(30 53 61 -25) -25] [(79 -20 -96 -96) -96] [(81 69 -68 33) -68] [(-61 -26 34 51) -61] [(-70 -59 -80 100) -80] [(9 -19 -39 77) -39] [(17 -52 80 15) -52] [(-27 -31 36 98) -31] [(-87 -70 -88 17) -88] [(57 -6 -78 -47) -78])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 30                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 92                 
Correct output: 9                   | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 25                 
Correct output: 51                  | Program output: 85                 
Correct output: 27                  | Program output: 95                 
Correct output: 21                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 70                 
Correct output: 4                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 10                  | Program output: 100                
Correct output: 50                  | Program output: 98                 
Correct output: 24                  | Program output: 59                 
Correct output: 0                   | Program output: 53                 
Correct output: 25                  | Program output: 92                 
Correct output: 27                  | Program output: 78                 
Correct output: -77                 | Program output: 36                 
Correct output: -63                 | Program output: -38                
Correct output: -92                 | Program output: -76                
Correct output: -36                 | Program output: 87                 
Correct output: -73                 | Program output: -63                
Correct output: -58                 | Program output: -28                
Correct output: -55                 | Program output: 64                 
Correct output: -90                 | Program output: -62                
Correct output: -60                 | Program output: 62                 
Correct output: -92                 | Program output: 47                 
Correct output: -21                 | Program output: 32                 
Correct output: -85                 | Program output: -69                
Correct output: -59                 | Program output: 66                 
Correct output: -17                 | Program output: 96                 
Correct output: -94                 | Program output: -4                 
Correct output: 4                   | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: 40                 
Correct output: -61                 | Program output: 36                 
Correct output: -69                 | Program output: 92                 
Correct output: -42                 | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -28                
Correct output: -45                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 26                 
Correct output: -93                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 27                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -46                
Correct output: -89                 | Program output: -6                 
Correct output: -36                 | Program output: 81                 
Correct output: -31                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 56                 
Correct output: -100                | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: 85                 
Correct output: -93                 | Program output: -56                
Correct output: -88                 | Program output: -85                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: 48                 
Correct output: 5                   | Program output: 44                 
Correct output: -25                 | Program output: 30                 
Correct output: -96                 | Program output: 79                 
Correct output: -68                 | Program output: 81                 
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -70                
Correct output: -39                 | Program output: 9                  
Correct output: -52                 | Program output: 17                 
Correct output: -31                 | Program output: -27                
Correct output: -88                 | Program output: -87                
Correct output: -78                 | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction -90} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tagged_198} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction 28} {:close 0, :instruction tag_integer_373} {:close 1, :instruction 45} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_749} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction -70} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank})
Lexicase best program: (boolean_stackdepth exec_if (boolean_frominteger exec_dup (integer_add -90 in1 boolean_dup) print_integer exec_pop () exec_do*count (exec_dup (boolean_dup_times) tagged_198 integer_lt integer_add 28) tag_integer_373 45) (exec_dup (boolean_and) exec_k_when_autoconstructing (integer_min boolean_rot boolean_xor integer_lte boolean_dup_times integer_dup_items in1 integer_pop boolean_dup_items exec_yankdup boolean_eq exec_empty integer_fromboolean exec_swap (exec_rot () () (boolean_yank exec_rot (in3 integer_gt exec_flush boolean_dup) (integer_add exec_yankdup exec_do*times (exec_swap (exec_do*times () exec_while (integer_add boolean_and boolean_or exec_rot (boolean_stackdepth integer_sub exec_yank exec_yankdup tagged_749 boolean_yankdup) () (integer_lte integer_yankdup exec_y () in1) exec_when (boolean_rot) integer_mod integer_swap integer_lte in1 integer_dec) exec_flush) (exec_swap (in4 integer_inc) (print_newline integer_eq exec_swap (exec_empty -70 exec_dup_times (integer_sub boolean_and integer_lt integer_yank)) ())))) ())) ()) ()))
Lexicase best errors: [0 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 117
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction -90} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tagged_198} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction 28} {:close 0, :instruction tag_integer_373} {:close 1, :instruction 45} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_749} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction -70} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank})
Zero cases best program: (boolean_stackdepth exec_if (boolean_frominteger exec_dup (integer_add -90 in1 boolean_dup) print_integer exec_pop () exec_do*count (exec_dup (boolean_dup_times) tagged_198 integer_lt integer_add 28) tag_integer_373 45) (exec_dup (boolean_and) exec_k_when_autoconstructing (integer_min boolean_rot boolean_xor integer_lte boolean_dup_times integer_dup_items in1 integer_pop boolean_dup_items exec_yankdup boolean_eq exec_empty integer_fromboolean exec_swap (exec_rot () () (boolean_yank exec_rot (in3 integer_gt exec_flush boolean_dup) (integer_add exec_yankdup exec_do*times (exec_swap (exec_do*times () exec_while (integer_add boolean_and boolean_or exec_rot (boolean_stackdepth integer_sub exec_yank exec_yankdup tagged_749 boolean_yankdup) () (integer_lte integer_yankdup exec_y () in1) exec_when (boolean_rot) integer_mod integer_swap integer_lte in1 integer_dec) exec_flush) (exec_swap (in4 integer_inc) (print_newline integer_eq exec_swap (exec_empty -70 exec_dup_times (integer_sub boolean_and integer_lt integer_yank)) ())))) ())) ()) ()))
Zero cases best errors: [0 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 117
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 1 3 6 6 1 2 5 5 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 1 3 6 6 1 2 5 5 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction -85} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction tagged_462} {:close 0, :instruction exec_k} {:close 1, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_integer_814})
Best program: (integer_yank boolean_swap print_boolean exec_noop boolean_not in1 print_integer integer_rot -85 integer_div boolean_xor integer_rot integer_mod in1 integer_div integer_stackdepth integer_div integer_dup integer_swap integer_max exec_empty integer_fromboolean tagged_462 exec_k (in4) (print_boolean integer_flush integer_dup integer_min) integer_min integer_flush tag_integer_814)
Errors: [0 1 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 32
Size: 35
Percent parens: 0.086
--- Population Statistics ---
Average total errors in population: 9.965
Median total errors in population: 10
Error averages by case: (0.997 0.999 0.997 0.994 0.994 0.999 0.998 0.995 0.995 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.057
Average program size in population (points): 68.979
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 493732
--- Timings ---
Current time: 1559583339683 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 30.5%
Fitness Testing:      1.6 seconds, 65.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: 67                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 61                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 16                 
Correct output: 9                   | Program output: 24                 
Correct output: 36                  | Program output: 66                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 60                 
Correct output: 27                  | Program output: 56                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -26                
Correct output: -63                 | Program output: 87                 
Correct output: -92                 | Program output: 6                  
Correct output: -36                 | Program output: 31                 
Correct output: -73                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: 12                 
Correct output: -90                 | Program output: -7                 
Correct output: -60                 | Program output: 39                 
Correct output: -92                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: 80                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: 67                 
Correct output: -77                 | Program output: 64                 
Correct output: -61                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 18                 
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -30                
Correct output: -98                 | Program output: 3                  
Correct output: -56                 | Program output: 39                 
Correct output: -93                 | Program output: -23                
Correct output: -44                 | Program output: 1                  
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -8                 
Correct output: -51                 | Program output: 20                 
Correct output: -91                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output: 92                 
Correct output: -100                | Program output: 78                 
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output: 97                 
Correct output: -14                 | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: 17                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 74                 
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: 33                 
Correct output: -61                 | Program output: 51                 
Correct output: -80                 | Program output: 100                
Correct output: -39                 | Program output: 77                 
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: 98                 
Correct output: -88                 | Program output: 17                 
Correct output: -78                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction 29} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_pop (boolean_empty exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_k (exec_s (29 boolean_frominteger integer_div exec_flush integer_max integer_pop) (exec_do*while (integer_fromboolean boolean_eq) exec_dup_times () integer_shove integer_div boolean_yank integer_min) (integer_flush) print_integer exec_dup (exec_y_when_autoconstructing () integer_rot integer_dup_times) boolean_swap integer_div integer_fromboolean) (exec_y (boolean_or integer_empty exec_shove ()) integer_lte)) (integer_fromboolean print_boolean) () boolean_flush integer_empty integer_pop) integer_pop in4 in1 boolean_eq exec_swap (exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_yankdup exec_swap (-28 exec_dup_items) () in4 exec_dup (exec_k (exec_when () integer_max boolean_dup_times print_integer integer_mod integer_empty) (in1 exec_s (exec_flush) (exec_do*range (boolean_frominteger in3 boolean_shove boolean_dup_times exec_eq exec_stackdepth exec_yankdup boolean_dup_times integer_rot) exec_do*count (integer_yank) exec_dup_times (integer_yankdup exec_stackdepth) exec_s_when_autoconstructing () () ()) ()))) () ()) ())
Lexicase best errors: [1 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 119
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction 29} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_pop (boolean_empty exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_k (exec_s (29 boolean_frominteger integer_div exec_flush integer_max integer_pop) (exec_do*while (integer_fromboolean boolean_eq) exec_dup_times () integer_shove integer_div boolean_yank integer_min) (integer_flush) print_integer exec_dup (exec_y_when_autoconstructing () integer_rot integer_dup_times) boolean_swap integer_div integer_fromboolean) (exec_y (boolean_or integer_empty exec_shove ()) integer_lte)) (integer_fromboolean print_boolean) () boolean_flush integer_empty integer_pop) integer_pop in4 in1 boolean_eq exec_swap (exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_yankdup exec_swap (-28 exec_dup_items) () in4 exec_dup (exec_k (exec_when () integer_max boolean_dup_times print_integer integer_mod integer_empty) (in1 exec_s (exec_flush) (exec_do*range (boolean_frominteger in3 boolean_shove boolean_dup_times exec_eq exec_stackdepth exec_yankdup boolean_dup_times integer_rot) exec_do*count (integer_yank) exec_dup_times (integer_yankdup exec_stackdepth) exec_s_when_autoconstructing () () ()) ()))) () ()) ())
Zero cases best errors: [1 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 119
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 240 351 241 8 241 241 7 7 240)
Population mean number of elite cases: 1.58
Count of perfect (error zero) individuals by case: (7 240 351 241 8 241 241 7 7 240)
Population mean number of perfect (error zero) cases: 1.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction -66} {:close 0, :instruction tagged_374} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 1, :instruction exec_k} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_max})
Best program: (exec_when (boolean_invert_second_then_and exec_do*count (integer_fromboolean boolean_flush boolean_invert_first_then_and in4 exec_when (print_integer integer_gte integer_stackdepth integer_dup exec_yankdup boolean_pop integer_gte boolean_shove) integer_dec integer_yank) -66 tagged_374 boolean_dup boolean_invert_second_then_and boolean_yank exec_y (exec_stackdepth integer_mod) integer_shove exec_while (integer_lt exec_do*count (integer_dup_items integer_empty) boolean_dup) exec_y () exec_dup_items integer_gt exec_swap (exec_while (integer_inc) integer_fromboolean in4 integer_dup_items exec_dup (exec_shove (exec_s () (boolean_dup integer_gt integer_mult boolean_not boolean_yankdup exec_stackdepth exec_y_when_autoconstructing (integer_lt) integer_max) (exec_noop integer_lte boolean_xor exec_noop print_newline integer_mult boolean_invert_first_then_and in3 exec_eq print_integer exec_when (integer_eq boolean_invert_first_then_and boolean_yank boolean_frominteger integer_inc integer_dec boolean_dup_items) boolean_rot exec_swap () (exec_when (integer_max print_integer)) integer_gt exec_when (integer_inc boolean_shove exec_empty exec_k () (exec_k () (in1 exec_s () (exec_empty integer_max) ()))))))) ()))
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 88
Size: 117
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 8.417
Median total errors in population: 9
Error averages by case: (0.993 0.76 0.649 0.759 0.992 0.759 0.759 0.993 0.993 0.76)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.724
Average program size in population (points): 66.081
Average percent parens in population: 0.246
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.475
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.521
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1048781
--- Timings ---
Current time: 1559583342878 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.3 seconds, 44.2%
Fitness Testing:      2.4 seconds, 45.4%
Report:               0.4 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: 67                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 61                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 16                 
Correct output: 9                   | Program output: 24                 
Correct output: 36                  | Program output: 66                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 60                 
Correct output: 27                  | Program output: 56                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -26                
Correct output: -63                 | Program output: 87                 
Correct output: -92                 | Program output: 6                  
Correct output: -36                 | Program output: 31                 
Correct output: -73                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: 12                 
Correct output: -90                 | Program output: -7                 
Correct output: -60                 | Program output: 39                 
Correct output: -92                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: 80                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: 67                 
Correct output: -77                 | Program output: 64                 
Correct output: -61                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 18                 
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -30                
Correct output: -98                 | Program output: 3                  
Correct output: -56                 | Program output: 39                 
Correct output: -93                 | Program output: -23                
Correct output: -44                 | Program output: 1                  
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -8                 
Correct output: -51                 | Program output: 20                 
Correct output: -91                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output: 92                 
Correct output: -100                | Program output: 78                 
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output: 97                 
Correct output: -14                 | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: 17                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 74                 
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: 33                 
Correct output: -61                 | Program output: 51                 
Correct output: -80                 | Program output: 100                
Correct output: -39                 | Program output: 77                 
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: 98                 
Correct output: -88                 | Program output: 17                 
Correct output: -78                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction -66} {:close 0, :instruction tagged_374} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc})
Lexicase best program: (exec_when (boolean_invert_second_then_and exec_do*count (integer_fromboolean boolean_flush boolean_invert_first_then_and in4 exec_when (print_integer integer_gte integer_stackdepth integer_dup exec_yankdup boolean_pop integer_gte boolean_shove) integer_dec integer_yank) -66 tagged_374 boolean_dup boolean_invert_second_then_and boolean_yank exec_y (exec_stackdepth integer_min) integer_shove exec_while (integer_lt exec_do*count (integer_dup_items integer_empty) boolean_dup) exec_y () exec_dup_items integer_gt exec_swap (exec_while (integer_inc) integer_fromboolean in4 integer_dup_items exec_dup (exec_shove (exec_s () (boolean_dup integer_gt integer_mult boolean_not boolean_yankdup exec_stackdepth exec_y_when_autoconstructing (integer_lt) integer_max) (exec_noop integer_lte boolean_xor exec_noop print_newline integer_mult boolean_invert_first_then_and in3 exec_eq print_integer exec_when (integer_eq boolean_invert_first_then_and boolean_yank boolean_frominteger integer_inc integer_dec boolean_dup_items) boolean_rot exec_swap () (exec_when (integer_max print_integer)) integer_gt exec_when (integer_inc))))) ()))
Lexicase best errors: [1 0 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 102
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction -66} {:close 0, :instruction tagged_374} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc})
Zero cases best program: (exec_when (boolean_invert_second_then_and exec_do*count (integer_fromboolean boolean_flush boolean_invert_first_then_and in4 exec_when (print_integer integer_gte integer_stackdepth integer_dup exec_yankdup boolean_pop integer_gte boolean_shove) integer_dec integer_yank) -66 tagged_374 boolean_dup boolean_invert_second_then_and boolean_yank exec_y (exec_stackdepth integer_min) integer_shove exec_while (integer_lt exec_do*count (integer_dup_items integer_empty) boolean_dup) exec_y () exec_dup_items integer_gt exec_swap (exec_while (integer_inc) integer_fromboolean in4 integer_dup_items exec_dup (exec_shove (exec_s () (boolean_dup integer_gt integer_mult boolean_not boolean_yankdup exec_stackdepth exec_y_when_autoconstructing (integer_lt) integer_max) (exec_noop integer_lte boolean_xor exec_noop print_newline integer_mult boolean_invert_first_then_and in3 exec_eq print_integer exec_when (integer_eq boolean_invert_first_then_and boolean_yank boolean_frominteger integer_inc integer_dec boolean_dup_items) boolean_rot exec_swap () (exec_when (integer_max print_integer)) integer_gt exec_when (integer_inc))))) ()))
Zero cases best errors: [1 0 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 102
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 408 1000 468 408 440 408 408 440 1000)
Population mean number of elite cases: 5.98
Count of perfect (error zero) individuals by case: (0 408 0 468 408 440 408 408 440 0)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction 29} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_yank exec_pop (boolean_empty exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_k (exec_s (29 boolean_frominteger integer_div exec_flush integer_max integer_pop) (exec_do*while (integer_fromboolean boolean_eq) exec_dup_times () integer_shove integer_div boolean_yank integer_min) (integer_flush) print_integer exec_dup (exec_y_when_autoconstructing () integer_rot integer_dup_times) boolean_swap integer_div integer_fromboolean) (exec_y (boolean_or integer_empty exec_shove ()) exec_stackdepth)) (integer_fromboolean print_boolean) () boolean_flush integer_empty integer_pop) integer_pop in4 in1 boolean_eq exec_swap (exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_yankdup exec_swap (-28 exec_dup_items) () in4 exec_dup (exec_k (exec_when () integer_max boolean_dup_times print_integer integer_mod integer_empty) (in1 exec_s (exec_flush) (exec_do*range (boolean_frominteger in3 boolean_shove boolean_dup_times exec_eq exec_stackdepth exec_yankdup boolean_dup_times integer_rot) exec_do*count (integer_yank) exec_dup_times (integer_yankdup exec_stackdepth) exec_s_when_autoconstructing () () ()) ()))) () ()) ())
Errors: [1 0 1 1 0 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 82
Size: 120
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 7.02
Median total errors in population: 7
Error averages by case: (1.0 0.592 1.0 0.532 0.592 0.56 0.592 0.592 0.56 1.0)
Error minima by case: (1 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 35.418
Average program size in population (points): 47.39
Average percent parens in population: 0.243
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.901
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1525717
--- Timings ---
Current time: 1559583345658 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.3 seconds, 49.4%
Fitness Testing:      3.0 seconds, 34.4%
Report:               1.3 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Lexicase best program: (boolean_frominteger exec_empty integer_fromboolean integer_eq integer_gt boolean_dup_times boolean_pop exec_dup_times (exec_shove (integer_stackdepth) exec_empty boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Lexicase best errors: [0 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 30
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Zero cases best program: (boolean_frominteger exec_empty integer_fromboolean integer_eq integer_gt boolean_dup_times boolean_pop exec_dup_times (exec_shove (integer_stackdepth) exec_empty boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Zero cases best errors: [0 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 30
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (885 885 362 1000 885 359 360 1000 1 360)
Population mean number of elite cases: 6.10
Count of perfect (error zero) individuals by case: (885 885 362 0 885 359 360 0 1 360)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4 boolean_eq in4 integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Errors: [0 0 0 1 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 27
Size: 34
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 5.903
Median total errors in population: 7
Error averages by case: (0.115 0.115 0.638 1.0 0.115 0.641 0.64 1.0 0.999 0.64)
Error minima by case: (0 0 0 1 0 0 0 1 0 0)
Average genome size in population (length): 36.635
Average program size in population (points): 49.203
Average percent parens in population: 0.247
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.3735
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2051219
--- Timings ---
Current time: 1559583348269 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.1 seconds, 54.1%
Fitness Testing:      3.5 seconds, 31.3%
Report:               1.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4 boolean_eq in4 integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Lexicase best errors: [1 1 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4 boolean_eq in4 integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Zero cases best errors: [1 1 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (24 24 24 678 746 675 24 681 1000 1000)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (24 24 24 678 746 675 24 681 0 0)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4 boolean_eq in4 integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Errors: [1 1 1 0 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 34
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 7.124
Median total errors in population: 6
Error averages by case: (0.976 0.976 0.976 0.322 0.254 0.325 0.976 0.319 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 36.554
Average program size in population (points): 49.322
Average percent parens in population: 0.236
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.903625
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.513
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2350829
--- Timings ---
Current time: 1559583350942 milliseconds
Total Time:          13.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.2 seconds, 59.0%
Fitness Testing:      3.8 seconds, 27.5%
Report:               1.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3) (print_integer integer_dup_times) integer_min integer_stackdepth integer_fromboolean integer_yankdup)
Lexicase best errors: [0 0 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3) (print_integer integer_dup_times) integer_min integer_stackdepth integer_fromboolean integer_yankdup)
Zero cases best errors: [0 0 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (458 428 429 1000 12 429 430 458 13 441)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (458 428 429 0 12 429 430 458 13 441)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_971} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Best program: (exec_swap (tag_integer_971 exec_dup_items) (exec_do*count (integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Errors: [0 0 0 1 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 25
Size: 33
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.902
Median total errors in population: 10
Error averages by case: (0.542 0.572 0.571 1.0 0.988 0.571 0.57 0.542 0.987 0.559)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 51.457
Average program size in population (points): 71.957
Average percent parens in population: 0.261
Minimum age in population: 5.0
Maximum age in population: 8.9375
Average age in population: 7.505375
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2726716
--- Timings ---
Current time: 1559583353296 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.9 seconds, 61.0%
Fitness Testing:      4.2 seconds, 25.9%
Report:               2.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y})
Lexicase best program: (exec_swap (integer_shove exec_dup_items) (boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth exec_y ())))
Lexicase best errors: [0 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 19
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y})
Zero cases best program: (exec_swap (integer_shove exec_dup_items) (boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth exec_y ())))
Zero cases best errors: [0 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 19
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (648 20 20 709 113 648 646 114 690 690)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (648 20 20 709 113 648 646 114 690 690)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () () exec_s (integer_stackdepth boolean_eq in4) (integer_rot exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup))
Errors: [0 1 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 5.702
Median total errors in population: 4
Error averages by case: (0.352 0.98 0.98 0.291 0.887 0.352 0.354 0.886 0.31 0.31)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.353
Average program size in population (points): 53.589
Average percent parens in population: 0.242
Minimum age in population: 6.5
Maximum age in population: 10.53125
Average age in population: 8.92759375
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3055226
--- Timings ---
Current time: 1559583355621 milliseconds
Total Time:          18.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.7 seconds, 62.6%
Fitness Testing:      4.6 seconds, 24.5%
Report:               2.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_swap (integer_shove exec_dup_items print_boolean boolean_yank integer_dup boolean_pop integer_dup) (exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times integer_yankdup integer_stackdepth integer_fromboolean) (integer_yankdup))
Lexicase best errors: [1 0 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_swap (integer_shove exec_dup_items print_boolean boolean_yank integer_dup boolean_pop integer_dup) (exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times integer_yankdup integer_stackdepth integer_fromboolean) (integer_yankdup))
Zero cases best errors: [1 0 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 484 512 1000 800 165 122 800 165 483)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (165 484 512 0 800 165 122 800 165 483)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_do*times (in3) print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Errors: [1 0 0 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 25
Size: 33
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.304
Median total errors in population: 5
Error averages by case: (0.835 0.516 0.488 1.0 0.2 0.835 0.878 0.2 0.835 0.517)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 50.177
Average program size in population (points): 70.167
Average percent parens in population: 0.259
Minimum age in population: 7.5
Maximum age in population: 12.40625
Average age in population: 10.273953125
Median age in population: 10.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3428405
--- Timings ---
Current time: 1559583358072 milliseconds
Total Time:          21.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.4 seconds, 63.9%
Fitness Testing:      4.9 seconds, 23.5%
Report:               2.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: 67                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 61                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 16                 
Correct output: 9                   | Program output: 24                 
Correct output: 36                  | Program output: 66                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 60                 
Correct output: 27                  | Program output: 56                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -26                
Correct output: -63                 | Program output: 87                 
Correct output: -92                 | Program output: 6                  
Correct output: -36                 | Program output: 31                 
Correct output: -73                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: 12                 
Correct output: -90                 | Program output: -7                 
Correct output: -60                 | Program output: 39                 
Correct output: -92                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: 80                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: 67                 
Correct output: -77                 | Program output: 64                 
Correct output: -61                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 18                 
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -30                
Correct output: -98                 | Program output: 3                  
Correct output: -56                 | Program output: 39                 
Correct output: -93                 | Program output: -23                
Correct output: -44                 | Program output: 1                  
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -8                 
Correct output: -51                 | Program output: 20                 
Correct output: -91                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output: 92                 
Correct output: -100                | Program output: 78                 
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output: 97                 
Correct output: -14                 | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: 17                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 74                 
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: 33                 
Correct output: -61                 | Program output: 51                 
Correct output: -80                 | Program output: 100                
Correct output: -39                 | Program output: 77                 
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: 98                 
Correct output: -88                 | Program output: 17                 
Correct output: -78                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Lexicase best program: (integer_eq exec_s () (integer_eq exec_s () (print_integer boolean_or exec_do*while () in3 boolean_eq exec_yank) (integer_rot boolean_eq) exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup) ())
Lexicase best errors: [1 1 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Zero cases best program: (integer_eq exec_s () (integer_eq exec_s () (print_integer boolean_or exec_do*while () in3 boolean_eq exec_yank) (integer_rot boolean_eq) exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup) ())
Zero cases best errors: [1 1 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (90 91 1000 303 301 1000 369 369 301 350)
Population mean number of elite cases: 4.17
Count of perfect (error zero) individuals by case: (90 91 0 303 301 0 369 369 301 350)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap})
Best program: (integer_eq exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush integer_shove integer_dup) (boolean_pop integer_dup exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot exec_k_when_autoconstructing (exec_if (exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty) integer_swap exec_if () () integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_777 integer_add integer_eq in4 exec_y_when_autoconstructing () integer_rot integer_dup_times) (boolean_swap)) ()) ())
Errors: [1 1 1 0 0 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 38
Size: 57
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.826
Median total errors in population: 7
Error averages by case: (0.91 0.909 1.0 0.697 0.699 1.0 0.631 0.631 0.699 0.65)
Error minima by case: (0 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 58.515
Average program size in population (points): 83.046
Average percent parens in population: 0.275
Minimum age in population: 9.3125
Maximum age in population: 13.6015625
Average age in population: 11.6450078125
Median age in population: 11.703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3845749
--- Timings ---
Current time: 1559583360962 milliseconds
Total Time:          23.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.4 seconds, 65.1%
Fitness Testing:      5.4 seconds, 22.6%
Report:               2.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 30                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 92                 
Correct output: 9                   | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 25                 
Correct output: 51                  | Program output: 85                 
Correct output: 27                  | Program output: 95                 
Correct output: 21                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 70                 
Correct output: 4                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 10                  | Program output: 100                
Correct output: 50                  | Program output: 98                 
Correct output: 24                  | Program output: 59                 
Correct output: 0                   | Program output: 53                 
Correct output: 25                  | Program output: 92                 
Correct output: 27                  | Program output: 78                 
Correct output: -77                 | Program output: 36                 
Correct output: -63                 | Program output: -38                
Correct output: -92                 | Program output: -76                
Correct output: -36                 | Program output: 87                 
Correct output: -73                 | Program output: -63                
Correct output: -58                 | Program output: -28                
Correct output: -55                 | Program output: 64                 
Correct output: -90                 | Program output: -62                
Correct output: -60                 | Program output: 62                 
Correct output: -92                 | Program output: 47                 
Correct output: -21                 | Program output: 32                 
Correct output: -85                 | Program output: -69                
Correct output: -59                 | Program output: 66                 
Correct output: -17                 | Program output: 96                 
Correct output: -94                 | Program output: -4                 
Correct output: 4                   | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: 40                 
Correct output: -61                 | Program output: 36                 
Correct output: -69                 | Program output: 92                 
Correct output: -42                 | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -28                
Correct output: -45                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 26                 
Correct output: -93                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 27                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -46                
Correct output: -89                 | Program output: -6                 
Correct output: -36                 | Program output: 81                 
Correct output: -31                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 56                 
Correct output: -100                | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: 85                 
Correct output: -93                 | Program output: -56                
Correct output: -88                 | Program output: -85                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: 48                 
Correct output: 5                   | Program output: 44                 
Correct output: -25                 | Program output: 30                 
Correct output: -96                 | Program output: 79                 
Correct output: -68                 | Program output: 81                 
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -70                
Correct output: -39                 | Program output: 9                  
Correct output: -52                 | Program output: 17                 
Correct output: -31                 | Program output: -27                
Correct output: -88                 | Program output: -87                
Correct output: -78                 | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (integer_eq exec_s () (print_integer boolean_or exec_do*while () exec_do*while () in3 boolean_pop boolean_flush) (exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_empty exec_if () (integer_inc exec_if (integer_inc exec_shove () integer_lte) () integer_fromboolean print_boolean)) boolean_flush integer_empty integer_pop) integer_pop in4) in1) boolean_eq exec_swap (integer_empty) (integer_pop integer_pop in4) in1 boolean_or exec_swap (exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_yankdup exec_swap (-28 exec_dup_items) () in4 exec_dup (exec_k () (exec_when (integer_max boolean_dup_times print_integer integer_mod integer_empty) in1 exec_s (exec_flush) (exec_do*range (boolean_frominteger in3 boolean_shove exec_yankdup boolean_dup_times integer_rot) exec_do*count (integer_yank) exec_dup_times (integer_yankdup exec_stackdepth) exec_s_when_autoconstructing () () ()) ()))) () ()) ())
Lexicase best errors: [0 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 116
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (integer_eq exec_s () (print_integer boolean_or exec_do*while () exec_do*while () in3 boolean_pop boolean_flush) (exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_empty exec_if () (integer_inc exec_if (integer_inc exec_shove () integer_lte) () integer_fromboolean print_boolean)) boolean_flush integer_empty integer_pop) integer_pop in4) in1) boolean_eq exec_swap (integer_empty) (integer_pop integer_pop in4) in1 boolean_or exec_swap (exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_yankdup exec_swap (-28 exec_dup_items) () in4 exec_dup (exec_k () (exec_when (integer_max boolean_dup_times print_integer integer_mod integer_empty) in1 exec_s (exec_flush) (exec_do*range (boolean_frominteger in3 boolean_shove exec_yankdup boolean_dup_times integer_rot) exec_do*count (integer_yank) exec_dup_times (integer_yankdup exec_stackdepth) exec_s_when_autoconstructing () () ()) ()))) () ()) ())
Zero cases best errors: [0 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 116
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 177 175 319 175 1000 255 253 313 178)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (175 177 175 319 175 0 255 253 313 178)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1})
Best program: (integer_eq exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_empty exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_777 integer_add integer_eq exec_dup (exec_y_when_autoconstructing () exec_k (integer_dup_times) (boolean_swap integer_div integer_fromboolean) exec_y (boolean_or) integer_empty exec_shove ()) integer_lte) () integer_fromboolean print_boolean)) boolean_flush integer_empty) integer_pop integer_pop in4) (in1))
Errors: [0 0 0 1 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 45
Size: 64
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.98
Median total errors in population: 8
Error averages by case: (0.825 0.823 0.825 0.681 0.825 1.0 0.745 0.747 0.687 0.822)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 59.742
Average program size in population (points): 84.961
Average percent parens in population: 0.279
Minimum age in population: 10.75
Maximum age in population: 14.9765625
Average age in population: 13.074640625
Median age in population: 13.1171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4280907
--- Timings ---
Current time: 1559583363800 milliseconds
Total Time:          26.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.5 seconds, 65.5%
Fitness Testing:      5.8 seconds, 21.7%
Report:               3.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output:                    
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output:                    
Correct output: 16                  | Program output:                    
Correct output: 37                  | Program output:                    
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output:                    
Correct output: -53                 | Program output:                    
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output:                    
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output:                    
Correct output: 11                  | Program output: 16                 
Correct output: 9                   | Program output: 24                 
Correct output: 36                  | Program output:                    
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output:                    
Correct output: 27                  | Program output:                    
Correct output: 21                  | Program output:                    
Correct output: 51                  | Program output:                    
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output:                    
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -26                
Correct output: -63                 | Program output:                    
Correct output: -92                 | Program output: 6                  
Correct output: -36                 | Program output: 31                 
Correct output: -73                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: 12                 
Correct output: -90                 | Program output: -7                 
Correct output: -60                 | Program output:                    
Correct output: -92                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output:                    
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output:                    
Correct output: -77                 | Program output:                    
Correct output: -61                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 18                 
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -30                
Correct output: -98                 | Program output: 3                  
Correct output: -56                 | Program output:                    
Correct output: -93                 | Program output: -23                
Correct output: -44                 | Program output: 1                  
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -8                 
Correct output: -51                 | Program output: 20                 
Correct output: -91                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output:                    
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output:                    
Correct output: -100                | Program output:                    
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output:                    
Correct output: -14                 | Program output:                    
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: 17                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output:                    
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: 33                 
Correct output: -61                 | Program output:                    
Correct output: -80                 | Program output:                    
Correct output: -39                 | Program output:                    
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output:                    
Correct output: -88                 | Program output: 17                 
Correct output: -78                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_swap (integer_shove exec_dup_items print_boolean integer_shove boolean_invert_first_then_and boolean_pop integer_dup) (exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Lexicase best errors: [1 1 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_swap (integer_shove exec_dup_items print_boolean integer_shove boolean_invert_first_then_and boolean_pop integer_dup) (exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Zero cases best errors: [1 1 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (191 190 219 412 218 335 191 221 743 333)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (191 190 219 412 218 335 191 221 743 333)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_eq exec_s () (integer_dup_times boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub) (exec_y_when_autoconstructing (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_empty integer_empty exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_777 integer_add integer_eq exec_dup (exec_y_when_autoconstructing () exec_k (integer_dup_times) () boolean_swap integer_div integer_fromboolean) integer_eq exec_dup () exec_y_when_autoconstructing () integer_rot integer_dup_times boolean_swap integer_div integer_fromboolean) (exec_y (boolean_or integer_empty exec_shove () integer_lte)) integer_fromboolean print_boolean)) boolean_flush integer_empty integer_pop) integer_pop) exec_s (in4) (in1) () boolean_eq exec_swap (exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_yankdup exec_swap (-28 exec_dup_items) () in4 exec_dup (exec_k (exec_when () integer_max boolean_dup_times print_integer integer_mod integer_empty) (in1 in1 exec_s (exec_flush) (exec_do*range () boolean_frominteger in3 boolean_shove boolean_dup_times exec_eq exec_stackdepth exec_yankdup boolean_dup_times integer_rot) (exec_do*count (integer_yank) exec_dup_times (integer_yankdup exec_stackdepth) exec_s_when_autoconstructing () () ())))) () ()) ()))
Errors: [0 0 1 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 99
Size: 145
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 6.947
Median total errors in population: 7
Error averages by case: (0.809 0.81 0.781 0.588 0.782 0.665 0.809 0.779 0.257 0.667)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.43
Average program size in population (points): 92.094
Average percent parens in population: 0.289
Minimum age in population: 11.75
Maximum age in population: 16.5
Average age in population: 14.47275390625
Median age in population: 14.5556640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4702583
--- Timings ---
Current time: 1559583367053 milliseconds
Total Time:          29.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.7 seconds, 66.4%
Fitness Testing:      6.2 seconds, 21.0%
Report:               3.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Lexicase best program: (boolean_frominteger exec_empty integer_fromboolean integer_eq integer_gt boolean_dup_times boolean_pop exec_dup_times (exec_shove (integer_stackdepth) exec_empty boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Lexicase best errors: [1 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Zero cases best program: (boolean_frominteger exec_empty integer_fromboolean integer_eq integer_gt boolean_dup_times boolean_pop exec_dup_times (exec_shove (integer_stackdepth) exec_empty boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Zero cases best errors: [1 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 147 243 243 340 1000 147 326 721 331)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (0 147 243 243 340 0 147 326 721 331)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Best program: (exec_swap (integer_shove exec_dup_items) (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times) (integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Errors: [1 1 1 1 0 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 7.502
Median total errors in population: 7
Error averages by case: (1.0 0.853 0.757 0.757 0.66 1.0 0.853 0.674 0.279 0.669)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 57.304
Average program size in population (points): 81.314
Average percent parens in population: 0.280
Minimum age in population: 13.5
Maximum age in population: 17.9169921875
Average age in population: 16.06571484375
Median age in population: 16.10546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5126311
--- Timings ---
Current time: 1559583369756 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.6 seconds, 66.2%
Fitness Testing:      6.7 seconds, 20.4%
Report:               4.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_swap (integer_shove exec_dup_items exec_do*times (integer_shove exec_dup_items) print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) (integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3) (print_integer integer_dup_times) integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Lexicase best errors: [1 0 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_swap (integer_shove exec_dup_items exec_do*times (integer_shove exec_dup_items) print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) (integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3) (print_integer integer_dup_times) integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Zero cases best errors: [1 0 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 389 2 2 184 389 408 617 408 805)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (2 389 2 2 184 389 408 617 408 805)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (boolean_frominteger exec_empty integer_fromboolean integer_eq integer_gt boolean_dup_times boolean_pop exec_dup_times (exec_shove (integer_stackdepth) exec_empty boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_empty exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_777 integer_add integer_eq exec_dup (exec_y_when_autoconstructing () exec_k (integer_dup_times) (boolean_swap integer_div integer_fromboolean) exec_y (boolean_or) integer_empty exec_shove ()) integer_lte) () integer_fromboolean print_boolean)) boolean_flush integer_empty) (integer_pop integer_pop in4) in1 boolean_or exec_swap (exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_yankdup exec_swap (-28 exec_dup_items) () in4 exec_dup (exec_k () (exec_when (integer_max boolean_dup_times boolean_shove exec_s (exec_flush) (boolean_eq boolean_frominteger in3 boolean_shove exec_yankdup boolean_dup_times integer_rot) (exec_do*count (integer_yank) exec_dup_times (integer_yankdup exec_stackdepth) exec_s_when_autoconstructing () () ()))))) () ()) ())
Errors: [1 0 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 87
Size: 125
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.794
Median total errors in population: 8
Error averages by case: (0.998 0.611 0.998 0.998 0.816 0.611 0.592 0.383 0.592 0.195)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.597
Average program size in population (points): 77.119
Average percent parens in population: 0.276
Minimum age in population: 14.53125
Maximum age in population: 19.5927734375
Average age in population: 17.4869814453125
Median age in population: 17.543701171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5508497
--- Timings ---
Current time: 1559583372493 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.7 seconds, 66.8%
Fitness Testing:      7.0 seconds, 19.9%
Report:               4.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_971} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y})
Lexicase best program: (exec_swap (tag_integer_971 exec_dup_items) (exec_do*count (integer_shove integer_dup boolean_pop integer_dup exec_yank)) integer_sub integer_stackdepth boolean_eq exec_yank integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer) (integer_dup_times integer_min) integer_stackdepth exec_y ())
Lexicase best errors: [1 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_971} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y})
Zero cases best program: (exec_swap (tag_integer_971 exec_dup_items) (exec_do*count (integer_shove integer_dup boolean_pop integer_dup exec_yank)) integer_sub integer_stackdepth boolean_eq exec_yank integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer) (integer_dup_times integer_min) integer_stackdepth exec_y ())
Zero cases best errors: [1 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 852 67 478 826 292 462 826 480 454)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (13 852 67 478 826 292 462 826 480 454)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Best program: (exec_swap (integer_shove exec_dup_items) (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove boolean_dup_times boolean_pop integer_dup exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3) (print_integer integer_dup_times) integer_min integer_stackdepth integer_fromboolean) integer_yankdup)
Errors: [1 0 1 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 5.25
Median total errors in population: 6
Error averages by case: (0.987 0.148 0.933 0.522 0.174 0.708 0.538 0.174 0.52 0.546)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.761
Average program size in population (points): 62.364
Average percent parens in population: 0.267
Minimum age in population: 16.1923828125
Maximum age in population: 20.98388671875
Average age in population: 18.93164135742188
Median age in population: 18.9722900390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5951467
--- Timings ---
Current time: 1559583375294 milliseconds
Total Time:          38.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.8 seconds, 67.3%
Fitness Testing:      7.5 seconds, 19.6%
Report:               4.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1})
Lexicase best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot integer_div exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer) (integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items) (tag_integer_777 integer_add integer_eq exec_dup (exec_y_when_autoconstructing () integer_rot integer_dup_times boolean_swap integer_div exec_s () (exec_y (boolean_or) integer_empty exec_shove () integer_lte) () integer_fromboolean print_boolean)) boolean_flush integer_empty integer_pop) integer_pop in4) in1 boolean_eq exec_swap (exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_yankdup exec_swap (-28 integer_pop integer_pop in4) (in1)) () ()) ())
Lexicase best errors: [0 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 92
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1})
Zero cases best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot integer_div exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer) (integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items) (tag_integer_777 integer_add integer_eq exec_dup (exec_y_when_autoconstructing () integer_rot integer_dup_times boolean_swap integer_div exec_s () (exec_y (boolean_or) integer_empty exec_shove () integer_lte) () integer_fromboolean print_boolean)) boolean_flush integer_empty integer_pop) integer_pop in4) in1 boolean_eq exec_swap (exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_yankdup exec_swap (-28 integer_pop integer_pop in4) (in1)) () ()) ())
Zero cases best errors: [0 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 92
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (514 529 90 89 90 507 128 511 514 128)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (514 529 90 89 90 507 128 511 514 128)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_while} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Best program: (exec_swap (integer_flush exec_dup_items) (integer_dup boolean_pop exec_while () exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_yankdup boolean_eq exec_if (boolean_invert_first_then_and) (exec_dup_items in3 print_integer integer_dup_times) integer_min integer_stackdepth integer_fromboolean integer_yankdup)
Errors: [0 0 1 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.9
Median total errors in population: 5
Error averages by case: (0.486 0.471 0.91 0.911 0.91 0.493 0.872 0.489 0.486 0.872)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.082
Average program size in population (points): 61.277
Average percent parens in population: 0.264
Minimum age in population: 17.26953125
Maximum age in population: 22.20458984375
Average age in population: 20.38356811523438
Median age in population: 20.441162109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6333814
--- Timings ---
Current time: 1559583377764 milliseconds
Total Time:          40.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.6 seconds, 67.7%
Fitness Testing:      7.9 seconds, 19.3%
Report:               5.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 20                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 97                 
Correct output: 9                   | Program output: 54                 
Correct output: 36                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 51                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 63                 
Correct output: 2                   | Program output: 93                 
Correct output: 5                   | Program output: 22                 
Correct output: 4                   | Program output: 34                 
Correct output: 1                   | Program output: 67                 
Correct output: 10                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 29                 
Correct output: 0                   | Program output: 79                 
Correct output: 25                  | Program output: 60                 
Correct output: 27                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -8                 
Correct output: -36                 | Program output: -34                
Correct output: -73                 | Program output: -64                
Correct output: -58                 | Program output: -17                
Correct output: -55                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -50                
Correct output: -92                 | Program output: 100                
Correct output: -21                 | Program output: -14                
Correct output: -85                 | Program output: -30                
Correct output: -59                 | Program output: -59                
Correct output: -17                 | Program output: 86                 
Correct output: -94                 | Program output: 92                 
Correct output: 4                   | Program output: 73                 
Correct output: -53                 | Program output: 79                 
Correct output: -77                 | Program output: -63                
Correct output: -61                 | Program output: -61                
Correct output: -69                 | Program output: 30                 
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: 86                 
Correct output: -96                 | Program output: 96                 
Correct output: -46                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -91                 | Program output: 13                 
Correct output: -98                 | Program output: 90                 
Correct output: -56                 | Program output: -22                
Correct output: -93                 | Program output: -14                
Correct output: -44                 | Program output: 74                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 25                 
Correct output: -51                 | Program output: 91                 
Correct output: -91                 | Program output: -52                
Correct output: -89                 | Program output: 51                 
Correct output: -36                 | Program output: -36                
Correct output: -31                 | Program output: -26                
Correct output: -57                 | Program output: 72                 
Correct output: -96                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: 13                 
Correct output: -95                 | Program output: 86                 
Correct output: -28                 | Program output: 34                 
Correct output: -14                 | Program output: 61                 
Correct output: -93                 | Program output: 85                 
Correct output: -88                 | Program output: -71                
Correct output: -50                 | Program output: -36                
Correct output: -48                 | Program output: 17                 
Correct output: 5                   | Program output: 33                 
Correct output: -25                 | Program output: 53                 
Correct output: -96                 | Program output: -20                
Correct output: -68                 | Program output: 69                 
Correct output: -61                 | Program output: -26                
Correct output: -80                 | Program output: -59                
Correct output: -39                 | Program output: -19                
Correct output: -52                 | Program output: -52                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -70                
Correct output: -78                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_777 integer_dup_times) (boolean_swap integer_div integer_fromboolean) exec_y (boolean_or integer_empty integer_fromboolean) integer_eq exec_dup (integer_dec) integer_rot integer_dup_times) boolean_swap integer_div integer_fromboolean)))) ())
Lexicase best errors: [0 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_777 integer_dup_times) (boolean_swap integer_div integer_fromboolean) exec_y (boolean_or integer_empty integer_fromboolean) integer_eq exec_dup (integer_dec) integer_rot integer_dup_times) boolean_swap integer_div integer_fromboolean)))) ())
Zero cases best errors: [0 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 196 432 447 190 190 834 127 69 190)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (190 196 432 447 190 190 834 127 69 190)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean})
Best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_777 integer_dup_times) (boolean_swap integer_div integer_fromboolean) exec_y (boolean_or integer_empty integer_fromboolean) integer_eq exec_dup (exec_y_when_autoconstructing () integer_rot integer_dup_times) boolean_swap integer_div integer_fromboolean))))) ())
Errors: [0 1 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 43
Size: 60
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 7.135
Median total errors in population: 7
Error averages by case: (0.81 0.804 0.568 0.553 0.81 0.81 0.166 0.873 0.931 0.81)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.423
Average program size in population (points): 63.407
Average percent parens in population: 0.270
Minimum age in population: 18.587890625
Maximum age in population: 24.0457763671875
Average age in population: 21.83914538574219
Median age in population: 21.8868408203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.776
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6736514
--- Timings ---
Current time: 1559583380487 milliseconds
Total Time:          43.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.7 seconds, 68.3%
Fitness Testing:      8.3 seconds, 19.0%
Report:               5.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 20                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 97                 
Correct output: 9                   | Program output: 54                 
Correct output: 36                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 51                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 63                 
Correct output: 2                   | Program output: 93                 
Correct output: 5                   | Program output: 22                 
Correct output: 4                   | Program output: 34                 
Correct output: 1                   | Program output: 67                 
Correct output: 10                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 29                 
Correct output: 0                   | Program output: 79                 
Correct output: 25                  | Program output: 60                 
Correct output: 27                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -8                 
Correct output: -36                 | Program output: -34                
Correct output: -73                 | Program output: -64                
Correct output: -58                 | Program output: -17                
Correct output: -55                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -50                
Correct output: -92                 | Program output: 100                
Correct output: -21                 | Program output: -14                
Correct output: -85                 | Program output: -30                
Correct output: -59                 | Program output: -59                
Correct output: -17                 | Program output: 86                 
Correct output: -94                 | Program output: 92                 
Correct output: 4                   | Program output: 73                 
Correct output: -53                 | Program output: 79                 
Correct output: -77                 | Program output: -63                
Correct output: -61                 | Program output: -61                
Correct output: -69                 | Program output: 30                 
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: 86                 
Correct output: -96                 | Program output: 96                 
Correct output: -46                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -91                 | Program output: 13                 
Correct output: -98                 | Program output: 90                 
Correct output: -56                 | Program output: -22                
Correct output: -93                 | Program output: -14                
Correct output: -44                 | Program output: 74                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 25                 
Correct output: -51                 | Program output: 91                 
Correct output: -91                 | Program output: -52                
Correct output: -89                 | Program output: 51                 
Correct output: -36                 | Program output: -36                
Correct output: -31                 | Program output: -26                
Correct output: -57                 | Program output: 72                 
Correct output: -96                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: 13                 
Correct output: -95                 | Program output: 86                 
Correct output: -28                 | Program output: 34                 
Correct output: -14                 | Program output: 61                 
Correct output: -93                 | Program output: 85                 
Correct output: -88                 | Program output: -71                
Correct output: -50                 | Program output: -36                
Correct output: -48                 | Program output: 17                 
Correct output: 5                   | Program output: 33                 
Correct output: -25                 | Program output: 53                 
Correct output: -96                 | Program output: -20                
Correct output: -68                 | Program output: 69                 
Correct output: -61                 | Program output: -26                
Correct output: -80                 | Program output: -59                
Correct output: -39                 | Program output: -19                
Correct output: -52                 | Program output: -52                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -70                
Correct output: -78                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_eq in2 print_integer integer_eq exec_s () (print_integer boolean_or exec_if () (in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush exec_k_when_autoconstructing (exec_pop (boolean_rot integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc boolean_empty) (exec_dup_items tag_integer_777 integer_add integer_dup_times) boolean_swap integer_div integer_fromboolean) integer_eq exec_dup (exec_y_when_autoconstructing (integer_rot integer_dup_times) boolean_swap) integer_div integer_fromboolean) exec_y (boolean_or)) ())) ())
Lexicase best errors: [0 1 1 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 57
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_eq in2 print_integer integer_eq exec_s () (print_integer boolean_or exec_if () (in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush exec_k_when_autoconstructing (exec_pop (boolean_rot integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc boolean_empty) (exec_dup_items tag_integer_777 integer_add integer_dup_times) boolean_swap integer_div integer_fromboolean) integer_eq exec_dup (exec_y_when_autoconstructing (integer_rot integer_dup_times) boolean_swap) integer_div integer_fromboolean) exec_y (boolean_or)) ())) ())
Zero cases best errors: [0 1 1 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 57
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (392 109 137 199 199 393 107 138 391 108)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (392 109 137 199 199 393 107 138 391 108)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean})
Best program: (integer_eq exec_s () (print_integer in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_777 integer_dup_times) (boolean_swap integer_div integer_fromboolean) exec_y (boolean_or integer_empty integer_fromboolean) integer_eq exec_dup (exec_y_when_autoconstructing () integer_rot integer_dup_times) boolean_swap integer_div integer_fromboolean))))) ()) ())
Errors: [0 1 1 1 1 0 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 46
Size: 66
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.827
Median total errors in population: 8
Error averages by case: (0.608 0.891 0.863 0.801 0.801 0.607 0.893 0.862 0.609 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.238
Average program size in population (points): 69.356
Average percent parens in population: 0.283
Minimum age in population: 20.6181640625
Maximum age in population: 25.24496459960938
Average age in population: 23.31327142333984
Median age in population: 23.36021423339844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.004
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7147637
--- Timings ---
Current time: 1559583383767 milliseconds
Total Time:          46.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.3 seconds, 69.1%
Fitness Testing:      8.7 seconds, 18.6%
Report:               5.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 20                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 97                 
Correct output: 9                   | Program output: 54                 
Correct output: 36                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 51                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 63                 
Correct output: 2                   | Program output: 93                 
Correct output: 5                   | Program output: 22                 
Correct output: 4                   | Program output: 34                 
Correct output: 1                   | Program output: 67                 
Correct output: 10                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 29                 
Correct output: 0                   | Program output: 79                 
Correct output: 25                  | Program output: 60                 
Correct output: 27                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -8                 
Correct output: -36                 | Program output: -34                
Correct output: -73                 | Program output: -64                
Correct output: -58                 | Program output: -17                
Correct output: -55                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -50                
Correct output: -92                 | Program output: 100                
Correct output: -21                 | Program output: -14                
Correct output: -85                 | Program output: -30                
Correct output: -59                 | Program output: -59                
Correct output: -17                 | Program output: 86                 
Correct output: -94                 | Program output: 92                 
Correct output: 4                   | Program output: 73                 
Correct output: -53                 | Program output: 79                 
Correct output: -77                 | Program output: -63                
Correct output: -61                 | Program output: -61                
Correct output: -69                 | Program output: 30                 
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: 86                 
Correct output: -96                 | Program output: 96                 
Correct output: -46                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -91                 | Program output: 13                 
Correct output: -98                 | Program output: 90                 
Correct output: -56                 | Program output: -22                
Correct output: -93                 | Program output: -14                
Correct output: -44                 | Program output: 74                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 25                 
Correct output: -51                 | Program output: 91                 
Correct output: -91                 | Program output: -52                
Correct output: -89                 | Program output: 51                 
Correct output: -36                 | Program output: -36                
Correct output: -31                 | Program output: -26                
Correct output: -57                 | Program output: 72                 
Correct output: -96                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: 13                 
Correct output: -95                 | Program output: 86                 
Correct output: -28                 | Program output: 34                 
Correct output: -14                 | Program output: 61                 
Correct output: -93                 | Program output: 85                 
Correct output: -88                 | Program output: -71                
Correct output: -50                 | Program output: -36                
Correct output: -48                 | Program output: 17                 
Correct output: 5                   | Program output: 33                 
Correct output: -25                 | Program output: 53                 
Correct output: -96                 | Program output: -20                
Correct output: -68                 | Program output: 69                 
Correct output: -61                 | Program output: -26                
Correct output: -80                 | Program output: -59                
Correct output: -39                 | Program output: -19                
Correct output: -52                 | Program output: -52                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -70                
Correct output: -78                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Lexicase best program: (in2 exec_s () (print_integer boolean_or exec_do*while () boolean_or boolean_pop boolean_flush exec_eq integer_max exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc) ()))))) ())
Lexicase best errors: [1 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc})
Zero cases best program: (in2 exec_s () (print_integer boolean_or exec_do*while () boolean_or boolean_pop boolean_flush exec_eq integer_max exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc) ()))))) ())
Zero cases best errors: [1 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (167 207 817 607 296 296 808 296 148 160)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (167 207 817 607 296 296 808 296 148 160)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_mod})
Best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_dup_times) integer_min integer_stackdepth) integer_fromboolean) (integer_mod))
Errors: [1 1 0 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 20
Size: 27
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 6.198
Median total errors in population: 6
Error averages by case: (0.833 0.793 0.183 0.393 0.704 0.704 0.192 0.704 0.852 0.84)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.479
Average program size in population (points): 73.075
Average percent parens in population: 0.288
Minimum age in population: 22.0126953125
Maximum age in population: 26.85258483886719
Average age in population: 24.80387243652344
Median age in population: 24.88651275634766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7555223
--- Timings ---
Current time: 1559583386557 milliseconds
Total Time:          49.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.4 seconds, 69.5%
Fitness Testing:      9.1 seconds, 18.4%
Report:               5.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: 67                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 61                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 16                 
Correct output: 9                   | Program output: 24                 
Correct output: 36                  | Program output: 66                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 60                 
Correct output: 27                  | Program output: 56                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -26                
Correct output: -63                 | Program output: 87                 
Correct output: -92                 | Program output: 6                  
Correct output: -36                 | Program output: 31                 
Correct output: -73                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: 12                 
Correct output: -90                 | Program output: -7                 
Correct output: -60                 | Program output: 39                 
Correct output: -92                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: 80                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: 67                 
Correct output: -77                 | Program output: 64                 
Correct output: -61                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 18                 
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -30                
Correct output: -98                 | Program output: 3                  
Correct output: -56                 | Program output: 39                 
Correct output: -93                 | Program output: -23                
Correct output: -44                 | Program output: 1                  
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -8                 
Correct output: -51                 | Program output: 20                 
Correct output: -91                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output: 92                 
Correct output: -100                | Program output: 78                 
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output: 97                 
Correct output: -14                 | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: 17                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 74                 
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: 33                 
Correct output: -61                 | Program output: 51                 
Correct output: -80                 | Program output: 100                
Correct output: -39                 | Program output: 77                 
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: 98                 
Correct output: -88                 | Program output: 17                 
Correct output: -78                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction -48} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_eq exec_s () (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq -48) (boolean_eq in4) exec_if (boolean_eq exec_if (exec_dup_items boolean_and integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_pop integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_777 integer_dup_times) (exec_flush boolean_rot integer_fromboolean) exec_y (boolean_or integer_empty exec_shove ()) integer_lte)) integer_fromboolean print_boolean)) integer_empty integer_pop) (-28 exec_dup_items) in4 exec_dup (exec_k (exec_when () print_integer integer_mod integer_empty in1 exec_s (exec_flush) () (exec_do*range (exec_yankdup integer_mod))) ())) ())
Lexicase best errors: [1 1 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 97
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction -48} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_eq exec_s () (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq -48) (boolean_eq in4) exec_if (boolean_eq exec_if (exec_dup_items boolean_and integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_pop integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_777 integer_dup_times) (exec_flush boolean_rot integer_fromboolean) exec_y (boolean_or integer_empty exec_shove ()) integer_lte)) integer_fromboolean print_boolean)) integer_empty integer_pop) (-28 exec_dup_items) in4 exec_dup (exec_k (exec_when () print_integer integer_mod integer_empty in1 exec_s (exec_flush) () (exec_do*range (exec_yankdup integer_mod))) ())) ())
Zero cases best errors: [1 1 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 97
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 248 84 107 81 248 249 81 81 245)
Population mean number of elite cases: 1.53
Count of perfect (error zero) individuals by case: (106 248 84 107 81 248 249 81 81 245)
Population mean number of perfect (error zero) cases: 1.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 3, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mod})
Best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_777 integer_dup_times) (boolean_swap integer_div integer_fromboolean) exec_y (boolean_or integer_empty integer_fromboolean) integer_eq exec_dup (exec_y_when_autoconstructing () integer_rot integer_dup_times) integer_fromboolean) exec_y (boolean_or integer_empty exec_shove ())) integer_lte)) integer_fromboolean print_boolean) (boolean_flush integer_empty integer_pop) integer_pop exec_swap (-28 exec_dup_items) (in4 exec_dup () exec_empty integer_flush integer_shove boolean_yank exec_yankdup exec_swap (-28 exec_dup_items) (in4 exec_dup (exec_k (exec_when () print_integer boolean_xor integer_empty in1 exec_s (exec_flush) () (exec_do*range (exec_yankdup integer_mod))) ()))))
Errors: [1 1 0 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 78
Size: 110
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 8.47
Median total errors in population: 10
Error averages by case: (0.894 0.752 0.916 0.893 0.919 0.752 0.751 0.919 0.919 0.755)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.999
Average program size in population (points): 63.449
Average percent parens in population: 0.282
Minimum age in population: 23.03564453125
Maximum age in population: 28.36240386962891
Average age in population: 26.25244831085205
Median age in population: 26.31645584106445
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7946991
--- Timings ---
Current time: 1559583389306 milliseconds
Total Time:          52.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.4 seconds, 69.8%
Fitness Testing:      9.5 seconds, 18.3%
Report:               6.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_frominteger exec_empty integer_fromboolean integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4 integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer boolean_swap) (integer_min integer_stackdepth integer_fromboolean) integer_rot)
Lexicase best errors: [1 1 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_frominteger exec_empty integer_fromboolean integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4 integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer boolean_swap) (integer_min integer_stackdepth integer_fromboolean) integer_rot)
Zero cases best errors: [1 1 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 261 267 347 273 22 352 22 348 157)
Population mean number of elite cases: 2.21
Count of perfect (error zero) individuals by case: (162 261 267 347 273 22 352 22 348 157)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Best program: (exec_swap (integer_shove exec_dup_items) (exec_do*range (integer_shove exec_dup_items) print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub print_integer boolean_eq exec_do*while () integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times integer_min integer_stackdepth integer_fromboolean) (integer_yankdup))
Errors: [1 1 1 0 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 7.789
Median total errors in population: 7
Error averages by case: (0.838 0.739 0.733 0.653 0.727 0.978 0.648 0.978 0.652 0.843)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.377
Average program size in population (points): 65.633
Average percent parens in population: 0.279
Minimum age in population: 24.88720703125
Maximum age in population: 29.87980651855469
Average age in population: 27.7422338104248
Median age in population: 27.78884887695312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.004
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8357387
--- Timings ---
Current time: 1559583391891 milliseconds
Total Time:          54.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.4 seconds, 69.9%
Fitness Testing:      9.9 seconds, 18.1%
Report:               6.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 30                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 92                 
Correct output: 9                   | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 25                 
Correct output: 51                  | Program output: 85                 
Correct output: 27                  | Program output: 95                 
Correct output: 21                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 70                 
Correct output: 4                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 10                  | Program output: 100                
Correct output: 50                  | Program output: 98                 
Correct output: 24                  | Program output: 59                 
Correct output: 0                   | Program output: 53                 
Correct output: 25                  | Program output: 92                 
Correct output: 27                  | Program output: 78                 
Correct output: -77                 | Program output: 36                 
Correct output: -63                 | Program output: -38                
Correct output: -92                 | Program output: -76                
Correct output: -36                 | Program output: 87                 
Correct output: -73                 | Program output: -63                
Correct output: -58                 | Program output: -28                
Correct output: -55                 | Program output: 64                 
Correct output: -90                 | Program output: -62                
Correct output: -60                 | Program output: 62                 
Correct output: -92                 | Program output: 47                 
Correct output: -21                 | Program output: 32                 
Correct output: -85                 | Program output: -69                
Correct output: -59                 | Program output: 66                 
Correct output: -17                 | Program output: 96                 
Correct output: -94                 | Program output: -4                 
Correct output: 4                   | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: 40                 
Correct output: -61                 | Program output: 36                 
Correct output: -69                 | Program output: 92                 
Correct output: -42                 | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -28                
Correct output: -45                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 26                 
Correct output: -93                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 27                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -46                
Correct output: -89                 | Program output: -6                 
Correct output: -36                 | Program output: 81                 
Correct output: -31                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 56                 
Correct output: -100                | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: 85                 
Correct output: -93                 | Program output: -56                
Correct output: -88                 | Program output: -85                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: 48                 
Correct output: 5                   | Program output: 44                 
Correct output: -25                 | Program output: 30                 
Correct output: -96                 | Program output: 79                 
Correct output: -68                 | Program output: 81                 
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -70                
Correct output: -39                 | Program output: 9                  
Correct output: -52                 | Program output: 17                 
Correct output: -31                 | Program output: -27                
Correct output: -88                 | Program output: -87                
Correct output: -78                 | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction -28} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_eq exec_s () (print_integer boolean_or exec_y_when_autoconstructing () in3 boolean_pop boolean_flush exec_eq integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_empty exec_if () (integer_inc exec_if (integer_inc exec_do*count (exec_dup_items tag_integer_777 integer_add integer_eq exec_dup (exec_y_when_autoconstructing () exec_k (integer_dup_times) (boolean_swap integer_div integer_fromboolean) exec_y (boolean_or)) integer_empty exec_shove ()) integer_lte) () integer_fromboolean print_boolean)) boolean_flush integer_empty) (integer_pop integer_pop in4) in1) (boolean_or exec_swap (exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_yankdup exec_s (-28 exec_dup_items) () (in4 exec_dup (exec_k () (exec_when (integer_max boolean_dup_times boolean_shove exec_s (integer_mult) (boolean_eq boolean_frominteger in3 boolean_shove) ()))))) () ()) ()))
Lexicase best errors: [1 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 110
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction -28} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_eq exec_s () (print_integer boolean_or exec_y_when_autoconstructing () in3 boolean_pop boolean_flush exec_eq integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_empty exec_if () (integer_inc exec_if (integer_inc exec_do*count (exec_dup_items tag_integer_777 integer_add integer_eq exec_dup (exec_y_when_autoconstructing () exec_k (integer_dup_times) (boolean_swap integer_div integer_fromboolean) exec_y (boolean_or)) integer_empty exec_shove ()) integer_lte) () integer_fromboolean print_boolean)) boolean_flush integer_empty) (integer_pop integer_pop in4) in1) (boolean_or exec_swap (exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_yankdup exec_s (-28 exec_dup_items) () (in4 exec_dup (exec_k () (exec_when (integer_max boolean_dup_times boolean_shove exec_s (integer_mult) (boolean_eq boolean_frominteger in3 boolean_shove) ()))))) () ()) ()))
Zero cases best errors: [1 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 110
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 182 269 208 272 830 169 170 345 177)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (208 182 269 208 272 830 169 170 345 177)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Best program: (exec_swap (print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () ()) (integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in1 print_integer integer_dup_times) () integer_min integer_stackdepth integer_fromboolean integer_yankdup)
Errors: [1 1 1 1 1 0 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.17
Median total errors in population: 7
Error averages by case: (0.792 0.818 0.731 0.792 0.728 0.17 0.831 0.83 0.655 0.823)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.556
Average program size in population (points): 64.81
Average percent parens in population: 0.285
Minimum age in population: 25.88720703125
Maximum age in population: 31.38519287109375
Average age in population: 29.14110646247864
Median age in population: 29.20112895965576
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.744
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8745278
--- Timings ---
Current time: 1559583394383 milliseconds
Total Time:          57.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.2 seconds, 70.0%
Fitness Testing:     10.4 seconds, 18.1%
Report:               6.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 30                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 92                 
Correct output: 9                   | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 25                 
Correct output: 51                  | Program output: 85                 
Correct output: 27                  | Program output: 95                 
Correct output: 21                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 70                 
Correct output: 4                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 10                  | Program output: 100                
Correct output: 50                  | Program output: 98                 
Correct output: 24                  | Program output: 59                 
Correct output: 0                   | Program output: 53                 
Correct output: 25                  | Program output: 92                 
Correct output: 27                  | Program output: 78                 
Correct output: -77                 | Program output: 36                 
Correct output: -63                 | Program output: -38                
Correct output: -92                 | Program output: -76                
Correct output: -36                 | Program output: 87                 
Correct output: -73                 | Program output: -63                
Correct output: -58                 | Program output: -28                
Correct output: -55                 | Program output: 64                 
Correct output: -90                 | Program output: -62                
Correct output: -60                 | Program output: 62                 
Correct output: -92                 | Program output: 47                 
Correct output: -21                 | Program output: 32                 
Correct output: -85                 | Program output: -69                
Correct output: -59                 | Program output: 66                 
Correct output: -17                 | Program output: 96                 
Correct output: -94                 | Program output: -4                 
Correct output: 4                   | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: 40                 
Correct output: -61                 | Program output: 36                 
Correct output: -69                 | Program output: 92                 
Correct output: -42                 | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -28                
Correct output: -45                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 26                 
Correct output: -93                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 27                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -46                
Correct output: -89                 | Program output: -6                 
Correct output: -36                 | Program output: 81                 
Correct output: -31                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 56                 
Correct output: -100                | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: 85                 
Correct output: -93                 | Program output: -56                
Correct output: -88                 | Program output: -85                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: 48                 
Correct output: 5                   | Program output: 44                 
Correct output: -25                 | Program output: 30                 
Correct output: -96                 | Program output: 79                 
Correct output: -68                 | Program output: 81                 
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -70                
Correct output: -39                 | Program output: 9                  
Correct output: -52                 | Program output: 17                 
Correct output: -31                 | Program output: -27                
Correct output: -88                 | Program output: -87                
Correct output: -78                 | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_dup_items integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in1 print_integer integer_dup_times) () integer_min integer_stackdepth integer_yankdup)
Lexicase best errors: [0 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_dup_items integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in1 print_integer integer_dup_times) () integer_min integer_stackdepth integer_yankdup)
Zero cases best errors: [0 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (617 210 213 425 220 223 202 221 207 203)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (617 210 213 425 220 223 202 221 207 203)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_yankdup})
Best program: (exec_swap (integer_shove exec_rot (print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () ()) (integer_sub integer_stackdepth boolean_eq in4) (integer_rot boolean_eq exec_if () (boolean_invert_first_then_and) exec_dup_items integer_flush boolean_eq exec_if (boolean_yankdup exec_dup_items in1 print_integer integer_dup_times) () integer_min) integer_stackdepth integer_sub) () integer_yankdup)
Errors: [0 1 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.259
Median total errors in population: 7
Error averages by case: (0.383 0.79 0.787 0.575 0.78 0.777 0.798 0.779 0.793 0.797)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.623
Average program size in population (points): 63.356
Average percent parens in population: 0.284
Minimum age in population: 27.29010009765625
Maximum age in population: 32.82230472564697
Average age in population: 30.61743792438507
Median age in population: 30.67736959457397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9145092
--- Timings ---
Current time: 1559583397101 milliseconds
Total Time:          60.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.2 seconds, 70.3%
Fitness Testing:     10.8 seconds, 17.9%
Report:               7.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_swap (print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () ()) (integer_sub integer_stackdepth boolean_eq boolean_eq in4) integer_rot exec_if (exec_if (boolean_invert_first_then_and boolean_not in3) (print_integer integer_dup_times) integer_min) (integer_stackdepth integer_fromboolean) integer_yankdup)
Lexicase best errors: [1 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_swap (print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () ()) (integer_sub integer_stackdepth boolean_eq boolean_eq in4) integer_rot exec_if (exec_if (boolean_invert_first_then_and boolean_not in3) (print_integer integer_dup_times) integer_min) (integer_stackdepth integer_fromboolean) integer_yankdup)
Zero cases best errors: [1 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 251 191 192 198 419 191 677 191 412)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (10 251 191 192 198 419 191 677 191 412)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_971} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y})
Best program: (exec_swap (tag_integer_971 exec_dup_items exec_do*count (integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth) (exec_stackdepth in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer integer_dup_times integer_min integer_stackdepth exec_y ()) ())
Errors: [1 1 0 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 33
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.268
Median total errors in population: 7
Error averages by case: (0.99 0.749 0.809 0.808 0.802 0.581 0.809 0.323 0.809 0.588)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.452
Average program size in population (points): 54.349
Average percent parens in population: 0.283
Minimum age in population: 28.79244613647461
Maximum age in population: 34.2459545135498
Average age in population: 32.04642324876785
Median age in population: 32.1161744594574
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9518603
--- Timings ---
Current time: 1559583399968 milliseconds
Total Time:          62.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.2 seconds, 70.5%
Fitness Testing:     11.2 seconds, 17.8%
Report:               7.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k})
Lexicase best program: (exec_swap (integer_shove exec_dup_items) (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer exec_k () ()) ())
Lexicase best errors: [0 1 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k})
Zero cases best program: (exec_swap (integer_shove exec_dup_items) (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer exec_k () ()) ())
Zero cases best errors: [0 1 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (646 225 430 422 425 228 133 133 362 423)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (646 225 430 422 425 228 133 133 362 423)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k})
Best program: (exec_swap (integer_shove exec_dup_items) (exec_swap (integer_shove exec_dup_items) (print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer exec_k () ()) ())
Errors: [0 1 0 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 24
Size: 35
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 6.573
Median total errors in population: 6
Error averages by case: (0.354 0.775 0.57 0.578 0.575 0.772 0.867 0.867 0.638 0.577)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.969
Average program size in population (points): 50.89
Average percent parens in population: 0.280
Minimum age in population: 30.3954963684082
Maximum age in population: 35.50580835342407
Average age in population: 33.51752033638954
Median age in population: 33.5980612039566
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9904475
--- Timings ---
Current time: 1559583402587 milliseconds
Total Time:          65.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.2 seconds, 70.4%
Fitness Testing:     11.6 seconds, 17.6%
Report:               7.8 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: 67                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 61                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 16                 
Correct output: 9                   | Program output: 24                 
Correct output: 36                  | Program output: 66                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 60                 
Correct output: 27                  | Program output: 56                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -26                
Correct output: -63                 | Program output: 87                 
Correct output: -92                 | Program output: 6                  
Correct output: -36                 | Program output: 31                 
Correct output: -73                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: 12                 
Correct output: -90                 | Program output: -7                 
Correct output: -60                 | Program output: 39                 
Correct output: -92                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: 80                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: 67                 
Correct output: -77                 | Program output: 64                 
Correct output: -61                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 18                 
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -30                
Correct output: -98                 | Program output: 3                  
Correct output: -56                 | Program output: 39                 
Correct output: -93                 | Program output: -23                
Correct output: -44                 | Program output: 1                  
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -8                 
Correct output: -51                 | Program output: 20                 
Correct output: -91                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output: 92                 
Correct output: -100                | Program output: 78                 
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output: 97                 
Correct output: -14                 | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: 17                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 74                 
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: 33                 
Correct output: -61                 | Program output: 51                 
Correct output: -80                 | Program output: 100                
Correct output: -39                 | Program output: 77                 
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: 98                 
Correct output: -88                 | Program output: 17                 
Correct output: -78                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_767} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq})
Lexicase best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_767 integer_dup_times) (boolean_swap integer_div integer_fromboolean)) exec_y (boolean_or integer_empty integer_fromboolean) integer_eq exec_dup (exec_shove () integer_lte)) integer_fromboolean boolean_flush)) integer_mult integer_empty integer_empty integer_pop) (boolean_xor in4) in1 boolean_eq)
Lexicase best errors: [0 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_767} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq})
Zero cases best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_767 integer_dup_times) (boolean_swap integer_div integer_fromboolean)) exec_y (boolean_or integer_empty integer_fromboolean) integer_eq exec_dup (exec_shove () integer_lte)) integer_fromboolean boolean_flush)) integer_mult integer_empty integer_empty integer_pop) (boolean_xor in4) in1 boolean_eq)
Zero cases best errors: [0 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (898 429 9 902 4 243 433 4 252 199)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (898 429 9 902 4 243 433 4 252 199)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq})
Best program: (exec_s () (print_integer boolean_or in3 boolean_pop boolean_flush exec_eq exec_shove ()) (integer_sub integer_stackdepth boolean_eq in4) integer_rot boolean_eq exec_if () (boolean_invert_first_then_and integer_dec in3 exec_dup (exec_do*count () exec_dup_items tag_integer_777 integer_add integer_eq exec_dup (exec_yankdup) integer_rot integer_dup_times) boolean_swap integer_inc exec_do*count () exec_dup_items tag_integer_777 integer_dup_times) boolean_swap exec_y_when_autoconstructing (integer_fromboolean) exec_y (boolean_or integer_empty exec_shove ()) integer_lte integer_mod print_boolean integer_empty integer_pop integer_pop exec_if () (in1) boolean_eq)
Errors: [0 1 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.627
Median total errors in population: 6
Error averages by case: (0.102 0.571 0.991 0.098 0.996 0.757 0.567 0.996 0.748 0.801)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.222
Average program size in population (points): 48.126
Average percent parens in population: 0.278
Minimum age in population: 31.3954963684082
Maximum age in population: 37.00808835029602
Average age in population: 34.97994786775112
Median age in population: 35.07200717926025
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 10261732
--- Timings ---
Current time: 1559583405708 milliseconds
Total Time:          68.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.3 seconds, 70.7%
Fitness Testing:     11.9 seconds, 17.4%
Report:               8.0 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 676
Test mean error for best: 0.67600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 30                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 9292               
Correct output: 9                   | Program output: 5252               
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 25                 
Correct output: 51                  | Program output: 85                 
Correct output: 27                  | Program output: 95                 
Correct output: 21                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 70                 
Correct output: 4                   | Program output: 2626               
Correct output: 1                   | Program output: 7171               
Correct output: 10                  | Program output: 100                
Correct output: 50                  | Program output: 98                 
Correct output: 24                  | Program output: 59                 
Correct output: 0                   | Program output: 53                 
Correct output: 25                  | Program output: 92                 
Correct output: 27                  | Program output: 78                 
Correct output: -77                 | Program output: 36                 
Correct output: -63                 | Program output: -38                
Correct output: -92                 | Program output: -76                
Correct output: -36                 | Program output: 87                 
Correct output: -73                 | Program output: -63                
Correct output: -58                 | Program output: -28                
Correct output: -55                 | Program output: 64                 
Correct output: -90                 | Program output: -62                
Correct output: -60                 | Program output: 62                 
Correct output: -92                 | Program output: 47                 
Correct output: -21                 | Program output: 3232               
Correct output: -85                 | Program output: -69                
Correct output: -59                 | Program output: 66                 
Correct output: -17                 | Program output: 96                 
Correct output: -94                 | Program output: -4                 
Correct output: 4                   | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: 40                 
Correct output: -61                 | Program output: 36                 
Correct output: -69                 | Program output: 92                 
Correct output: -42                 | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -28                
Correct output: -45                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 26                 
Correct output: -93                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 27                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -46                
Correct output: -89                 | Program output: -6                 
Correct output: -36                 | Program output: 81                 
Correct output: -31                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 56                 
Correct output: -100                | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: 85                 
Correct output: -93                 | Program output: -56                
Correct output: -88                 | Program output: -85                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: 48                 
Correct output: 5                   | Program output: 4444               
Correct output: -25                 | Program output: 30                 
Correct output: -96                 | Program output: 79                 
Correct output: -68                 | Program output: 81                 
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -70                
Correct output: -39                 | Program output: 9                  
Correct output: -52                 | Program output: 17                 
Correct output: -31                 | Program output: -27                
Correct output: -88                 | Program output: -87                
Correct output: -78                 | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq})
Lexicase best program: (exec_swap (integer_shove exec_rot (print_boolean integer_fromboolean integer_lte boolean_pop boolean_not) (exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) (integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items) (in1 print_integer integer_dup_times)) integer_min exec_dup_items tag_integer_777 integer_add integer_eq) ())
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq})
Zero cases best program: (exec_swap (integer_shove exec_rot (print_boolean integer_fromboolean integer_lte boolean_pop boolean_not) (exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4) (integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items) (in1 print_integer integer_dup_times)) integer_min exec_dup_items tag_integer_777 integer_add integer_eq) ())
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 262 269 263 222 126 270 265 264 264)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (126 262 269 263 222 126 270 265 264 264)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 3, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 3, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_flush})
Best program: (integer_eq exec_s (print_integer boolean_or exec_y_when_autoconstructing () in3 boolean_pop boolean_flush exec_eq integer_rot integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in1 print_integer) (integer_dup_times)) () (integer_min integer_stackdepth integer_fromboolean) tag_integer_777 integer_add integer_eq exec_dup (exec_y_when_autoconstructing () exec_k (integer_dup_times) (boolean_swap integer_div integer_fromboolean) integer_stackdepth integer_fromboolean) boolean_swap integer_div integer_fromboolean exec_y (integer_div integer_fromboolean) exec_y (boolean_or integer_empty integer_shove) integer_lte integer_fromboolean exec_if () () integer_inc integer_empty exec_dup (integer_pop in4) in1 integer_yankdup exec_y_when_autoconstructing () in4 integer_flush)
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 56
Size: 73
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.669
Median total errors in population: 8
Error averages by case: (0.874 0.738 0.731 0.737 0.778 0.874 0.73 0.735 0.736 0.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.279
Average program size in population (points): 58.918
Average percent parens in population: 0.295
Minimum age in population: 33.4269323348999
Maximum age in population: 38.33113175630569
Average age in population: 36.63217841535807
Median age in population: 36.76369827985764
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10891533
--- Timings ---
Current time: 1559583408802 milliseconds
Total Time:          71.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.2 seconds, 70.3%
Fitness Testing:     12.5 seconds, 17.5%
Report:               8.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 782
Test mean error for best: 0.78200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 0                  
Correct output: 18                  | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 0                  
Correct output: -1                  | Program output: 0                  
Correct output: 16                  | Program output: 0                  
Correct output: 37                  | Program output: 0                  
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 0                  
Correct output: -53                 | Program output: 0                  
Correct output: 27                  | Program output: 0                  
Correct output: 91                  | Program output: 0                  
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 0                  
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 0                  
Correct output: 45                  | Program output: 0                  
Correct output: 11                  | Program output: 0                  
Correct output: 9                   | Program output: 0                  
Correct output: 36                  | Program output: 0                  
Correct output: 9                   | Program output: 0                  
Correct output: 51                  | Program output: 0                  
Correct output: 27                  | Program output: 0                  
Correct output: 21                  | Program output: 0                  
Correct output: 51                  | Program output: 0                  
Correct output: 2                   | Program output: 0                  
Correct output: 5                   | Program output: 0                  
Correct output: 4                   | Program output: 0                  
Correct output: 1                   | Program output: 0                  
Correct output: 10                  | Program output: 0                  
Correct output: 50                  | Program output: 0                  
Correct output: 24                  | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 0                  
Correct output: 27                  | Program output: 0                  
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 0                  
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 0                  
Correct output: -53                 | Program output: 0                  
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 0                  
Correct output: -96                 | Program output: 0                  
Correct output: -46                 | Program output: 0                  
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 0                  
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 0                  
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 0                  
Correct output: -36                 | Program output: 0                  
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 0                  
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 0                  
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 0                  
Correct output: -25                 | Program output: 0                  
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 0                  
Correct output: -31                 | Program output: 0                  
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_767} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq})
Lexicase best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_767 integer_dup_times) (boolean_swap integer_div integer_fromboolean)) exec_y (boolean_or integer_empty integer_fromboolean) integer_eq exec_dup (exec_shove () integer_lte)) integer_fromboolean boolean_flush)) integer_mult integer_empty integer_gte integer_pop) (boolean_xor in4) in1 boolean_eq)
Lexicase best errors: [0 1 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 66
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_767} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq})
Zero cases best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_767 integer_dup_times) (boolean_swap integer_div integer_fromboolean)) exec_y (boolean_or integer_empty integer_fromboolean) integer_eq exec_dup (exec_shove () integer_lte)) integer_fromboolean boolean_flush)) integer_mult integer_empty integer_gte integer_pop) (boolean_xor in4) in1 boolean_eq)
Zero cases best errors: [0 1 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 66
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (73 201 189 190 73 201 201 432 426 73)
Population mean number of elite cases: 2.06
Count of perfect (error zero) individuals by case: (73 201 189 190 73 201 201 432 426 73)
Population mean number of perfect (error zero) cases: 2.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction tagged_945} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Best program: (in3 exec_do*count (print_integer boolean_or exec_do*while () integer_inc exec_rot (integer_inc integer_mod) (exec_dup_items boolean_not integer_add integer_eq exec_dup (exec_y_when_autoconstructing () exec_k () (integer_dup_times) boolean_swap integer_div) integer_fromboolean) (exec_y (boolean_or) integer_dup_times exec_shove ()) integer_lte) integer_fromboolean print_boolean tagged_945 integer_empty integer_pop integer_pop in4 in1 boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 exec_dup_items) (in4)) ()))
Errors: [1 0 1 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 47
Size: 68
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 7.941
Median total errors in population: 8
Error averages by case: (0.927 0.799 0.811 0.81 0.927 0.799 0.799 0.568 0.574 0.927)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.25
Average program size in population (points): 53.211
Average percent parens in population: 0.295
Minimum age in population: 35.4229154586792
Maximum age in population: 39.98616522550583
Average age in population: 38.05981384372711
Median age in population: 38.10369947552681
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 11423791
--- Timings ---
Current time: 1559583411962 milliseconds
Total Time:          74.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.3 seconds, 70.1%
Fitness Testing:     13.0 seconds, 17.4%
Report:               9.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 30                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 92                 
Correct output: 9                   | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 25                 
Correct output: 51                  | Program output: 85                 
Correct output: 27                  | Program output: 95                 
Correct output: 21                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 70                 
Correct output: 4                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 10                  | Program output: 100                
Correct output: 50                  | Program output: 98                 
Correct output: 24                  | Program output: 59                 
Correct output: 0                   | Program output: 53                 
Correct output: 25                  | Program output: 92                 
Correct output: 27                  | Program output: 78                 
Correct output: -77                 | Program output: 36                 
Correct output: -63                 | Program output: -38                
Correct output: -92                 | Program output: -76                
Correct output: -36                 | Program output: 87                 
Correct output: -73                 | Program output: -63                
Correct output: -58                 | Program output: -28                
Correct output: -55                 | Program output: 64                 
Correct output: -90                 | Program output: -62                
Correct output: -60                 | Program output: 62                 
Correct output: -92                 | Program output: 47                 
Correct output: -21                 | Program output: 32                 
Correct output: -85                 | Program output: -69                
Correct output: -59                 | Program output: 66                 
Correct output: -17                 | Program output: 96                 
Correct output: -94                 | Program output: -4                 
Correct output: 4                   | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: 40                 
Correct output: -61                 | Program output: 36                 
Correct output: -69                 | Program output: 92                 
Correct output: -42                 | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -28                
Correct output: -45                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 26                 
Correct output: -93                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 27                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -46                
Correct output: -89                 | Program output: -6                 
Correct output: -36                 | Program output: 81                 
Correct output: -31                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 56                 
Correct output: -100                | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: 85                 
Correct output: -93                 | Program output: -56                
Correct output: -88                 | Program output: -85                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: 48                 
Correct output: 5                   | Program output: 44                 
Correct output: -25                 | Program output: 30                 
Correct output: -96                 | Program output: 79                 
Correct output: -68                 | Program output: 81                 
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -70                
Correct output: -39                 | Program output: 9                  
Correct output: -52                 | Program output: 17                 
Correct output: -31                 | Program output: -27                
Correct output: -88                 | Program output: -87                
Correct output: -78                 | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_when (integer_shove exec_dup_items print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth exec_rot (print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () ()) (integer_sub integer_stackdepth boolean_eq in4) (integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in1 print_integer integer_dup_times) () integer_min) exec_noop integer_fromboolean integer_yankdup)
Lexicase best errors: [1 0 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_when (integer_shove exec_dup_items print_boolean integer_shove integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth exec_rot (print_boolean integer_shove integer_dup boolean_pop integer_dup exec_k_when_autoconstructing () ()) (integer_sub integer_stackdepth boolean_eq in4) (integer_rot boolean_eq exec_if (boolean_invert_first_then_and exec_dup_items in1 print_integer integer_dup_times) () integer_min) exec_noop integer_fromboolean integer_yankdup)
Zero cases best errors: [1 0 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 162 290 290 159 230 156 198 162 159)
Population mean number of elite cases: 2.10
Count of perfect (error zero) individuals by case: (290 162 290 290 159 230 156 198 162 159)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 2, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_dup})
Best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_empty exec_if () (tag_integer_777 integer_shove exec_stackdepth exec_dup (in3) integer_rot print_boolean boolean_swap integer_div integer_fromboolean) exec_y (boolean_or) integer_dup exec_shove ()) integer_lte)) integer_fromboolean integer_mod) (integer_pop exec_do*while (in4) in1) boolean_or exec_swap (exec_y_when_autoconstructing (exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_yankdup exec_swap (-28 exec_dup_items) () in4 exec_dup ()) () ())) ()) ())
Errors: [1 0 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 57
Size: 84
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 7.904
Median total errors in population: 9
Error averages by case: (0.71 0.838 0.71 0.71 0.841 0.77 0.844 0.802 0.838 0.841)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.642
Average program size in population (points): 58.236
Average percent parens in population: 0.300
Minimum age in population: 37.08475589752197
Maximum age in population: 41.41563667356968
Average age in population: 39.60128918543458
Median age in population: 39.63974142819643
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 12063821
--- Timings ---
Current time: 1559583415317 milliseconds
Total Time:          78.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.7 seconds, 70.0%
Fitness Testing:     13.6 seconds, 17.4%
Report:               9.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: 67                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 61                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 16                 
Correct output: 9                   | Program output: 24                 
Correct output: 36                  | Program output: 66                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 60                 
Correct output: 27                  | Program output: 56                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -26                
Correct output: -63                 | Program output: 87                 
Correct output: -92                 | Program output: 6                  
Correct output: -36                 | Program output: 31                 
Correct output: -73                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: 12                 
Correct output: -90                 | Program output: -7                 
Correct output: -60                 | Program output: 39                 
Correct output: -92                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: 80                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: 67                 
Correct output: -77                 | Program output: 64                 
Correct output: -61                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 18                 
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -30                
Correct output: -98                 | Program output: 3                  
Correct output: -56                 | Program output: 39                 
Correct output: -93                 | Program output: -23                
Correct output: -44                 | Program output: 1                  
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -8                 
Correct output: -51                 | Program output: 20                 
Correct output: -91                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output: 92                 
Correct output: -100                | Program output: 78                 
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output: 97                 
Correct output: -14                 | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: 17                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 74                 
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: 33                 
Correct output: -61                 | Program output: 51                 
Correct output: -80                 | Program output: 100                
Correct output: -39                 | Program output: 77                 
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: 98                 
Correct output: -88                 | Program output: 17                 
Correct output: -78                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1})
Lexicase best program: (integer_inc exec_s () (print_integer boolean_rot exec_when (integer_lt exec_k_when_autoconstructing (boolean_invert_first_then_and integer_empty integer_empty exec_if () (integer_inc exec_rot (integer_inc exec_do*count () exec_dup_items boolean_not integer_add integer_eq boolean_flush exec_y_when_autoconstructing () exec_k () (integer_dup_times) boolean_swap integer_div) (integer_fromboolean) (exec_y (boolean_or) integer_empty exec_shove ()) integer_lte)) (integer_fromboolean print_boolean)) boolean_flush integer_empty) (integer_pop integer_pop in4) in1)
Lexicase best errors: [0 1 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1})
Zero cases best program: (integer_inc exec_s () (print_integer boolean_rot exec_when (integer_lt exec_k_when_autoconstructing (boolean_invert_first_then_and integer_empty integer_empty exec_if () (integer_inc exec_rot (integer_inc exec_do*count () exec_dup_items boolean_not integer_add integer_eq boolean_flush exec_y_when_autoconstructing () exec_k () (integer_dup_times) boolean_swap integer_div) (integer_fromboolean) (exec_y (boolean_or) integer_empty exec_shove ()) integer_lte)) (integer_fromboolean print_boolean)) boolean_flush integer_empty) (integer_pop integer_pop in4) in1)
Zero cases best errors: [0 1 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (508 91 89 91 428 881 89 88 273 273)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (508 91 89 91 428 881 89 88 273 273)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1})
Best program: (integer_eq exec_s () (print_integer boolean_rot exec_when (integer_lt exec_k_when_autoconstructing (boolean_invert_first_then_and integer_empty integer_empty exec_if () (integer_inc exec_rot (integer_inc exec_do*count () exec_dup_items boolean_not integer_add integer_eq boolean_flush exec_y_when_autoconstructing () exec_k () (integer_dup_times) boolean_swap integer_div) (integer_fromboolean) (exec_y (boolean_or) integer_empty exec_shove ()) integer_lte)) (integer_fromboolean print_boolean)) boolean_flush integer_empty) (integer_pop integer_pop in4) in1)
Errors: [0 1 0 1 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 7.189
Median total errors in population: 7
Error averages by case: (0.492 0.909 0.911 0.909 0.572 0.119 0.911 0.912 0.727 0.727)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.558
Average program size in population (points): 51.941
Average percent parens in population: 0.291
Minimum age in population: 38.42240750789642
Maximum age in population: 43.03889413923025
Average age in population: 41.0460431650877
Median age in population: 41.10745406523347
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 12666920
--- Timings ---
Current time: 1559583418674 milliseconds
Total Time:          81.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.3 seconds, 70.1%
Fitness Testing:     14.1 seconds, 17.3%
Report:              10.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 30                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 92                 
Correct output: 9                   | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 25                 
Correct output: 51                  | Program output: 85                 
Correct output: 27                  | Program output: 95                 
Correct output: 21                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 70                 
Correct output: 4                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 10                  | Program output: 100                
Correct output: 50                  | Program output: 98                 
Correct output: 24                  | Program output: 59                 
Correct output: 0                   | Program output: 53                 
Correct output: 25                  | Program output: 92                 
Correct output: 27                  | Program output: 78                 
Correct output: -77                 | Program output: 36                 
Correct output: -63                 | Program output: -38                
Correct output: -92                 | Program output: -76                
Correct output: -36                 | Program output: 87                 
Correct output: -73                 | Program output: -63                
Correct output: -58                 | Program output: -28                
Correct output: -55                 | Program output: 64                 
Correct output: -90                 | Program output: -62                
Correct output: -60                 | Program output: 62                 
Correct output: -92                 | Program output: 47                 
Correct output: -21                 | Program output: 32                 
Correct output: -85                 | Program output: -69                
Correct output: -59                 | Program output: 66                 
Correct output: -17                 | Program output: 96                 
Correct output: -94                 | Program output: -4                 
Correct output: 4                   | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: 40                 
Correct output: -61                 | Program output: 36                 
Correct output: -69                 | Program output: 92                 
Correct output: -42                 | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -28                
Correct output: -45                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 26                 
Correct output: -93                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 27                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -46                
Correct output: -89                 | Program output: -6                 
Correct output: -36                 | Program output: 81                 
Correct output: -31                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 56                 
Correct output: -100                | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: 85                 
Correct output: -93                 | Program output: -56                
Correct output: -88                 | Program output: -85                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: 48                 
Correct output: 5                   | Program output: 44                 
Correct output: -25                 | Program output: 30                 
Correct output: -96                 | Program output: 79                 
Correct output: -68                 | Program output: 81                 
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -70                
Correct output: -39                 | Program output: 9                  
Correct output: -52                 | Program output: 17                 
Correct output: -31                 | Program output: -27                
Correct output: -88                 | Program output: -87                
Correct output: -78                 | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_333} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_767} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq})
Lexicase best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush) (exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (boolean_rot exec_when (exec_dup_items tag_integer_777 in1 tag_boolean_333) integer_div boolean_swap integer_div boolean_invert_first_then_and) exec_y (integer_swap exec_if (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_767 integer_dup_times) (boolean_swap integer_div integer_fromboolean)) (exec_y (boolean_or integer_empty integer_fromboolean)) integer_eq exec_dup (exec_shove () integer_lte)) integer_fromboolean integer_mult) () (integer_mult integer_flush integer_empty integer_pop) boolean_xor in4) in1)) (boolean_eq))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_333} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_767} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq})
Zero cases best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush) (exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (boolean_rot exec_when (exec_dup_items tag_integer_777 in1 tag_boolean_333) integer_div boolean_swap integer_div boolean_invert_first_then_and) exec_y (integer_swap exec_if (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_767 integer_dup_times) (boolean_swap integer_div integer_fromboolean)) (exec_y (boolean_or integer_empty integer_fromboolean)) integer_eq exec_dup (exec_shove () integer_lte)) integer_fromboolean integer_mult) () (integer_mult integer_flush integer_empty integer_pop) boolean_xor in4) in1)) (boolean_eq))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (58 232 293 876 291 291 59 60 58 232)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (58 232 293 876 291 291 59 60 58 232)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq})
Best program: (in2 exec_s () (print_integer) (boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_mult exec_do*count () exec_dup_items tag_integer_767 integer_dup_times boolean_swap integer_div integer_fromboolean) (exec_y (boolean_or integer_empty integer_fromboolean) integer_eq exec_dup (exec_shove () integer_lte)) integer_fromboolean boolean_flush)) integer_mult integer_empty integer_empty integer_pop) boolean_xor in4) in1) boolean_eq)
Errors: [0 1 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 49
Size: 66
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.55
Median total errors in population: 7
Error averages by case: (0.942 0.768 0.707 0.124 0.709 0.709 0.941 0.94 0.942 0.768)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.992
Average program size in population (points): 56.991
Average percent parens in population: 0.298
Minimum age in population: 39.96919441223145
Maximum age in population: 44.33811131119728
Average age in population: 42.61883912419528
Median age in population: 42.726343549788
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 13176475
--- Timings ---
Current time: 1559583421544 milliseconds
Total Time:          84.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.4 seconds, 70.3%
Fitness Testing:     14.6 seconds, 17.3%
Report:              10.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 30                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 92                 
Correct output: 9                   | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 25                 
Correct output: 51                  | Program output: 85                 
Correct output: 27                  | Program output: 95                 
Correct output: 21                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 70                 
Correct output: 4                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 10                  | Program output: 100                
Correct output: 50                  | Program output: 98                 
Correct output: 24                  | Program output: 59                 
Correct output: 0                   | Program output: 53                 
Correct output: 25                  | Program output: 92                 
Correct output: 27                  | Program output: 78                 
Correct output: -77                 | Program output: 36                 
Correct output: -63                 | Program output: -38                
Correct output: -92                 | Program output: -76                
Correct output: -36                 | Program output: 87                 
Correct output: -73                 | Program output: -63                
Correct output: -58                 | Program output: -28                
Correct output: -55                 | Program output: 64                 
Correct output: -90                 | Program output: -62                
Correct output: -60                 | Program output: 62                 
Correct output: -92                 | Program output: 47                 
Correct output: -21                 | Program output: 32                 
Correct output: -85                 | Program output: -69                
Correct output: -59                 | Program output: 66                 
Correct output: -17                 | Program output: 96                 
Correct output: -94                 | Program output: -4                 
Correct output: 4                   | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: 40                 
Correct output: -61                 | Program output: 36                 
Correct output: -69                 | Program output: 92                 
Correct output: -42                 | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -28                
Correct output: -45                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 26                 
Correct output: -93                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 27                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -46                
Correct output: -89                 | Program output: -6                 
Correct output: -36                 | Program output: 81                 
Correct output: -31                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 56                 
Correct output: -100                | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: 85                 
Correct output: -93                 | Program output: -56                
Correct output: -88                 | Program output: -85                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: 48                 
Correct output: 5                   | Program output: 44                 
Correct output: -25                 | Program output: 30                 
Correct output: -96                 | Program output: 79                 
Correct output: -68                 | Program output: 81                 
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -70                
Correct output: -39                 | Program output: 9                  
Correct output: -52                 | Program output: 17                 
Correct output: -31                 | Program output: -27                
Correct output: -88                 | Program output: -87                
Correct output: -78                 | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction tagged_945} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Lexicase best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub boolean_not boolean_rot boolean_invert_first_then_and integer_empty integer_empty integer_empty integer_dup_times) (boolean_swap integer_div) integer_fromboolean exec_y (boolean_or) integer_dup_times exec_shove () integer_lte integer_fromboolean print_boolean tagged_945 integer_empty integer_pop integer_pop in4 integer_pop boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_do*range () exec_yankdup exec_swap (-28 exec_dup_items) (in4)))
Lexicase best errors: [1 0 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 63
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction tagged_945} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Zero cases best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub boolean_not boolean_rot boolean_invert_first_then_and integer_empty integer_empty integer_empty integer_dup_times) (boolean_swap integer_div) integer_fromboolean exec_y (boolean_or) integer_dup_times exec_shove () integer_lte integer_fromboolean print_boolean tagged_945 integer_empty integer_pop integer_pop in4 integer_pop boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_do*range () exec_yankdup exec_swap (-28 exec_dup_items) (in4)))
Zero cases best errors: [1 0 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 63
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (373 226 73 73 226 226 866 373 194 373)
Population mean number of elite cases: 3.00
Count of perfect (error zero) individuals by case: (373 226 73 73 226 226 866 373 194 373)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (exec_swap (integer_shove exec_dup_items) (print_boolean integer_yankdup integer_dup boolean_pop integer_dup) exec_k_when_autoconstructing () () integer_sub integer_stackdepth boolean_eq in4 boolean_eq in4 exec_if (integer_dup_times in1 print_integer integer_dup_times) () integer_min integer_stackdepth integer_fromboolean boolean_invert_first_then_and)
Errors: [0 1 1 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 6.997
Median total errors in population: 6
Error averages by case: (0.627 0.774 0.927 0.927 0.774 0.774 0.134 0.627 0.806 0.627)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.42
Average program size in population (points): 50.212
Average percent parens in population: 0.290
Minimum age in population: 40.96919441223145
Maximum age in population: 45.79613501951098
Average age in population: 44.06411191089265
Median age in population: 44.17067160923034
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 13605268
--- Timings ---
Current time: 1559583424421 milliseconds
Total Time:          87.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.6 seconds, 70.5%
Fitness Testing:     15.0 seconds, 17.2%
Report:              10.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 3, :instruction print_boolean} {:close 0, :instruction tagged_945} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq})
Lexicase best program: (in3 integer_rot print_integer boolean_or exec_do*while () integer_inc exec_rot (integer_inc exec_do*count () exec_dup_items boolean_not integer_add integer_eq boolean_flush exec_y_when_autoconstructing () exec_k () (integer_dup_times) boolean_swap integer_div) (integer_fromboolean) (exec_y (print_integer) integer_empty exec_shove ()) integer_lte integer_fromboolean print_boolean boolean_flush integer_empty integer_pop integer_pop in4 integer_fromboolean print_boolean tagged_945 boolean_flush integer_mult integer_empty integer_empty integer_pop boolean_xor in4 in1 boolean_eq)
Lexicase best errors: [0 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 3, :instruction print_boolean} {:close 0, :instruction tagged_945} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq})
Zero cases best program: (in3 integer_rot print_integer boolean_or exec_do*while () integer_inc exec_rot (integer_inc exec_do*count () exec_dup_items boolean_not integer_add integer_eq boolean_flush exec_y_when_autoconstructing () exec_k () (integer_dup_times) boolean_swap integer_div) (integer_fromboolean) (exec_y (print_integer) integer_empty exec_shove ()) integer_lte integer_fromboolean print_boolean boolean_flush integer_empty integer_pop integer_pop in4 integer_fromboolean print_boolean tagged_945 boolean_flush integer_mult integer_empty integer_empty integer_pop boolean_xor in4 in1 boolean_eq)
Zero cases best errors: [0 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 152 96 152 152 152 96 328 95 96)
Population mean number of elite cases: 1.41
Count of perfect (error zero) individuals by case: (96 152 96 152 152 152 96 328 95 96)
Population mean number of perfect (error zero) cases: 1.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap})
Best program: (exec_s () (print_integer boolean_or in3 boolean_pop print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush boolean_and exec_pop (boolean_rot exec_when (integer_lt print_integer) integer_empty integer_swap exec_if (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items) (tag_integer_777 integer_add integer_eq exec_dup (exec_y_when_autoconstructing () exec_swap (boolean_yankdup boolean_swap) ()))) ())) ())
Errors: [0 1 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 52
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 8.585
Median total errors in population: 9
Error averages by case: (0.904 0.848 0.904 0.848 0.848 0.848 0.904 0.672 0.905 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.849
Average program size in population (points): 49.624
Average percent parens in population: 0.295
Minimum age in population: 41.96919441223145
Maximum age in population: 47.3735605655238
Average age in population: 45.60395105176233
Median age in population: 45.65235061431304
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 14018388
--- Timings ---
Current time: 1559583427376 milliseconds
Total Time:          90.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.9 seconds, 70.7%
Fitness Testing:     15.5 seconds, 17.1%
Report:              10.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 20                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 97                 
Correct output: 9                   | Program output: 54                 
Correct output: 36                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 51                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 63                 
Correct output: 2                   | Program output: 93                 
Correct output: 5                   | Program output: 22                 
Correct output: 4                   | Program output: 34                 
Correct output: 1                   | Program output: 67                 
Correct output: 10                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 29                 
Correct output: 0                   | Program output: 79                 
Correct output: 25                  | Program output: 60                 
Correct output: 27                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -8                 
Correct output: -36                 | Program output: -34                
Correct output: -73                 | Program output: -64                
Correct output: -58                 | Program output: -17                
Correct output: -55                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -50                
Correct output: -92                 | Program output: 100                
Correct output: -21                 | Program output: -14                
Correct output: -85                 | Program output: -30                
Correct output: -59                 | Program output: -59                
Correct output: -17                 | Program output: 86                 
Correct output: -94                 | Program output: 92                 
Correct output: 4                   | Program output: 73                 
Correct output: -53                 | Program output: 79                 
Correct output: -77                 | Program output: -63                
Correct output: -61                 | Program output: -61                
Correct output: -69                 | Program output: 30                 
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: 86                 
Correct output: -96                 | Program output: 96                 
Correct output: -46                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -91                 | Program output: 13                 
Correct output: -98                 | Program output: 90                 
Correct output: -56                 | Program output: -22                
Correct output: -93                 | Program output: -14                
Correct output: -44                 | Program output: 74                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 25                 
Correct output: -51                 | Program output: 91                 
Correct output: -91                 | Program output: -52                
Correct output: -89                 | Program output: 51                 
Correct output: -36                 | Program output: -36                
Correct output: -31                 | Program output: -26                
Correct output: -57                 | Program output: 72                 
Correct output: -96                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: 13                 
Correct output: -95                 | Program output: 86                 
Correct output: -28                 | Program output: 34                 
Correct output: -14                 | Program output: 61                 
Correct output: -93                 | Program output: 85                 
Correct output: -88                 | Program output: -71                
Correct output: -50                 | Program output: -36                
Correct output: -48                 | Program output: 17                 
Correct output: 5                   | Program output: 33                 
Correct output: -25                 | Program output: 53                 
Correct output: -96                 | Program output: -20                
Correct output: -68                 | Program output: 69                 
Correct output: -61                 | Program output: -26                
Correct output: -80                 | Program output: -59                
Correct output: -39                 | Program output: -19                
Correct output: -52                 | Program output: -52                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -70                
Correct output: -78                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_1} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_rot})
Lexicase best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush) (exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (boolean_rot exec_when (exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt print_integer) tagged_1 integer_swap exec_yank)) integer_inc exec_if (exec_rot () (exec_do*count () exec_dup_items) (tag_integer_777 integer_add boolean_xor exec_dup () exec_y_when_autoconstructing () exec_swap (integer_dup_times boolean_rot) (integer_div exec_do*count () exec_dup_items tag_integer_777 exec_shove () boolean_rot))) ())) () ()))) ())
Lexicase best errors: [0 0 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 76
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_1} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_rot})
Zero cases best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush) (exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (boolean_rot exec_when (exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt print_integer) tagged_1 integer_swap exec_yank)) integer_inc exec_if (exec_rot () (exec_do*count () exec_dup_items) (tag_integer_777 integer_add boolean_xor exec_dup () exec_y_when_autoconstructing () exec_swap (integer_dup_times boolean_rot) (integer_div exec_do*count () exec_dup_items tag_integer_777 exec_shove () boolean_rot))) ())) () ()))) ())
Zero cases best errors: [0 0 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 76
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 117 281 466 8 108 874 8 466 109)
Population mean number of elite cases: 2.55
Count of perfect (error zero) individuals by case: (108 117 281 466 8 108 874 8 466 109)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 2, :instruction exec_dup_items})
Best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_swap (exec_flush integer_sub exec_pop (integer_gt exec_when (integer_lt) exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc integer_empty exec_shove () integer_lte) () integer_fromboolean print_boolean)) boolean_flush integer_empty integer_pop boolean_xor in4) exec_y_when_autoconstructing ()) (boolean_eq exec_swap (exec_dup_times () exec_empty integer_flush integer_shove exec_s_when_autoconstructing (exec_swap (-28 exec_dup_items) ()) () ()) ())) ())
Errors: [0 0 1 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 45
Size: 70
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 7.455
Median total errors in population: 7
Error averages by case: (0.892 0.883 0.719 0.534 0.992 0.892 0.126 0.992 0.534 0.891)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.603
Average program size in population (points): 54.815
Average percent parens in population: 0.296
Minimum age in population: 43.97214214503765
Maximum age in population: 48.91856639273465
Average age in population: 47.06509323843243
Median age in population: 47.13721989700571
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 14643156
--- Timings ---
Current time: 1559583430154 milliseconds
Total Time:          93.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.9 seconds, 70.7%
Fitness Testing:     16.0 seconds, 17.2%
Report:              11.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_s () (print_integer boolean_or in3 boolean_pop print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () ()))) ())
Lexicase best errors: [1 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_s () (print_integer boolean_or in3 boolean_pop print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () ()))) ())
Zero cases best errors: [1 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (112 392 113 391 213 214 214 181 395 214)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (112 392 113 391 213 214 214 181 395 214)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count})
Best program: (in3 boolean_pop print_integer boolean_or exec_do*while () integer_inc exec_rot (integer_inc exec_do*count () exec_dup_items boolean_not integer_lte integer_eq exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap) exec_if (integer_inc exec_if (integer_inc exec_do*count ()) ()) ()) () ())
Errors: [1 1 1 1 0 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 35
Percent parens: 0.371
--- Population Statistics ---
Average total errors in population: 7.561
Median total errors in population: 8
Error averages by case: (0.888 0.608 0.887 0.609 0.787 0.786 0.786 0.819 0.605 0.786)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.611
Average program size in population (points): 57.288
Average percent parens in population: 0.310
Minimum age in population: 44.97214214503765
Maximum age in population: 50.49690974201076
Average age in population: 48.67374770102603
Median age in population: 48.78290386497974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 15052384
--- Timings ---
Current time: 1559583433568 milliseconds
Total Time:          96.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.6 seconds, 71.0%
Fitness Testing:     16.5 seconds, 17.0%
Report:              11.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup})
Lexicase best program: (in3 exec_noop print_integer boolean_or exec_do*while () integer_rot exec_rot (integer_inc exec_do*count () exec_dup_items exec_pop (exec_s_when_autoconstructing (exec_when (print_integer integer_dup_times)) (integer_min) (integer_stackdepth integer_yankdup))) () ())
Lexicase best errors: [1 1 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.379
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 2, :instruction integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup})
Zero cases best program: (in3 exec_noop print_integer boolean_or exec_do*while () integer_rot exec_rot (integer_inc exec_do*count () exec_dup_items exec_pop (exec_s_when_autoconstructing (exec_when (print_integer integer_dup_times)) (integer_min) (integer_stackdepth integer_yankdup))) () ())
Zero cases best errors: [1 1 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.379
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 158 460 203 160 460 619 459 85 545)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (87 158 460 203 160 460 619 459 85 545)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_767} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_y})
Best program: (in3 boolean_pop print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub boolean_eq exec_if () (boolean_invert_first_then_and integer_dec in3 exec_dup (exec_do*count () exec_dup_items exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_swap) exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_767 integer_dup_times) (boolean_swap integer_div integer_fromboolean)) exec_y ())))))
Errors: [1 1 0 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 56
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.764
Median total errors in population: 7
Error averages by case: (0.913 0.842 0.54 0.797 0.84 0.54 0.381 0.541 0.915 0.455)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.15
Average program size in population (points): 56.239
Average percent parens in population: 0.303
Minimum age in population: 45.97214214503765
Maximum age in population: 52.22716480714735
Average age in population: 50.13525896959333
Median age in population: 50.23087401175871
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 15591379
--- Timings ---
Current time: 1559583437117 milliseconds
Total Time:         100.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.3 seconds, 71.3%
Fitness Testing:     17.0 seconds, 17.0%
Report:              11.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: 67                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 61                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 16                 
Correct output: 9                   | Program output: 24                 
Correct output: 36                  | Program output: 66                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 60                 
Correct output: 27                  | Program output: 56                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -26                
Correct output: -63                 | Program output: 87                 
Correct output: -92                 | Program output: 6                  
Correct output: -36                 | Program output: 31                 
Correct output: -73                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: 12                 
Correct output: -90                 | Program output: -7                 
Correct output: -60                 | Program output: 39                 
Correct output: -92                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: 80                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: 67                 
Correct output: -77                 | Program output: 64                 
Correct output: -61                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 18                 
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -30                
Correct output: -98                 | Program output: 3                  
Correct output: -56                 | Program output: 39                 
Correct output: -93                 | Program output: -23                
Correct output: -44                 | Program output: 1                  
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -8                 
Correct output: -51                 | Program output: 20                 
Correct output: -91                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output: 92                 
Correct output: -100                | Program output: 78                 
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output: 97                 
Correct output: -14                 | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: 17                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 74                 
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: 33                 
Correct output: -61                 | Program output: 51                 
Correct output: -80                 | Program output: 100                
Correct output: -39                 | Program output: 77                 
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: 98                 
Correct output: -88                 | Program output: 17                 
Correct output: -78                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in3})
Lexicase best program: (exec_s () (print_integer boolean_or in3 boolean_pop boolean_flush exec_eq exec_shove ()) (in2 boolean_yank boolean_eq in4) integer_rot boolean_eq exec_if () (boolean_invert_first_then_and integer_dec in3))
Lexicase best errors: [0 1 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in3})
Zero cases best program: (exec_s () (print_integer boolean_or in3 boolean_pop boolean_flush exec_eq exec_shove ()) (in2 boolean_yank boolean_eq in4) integer_rot boolean_eq exec_if () (boolean_invert_first_then_and integer_dec in3))
Zero cases best errors: [0 1 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 164 164 164 894 894 407 172 173 152)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (172 164 164 164 894 894 407 172 173 152)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k})
Best program: (in2 exec_s () (in4 exec_s () (print_integer integer_min exec_do*while () in3 boolean_pop boolean_flush) (exec_eq exec_do*count (exec_flush exec_k_when_autoconstructing (exec_pop (boolean_rot exec_when (integer_lt exec_k_when_autoconstructing () (boolean_invert_first_then_and integer_empty integer_empty exec_if () (exec_if (exec_if (exec_do*times (exec_do*count () integer_min) in4) (integer_rot integer_lt exec_if (boolean_invert_first_then_and exec_dup_items in3 print_integer exec_k () ()) ())) ()))))) ()))) ())
Errors: [0 1 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 37
Size: 64
Percent parens: 0.422
--- Population Statistics ---
Average total errors in population: 6.644
Median total errors in population: 7
Error averages by case: (0.828 0.836 0.836 0.836 0.106 0.106 0.593 0.828 0.827 0.848)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.27
Average program size in population (points): 57.741
Average percent parens in population: 0.303
Minimum age in population: 48.00569674000144
Maximum age in population: 53.70097234816058
Average age in population: 51.67148925866868
Median age in population: 51.75699178289506
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 16111004
--- Timings ---
Current time: 1559583440233 milliseconds
Total Time:         103.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.6 seconds, 71.3%
Fitness Testing:     17.5 seconds, 16.9%
Report:              12.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 20                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 97                 
Correct output: 9                   | Program output: 54                 
Correct output: 36                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 51                  | Program output: 91                 
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 63                 
Correct output: 2                   | Program output: 93                 
Correct output: 5                   | Program output: 22                 
Correct output: 4                   | Program output: 34                 
Correct output: 1                   | Program output: 67                 
Correct output: 10                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 29                 
Correct output: 0                   | Program output: 79                 
Correct output: 25                  | Program output: 60                 
Correct output: 27                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -8                 
Correct output: -36                 | Program output: -34                
Correct output: -73                 | Program output: -64                
Correct output: -58                 | Program output: -17                
Correct output: -55                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -50                
Correct output: -92                 | Program output: 100                
Correct output: -21                 | Program output: -14                
Correct output: -85                 | Program output: -30                
Correct output: -59                 | Program output: -59                
Correct output: -17                 | Program output: 86                 
Correct output: -94                 | Program output: 92                 
Correct output: 4                   | Program output: 73                 
Correct output: -53                 | Program output: 79                 
Correct output: -77                 | Program output: -63                
Correct output: -61                 | Program output: -61                
Correct output: -69                 | Program output: 30                 
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: 86                 
Correct output: -96                 | Program output: 96                 
Correct output: -46                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -91                 | Program output: 13                 
Correct output: -98                 | Program output: 90                 
Correct output: -56                 | Program output: -22                
Correct output: -93                 | Program output: -14                
Correct output: -44                 | Program output: 74                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 25                 
Correct output: -51                 | Program output: 91                 
Correct output: -91                 | Program output: -52                
Correct output: -89                 | Program output: 51                 
Correct output: -36                 | Program output: -36                
Correct output: -31                 | Program output: -26                
Correct output: -57                 | Program output: 72                 
Correct output: -96                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: 13                 
Correct output: -95                 | Program output: 86                 
Correct output: -28                 | Program output: 34                 
Correct output: -14                 | Program output: 61                 
Correct output: -93                 | Program output: 85                 
Correct output: -88                 | Program output: -71                
Correct output: -50                 | Program output: -36                
Correct output: -48                 | Program output: 17                 
Correct output: 5                   | Program output: 33                 
Correct output: -25                 | Program output: 53                 
Correct output: -96                 | Program output: -20                
Correct output: -68                 | Program output: 69                 
Correct output: -61                 | Program output: -26                
Correct output: -80                 | Program output: -59                
Correct output: -39                 | Program output: -19                
Correct output: -52                 | Program output: -52                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -70                
Correct output: -78                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_767} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 1, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4})
Lexicase best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt) exec_shove () boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_767 integer_dup_times) (boolean_swap exec_k (integer_fromboolean) () exec_y (print_boolean) exec_do*times (integer_empty)) exec_if (integer_pop) (in4) in1) boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing (exec_empty integer_flush integer_shove boolean_and exec_yankdup exec_swap (-28 exec_do*times () in4) ())))) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.329
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_767} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 1, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4})
Zero cases best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_dup_items exec_flush integer_sub exec_pop (boolean_rot exec_when (integer_lt) exec_shove () boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc exec_if (integer_inc exec_do*count () exec_dup_items tag_integer_767 integer_dup_times) (boolean_swap exec_k (integer_fromboolean) () exec_y (print_boolean) exec_do*times (integer_empty)) exec_if (integer_pop) (in4) in1) boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing (exec_empty integer_flush integer_shove boolean_and exec_yankdup exec_swap (-28 exec_do*times () in4) ())))) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.329
--- Lexicase Population Statistics ---
Count of elite individuals by case: (376 375 375 901 375 908 901 95 301 301)
Population mean number of elite cases: 4.91
Count of perfect (error zero) individuals by case: (376 375 375 901 375 908 901 95 301 301)
Population mean number of perfect (error zero) cases: 4.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 3, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1})
Best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_rot (integer_inc exec_do*count () exec_dup_items boolean_not integer_add integer_eq boolean_flush exec_y_when_autoconstructing () exec_k (integer_dup_times) (boolean_swap boolean_yank) integer_fromboolean) (exec_y (boolean_empty) integer_empty exec_shove ()) () integer_lte) () integer_fromboolean print_boolean boolean_flush integer_empty integer_pop integer_pop in4 in1)
Errors: [0 0 0 0 0 0 0 1 1 1]
Total: 3
Mean: 0.3
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 5.092
Median total errors in population: 5
Error averages by case: (0.624 0.625 0.625 0.099 0.625 0.092 0.099 0.905 0.699 0.699)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.918
Average program size in population (points): 56.123
Average percent parens in population: 0.307
Minimum age in population: 50.38939921557903
Maximum age in population: 55.35085309352144
Average age in population: 53.156347135955
Median age in population: 53.22850145454868
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 16515649
--- Timings ---
Current time: 1559583443488 milliseconds
Total Time:         106.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.9 seconds, 71.5%
Fitness Testing:     17.9 seconds, 16.9%
Report:              12.3 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_or})
Lexicase best program: (in2 exec_s () (integer_eq exec_s () (print_integer) (boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (boolean_rot exec_when (exec_dup_items exec_y (boolean_or)))) () ()))) ())
Lexicase best errors: [0 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.429
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_or})
Zero cases best program: (in2 exec_s () (integer_eq exec_s () (print_integer) (boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (boolean_rot exec_when (exec_dup_items exec_y (boolean_or)))) () ()))) ())
Zero cases best errors: [0 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.429
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 536 245 6 640 6 108 6 245 6)
Population mean number of elite cases: 1.80
Count of perfect (error zero) individuals by case: (6 536 245 6 640 6 108 6 245 6)
Population mean number of perfect (error zero) cases: 1.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in3} {:close 0, :instruction tagged_945} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_shove ()) (integer_sub exec_pop (boolean_rot exec_when (exec_dup_items exec_shove ()) integer_lte) integer_fromboolean in3) tagged_945 integer_empty integer_pop integer_pop exec_when () in1 boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 exec_dup_items) (in4)) ()))
Errors: [0 1 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 58
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 8.196
Median total errors in population: 8
Error averages by case: (0.994 0.464 0.755 0.994 0.36 0.994 0.892 0.994 0.755 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.732
Average program size in population (points): 54.909
Average percent parens in population: 0.314
Minimum age in population: 51.38939921557903
Maximum age in population: 56.73698652525491
Average age in population: 54.65075549328121
Median age in population: 54.7074297712752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 16878508
--- Timings ---
Current time: 1559583446463 milliseconds
Total Time:         109.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.1 seconds, 71.4%
Fitness Testing:     18.3 seconds, 16.8%
Report:              12.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 67                 
Correct output: 9                   | Program output: 34                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 79                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 85                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: 44                 
Correct output: -91                 | Program output: -8                 
Correct output: -45                 | Program output: 85                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 72                 
Correct output: -36                 | Program output: 82                 
Correct output: -31                 | Program output: -4                 
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: 78                 
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -48                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 61                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 80                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in3} {:close 0, :instruction tagged_945} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Lexicase best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_shove ()) (integer_sub exec_pop (boolean_rot exec_when (exec_dup_items exec_shove ()) integer_lte) integer_fromboolean in3) tagged_945 integer_empty integer_pop integer_pop exec_when () in1 boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 exec_dup_items) (in4)) ()))
Lexicase best errors: [0 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in3} {:close 0, :instruction tagged_945} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Zero cases best program: (in2 exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_shove ()) (integer_sub exec_pop (boolean_rot exec_when (exec_dup_items exec_shove ()) integer_lte) integer_fromboolean in3) tagged_945 integer_empty integer_pop integer_pop exec_when () in1 boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 exec_dup_items) (in4)) ()))
Zero cases best errors: [0 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (913 71 500 141 142 912 499 71 499 199)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (913 71 500 141 142 912 499 71 499 199)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_or})
Best program: (in2 exec_s () (integer_eq exec_s () (print_integer) (boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (boolean_rot exec_when (exec_dup_items exec_y (boolean_or)))) () ()))) ())
Errors: [0 1 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 20
Size: 35
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 6.053
Median total errors in population: 6
Error averages by case: (0.087 0.929 0.5 0.859 0.858 0.088 0.501 0.929 0.501 0.801)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.54
Average program size in population (points): 59.213
Average percent parens in population: 0.336
Minimum age in population: 53.57733699138043
Maximum age in population: 57.71184461301891
Average age in population: 55.81225274514814
Median age in population: 55.8579966994912
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 17220061
--- Timings ---
Current time: 1559583450048 milliseconds
Total Time:         113.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.1 seconds, 71.7%
Fitness Testing:     18.7 seconds, 16.6%
Report:              13.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 30                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 92                 
Correct output: 9                   | Program output: 52                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 25                 
Correct output: 51                  | Program output: 85                 
Correct output: 27                  | Program output: 95                 
Correct output: 21                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 70                 
Correct output: 4                   | Program output: 26                 
Correct output: 1                   | Program output: 71                 
Correct output: 10                  | Program output: 100                
Correct output: 50                  | Program output: 98                 
Correct output: 24                  | Program output: 59                 
Correct output: 0                   | Program output: 53                 
Correct output: 25                  | Program output: 92                 
Correct output: 27                  | Program output: 78                 
Correct output: -77                 | Program output: 36                 
Correct output: -63                 | Program output: -38                
Correct output: -92                 | Program output: -76                
Correct output: -36                 | Program output: 87                 
Correct output: -73                 | Program output: -63                
Correct output: -58                 | Program output: -28                
Correct output: -55                 | Program output: 64                 
Correct output: -90                 | Program output: -62                
Correct output: -60                 | Program output: 62                 
Correct output: -92                 | Program output: 47                 
Correct output: -21                 | Program output: 32                 
Correct output: -85                 | Program output: -69                
Correct output: -59                 | Program output: 66                 
Correct output: -17                 | Program output: 96                 
Correct output: -94                 | Program output: -4                 
Correct output: 4                   | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: 40                 
Correct output: -61                 | Program output: 36                 
Correct output: -69                 | Program output: 92                 
Correct output: -42                 | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -28                
Correct output: -45                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: 26                 
Correct output: -93                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 27                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -46                
Correct output: -89                 | Program output: -6                 
Correct output: -36                 | Program output: 81                 
Correct output: -31                 | Program output: -20                
Correct output: -57                 | Program output: 14                 
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 56                 
Correct output: -100                | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: 85                 
Correct output: -93                 | Program output: -56                
Correct output: -88                 | Program output: -85                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: 48                 
Correct output: 5                   | Program output: 44                 
Correct output: -25                 | Program output: 30                 
Correct output: -96                 | Program output: 79                 
Correct output: -68                 | Program output: 81                 
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -70                
Correct output: -39                 | Program output: 9                  
Correct output: -52                 | Program output: 17                 
Correct output: -31                 | Program output: -27                
Correct output: -88                 | Program output: -87                
Correct output: -78                 | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in3} {:close 0, :instruction tagged_945} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Lexicase best program: (in2 in1 print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_shove () integer_sub exec_pop (boolean_rot exec_when (exec_dup_items exec_shove ()) integer_lte) integer_fromboolean in3 tagged_945 integer_empty integer_pop integer_pop exec_when () in1 boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 exec_dup_items) (in4)) ()))
Lexicase best errors: [0 1 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction in3} {:close 0, :instruction tagged_945} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Zero cases best program: (in2 in1 print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush exec_eq exec_shove () integer_sub exec_pop (boolean_rot exec_when (exec_dup_items exec_shove ()) integer_lte) integer_fromboolean in3 tagged_945 integer_empty integer_pop integer_pop exec_when () in1 boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 exec_dup_items) (in4)) ()))
Zero cases best errors: [0 1 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (174 338 204 174 173 338 338 898 207 173)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (174 338 204 174 173 338 338 898 207 173)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1})
Best program: (integer_eq exec_s () (print_integer boolean_rot exec_when (integer_lt exec_k_when_autoconstructing (boolean_invert_first_then_and integer_empty integer_empty exec_if () (integer_inc exec_rot (integer_inc exec_do*count (exec_dup_items boolean_not integer_add integer_eq boolean_flush exec_y_when_autoconstructing () exec_k () (integer_dup_times) boolean_swap exec_empty) integer_fromboolean) (exec_y (boolean_or) integer_empty exec_shove ()) (integer_lte)) integer_fromboolean print_boolean) () in1 integer_empty) integer_pop integer_pop in4) (in1))
Errors: [0 1 1 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 6.983
Median total errors in population: 6
Error averages by case: (0.826 0.662 0.796 0.826 0.827 0.662 0.662 0.102 0.793 0.827)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.332
Average program size in population (points): 58.214
Average percent parens in population: 0.326
Minimum age in population: 54.98887790241861
Maximum age in population: 59.5415154665061
Average age in population: 57.36431836739507
Median age in population: 57.40803583954767
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 17593206
--- Timings ---
Current time: 1559583452761 milliseconds
Total Time:         115.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.1 seconds, 71.8%
Fitness Testing:     19.1 seconds, 16.5%
Report:              13.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: 67                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 61                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 16                 
Correct output: 9                   | Program output: 24                 
Correct output: 36                  | Program output: 66                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 60                 
Correct output: 27                  | Program output: 56                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -26                
Correct output: -63                 | Program output: 87                 
Correct output: -92                 | Program output: 6                  
Correct output: -36                 | Program output: 31                 
Correct output: -73                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: 12                 
Correct output: -90                 | Program output: -7                 
Correct output: -60                 | Program output: 39                 
Correct output: -92                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: 80                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: 67                 
Correct output: -77                 | Program output: 64                 
Correct output: -61                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 18                 
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -30                
Correct output: -98                 | Program output: 3                  
Correct output: -56                 | Program output: 39                 
Correct output: -93                 | Program output: -23                
Correct output: -44                 | Program output: 1                  
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -8                 
Correct output: -51                 | Program output: 20                 
Correct output: -91                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output: 92                 
Correct output: -100                | Program output: 78                 
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output: 97                 
Correct output: -14                 | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: 17                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 74                 
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: 33                 
Correct output: -61                 | Program output: 51                 
Correct output: -80                 | Program output: 100                
Correct output: -39                 | Program output: 77                 
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: 98                 
Correct output: -88                 | Program output: 17                 
Correct output: -78                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_pop})
Lexicase best program: (exec_s () (print_integer boolean_stackdepth in3 boolean_pop integer_dup_times integer_mult exec_shove ()) (integer_sub integer_stackdepth boolean_eq in4) integer_rot exec_shove () boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc boolean_yankdup integer_inc exec_do*count () exec_dup_items tag_integer_767 integer_dup_times boolean_swap integer_div integer_fromboolean) exec_y (boolean_or integer_empty integer_fromboolean) integer_eq exec_dup (exec_shove () integer_lte) integer_fromboolean boolean_flush integer_mult integer_empty integer_empty integer_pop)
Lexicase best errors: [0 1 1 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 54
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_767} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_shove} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_pop})
Zero cases best program: (exec_s () (print_integer boolean_stackdepth in3 boolean_pop integer_dup_times integer_mult exec_shove ()) (integer_sub integer_stackdepth boolean_eq in4) integer_rot exec_shove () boolean_invert_first_then_and integer_empty integer_swap exec_if () (integer_inc boolean_yankdup integer_inc exec_do*count () exec_dup_items tag_integer_767 integer_dup_times boolean_swap integer_div integer_fromboolean) exec_y (boolean_or integer_empty integer_fromboolean) integer_eq exec_dup (exec_shove () integer_lte) integer_fromboolean boolean_flush integer_mult integer_empty integer_empty integer_pop)
Zero cases best errors: [0 1 1 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 54
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 322 317 317 324 68 202 68 317 204)
Population mean number of elite cases: 2.34
Count of perfect (error zero) individuals by case: (202 322 317 317 324 68 202 68 317 204)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_803} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_shove} {:close 0, :instruction tagged_339} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Best program: (exec_s () (print_integer boolean_or tagged_803 boolean_pop boolean_flush exec_eq exec_shove ()) (tagged_339 integer_stackdepth boolean_eq exec_do*while () integer_rot boolean_eq integer_lt exec_k_when_autoconstructing () (exec_shove (integer_empty integer_swap exec_dup () integer_pop exec_when () in1) boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 exec_dup_items) (in4)) ())))
Errors: [0 1 1 1 1 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 37
Size: 57
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 7.659
Median total errors in population: 7
Error averages by case: (0.798 0.678 0.683 0.683 0.676 0.932 0.798 0.932 0.683 0.796)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.159
Average program size in population (points): 57.808
Average percent parens in population: 0.325
Minimum age in population: 56.11303959030192
Maximum age in population: 60.77694288058592
Average age in population: 58.87294038053941
Median age in population: 58.96002192750984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.004
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 17967810
--- Timings ---
Current time: 1559583456421 milliseconds
Total Time:         119.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.9 seconds, 72.1%
Fitness Testing:     19.5 seconds, 16.4%
Report:              13.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -46                
Correct output: -4                  | Program output: 67                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 61                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: 27                 
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 16                 
Correct output: 9                   | Program output: 24                 
Correct output: 36                  | Program output: 66                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 60                 
Correct output: 27                  | Program output: 56                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 66                 
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 87                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 28                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -26                
Correct output: -63                 | Program output: 87                 
Correct output: -92                 | Program output: 6                  
Correct output: -36                 | Program output: 31                 
Correct output: -73                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: 12                 
Correct output: -90                 | Program output: -7                 
Correct output: -60                 | Program output: 39                 
Correct output: -92                 | Program output: -71                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: 80                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -57                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: 67                 
Correct output: -77                 | Program output: 64                 
Correct output: -61                 | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 18                 
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -30                
Correct output: -98                 | Program output: 3                  
Correct output: -56                 | Program output: 39                 
Correct output: -93                 | Program output: -23                
Correct output: -44                 | Program output: 1                  
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -8                 
Correct output: -51                 | Program output: 20                 
Correct output: -91                 | Program output: -30                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output: 92                 
Correct output: -100                | Program output: 78                 
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output: 97                 
Correct output: -14                 | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: 17                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 74                 
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: 33                 
Correct output: -61                 | Program output: 51                 
Correct output: -80                 | Program output: 100                
Correct output: -39                 | Program output: 77                 
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: 98                 
Correct output: -88                 | Program output: 17                 
Correct output: -78                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_lt} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1})
Lexicase best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush) (exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (boolean_rot exec_when (exec_dup_items exec_y (boolean_or) integer_empty integer_lt)) integer_lte) () (integer_fromboolean integer_sub)) exec_when (integer_empty) boolean_shove integer_pop in4) in1) ())
Lexicase best errors: [1 0 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 47
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_lt} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1})
Zero cases best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or exec_do*while () in3 boolean_pop boolean_flush) (exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (boolean_rot exec_when (exec_dup_items exec_y (boolean_or) integer_empty integer_lt)) integer_lte) () (integer_fromboolean integer_sub)) exec_when (integer_empty) boolean_shove integer_pop in4) in1) ())
Zero cases best errors: [1 0 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 47
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 226 226 159 287 225 160 224 287 223)
Population mean number of elite cases: 2.30
Count of perfect (error zero) individuals by case: (287 226 226 159 287 225 160 224 287 223)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (exec_s () (print_integer boolean_or in3 boolean_pop boolean_flush exec_eq exec_shove ()) (exec_k_when_autoconstructing (integer_stackdepth boolean_eq in4) (integer_rot boolean_eq exec_if () (boolean_invert_first_then_and))))
Errors: [1 0 0 1 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 16
Size: 25
Percent parens: 0.360
--- Population Statistics ---
Average total errors in population: 7.696
Median total errors in population: 7
Error averages by case: (0.713 0.774 0.774 0.841 0.713 0.775 0.84 0.776 0.713 0.777)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.105
Average program size in population (points): 56.474
Average percent parens in population: 0.327
Minimum age in population: 57.60598673402274
Maximum age in population: 62.31823228349367
Average age in population: 60.39233558635543
Median age in population: 60.45493340981102
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 18332814
--- Timings ---
Current time: 1559583459379 milliseconds
Total Time:         122.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.2 seconds, 72.1%
Fitness Testing:     19.9 seconds, 16.3%
Report:              14.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 439
Test mean error for best: 0.43900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 20                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 63                 
Correct output: 2                   | Program output: 67                 
Correct output: 5                   | Program output: 22                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 29                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -21                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: -14                
Correct output: -85                 | Program output: -41                
Correct output: -59                 | Program output: -59                
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 73                 
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -61                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: 76                 
Correct output: -96                 | Program output: 77                 
Correct output: -46                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 51                 
Correct output: -36                 | Program output: -36                
Correct output: -31                 | Program output: -26                
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -51                
Correct output: -28                 | Program output: 34                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -71                
Correct output: -50                 | Program output: -36                
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 53                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: -52                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush})
Lexicase best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (boolean_rot exec_when (exec_do*count () exec_dup_items tag_integer_777 integer_add integer_eq exec_dup (exec_yankdup integer_rot exec_when () boolean_swap integer_inc exec_do*count () exec_dup_items tag_integer_777 boolean_eq boolean_swap exec_y_when_autoconstructing (exec_do*while (in4) in4) in1) boolean_or exec_swap (exec_y_when_autoconstructing ()) (boolean_xor exec_y_when_autoconstructing () boolean_invert_second_then_and integer_flush)))) () ())) ())
Lexicase best errors: [1 0 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 68
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush})
Zero cases best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (boolean_rot exec_when (exec_do*count () exec_dup_items tag_integer_777 integer_add integer_eq exec_dup (exec_yankdup integer_rot exec_when () boolean_swap integer_inc exec_do*count () exec_dup_items tag_integer_777 boolean_eq boolean_swap exec_y_when_autoconstructing (exec_do*while (in4) in4) in1) boolean_or exec_swap (exec_y_when_autoconstructing ()) (boolean_xor exec_y_when_autoconstructing () boolean_invert_second_then_and integer_flush)))) () ())) ())
Zero cases best errors: [1 0 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 68
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (358 257 121 259 257 357 360 150 121 122)
Population mean number of elite cases: 2.36
Count of perfect (error zero) individuals by case: (358 257 121 259 257 357 360 150 121 122)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_777} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush})
Best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (boolean_rot exec_when (exec_do*count () exec_dup_items tag_integer_777 integer_add integer_eq exec_dup (exec_yankdup integer_rot exec_when () boolean_swap integer_inc exec_do*count () exec_dup_items tag_integer_777 boolean_eq boolean_swap exec_y_when_autoconstructing (exec_do*while (in4) in4) in1) boolean_or exec_swap (exec_y_when_autoconstructing ()) (boolean_xor exec_y_when_autoconstructing () boolean_invert_second_then_and integer_flush)))) () ())) ())
Errors: [1 0 0 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 45
Size: 68
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 7.638
Median total errors in population: 7
Error averages by case: (0.642 0.743 0.879 0.741 0.743 0.643 0.64 0.85 0.879 0.878)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.566
Average program size in population (points): 55.291
Average percent parens in population: 0.321
Minimum age in population: 58.72616242582444
Maximum age in population: 63.69624183246742
Average age in population: 61.82186368492359
Median age in population: 61.96258376405649
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 18718070
--- Timings ---
Current time: 1559583462410 milliseconds
Total Time:         125.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.6 seconds, 72.3%
Fitness Testing:     20.4 seconds, 16.2%
Report:              14.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 66                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Lexicase best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 exec_dup_items) (in4)) ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 41
Percent parens: 0.390
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Zero cases best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 exec_dup_items) (in4)) ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 41
Percent parens: 0.390
--- Lexicase Population Statistics ---
Count of elite individuals by case: (536 247 245 207 210 73 655 536 531 604)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (536 247 245 207 210 73 655 536 531 604)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_integer_777} {:close 0, :instruction in1} {:close 1, :instruction tag_boolean_341} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction tagged_945} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_y_when_autoconstructing})
Best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) exec_eq exec_do*count (tag_integer_777 in1 tag_boolean_341) integer_inc boolean_swap integer_div integer_rot) (exec_rot (boolean_or) (integer_empty integer_empty) () integer_lte integer_pop in4) in1 tagged_945 integer_empty integer_dup integer_pop in4 in1 boolean_or in4 in1 boolean_or boolean_pop exec_y_when_autoconstructing ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 39
Size: 51
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.156
Median total errors in population: 5
Error averages by case: (0.464 0.753 0.755 0.793 0.79 0.927 0.345 0.464 0.469 0.396)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.572
Average program size in population (points): 61.851
Average percent parens in population: 0.326
Minimum age in population: 60.35159714731344
Maximum age in population: 64.92902284821434
Average age in population: 63.44678821731134
Median age in population: 63.29261979682735
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 296
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 297
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 18998782
--- Timings ---
Current time: 1559583465031 milliseconds
Total Time:         127.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.5 seconds, 72.3%
Fitness Testing:     20.7 seconds, 16.2%
Report:              14.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 66                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or})
Lexicase best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (integer_rot) exec_rot (boolean_swap integer_div in3) (exec_y (boolean_or) integer_eq exec_shove ()) (integer_lte) integer_fromboolean print_boolean) () (boolean_flush integer_empty)) integer_pop integer_pop in4) (integer_pop in4) in1 boolean_or in4 in1 boolean_or)
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 56
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or})
Zero cases best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (integer_rot) exec_rot (boolean_swap integer_div in3) (exec_y (boolean_or) integer_eq exec_shove ()) (integer_lte) integer_fromboolean print_boolean) () (boolean_flush integer_empty)) integer_pop integer_pop in4) (integer_pop in4) in1 boolean_or in4 in1 boolean_or)
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 56
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (884 665 773 913 774 759 771 171 93 665)
Population mean number of elite cases: 6.47
Count of perfect (error zero) individuals by case: (884 665 773 913 774 759 771 171 93 665)
Population mean number of perfect (error zero) cases: 6.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 exec_dup_items) (in4)) ()))
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 25
Size: 41
Percent parens: 0.390
--- Population Statistics ---
Average total errors in population: 3.532
Median total errors in population: 2
Error averages by case: (0.116 0.335 0.227 0.087 0.226 0.241 0.229 0.829 0.907 0.335)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.605
Average program size in population (points): 49.845
Average percent parens in population: 0.311
Minimum age in population: 62.29691421203825
Maximum age in population: 66.24160475665326
Average age in population: 64.64502155787689
Median age in population: 64.72644752662598
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 19364347
--- Timings ---
Current time: 1559583467683 milliseconds
Total Time:         130.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.5 seconds, 72.3%
Fitness Testing:     21.1 seconds, 16.1%
Report:              14.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 82                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: 18                 
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 29                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 25                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 74                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 70                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 4                  
Correct output: 10                  | Program output: 31                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 48                 
Correct output: 0                   | Program output: 49                 
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 57                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: -38                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: 11                 
Correct output: -85                 | Program output: -69                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: 70                 
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -12                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -28                
Correct output: -45                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 27                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -6                 
Correct output: -36                 | Program output: 81                 
Correct output: -31                 | Program output: -20                
Correct output: -57                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -57                
Correct output: -88                 | Program output: -85                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: 30                 
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 17                 
Correct output: -31                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction tagged_945} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 integer_pop in4) (in1) tagged_945 integer_empty) () integer_dup integer_pop in4) in1 boolean_or in4 in1 boolean_or boolean_pop exec_y_when_autoconstructing ())
Lexicase best errors: [0 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction tagged_945} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 2, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 integer_pop in4) (in1) tagged_945 integer_empty) () integer_dup integer_pop in4) in1 boolean_or in4 in1 boolean_or boolean_pop exec_y_when_autoconstructing ())
Zero cases best errors: [0 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (862 368 365 881 869 412 66 368 412 365)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (862 368 365 881 869 412 66 368 412 365)
Population mean number of perfect (error zero) cases: 4.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Best program: (in2 exec_s () (exec_rot (exec_s () (print_integer boolean_or integer_yank) (in3 in1 integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 exec_dup_items) (in4)) ()) ()) ())
Errors: [0 0 0 0 0 1 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 25
Size: 44
Percent parens: 0.432
--- Population Statistics ---
Average total errors in population: 5.032
Median total errors in population: 5
Error averages by case: (0.138 0.632 0.635 0.119 0.131 0.588 0.934 0.632 0.588 0.635)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.057
Average program size in population (points): 50.218
Average percent parens in population: 0.327
Minimum age in population: 64.76212378180594
Maximum age in population: 67.75804454698368
Average age in population: 65.9810010118772
Median age in population: 66.12744855191818
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 19759771
--- Timings ---
Current time: 1559583470239 milliseconds
Total Time:         133.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        96.3 seconds, 72.3%
Fitness Testing:     21.5 seconds, 16.1%
Report:              15.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: 73                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: 95                 
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 91                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 66                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: 63                 
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: -73                
Correct output: -96                 | Program output: -29                
Correct output: -46                 | Program output: -40                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 18                 
Correct output: -91                 | Program output: -77                
Correct output: -98                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -32                
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -61                
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -67                
Correct output: -28                 | Program output: 59                 
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -6                 
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: 36                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or})
Lexicase best program: (in2 exec_s () (exec_k (exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (integer_rot) exec_rot (boolean_swap integer_div in3) (boolean_dup boolean_or) (integer_eq exec_shove ()) integer_lte) (integer_fromboolean exec_y ()) (integer_swap integer_empty)) integer_pop integer_pop in4) (integer_pop in4) in1) (boolean_or in4) in1 boolean_or)
Lexicase best errors: [0 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 58
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction boolean_or})
Zero cases best program: (in2 exec_s () (exec_k (exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) exec_eq exec_do*count (exec_s_when_autoconstructing (integer_sub exec_pop (integer_rot) exec_rot (boolean_swap integer_div in3) (boolean_dup boolean_or) (integer_eq exec_shove ()) integer_lte) (integer_fromboolean exec_y ()) (integer_swap integer_empty)) integer_pop integer_pop in4) (integer_pop in4) in1) (boolean_or in4) in1 boolean_or)
Zero cases best errors: [0 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 58
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (394 393 574 140 572 140 393 398 820 534)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (394 393 574 140 572 140 393 398 820 534)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Best program: (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_y_when_autoconstructing () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (exec_yankdup exec_swap (-28 exec_dup_items) (in4)) ()))
Errors: [0 0 0 1 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 25
Size: 41
Percent parens: 0.390
--- Population Statistics ---
Average total errors in population: 5.642
Median total errors in population: 6
Error averages by case: (0.606 0.607 0.426 0.86 0.428 0.86 0.607 0.602 0.18 0.466)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.316
Average program size in population (points): 48.857
Average percent parens in population: 0.344
Minimum age in population: 65.76212378180594
Maximum age in population: 69.03611735939012
Average age in population: 67.65461654788866
Median age in population: 67.76212378180594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 193
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 20138677
--- Timings ---
Current time: 1559583472734 milliseconds
Total Time:         135.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.1 seconds, 72.3%
Fitness Testing:     21.9 seconds, 16.1%
Report:              15.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: -38                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Lexicase best program: (in2 exec_s () (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 58
Percent parens: 0.379
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Zero cases best program: (in2 exec_s () (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 58
Percent parens: 0.379
--- Lexicase Population Statistics ---
Count of elite individuals by case: (542 498 323 545 451 500 920 450 323 666)
Population mean number of elite cases: 5.22
Count of perfect (error zero) individuals by case: (542 498 323 545 451 500 920 450 323 666)
Population mean number of perfect (error zero) cases: 5.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Best program: (in2 exec_s () (integer_eq exec_s () (exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ())) ())
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 37
Size: 62
Percent parens: 0.403
--- Population Statistics ---
Average total errors in population: 4.782
Median total errors in population: 4
Error averages by case: (0.458 0.502 0.677 0.455 0.549 0.5 0.08 0.55 0.677 0.334)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.408
Average program size in population (points): 49.315
Average percent parens in population: 0.346
Minimum age in population: 66.94884658015224
Maximum age in population: 70.6958012701846
Average age in population: 69.40028004503402
Median age in population: 69.35548518097909
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 191
Genome diversity (% unique genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.009
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 20564710
--- Timings ---
Current time: 1559583475466 milliseconds
Total Time:         138.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.9 seconds, 72.3%
Fitness Testing:     22.3 seconds, 16.2%
Report:              15.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: 49                 
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 55                 
Correct output: 21                  | Program output: 50                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 64                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -45                
Correct output: -63                 | Program output: -38                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -78                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -2                 
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -40                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -11                
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -84                
Correct output: -45                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: 14                 
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: 66                 
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 54                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: 15                 
Correct output: -31                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Lexicase best program: (in2 exec_s () (integer_eq exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 58
Percent parens: 0.379
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Zero cases best program: (in2 exec_s () (integer_eq exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 58
Percent parens: 0.379
--- Lexicase Population Statistics ---
Count of elite individuals by case: (344 906 784 905 444 784 448 899 785 784)
Population mean number of elite cases: 7.08
Count of perfect (error zero) individuals by case: (344 906 784 905 444 784 448 899 785 784)
Population mean number of perfect (error zero) cases: 7.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Best program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 37
Size: 59
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 2.917
Median total errors in population: 2
Error averages by case: (0.656 0.094 0.216 0.095 0.556 0.216 0.552 0.101 0.215 0.216)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.712
Average program size in population (points): 57.048
Average percent parens in population: 0.373
Minimum age in population: 69.40216588056566
Maximum age in population: 72.46365077724312
Average age in population: 71.03053215292123
Median age in population: 71.12052727973881
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.01
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 21108721
--- Timings ---
Current time: 1559583478387 milliseconds
Total Time:         141.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.7 seconds, 72.1%
Fitness Testing:     23.0 seconds, 16.3%
Report:              16.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -61                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: -52                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Lexicase best program: (in2 exec_s () (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_min) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 58
Percent parens: 0.379
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Zero cases best program: (in2 exec_s () (in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_min) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 58
Percent parens: 0.379
--- Lexicase Population Statistics ---
Count of elite individuals by case: (773 779 345 346 907 897 471 779 474 345)
Population mean number of elite cases: 6.12
Count of perfect (error zero) individuals by case: (773 779 345 346 907 897 471 779 474 345)
Population mean number of perfect (error zero) cases: 6.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction -28} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4})
Best program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 37
Size: 59
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 3.884
Median total errors in population: 3
Error averages by case: (0.227 0.221 0.655 0.654 0.093 0.103 0.529 0.221 0.526 0.655)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.953
Average program size in population (points): 57.407
Average percent parens in population: 0.373
Minimum age in population: 70.40216588056566
Maximum age in population: 74.35548518097909
Average age in population: 72.54112748578564
Median age in population: 72.5601461986105
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.01
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 21662546
--- Timings ---
Current time: 1559583481299 milliseconds
Total Time:         144.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.5 seconds, 71.9%
Fitness Testing:     23.6 seconds, 16.4%
Report:              16.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 49
Successful program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 59


Auto-simplifying with starting size: 59
step: 0
program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 500
program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 1000
program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 1500
program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 2000
program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 2500
program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 3000
program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 3500
program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 4000
program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 4500
program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

step: 5000
program: (in2 exec_s () (integer_eq in2 exec_s () (integer_eq exec_s () (print_integer boolean_or integer_yank) (integer_sub in1 integer_min) in1) (integer_min exec_swap (exec_y_when_autoconstructing ()) (exec_empty integer_yank) in3 boolean_pop integer_min) in1) (boolean_or exec_swap (exec_y_when_autoconstructing ()) (exec_empty exec_dup_times () exec_empty integer_flush integer_shove) exec_s_when_autoconstructing () (integer_dec exec_swap (-28 exec_dup_items) (in4)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 59

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 18                  | Program output: 18                 
Correct output: -95                 | Program output: -95                
Correct output: -4                  | Program output: -4                 
Correct output: -24                 | Program output: -24                
Correct output: -1                  | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -38                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: 27                  | Program output: 27                 
Correct output: 91                  | Program output: 91                 
Correct output: -15                 | Program output: -15                
Correct output: 27                  | Program output: 27                 
Correct output: -3                  | Program output: -3                 
Correct output: 12                  | Program output: 12                 
Correct output: 45                  | Program output: 45                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 51                  | Program output: 51                 
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 51                  | Program output: 51                 
Correct output: 2                   | Program output: 2                  
Correct output: 5                   | Program output: 5                  
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 50                  | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -58                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -21                 | Program output: -21                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: 4                   | Program output: 4                  
Correct output: -53                 | Program output: -53                
Correct output: -77                 | Program output: -77                
Correct output: -61                 | Program output: -61                
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -46                 | Program output: -46                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -44                 | Program output: -44                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -36                 | Program output: -36                
Correct output: -31                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -28                 | Program output: -28                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: 5                   | Program output: 5                  
Correct output: -25                 | Program output: -25                
Correct output: -96                 | Program output: -96                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -39                 | Program output: -39                
Correct output: -52                 | Program output: -52                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -78                
;;******************************
