Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[62 62 82 62] 62] [[-61 -61 -69 -61] -69] [[31 -66 31 31] -66] [[94 94 -91 94] -91] [[-28 -28 98 -28] -28] [[75 61 75 75] 61] [[76 76 -65 76] -65] [[-38 -38 -32 -38] -38] [[-12 79 79 79] -12] [[-55 -55 -55 88] -55] [(4 4 4 4) 4] [(-64 -64 -64 -64) -64] [(-49 -49 -49 -49) -49] [(8 8 8 8) 8] [(36 36 36 36) 36] [(91 32 9 85) 9] [(24 41 70 87) 24] [(70 5 45 41) 5] [(99 33 12 81) 12] [(28 85 88 67) 28] [(39 98 32 0) 0] [(62 99 3 82) 3] [(74 9 52 56) 9] [(24 34 85 88) 24] [(95 69 61 84) 61] [(64 2 96 22) 2] [(3 96 95 61) 3] [(94 62 11 49) 11] [(88 97 6 18) 6] [(44 18 39 17) 17] [(77 42 21 4) 4] [(44 79 42 32) 32] [(84 49 21 37) 21] [(92 50 68 77) 50] [(60 73 40 44) 40] [(-27 -14 77 -85) -85] [(28 92 -3 51) -3] [(-57 35 88 95) -57] [(-29 -9 -67 62) -67] [(-95 -2 -87 -62) -95] [(-72 -84 10 27) -84] [(74 43 55 87) 43] [(-29 20 20 47) -29] [(-62 64 -33 15) -62] [(38 -4 -55 7) -55] [(7 -98 -40 -18) -98] [(12 18 -85 -45) -85] [(96 -33 11 -7) -33] [(57 43 27 -97) -97] [(66 91 7 -25) -25] [(84 -1 84 25) -1] [(-20 17 -52 23) -52] [(27 19 63 -59) -59] [(89 18 55 95) 18] [(39 27 8 -17) -17] [(18 78 46 -63) -63] [(25 69 -58 -1) -58] [(-16 71 -35 30) -35] [(-95 -55 -96 -49) -96] [(12 -87 -59 -91) -91] [(-57 6 -22 -87) -87] [(-23 4 -79 61) -79] [(-17 -80 -88 63) -88] [(64 72 -70 -9) -70] [(-28 72 -64 47) -64] [(-45 -49 -23 27) -49] [(-63 97 58 -34) -63] [(57 63 -3 49) -3] [(-68 57 30 69) -68] [(-98 37 -53 62) -98] [(58 30 -95 -41) -95] [(-33 53 -79 -47) -79] [(2 -92 11 -6) -92] [(20 80 56 -34) -34] [(-77 62 28 75) -77] [(-17 -9 -49 -29) -49] [(-9 100 -11 -51) -51] [(-60 -87 -2 -37) -87] [(-25 33 -69 -96) -96] [(-88 -90 44 -4) -90] [(-16 61 -76 -71) -76] [(51 -82 15 -65) -82] [(52 32 -66 -13) -66] [(54 -34 46 -67) -67] [(-82 -85 -6 100) -85] [(73 -76 73 65) -76] [(72 26 -93 14) -93] [(-88 2 40 -32) -88] [(72 -50 62 -78) -78] [(30 -42 12 5) -42] [(-62 76 75 30) -62] [(77 1 100 32) 1] [(15 94 -26 -5) -26] [(22 -39 80 61) -39] [(79 -15 -20 96) -20])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[62 62 82 62] 62]
Train Case:   6 | Input/Output: [[-61 -61 -69 -61] -69]
Train Case:   7 | Input/Output: [[31 -66 31 31] -66]
Train Case:   8 | Input/Output: [[94 94 -91 94] -91]
Train Case:   9 | Input/Output: [[-28 -28 98 -28] -28]
Train Case:  10 | Input/Output: [[75 61 75 75] 61]
Train Case:  11 | Input/Output: [[76 76 -65 76] -65]
Train Case:  12 | Input/Output: [[-38 -38 -32 -38] -38]
Train Case:  13 | Input/Output: [[-12 79 79 79] -12]
Train Case:  14 | Input/Output: [[-55 -55 -55 88] -55]
Train Case:  15 | Input/Output: [(4 4 4 4) 4]
Train Case:  16 | Input/Output: [(-64 -64 -64 -64) -64]
Train Case:  17 | Input/Output: [(-49 -49 -49 -49) -49]
Train Case:  18 | Input/Output: [(8 8 8 8) 8]
Train Case:  19 | Input/Output: [(36 36 36 36) 36]
Train Case:  20 | Input/Output: [(91 32 9 85) 9]
Train Case:  21 | Input/Output: [(24 41 70 87) 24]
Train Case:  22 | Input/Output: [(70 5 45 41) 5]
Train Case:  23 | Input/Output: [(99 33 12 81) 12]
Train Case:  24 | Input/Output: [(28 85 88 67) 28]
Train Case:  25 | Input/Output: [(39 98 32 0) 0]
Train Case:  26 | Input/Output: [(62 99 3 82) 3]
Train Case:  27 | Input/Output: [(74 9 52 56) 9]
Train Case:  28 | Input/Output: [(24 34 85 88) 24]
Train Case:  29 | Input/Output: [(95 69 61 84) 61]
Train Case:  30 | Input/Output: [(64 2 96 22) 2]
Train Case:  31 | Input/Output: [(3 96 95 61) 3]
Train Case:  32 | Input/Output: [(94 62 11 49) 11]
Train Case:  33 | Input/Output: [(88 97 6 18) 6]
Train Case:  34 | Input/Output: [(44 18 39 17) 17]
Train Case:  35 | Input/Output: [(77 42 21 4) 4]
Train Case:  36 | Input/Output: [(44 79 42 32) 32]
Train Case:  37 | Input/Output: [(84 49 21 37) 21]
Train Case:  38 | Input/Output: [(92 50 68 77) 50]
Train Case:  39 | Input/Output: [(60 73 40 44) 40]
Train Case:  40 | Input/Output: [(-27 -14 77 -85) -85]
Train Case:  41 | Input/Output: [(28 92 -3 51) -3]
Train Case:  42 | Input/Output: [(-57 35 88 95) -57]
Train Case:  43 | Input/Output: [(-29 -9 -67 62) -67]
Train Case:  44 | Input/Output: [(-95 -2 -87 -62) -95]
Train Case:  45 | Input/Output: [(-72 -84 10 27) -84]
Train Case:  46 | Input/Output: [(74 43 55 87) 43]
Train Case:  47 | Input/Output: [(-29 20 20 47) -29]
Train Case:  48 | Input/Output: [(-62 64 -33 15) -62]
Train Case:  49 | Input/Output: [(38 -4 -55 7) -55]
Train Case:  50 | Input/Output: [(7 -98 -40 -18) -98]
Train Case:  51 | Input/Output: [(12 18 -85 -45) -85]
Train Case:  52 | Input/Output: [(96 -33 11 -7) -33]
Train Case:  53 | Input/Output: [(57 43 27 -97) -97]
Train Case:  54 | Input/Output: [(66 91 7 -25) -25]
Train Case:  55 | Input/Output: [(84 -1 84 25) -1]
Train Case:  56 | Input/Output: [(-20 17 -52 23) -52]
Train Case:  57 | Input/Output: [(27 19 63 -59) -59]
Train Case:  58 | Input/Output: [(89 18 55 95) 18]
Train Case:  59 | Input/Output: [(39 27 8 -17) -17]
Train Case:  60 | Input/Output: [(18 78 46 -63) -63]
Train Case:  61 | Input/Output: [(25 69 -58 -1) -58]
Train Case:  62 | Input/Output: [(-16 71 -35 30) -35]
Train Case:  63 | Input/Output: [(-95 -55 -96 -49) -96]
Train Case:  64 | Input/Output: [(12 -87 -59 -91) -91]
Train Case:  65 | Input/Output: [(-57 6 -22 -87) -87]
Train Case:  66 | Input/Output: [(-23 4 -79 61) -79]
Train Case:  67 | Input/Output: [(-17 -80 -88 63) -88]
Train Case:  68 | Input/Output: [(64 72 -70 -9) -70]
Train Case:  69 | Input/Output: [(-28 72 -64 47) -64]
Train Case:  70 | Input/Output: [(-45 -49 -23 27) -49]
Train Case:  71 | Input/Output: [(-63 97 58 -34) -63]
Train Case:  72 | Input/Output: [(57 63 -3 49) -3]
Train Case:  73 | Input/Output: [(-68 57 30 69) -68]
Train Case:  74 | Input/Output: [(-98 37 -53 62) -98]
Train Case:  75 | Input/Output: [(58 30 -95 -41) -95]
Train Case:  76 | Input/Output: [(-33 53 -79 -47) -79]
Train Case:  77 | Input/Output: [(2 -92 11 -6) -92]
Train Case:  78 | Input/Output: [(20 80 56 -34) -34]
Train Case:  79 | Input/Output: [(-77 62 28 75) -77]
Train Case:  80 | Input/Output: [(-17 -9 -49 -29) -49]
Train Case:  81 | Input/Output: [(-9 100 -11 -51) -51]
Train Case:  82 | Input/Output: [(-60 -87 -2 -37) -87]
Train Case:  83 | Input/Output: [(-25 33 -69 -96) -96]
Train Case:  84 | Input/Output: [(-88 -90 44 -4) -90]
Train Case:  85 | Input/Output: [(-16 61 -76 -71) -76]
Train Case:  86 | Input/Output: [(51 -82 15 -65) -82]
Train Case:  87 | Input/Output: [(52 32 -66 -13) -66]
Train Case:  88 | Input/Output: [(54 -34 46 -67) -67]
Train Case:  89 | Input/Output: [(-82 -85 -6 100) -85]
Train Case:  90 | Input/Output: [(73 -76 73 65) -76]
Train Case:  91 | Input/Output: [(72 26 -93 14) -93]
Train Case:  92 | Input/Output: [(-88 2 40 -32) -88]
Train Case:  93 | Input/Output: [(72 -50 62 -78) -78]
Train Case:  94 | Input/Output: [(30 -42 12 5) -42]
Train Case:  95 | Input/Output: [(-62 76 75 30) -62]
Train Case:  96 | Input/Output: [(77 1 100 32) 1]
Train Case:  97 | Input/Output: [(15 94 -26 -5) -26]
Train Case:  98 | Input/Output: [(22 -39 80 61) -39]
Train Case:  99 | Input/Output: [(79 -15 -20 96) -20]
Test Case:   0 | Input/Output: [[-29 33 -29 -29] -29]
Test Case:   1 | Input/Output: [[-25 18 18 18] -25]
Test Case:   2 | Input/Output: [[54 44 44 44] 44]
Test Case:   3 | Input/Output: [[43 55 55 55] 43]
Test Case:   4 | Input/Output: [[97 98 97 97] 97]
Test Case:   5 | Input/Output: [[-2 -2 -29 -2] -29]
Test Case:   6 | Input/Output: [[77 16 77 77] 16]
Test Case:   7 | Input/Output: [[-33 -33 -75 -33] -75]
Test Case:   8 | Input/Output: [[-58 -35 -58 -58] -58]
Test Case:   9 | Input/Output: [[88 88 88 -27] -27]
Test Case:  10 | Input/Output: [[-1 -1 45 -1] -1]
Test Case:  11 | Input/Output: [[61 61 61 67] 61]
Test Case:  12 | Input/Output: [[24 24 24 -48] -48]
Test Case:  13 | Input/Output: [[-52 -52 -52 -32] -52]
Test Case:  14 | Input/Output: [[53 -76 53 53] -76]
Test Case:  15 | Input/Output: [[8 7 8 8] 7]
Test Case:  16 | Input/Output: [[21 21 39 21] 21]
Test Case:  17 | Input/Output: [[-56 20 20 20] -56]
Test Case:  18 | Input/Output: [[-20 -91 -91 -91] -91]
Test Case:  19 | Input/Output: [[-92 34 -92 -92] -92]
Test Case:  20 | Input/Output: [[-38 -38 -38 12] -38]
Test Case:  21 | Input/Output: [[-13 -13 -61 -13] -61]
Test Case:  22 | Input/Output: [[-31 33 33 33] -31]
Test Case:  23 | Input/Output: [[24 68 68 68] 24]
Test Case:  24 | Input/Output: [[8 8 8 -96] -96]
Test Case:  25 | Input/Output: [[-31 -31 -31 -99] -99]
Test Case:  26 | Input/Output: [[13 -75 13 13] -75]
Test Case:  27 | Input/Output: [[-69 -69 2 -69] -69]
Test Case:  28 | Input/Output: [[-81 30 -81 -81] -81]
Test Case:  29 | Input/Output: [[63 -91 63 63] -91]
Test Case:  30 | Input/Output: [[98 -36 -36 -36] -36]
Test Case:  31 | Input/Output: [[-36 85 -36 -36] -36]
Test Case:  32 | Input/Output: [[-64 -64 -89 -64] -89]
Test Case:  33 | Input/Output: [[-5 -51 -51 -51] -51]
Test Case:  34 | Input/Output: [[20 51 20 20] 20]
Test Case:  35 | Input/Output: [[13 32 32 32] 13]
Test Case:  36 | Input/Output: [[-2 -2 -2 9] -2]
Test Case:  37 | Input/Output: [[88 89 88 88] 88]
Test Case:  38 | Input/Output: [[94 94 94 70] 70]
Test Case:  39 | Input/Output: [[86 -31 -31 -31] -31]
Test Case:  40 | Input/Output: [[6 6 6 -48] -48]
Test Case:  41 | Input/Output: [[-43 -32 -43 -43] -43]
Test Case:  42 | Input/Output: [[4 19 4 4] 4]
Test Case:  43 | Input/Output: [[-37 46 -37 -37] -37]
Test Case:  44 | Input/Output: [[-37 37 37 37] -37]
Test Case:  45 | Input/Output: [[25 25 25 -15] -15]
Test Case:  46 | Input/Output: [[-87 -88 -88 -88] -88]
Test Case:  47 | Input/Output: [[-93 37 37 37] -93]
Test Case:  48 | Input/Output: [[-50 -50 -50 62] -50]
Test Case:  49 | Input/Output: [[-97 -97 -97 -70] -97]
Test Case:  50 | Input/Output: [[52 -81 -81 -81] -81]
Test Case:  51 | Input/Output: [[-68 -19 -68 -68] -68]
Test Case:  52 | Input/Output: [[-21 7 -21 -21] -21]
Test Case:  53 | Input/Output: [[-37 -37 22 -37] -37]
Test Case:  54 | Input/Output: [[65 -46 -46 -46] -46]
Test Case:  55 | Input/Output: [[-54 -82 -54 -54] -82]
Test Case:  56 | Input/Output: [[63 50 50 50] 50]
Test Case:  57 | Input/Output: [[90 90 9 90] 9]
Test Case:  58 | Input/Output: [[-90 7 -90 -90] -90]
Test Case:  59 | Input/Output: [[-98 34 34 34] -98]
Test Case:  60 | Input/Output: [[-61 38 38 38] -61]
Test Case:  61 | Input/Output: [[16 16 -94 16] -94]
Test Case:  62 | Input/Output: [[-30 -30 -30 -57] -57]
Test Case:  63 | Input/Output: [[-51 -51 -51 11] -51]
Test Case:  64 | Input/Output: [[-31 -31 -31 100] -31]
Test Case:  65 | Input/Output: [[59 59 -37 59] -37]
Test Case:  66 | Input/Output: [[-21 -21 27 -21] -21]
Test Case:  67 | Input/Output: [[4 4 4 36] 4]
Test Case:  68 | Input/Output: [[-42 42 -42 -42] -42]
Test Case:  69 | Input/Output: [[-35 -35 -35 -65] -65]
Test Case:  70 | Input/Output: [[49 49 49 -88] -88]
Test Case:  71 | Input/Output: [[60 23 60 60] 23]
Test Case:  72 | Input/Output: [[98 87 87 87] 87]
Test Case:  73 | Input/Output: [[32 54 32 32] 32]
Test Case:  74 | Input/Output: [[99 99 36 99] 36]
Test Case:  75 | Input/Output: [[6 6 6 45] 6]
Test Case:  76 | Input/Output: [[61 39 39 39] 39]
Test Case:  77 | Input/Output: [[11 16 11 11] 11]
Test Case:  78 | Input/Output: [[-57 -69 -69 -69] -69]
Test Case:  79 | Input/Output: [[6 -12 -12 -12] -12]
Test Case:  80 | Input/Output: [[31 -89 -89 -89] -89]
Test Case:  81 | Input/Output: [[-74 -74 -88 -74] -88]
Test Case:  82 | Input/Output: [[-35 -4 -4 -4] -35]
Test Case:  83 | Input/Output: [[64 -53 -53 -53] -53]
Test Case:  84 | Input/Output: [[18 -98 18 18] -98]
Test Case:  85 | Input/Output: [[-91 -91 -91 35] -91]
Test Case:  86 | Input/Output: [[26 26 26 50] 26]
Test Case:  87 | Input/Output: [[-40 -51 -40 -40] -51]
Test Case:  88 | Input/Output: [[-3 16 16 16] -3]
Test Case:  89 | Input/Output: [[54 -50 -50 -50] -50]
Test Case:  90 | Input/Output: [[77 -21 77 77] -21]
Test Case:  91 | Input/Output: [[66 66 66 -10] -10]
Test Case:  92 | Input/Output: [[69 70 69 69] 69]
Test Case:  93 | Input/Output: [[-19 18 -19 -19] -19]
Test Case:  94 | Input/Output: [[50 50 50 33] 33]
Test Case:  95 | Input/Output: [[-22 -22 -22 62] -22]
Test Case:  96 | Input/Output: [[20 20 20 54] 20]
Test Case:  97 | Input/Output: [[78 78 99 78] 78]
Test Case:  98 | Input/Output: [[-3 -6 -3 -3] -6]
Test Case:  99 | Input/Output: [[-86 -86 12 -86] -86]
Test Case: 100 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 101 | Input/Output: [(17 17 17 17) 17]
Test Case: 102 | Input/Output: [(87 87 87 87) 87]
Test Case: 103 | Input/Output: [(4 4 4 4) 4]
Test Case: 104 | Input/Output: [(83 83 83 83) 83]
Test Case: 105 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 106 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 107 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 108 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 109 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 110 | Input/Output: [(36 36 36 36) 36]
Test Case: 111 | Input/Output: [(85 85 85 85) 85]
Test Case: 112 | Input/Output: [(89 89 89 89) 89]
Test Case: 113 | Input/Output: [(57 57 57 57) 57]
Test Case: 114 | Input/Output: [(17 17 17 17) 17]
Test Case: 115 | Input/Output: [(94 94 94 94) 94]
Test Case: 116 | Input/Output: [(67 67 67 67) 67]
Test Case: 117 | Input/Output: [(0 0 0 0) 0]
Test Case: 118 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 119 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 120 | Input/Output: [(74 74 74 74) 74]
Test Case: 121 | Input/Output: [(3 3 3 3) 3]
Test Case: 122 | Input/Output: [(6 6 6 6) 6]
Test Case: 123 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 124 | Input/Output: [(78 78 78 78) 78]
Test Case: 125 | Input/Output: [(14 14 14 14) 14]
Test Case: 126 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 127 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 128 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 129 | Input/Output: [(65 65 65 65) 65]
Test Case: 130 | Input/Output: [(42 42 42 42) 42]
Test Case: 131 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 132 | Input/Output: [(5 5 5 5) 5]
Test Case: 133 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 134 | Input/Output: [(75 75 75 75) 75]
Test Case: 135 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 136 | Input/Output: [(39 39 39 39) 39]
Test Case: 137 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 138 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 139 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 140 | Input/Output: [(96 96 96 96) 96]
Test Case: 141 | Input/Output: [(43 43 43 43) 43]
Test Case: 142 | Input/Output: [(52 52 52 52) 52]
Test Case: 143 | Input/Output: [(55 55 55 55) 55]
Test Case: 144 | Input/Output: [(1 1 1 1) 1]
Test Case: 145 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 146 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 147 | Input/Output: [(26 26 26 26) 26]
Test Case: 148 | Input/Output: [(66 66 66 66) 66]
Test Case: 149 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 150 | Input/Output: [(55 55 55 55) 55]
Test Case: 151 | Input/Output: [(0 0 0 0) 0]
Test Case: 152 | Input/Output: [(77 77 77 77) 77]
Test Case: 153 | Input/Output: [(86 86 86 86) 86]
Test Case: 154 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 155 | Input/Output: [(17 17 17 17) 17]
Test Case: 156 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 157 | Input/Output: [(37 37 37 37) 37]
Test Case: 158 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 159 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 160 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 161 | Input/Output: [(10 10 10 10) 10]
Test Case: 162 | Input/Output: [(88 88 88 88) 88]
Test Case: 163 | Input/Output: [(80 80 80 80) 80]
Test Case: 164 | Input/Output: [(24 24 24 24) 24]
Test Case: 165 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 166 | Input/Output: [(96 96 96 96) 96]
Test Case: 167 | Input/Output: [(81 81 81 81) 81]
Test Case: 168 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 169 | Input/Output: [(89 89 89 89) 89]
Test Case: 170 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 171 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 172 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 173 | Input/Output: [(0 0 0 0) 0]
Test Case: 174 | Input/Output: [(15 15 15 15) 15]
Test Case: 175 | Input/Output: [(0 0 0 0) 0]
Test Case: 176 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 177 | Input/Output: [(5 5 5 5) 5]
Test Case: 178 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 179 | Input/Output: [(96 96 96 96) 96]
Test Case: 180 | Input/Output: [(84 84 84 84) 84]
Test Case: 181 | Input/Output: [(14 14 14 14) 14]
Test Case: 182 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 183 | Input/Output: [(18 18 18 18) 18]
Test Case: 184 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 185 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 186 | Input/Output: [(53 53 53 53) 53]
Test Case: 187 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 188 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 189 | Input/Output: [(5 5 5 5) 5]
Test Case: 190 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 191 | Input/Output: [(31 31 31 31) 31]
Test Case: 192 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 193 | Input/Output: [(5 5 5 5) 5]
Test Case: 194 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 195 | Input/Output: [(40 40 40 40) 40]
Test Case: 196 | Input/Output: [(87 87 87 87) 87]
Test Case: 197 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 198 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 199 | Input/Output: [(54 54 54 54) 54]
Test Case: 200 | Input/Output: [(45 21 51 17) 17]
Test Case: 201 | Input/Output: [(16 83 65 76) 16]
Test Case: 202 | Input/Output: [(66 30 38 65) 30]
Test Case: 203 | Input/Output: [(32 60 50 42) 32]
Test Case: 204 | Input/Output: [(91 69 97 92) 69]
Test Case: 205 | Input/Output: [(71 21 57 95) 21]
Test Case: 206 | Input/Output: [(77 0 15 25) 0]
Test Case: 207 | Input/Output: [(61 34 50 91) 34]
Test Case: 208 | Input/Output: [(18 88 90 52) 18]
Test Case: 209 | Input/Output: [(44 36 7 63) 7]
Test Case: 210 | Input/Output: [(63 61 1 25) 1]
Test Case: 211 | Input/Output: [(92 32 55 34) 32]
Test Case: 212 | Input/Output: [(49 96 70 33) 33]
Test Case: 213 | Input/Output: [(46 36 25 6) 6]
Test Case: 214 | Input/Output: [(66 30 64 65) 30]
Test Case: 215 | Input/Output: [(65 19 65 39) 19]
Test Case: 216 | Input/Output: [(14 45 70 66) 14]
Test Case: 217 | Input/Output: [(36 25 34 10) 10]
Test Case: 218 | Input/Output: [(69 66 73 68) 66]
Test Case: 219 | Input/Output: [(6 5 0 64) 0]
Test Case: 220 | Input/Output: [(78 77 61 35) 35]
Test Case: 221 | Input/Output: [(99 96 92 35) 35]
Test Case: 222 | Input/Output: [(39 26 55 71) 26]
Test Case: 223 | Input/Output: [(37 19 20 84) 19]
Test Case: 224 | Input/Output: [(24 4 86 13) 4]
Test Case: 225 | Input/Output: [(69 45 83 54) 45]
Test Case: 226 | Input/Output: [(18 19 6 20) 6]
Test Case: 227 | Input/Output: [(29 60 95 87) 29]
Test Case: 228 | Input/Output: [(21 7 41 39) 7]
Test Case: 229 | Input/Output: [(27 6 55 39) 6]
Test Case: 230 | Input/Output: [(25 82 92 1) 1]
Test Case: 231 | Input/Output: [(53 2 36 11) 2]
Test Case: 232 | Input/Output: [(97 4 63 53) 4]
Test Case: 233 | Input/Output: [(100 71 26 47) 26]
Test Case: 234 | Input/Output: [(63 12 33 58) 12]
Test Case: 235 | Input/Output: [(85 77 46 10) 10]
Test Case: 236 | Input/Output: [(12 50 60 34) 12]
Test Case: 237 | Input/Output: [(2 25 83 58) 2]
Test Case: 238 | Input/Output: [(72 96 98 58) 58]
Test Case: 239 | Input/Output: [(11 80 38 59) 11]
Test Case: 240 | Input/Output: [(65 50 64 99) 50]
Test Case: 241 | Input/Output: [(11 75 14 69) 11]
Test Case: 242 | Input/Output: [(66 4 31 77) 4]
Test Case: 243 | Input/Output: [(38 10 42 68) 10]
Test Case: 244 | Input/Output: [(59 92 78 0) 0]
Test Case: 245 | Input/Output: [(85 96 45 53) 45]
Test Case: 246 | Input/Output: [(69 58 11 38) 11]
Test Case: 247 | Input/Output: [(75 12 30 23) 12]
Test Case: 248 | Input/Output: [(21 66 71 49) 21]
Test Case: 249 | Input/Output: [(63 90 0 70) 0]
Test Case: 250 | Input/Output: [(61 76 26 11) 11]
Test Case: 251 | Input/Output: [(25 46 91 37) 25]
Test Case: 252 | Input/Output: [(77 10 48 8) 8]
Test Case: 253 | Input/Output: [(55 69 47 44) 44]
Test Case: 254 | Input/Output: [(71 80 20 77) 20]
Test Case: 255 | Input/Output: [(26 74 56 77) 26]
Test Case: 256 | Input/Output: [(33 35 77 7) 7]
Test Case: 257 | Input/Output: [(65 55 4 55) 4]
Test Case: 258 | Input/Output: [(65 81 14 71) 14]
Test Case: 259 | Input/Output: [(9 75 13 87) 9]
Test Case: 260 | Input/Output: [(82 20 57 17) 17]
Test Case: 261 | Input/Output: [(7 57 21 38) 7]
Test Case: 262 | Input/Output: [(81 89 56 23) 23]
Test Case: 263 | Input/Output: [(97 29 38 59) 29]
Test Case: 264 | Input/Output: [(92 21 56 49) 21]
Test Case: 265 | Input/Output: [(73 65 25 27) 25]
Test Case: 266 | Input/Output: [(23 0 70 79) 0]
Test Case: 267 | Input/Output: [(54 37 75 5) 5]
Test Case: 268 | Input/Output: [(38 2 50 3) 2]
Test Case: 269 | Input/Output: [(12 4 27 22) 4]
Test Case: 270 | Input/Output: [(17 71 82 60) 17]
Test Case: 271 | Input/Output: [(40 4 97 94) 4]
Test Case: 272 | Input/Output: [(42 34 56 3) 3]
Test Case: 273 | Input/Output: [(96 86 92 97) 86]
Test Case: 274 | Input/Output: [(5 8 15 19) 5]
Test Case: 275 | Input/Output: [(78 30 87 90) 30]
Test Case: 276 | Input/Output: [(78 25 70 81) 25]
Test Case: 277 | Input/Output: [(97 98 30 72) 30]
Test Case: 278 | Input/Output: [(72 66 52 11) 11]
Test Case: 279 | Input/Output: [(77 97 52 52) 52]
Test Case: 280 | Input/Output: [(15 43 51 5) 5]
Test Case: 281 | Input/Output: [(53 81 7 31) 7]
Test Case: 282 | Input/Output: [(87 0 80 4) 0]
Test Case: 283 | Input/Output: [(81 66 75 27) 27]
Test Case: 284 | Input/Output: [(29 68 69 45) 29]
Test Case: 285 | Input/Output: [(44 75 83 29) 29]
Test Case: 286 | Input/Output: [(1 96 8 76) 1]
Test Case: 287 | Input/Output: [(5 23 45 64) 5]
Test Case: 288 | Input/Output: [(20 82 78 55) 20]
Test Case: 289 | Input/Output: [(86 7 86 47) 7]
Test Case: 290 | Input/Output: [(88 4 65 41) 4]
Test Case: 291 | Input/Output: [(60 80 49 66) 49]
Test Case: 292 | Input/Output: [(90 31 10 27) 10]
Test Case: 293 | Input/Output: [(4 63 62 97) 4]
Test Case: 294 | Input/Output: [(87 5 64 30) 5]
Test Case: 295 | Input/Output: [(86 30 40 52) 30]
Test Case: 296 | Input/Output: [(6 23 73 31) 6]
Test Case: 297 | Input/Output: [(16 25 1 80) 1]
Test Case: 298 | Input/Output: [(92 10 16 32) 10]
Test Case: 299 | Input/Output: [(57 2 56 59) 2]
Test Case: 300 | Input/Output: [(52 0 17 13) 0]
Test Case: 301 | Input/Output: [(87 65 99 99) 65]
Test Case: 302 | Input/Output: [(29 89 39 79) 29]
Test Case: 303 | Input/Output: [(59 3 81 75) 3]
Test Case: 304 | Input/Output: [(8 90 5 31) 5]
Test Case: 305 | Input/Output: [(46 24 55 43) 24]
Test Case: 306 | Input/Output: [(93 93 71 88) 71]
Test Case: 307 | Input/Output: [(89 18 48 20) 18]
Test Case: 308 | Input/Output: [(23 81 69 8) 8]
Test Case: 309 | Input/Output: [(31 41 43 76) 31]
Test Case: 310 | Input/Output: [(18 33 69 49) 18]
Test Case: 311 | Input/Output: [(88 70 65 61) 61]
Test Case: 312 | Input/Output: [(69 59 55 41) 41]
Test Case: 313 | Input/Output: [(62 44 0 47) 0]
Test Case: 314 | Input/Output: [(88 20 61 84) 20]
Test Case: 315 | Input/Output: [(50 83 70 94) 50]
Test Case: 316 | Input/Output: [(28 25 78 40) 25]
Test Case: 317 | Input/Output: [(54 67 8 99) 8]
Test Case: 318 | Input/Output: [(63 38 2 54) 2]
Test Case: 319 | Input/Output: [(53 5 47 86) 5]
Test Case: 320 | Input/Output: [(74 44 18 21) 18]
Test Case: 321 | Input/Output: [(39 65 30 44) 30]
Test Case: 322 | Input/Output: [(72 28 11 7) 7]
Test Case: 323 | Input/Output: [(65 79 2 65) 2]
Test Case: 324 | Input/Output: [(99 81 88 81) 81]
Test Case: 325 | Input/Output: [(6 57 82 85) 6]
Test Case: 326 | Input/Output: [(30 82 40 16) 16]
Test Case: 327 | Input/Output: [(6 52 74 99) 6]
Test Case: 328 | Input/Output: [(76 84 24 56) 24]
Test Case: 329 | Input/Output: [(81 77 26 40) 26]
Test Case: 330 | Input/Output: [(36 92 18 10) 10]
Test Case: 331 | Input/Output: [(80 51 89 87) 51]
Test Case: 332 | Input/Output: [(22 12 42 21) 12]
Test Case: 333 | Input/Output: [(79 13 22 1) 1]
Test Case: 334 | Input/Output: [(54 23 98 31) 23]
Test Case: 335 | Input/Output: [(36 14 16 63) 14]
Test Case: 336 | Input/Output: [(75 61 18 41) 18]
Test Case: 337 | Input/Output: [(54 92 99 67) 54]
Test Case: 338 | Input/Output: [(37 20 49 34) 20]
Test Case: 339 | Input/Output: [(88 1 77 51) 1]
Test Case: 340 | Input/Output: [(16 76 10 74) 10]
Test Case: 341 | Input/Output: [(55 51 90 40) 40]
Test Case: 342 | Input/Output: [(22 39 83 37) 22]
Test Case: 343 | Input/Output: [(79 31 46 84) 31]
Test Case: 344 | Input/Output: [(38 16 98 22) 16]
Test Case: 345 | Input/Output: [(73 32 38 89) 32]
Test Case: 346 | Input/Output: [(91 100 65 59) 59]
Test Case: 347 | Input/Output: [(68 91 21 42) 21]
Test Case: 348 | Input/Output: [(61 4 2 8) 2]
Test Case: 349 | Input/Output: [(62 54 28 10) 10]
Test Case: 350 | Input/Output: [(24 60 81 7) 7]
Test Case: 351 | Input/Output: [(43 23 56 80) 23]
Test Case: 352 | Input/Output: [(7 80 95 24) 7]
Test Case: 353 | Input/Output: [(63 86 78 26) 26]
Test Case: 354 | Input/Output: [(12 75 62 12) 12]
Test Case: 355 | Input/Output: [(9 1 93 3) 1]
Test Case: 356 | Input/Output: [(86 32 100 84) 32]
Test Case: 357 | Input/Output: [(92 87 84 37) 37]
Test Case: 358 | Input/Output: [(20 69 60 30) 20]
Test Case: 359 | Input/Output: [(57 42 66 42) 42]
Test Case: 360 | Input/Output: [(12 85 29 64) 12]
Test Case: 361 | Input/Output: [(93 19 1 94) 1]
Test Case: 362 | Input/Output: [(24 46 78 18) 18]
Test Case: 363 | Input/Output: [(61 72 9 50) 9]
Test Case: 364 | Input/Output: [(69 79 46 33) 33]
Test Case: 365 | Input/Output: [(36 47 90 97) 36]
Test Case: 366 | Input/Output: [(93 73 74 91) 73]
Test Case: 367 | Input/Output: [(37 31 91 72) 31]
Test Case: 368 | Input/Output: [(35 64 73 30) 30]
Test Case: 369 | Input/Output: [(70 11 48 82) 11]
Test Case: 370 | Input/Output: [(86 63 83 45) 45]
Test Case: 371 | Input/Output: [(0 68 43 33) 0]
Test Case: 372 | Input/Output: [(40 18 61 30) 18]
Test Case: 373 | Input/Output: [(21 12 97 95) 12]
Test Case: 374 | Input/Output: [(91 55 69 52) 52]
Test Case: 375 | Input/Output: [(54 73 64 73) 54]
Test Case: 376 | Input/Output: [(72 1 68 10) 1]
Test Case: 377 | Input/Output: [(32 31 100 41) 31]
Test Case: 378 | Input/Output: [(93 14 47 29) 14]
Test Case: 379 | Input/Output: [(15 100 83 87) 15]
Test Case: 380 | Input/Output: [(74 79 5 0) 0]
Test Case: 381 | Input/Output: [(97 34 47 47) 34]
Test Case: 382 | Input/Output: [(74 23 10 5) 5]
Test Case: 383 | Input/Output: [(13 80 32 80) 13]
Test Case: 384 | Input/Output: [(55 37 9 28) 9]
Test Case: 385 | Input/Output: [(37 80 60 4) 4]
Test Case: 386 | Input/Output: [(61 58 63 40) 40]
Test Case: 387 | Input/Output: [(15 37 25 35) 15]
Test Case: 388 | Input/Output: [(67 19 87 45) 19]
Test Case: 389 | Input/Output: [(22 71 35 8) 8]
Test Case: 390 | Input/Output: [(41 18 13 67) 13]
Test Case: 391 | Input/Output: [(78 6 59 78) 6]
Test Case: 392 | Input/Output: [(55 55 84 64) 55]
Test Case: 393 | Input/Output: [(18 29 100 57) 18]
Test Case: 394 | Input/Output: [(78 90 97 12) 12]
Test Case: 395 | Input/Output: [(10 26 13 4) 4]
Test Case: 396 | Input/Output: [(33 3 69 68) 3]
Test Case: 397 | Input/Output: [(68 96 2 67) 2]
Test Case: 398 | Input/Output: [(27 39 55 37) 27]
Test Case: 399 | Input/Output: [(6 25 65 18) 6]
Test Case: 400 | Input/Output: [(45 51 -94 -22) -94]
Test Case: 401 | Input/Output: [(26 20 -62 -31) -62]
Test Case: 402 | Input/Output: [(30 -53 -52 -20) -53]
Test Case: 403 | Input/Output: [(-24 -19 -95 50) -95]
Test Case: 404 | Input/Output: [(-72 27 84 -68) -72]
Test Case: 405 | Input/Output: [(-8 -33 -4 40) -33]
Test Case: 406 | Input/Output: [(-100 -35 71 -94) -100]
Test Case: 407 | Input/Output: [(-4 -63 7 49) -63]
Test Case: 408 | Input/Output: [(78 -2 -77 -62) -77]
Test Case: 409 | Input/Output: [(73 38 -69 100) -69]
Test Case: 410 | Input/Output: [(1 7 -36 98) -36]
Test Case: 411 | Input/Output: [(-56 75 -74 57) -74]
Test Case: 412 | Input/Output: [(20 70 -17 -9) -17]
Test Case: 413 | Input/Output: [(28 75 5 85) 5]
Test Case: 414 | Input/Output: [(23 -2 -10 86) -10]
Test Case: 415 | Input/Output: [(38 -58 70 20) -58]
Test Case: 416 | Input/Output: [(-55 -13 -66 69) -66]
Test Case: 417 | Input/Output: [(64 36 32 83) 32]
Test Case: 418 | Input/Output: [(32 -45 38 44) -45]
Test Case: 419 | Input/Output: [(2 -91 -29 -5) -91]
Test Case: 420 | Input/Output: [(22 66 77 -65) -65]
Test Case: 421 | Input/Output: [(67 63 14 96) 14]
Test Case: 422 | Input/Output: [(24 2 -53 -8) -53]
Test Case: 423 | Input/Output: [(-99 83 -2 -10) -99]
Test Case: 424 | Input/Output: [(13 -7 -10 -35) -35]
Test Case: 425 | Input/Output: [(4 -14 3 4) -14]
Test Case: 426 | Input/Output: [(72 -45 79 100) -45]
Test Case: 427 | Input/Output: [(-22 -62 -66 3) -66]
Test Case: 428 | Input/Output: [(-83 -57 74 -38) -83]
Test Case: 429 | Input/Output: [(35 16 -5 53) -5]
Test Case: 430 | Input/Output: [(-23 -75 67 -44) -75]
Test Case: 431 | Input/Output: [(18 58 -27 36) -27]
Test Case: 432 | Input/Output: [(83 -28 85 -90) -90]
Test Case: 433 | Input/Output: [(-7 -82 -36 80) -82]
Test Case: 434 | Input/Output: [(-70 11 50 -7) -70]
Test Case: 435 | Input/Output: [(-47 69 82 7) -47]
Test Case: 436 | Input/Output: [(-11 47 98 34) -11]
Test Case: 437 | Input/Output: [(41 10 32 -79) -79]
Test Case: 438 | Input/Output: [(81 -71 -100 -65) -100]
Test Case: 439 | Input/Output: [(100 51 72 -78) -78]
Test Case: 440 | Input/Output: [(32 -66 49 -43) -66]
Test Case: 441 | Input/Output: [(87 -14 -66 91) -66]
Test Case: 442 | Input/Output: [(-50 -93 -47 -48) -93]
Test Case: 443 | Input/Output: [(43 1 -88 17) -88]
Test Case: 444 | Input/Output: [(55 -67 9 23) -67]
Test Case: 445 | Input/Output: [(-22 57 92 79) -22]
Test Case: 446 | Input/Output: [(92 16 40 57) 16]
Test Case: 447 | Input/Output: [(58 -1 -6 77) -6]
Test Case: 448 | Input/Output: [(-45 -37 12 91) -45]
Test Case: 449 | Input/Output: [(62 47 19 1) 1]
Test Case: 450 | Input/Output: [(55 77 46 16) 16]
Test Case: 451 | Input/Output: [(75 29 -70 81) -70]
Test Case: 452 | Input/Output: [(-100 98 -42 70) -100]
Test Case: 453 | Input/Output: [(-54 -50 -28 22) -54]
Test Case: 454 | Input/Output: [(-5 95 -49 45) -49]
Test Case: 455 | Input/Output: [(-93 -8 9 -35) -93]
Test Case: 456 | Input/Output: [(64 -59 50 20) -59]
Test Case: 457 | Input/Output: [(83 -38 -19 -2) -38]
Test Case: 458 | Input/Output: [(36 -51 84 27) -51]
Test Case: 459 | Input/Output: [(48 36 86 -91) -91]
Test Case: 460 | Input/Output: [(-60 -40 42 62) -60]
Test Case: 461 | Input/Output: [(28 -63 79 9) -63]
Test Case: 462 | Input/Output: [(47 87 -38 -52) -52]
Test Case: 463 | Input/Output: [(-59 26 -82 17) -82]
Test Case: 464 | Input/Output: [(84 -43 -11 84) -43]
Test Case: 465 | Input/Output: [(32 -19 42 -37) -37]
Test Case: 466 | Input/Output: [(61 1 83 87) 1]
Test Case: 467 | Input/Output: [(3 14 25 -97) -97]
Test Case: 468 | Input/Output: [(-64 71 -51 63) -64]
Test Case: 469 | Input/Output: [(69 -84 77 41) -84]
Test Case: 470 | Input/Output: [(37 62 3 -40) -40]
Test Case: 471 | Input/Output: [(-32 -7 43 -60) -60]
Test Case: 472 | Input/Output: [(-30 -99 -9 84) -99]
Test Case: 473 | Input/Output: [(55 -57 -26 -45) -57]
Test Case: 474 | Input/Output: [(-79 78 -41 -58) -79]
Test Case: 475 | Input/Output: [(50 12 -38 55) -38]
Test Case: 476 | Input/Output: [(42 -95 -98 -71) -98]
Test Case: 477 | Input/Output: [(-28 4 -99 13) -99]
Test Case: 478 | Input/Output: [(69 62 -5 -12) -12]
Test Case: 479 | Input/Output: [(-87 62 62 66) -87]
Test Case: 480 | Input/Output: [(42 -82 -44 -27) -82]
Test Case: 481 | Input/Output: [(77 24 33 -2) -2]
Test Case: 482 | Input/Output: [(-100 9 48 -5) -100]
Test Case: 483 | Input/Output: [(66 88 85 38) 38]
Test Case: 484 | Input/Output: [(-5 83 56 46) -5]
Test Case: 485 | Input/Output: [(45 40 67 21) 21]
Test Case: 486 | Input/Output: [(64 -60 -10 -47) -60]
Test Case: 487 | Input/Output: [(98 -39 -5 -78) -78]
Test Case: 488 | Input/Output: [(59 -71 -77 65) -77]
Test Case: 489 | Input/Output: [(92 77 68 -92) -92]
Test Case: 490 | Input/Output: [(-80 20 88 55) -80]
Test Case: 491 | Input/Output: [(-63 -58 -100 1) -100]
Test Case: 492 | Input/Output: [(9 44 -70 -18) -70]
Test Case: 493 | Input/Output: [(8 -9 6 90) -9]
Test Case: 494 | Input/Output: [(61 41 -36 -66) -66]
Test Case: 495 | Input/Output: [(6 48 -44 -78) -78]
Test Case: 496 | Input/Output: [(-19 -31 -79 13) -79]
Test Case: 497 | Input/Output: [(-89 -11 37 -3) -89]
Test Case: 498 | Input/Output: [(34 -41 -54 -61) -61]
Test Case: 499 | Input/Output: [(67 -6 4 -99) -99]
Test Case: 500 | Input/Output: [(14 98 -38 -82) -82]
Test Case: 501 | Input/Output: [(64 -93 56 0) -93]
Test Case: 502 | Input/Output: [(100 38 69 -1) -1]
Test Case: 503 | Input/Output: [(-93 62 97 -66) -93]
Test Case: 504 | Input/Output: [(-14 -82 38 16) -82]
Test Case: 505 | Input/Output: [(-73 -80 -45 -59) -80]
Test Case: 506 | Input/Output: [(62 -86 -32 -51) -86]
Test Case: 507 | Input/Output: [(0 100 25 -5) -5]
Test Case: 508 | Input/Output: [(-66 42 21 -53) -66]
Test Case: 509 | Input/Output: [(-17 94 -66 -75) -75]
Test Case: 510 | Input/Output: [(56 76 -74 64) -74]
Test Case: 511 | Input/Output: [(92 -91 -31 -26) -91]
Test Case: 512 | Input/Output: [(-74 72 -85 19) -85]
Test Case: 513 | Input/Output: [(11 -20 71 65) -20]
Test Case: 514 | Input/Output: [(14 -68 41 87) -68]
Test Case: 515 | Input/Output: [(53 7 22 -76) -76]
Test Case: 516 | Input/Output: [(39 -1 71 59) -1]
Test Case: 517 | Input/Output: [(52 -86 -13 76) -86]
Test Case: 518 | Input/Output: [(-96 39 1 -88) -96]
Test Case: 519 | Input/Output: [(90 78 -72 -39) -72]
Test Case: 520 | Input/Output: [(-56 -27 -67 -26) -67]
Test Case: 521 | Input/Output: [(-89 -41 64 -87) -89]
Test Case: 522 | Input/Output: [(27 -85 -31 -34) -85]
Test Case: 523 | Input/Output: [(-55 81 -63 30) -63]
Test Case: 524 | Input/Output: [(-57 41 -4 7) -57]
Test Case: 525 | Input/Output: [(92 22 20 -77) -77]
Test Case: 526 | Input/Output: [(-91 72 1 9) -91]
Test Case: 527 | Input/Output: [(-87 -16 30 -48) -87]
Test Case: 528 | Input/Output: [(96 77 -44 -59) -59]
Test Case: 529 | Input/Output: [(-24 29 86 -33) -33]
Test Case: 530 | Input/Output: [(-100 15 61 33) -100]
Test Case: 531 | Input/Output: [(-35 21 48 -66) -66]
Test Case: 532 | Input/Output: [(-92 85 15 3) -92]
Test Case: 533 | Input/Output: [(97 32 32 66) 32]
Test Case: 534 | Input/Output: [(48 5 3 -96) -96]
Test Case: 535 | Input/Output: [(76 -76 47 -75) -76]
Test Case: 536 | Input/Output: [(-47 -44 -28 -77) -77]
Test Case: 537 | Input/Output: [(-95 -93 -67 -14) -95]
Test Case: 538 | Input/Output: [(49 95 -88 91) -88]
Test Case: 539 | Input/Output: [(-4 65 -1 35) -4]
Test Case: 540 | Input/Output: [(-46 16 -91 -86) -91]
Test Case: 541 | Input/Output: [(14 49 1 100) 1]
Test Case: 542 | Input/Output: [(-63 -55 0 60) -63]
Test Case: 543 | Input/Output: [(-39 -54 -81 16) -81]
Test Case: 544 | Input/Output: [(13 54 -94 -9) -94]
Test Case: 545 | Input/Output: [(-27 37 -42 -65) -65]
Test Case: 546 | Input/Output: [(65 23 16 -21) -21]
Test Case: 547 | Input/Output: [(93 14 -73 -6) -73]
Test Case: 548 | Input/Output: [(-38 89 -74 50) -74]
Test Case: 549 | Input/Output: [(28 -32 71 29) -32]
Test Case: 550 | Input/Output: [(84 -59 -78 74) -78]
Test Case: 551 | Input/Output: [(23 -42 -7 -82) -82]
Test Case: 552 | Input/Output: [(21 78 -22 58) -22]
Test Case: 553 | Input/Output: [(15 54 -70 -36) -70]
Test Case: 554 | Input/Output: [(63 -57 -64 26) -64]
Test Case: 555 | Input/Output: [(-60 -63 0 66) -63]
Test Case: 556 | Input/Output: [(91 26 -96 -99) -99]
Test Case: 557 | Input/Output: [(-8 -26 12 49) -26]
Test Case: 558 | Input/Output: [(54 -21 11 -89) -89]
Test Case: 559 | Input/Output: [(50 24 30 55) 24]
Test Case: 560 | Input/Output: [(-83 31 34 94) -83]
Test Case: 561 | Input/Output: [(-13 -53 -14 -4) -53]
Test Case: 562 | Input/Output: [(-85 95 84 -38) -85]
Test Case: 563 | Input/Output: [(86 29 -51 23) -51]
Test Case: 564 | Input/Output: [(89 -45 26 14) -45]
Test Case: 565 | Input/Output: [(-79 -44 -10 -14) -79]
Test Case: 566 | Input/Output: [(-76 -19 -20 -72) -76]
Test Case: 567 | Input/Output: [(100 -59 -69 -22) -69]
Test Case: 568 | Input/Output: [(-49 -89 -73 10) -89]
Test Case: 569 | Input/Output: [(-33 -60 -45 -92) -92]
Test Case: 570 | Input/Output: [(2 39 70 3) 2]
Test Case: 571 | Input/Output: [(-42 -86 76 79) -86]
Test Case: 572 | Input/Output: [(99 15 -35 -90) -90]
Test Case: 573 | Input/Output: [(-31 -4 95 68) -31]
Test Case: 574 | Input/Output: [(-5 28 36 -48) -48]
Test Case: 575 | Input/Output: [(-56 -32 -100 -76) -100]
Test Case: 576 | Input/Output: [(24 0 -99 61) -99]
Test Case: 577 | Input/Output: [(-54 78 26 -6) -54]
Test Case: 578 | Input/Output: [(-4 -63 -53 -41) -63]
Test Case: 579 | Input/Output: [(93 5 -84 74) -84]
Test Case: 580 | Input/Output: [(-51 36 82 42) -51]
Test Case: 581 | Input/Output: [(-65 -26 55 -51) -65]
Test Case: 582 | Input/Output: [(84 -79 59 98) -79]
Test Case: 583 | Input/Output: [(30 95 -10 13) -10]
Test Case: 584 | Input/Output: [(-77 49 -82 56) -82]
Test Case: 585 | Input/Output: [(46 -27 -72 -12) -72]
Test Case: 586 | Input/Output: [(3 65 -64 -8) -64]
Test Case: 587 | Input/Output: [(-84 -35 76 -18) -84]
Test Case: 588 | Input/Output: [(13 95 61 16) 13]
Test Case: 589 | Input/Output: [(-49 28 4 -16) -49]
Test Case: 590 | Input/Output: [(-27 -54 -12 -83) -83]
Test Case: 591 | Input/Output: [(53 24 67 -66) -66]
Test Case: 592 | Input/Output: [(5 -40 25 -66) -66]
Test Case: 593 | Input/Output: [(28 -17 -49 95) -49]
Test Case: 594 | Input/Output: [(-29 98 86 -39) -39]
Test Case: 595 | Input/Output: [(-33 -72 38 -7) -72]
Test Case: 596 | Input/Output: [(62 18 -44 2) -44]
Test Case: 597 | Input/Output: [(-47 85 -40 -25) -47]
Test Case: 598 | Input/Output: [(9 -26 -14 3) -26]
Test Case: 599 | Input/Output: [(83 -65 -68 26) -68]
Test Case: 600 | Input/Output: [(-23 37 27 -79) -79]
Test Case: 601 | Input/Output: [(49 -70 12 -19) -70]
Test Case: 602 | Input/Output: [(-9 -72 37 83) -72]
Test Case: 603 | Input/Output: [(69 -53 70 65) -53]
Test Case: 604 | Input/Output: [(67 -10 -99 65) -99]
Test Case: 605 | Input/Output: [(-92 -82 15 71) -92]
Test Case: 606 | Input/Output: [(-35 43 -92 -65) -92]
Test Case: 607 | Input/Output: [(-52 -32 -47 -58) -58]
Test Case: 608 | Input/Output: [(-30 76 -52 43) -52]
Test Case: 609 | Input/Output: [(-81 41 100 -65) -81]
Test Case: 610 | Input/Output: [(79 27 -89 51) -89]
Test Case: 611 | Input/Output: [(-24 69 6 -46) -46]
Test Case: 612 | Input/Output: [(-82 -33 3 -13) -82]
Test Case: 613 | Input/Output: [(57 -16 -53 -58) -58]
Test Case: 614 | Input/Output: [(23 -52 16 67) -52]
Test Case: 615 | Input/Output: [(47 -12 3 5) -12]
Test Case: 616 | Input/Output: [(-94 -8 50 77) -94]
Test Case: 617 | Input/Output: [(-71 -65 -83 0) -83]
Test Case: 618 | Input/Output: [(-9 28 83 -5) -9]
Test Case: 619 | Input/Output: [(-54 -58 50 -91) -91]
Test Case: 620 | Input/Output: [(2 -69 59 17) -69]
Test Case: 621 | Input/Output: [(-35 -63 48 91) -63]
Test Case: 622 | Input/Output: [(73 4 84 18) 4]
Test Case: 623 | Input/Output: [(96 -47 91 -98) -98]
Test Case: 624 | Input/Output: [(-36 -18 -74 -24) -74]
Test Case: 625 | Input/Output: [(-3 -32 -18 -21) -32]
Test Case: 626 | Input/Output: [(71 57 33 -39) -39]
Test Case: 627 | Input/Output: [(50 49 16 18) 16]
Test Case: 628 | Input/Output: [(-18 60 -57 -10) -57]
Test Case: 629 | Input/Output: [(48 -45 67 92) -45]
Test Case: 630 | Input/Output: [(-58 82 -50 -64) -64]
Test Case: 631 | Input/Output: [(13 -100 82 -60) -100]
Test Case: 632 | Input/Output: [(27 31 83 32) 27]
Test Case: 633 | Input/Output: [(-26 -63 32 17) -63]
Test Case: 634 | Input/Output: [(-68 35 41 -99) -99]
Test Case: 635 | Input/Output: [(61 -33 87 -44) -44]
Test Case: 636 | Input/Output: [(-32 71 14 -100) -100]
Test Case: 637 | Input/Output: [(-57 57 66 77) -57]
Test Case: 638 | Input/Output: [(8 65 66 66) 8]
Test Case: 639 | Input/Output: [(33 85 -81 41) -81]
Test Case: 640 | Input/Output: [(-68 41 -62 -42) -68]
Test Case: 641 | Input/Output: [(53 58 -92 54) -92]
Test Case: 642 | Input/Output: [(37 -4 -11 19) -11]
Test Case: 643 | Input/Output: [(-97 73 -3 -79) -97]
Test Case: 644 | Input/Output: [(53 42 46 -90) -90]
Test Case: 645 | Input/Output: [(-98 -87 -70 62) -98]
Test Case: 646 | Input/Output: [(2 81 -42 16) -42]
Test Case: 647 | Input/Output: [(78 -87 86 -19) -87]
Test Case: 648 | Input/Output: [(30 47 87 -86) -86]
Test Case: 649 | Input/Output: [(24 66 -85 -41) -85]
Test Case: 650 | Input/Output: [(-14 24 -23 -71) -71]
Test Case: 651 | Input/Output: [(40 -97 5 -53) -97]
Test Case: 652 | Input/Output: [(79 -89 27 97) -89]
Test Case: 653 | Input/Output: [(9 -3 67 23) -3]
Test Case: 654 | Input/Output: [(-32 -7 -16 -60) -60]
Test Case: 655 | Input/Output: [(90 48 -92 -78) -92]
Test Case: 656 | Input/Output: [(-54 -43 -62 -45) -62]
Test Case: 657 | Input/Output: [(-9 -90 -29 60) -90]
Test Case: 658 | Input/Output: [(27 -58 -13 91) -58]
Test Case: 659 | Input/Output: [(32 -21 -42 83) -42]
Test Case: 660 | Input/Output: [(-21 46 88 -62) -62]
Test Case: 661 | Input/Output: [(9 -8 83 70) -8]
Test Case: 662 | Input/Output: [(-28 -31 -94 67) -94]
Test Case: 663 | Input/Output: [(-62 -33 -10 19) -62]
Test Case: 664 | Input/Output: [(53 22 63 -11) -11]
Test Case: 665 | Input/Output: [(-79 -28 -94 6) -94]
Test Case: 666 | Input/Output: [(-83 10 -72 81) -83]
Test Case: 667 | Input/Output: [(58 40 4 8) 4]
Test Case: 668 | Input/Output: [(4 72 9 -11) -11]
Test Case: 669 | Input/Output: [(-67 54 63 83) -67]
Test Case: 670 | Input/Output: [(53 -91 38 43) -91]
Test Case: 671 | Input/Output: [(58 -74 -5 -63) -74]
Test Case: 672 | Input/Output: [(-7 -5 57 7) -7]
Test Case: 673 | Input/Output: [(49 -56 84 41) -56]
Test Case: 674 | Input/Output: [(-74 2 63 -91) -91]
Test Case: 675 | Input/Output: [(-92 14 -70 -58) -92]
Test Case: 676 | Input/Output: [(52 100 49 -75) -75]
Test Case: 677 | Input/Output: [(-44 -87 61 23) -87]
Test Case: 678 | Input/Output: [(-99 28 -65 66) -99]
Test Case: 679 | Input/Output: [(-31 29 3 -99) -99]
Test Case: 680 | Input/Output: [(86 -91 -54 -16) -91]
Test Case: 681 | Input/Output: [(-75 15 -7 -72) -75]
Test Case: 682 | Input/Output: [(92 -78 -66 98) -78]
Test Case: 683 | Input/Output: [(-21 61 55 49) -21]
Test Case: 684 | Input/Output: [(-4 -25 96 -76) -76]
Test Case: 685 | Input/Output: [(51 -55 -78 -26) -78]
Test Case: 686 | Input/Output: [(64 59 75 52) 52]
Test Case: 687 | Input/Output: [(-74 -53 -49 11) -74]
Test Case: 688 | Input/Output: [(-25 -55 36 -31) -55]
Test Case: 689 | Input/Output: [(52 58 17 64) 17]
Test Case: 690 | Input/Output: [(63 89 89 30) 30]
Test Case: 691 | Input/Output: [(3 79 50 -36) -36]
Test Case: 692 | Input/Output: [(-95 -26 -44 30) -95]
Test Case: 693 | Input/Output: [(-3 -95 -25 -19) -95]
Test Case: 694 | Input/Output: [(-49 8 42 -14) -49]
Test Case: 695 | Input/Output: [(77 36 -23 60) -23]
Test Case: 696 | Input/Output: [(44 78 22 -37) -37]
Test Case: 697 | Input/Output: [(15 3 -3 65) -3]
Test Case: 698 | Input/Output: [(15 -15 -63 19) -63]
Test Case: 699 | Input/Output: [(79 38 69 -42) -42]
Test Case: 700 | Input/Output: [(48 -91 -63 75) -91]
Test Case: 701 | Input/Output: [(73 -86 9 -35) -86]
Test Case: 702 | Input/Output: [(98 -75 98 91) -75]
Test Case: 703 | Input/Output: [(57 6 -43 -4) -43]
Test Case: 704 | Input/Output: [(-97 46 -76 -42) -97]
Test Case: 705 | Input/Output: [(-87 -87 -15 98) -87]
Test Case: 706 | Input/Output: [(-75 90 57 -61) -75]
Test Case: 707 | Input/Output: [(-78 59 77 -14) -78]
Test Case: 708 | Input/Output: [(-10 35 5 -75) -75]
Test Case: 709 | Input/Output: [(-73 -65 -41 -26) -73]
Test Case: 710 | Input/Output: [(42 68 -22 92) -22]
Test Case: 711 | Input/Output: [(3 41 70 12) 3]
Test Case: 712 | Input/Output: [(90 -65 3 10) -65]
Test Case: 713 | Input/Output: [(86 -94 94 33) -94]
Test Case: 714 | Input/Output: [(83 -34 20 71) -34]
Test Case: 715 | Input/Output: [(4 27 87 -6) -6]
Test Case: 716 | Input/Output: [(4 -68 52 72) -68]
Test Case: 717 | Input/Output: [(14 99 -99 -88) -99]
Test Case: 718 | Input/Output: [(25 8 88 75) 8]
Test Case: 719 | Input/Output: [(13 -100 -90 73) -100]
Test Case: 720 | Input/Output: [(3 97 -39 9) -39]
Test Case: 721 | Input/Output: [(80 -14 66 -30) -30]
Test Case: 722 | Input/Output: [(4 -48 72 74) -48]
Test Case: 723 | Input/Output: [(-14 14 -51 -45) -51]
Test Case: 724 | Input/Output: [(-90 -3 -67 61) -90]
Test Case: 725 | Input/Output: [(-49 31 92 21) -49]
Test Case: 726 | Input/Output: [(46 -80 4 -26) -80]
Test Case: 727 | Input/Output: [(49 -86 57 45) -86]
Test Case: 728 | Input/Output: [(-9 55 -73 -32) -73]
Test Case: 729 | Input/Output: [(55 85 -81 48) -81]
Test Case: 730 | Input/Output: [(-5 90 -25 -93) -93]
Test Case: 731 | Input/Output: [(15 -65 -84 -60) -84]
Test Case: 732 | Input/Output: [(-53 55 83 -55) -55]
Test Case: 733 | Input/Output: [(59 -80 -43 16) -80]
Test Case: 734 | Input/Output: [(97 -52 98 -68) -68]
Test Case: 735 | Input/Output: [(10 -99 26 -100) -100]
Test Case: 736 | Input/Output: [(-78 -6 89 -4) -78]
Test Case: 737 | Input/Output: [(-80 82 -41 21) -80]
Test Case: 738 | Input/Output: [(2 100 -70 -35) -70]
Test Case: 739 | Input/Output: [(58 -29 -55 59) -55]
Test Case: 740 | Input/Output: [(50 48 28 72) 28]
Test Case: 741 | Input/Output: [(6 -37 93 -11) -37]
Test Case: 742 | Input/Output: [(96 95 -25 33) -25]
Test Case: 743 | Input/Output: [(47 -84 -3 -44) -84]
Test Case: 744 | Input/Output: [(52 -22 99 -67) -67]
Test Case: 745 | Input/Output: [(54 51 -17 -63) -63]
Test Case: 746 | Input/Output: [(13 -71 88 38) -71]
Test Case: 747 | Input/Output: [(-18 10 20 -22) -22]
Test Case: 748 | Input/Output: [(20 -11 61 -78) -78]
Test Case: 749 | Input/Output: [(97 -16 81 -54) -54]
Test Case: 750 | Input/Output: [(60 20 70 0) 0]
Test Case: 751 | Input/Output: [(41 -15 13 -85) -85]
Test Case: 752 | Input/Output: [(87 3 -19 90) -19]
Test Case: 753 | Input/Output: [(43 33 46 -23) -23]
Test Case: 754 | Input/Output: [(-78 -1 -39 -29) -78]
Test Case: 755 | Input/Output: [(-94 -10 35 -43) -94]
Test Case: 756 | Input/Output: [(100 -80 94 -20) -80]
Test Case: 757 | Input/Output: [(77 -75 -72 -16) -75]
Test Case: 758 | Input/Output: [(21 -66 -61 -64) -66]
Test Case: 759 | Input/Output: [(89 -30 -60 41) -60]
Test Case: 760 | Input/Output: [(-100 -2 61 -32) -100]
Test Case: 761 | Input/Output: [(55 -18 -97 -66) -97]
Test Case: 762 | Input/Output: [(-71 -49 -18 87) -71]
Test Case: 763 | Input/Output: [(18 48 -8 -85) -85]
Test Case: 764 | Input/Output: [(9 73 -12 -67) -67]
Test Case: 765 | Input/Output: [(-80 -45 52 -82) -82]
Test Case: 766 | Input/Output: [(-11 -73 -74 -69) -74]
Test Case: 767 | Input/Output: [(-42 47 -48 -55) -55]
Test Case: 768 | Input/Output: [(71 59 -100 -29) -100]
Test Case: 769 | Input/Output: [(2 14 -82 -57) -82]
Test Case: 770 | Input/Output: [(-44 83 3 93) -44]
Test Case: 771 | Input/Output: [(82 -4 -60 18) -60]
Test Case: 772 | Input/Output: [(-20 -1 29 -6) -20]
Test Case: 773 | Input/Output: [(-69 -92 -77 43) -92]
Test Case: 774 | Input/Output: [(-10 32 -11 -81) -81]
Test Case: 775 | Input/Output: [(-48 -57 -19 29) -57]
Test Case: 776 | Input/Output: [(81 -37 -31 71) -37]
Test Case: 777 | Input/Output: [(58 -8 -74 45) -74]
Test Case: 778 | Input/Output: [(17 93 63 55) 17]
Test Case: 779 | Input/Output: [(-43 27 -55 73) -55]
Test Case: 780 | Input/Output: [(49 -43 37 27) -43]
Test Case: 781 | Input/Output: [(94 -66 -4 -98) -98]
Test Case: 782 | Input/Output: [(92 57 4 38) 4]
Test Case: 783 | Input/Output: [(-13 47 73 -68) -68]
Test Case: 784 | Input/Output: [(-19 27 54 44) -19]
Test Case: 785 | Input/Output: [(-35 -67 -18 -34) -67]
Test Case: 786 | Input/Output: [(-54 -10 30 -40) -54]
Test Case: 787 | Input/Output: [(40 -12 19 -37) -37]
Test Case: 788 | Input/Output: [(-100 20 60 75) -100]
Test Case: 789 | Input/Output: [(-29 56 -96 -72) -96]
Test Case: 790 | Input/Output: [(81 87 -60 61) -60]
Test Case: 791 | Input/Output: [(56 66 -19 -69) -69]
Test Case: 792 | Input/Output: [(-75 -37 78 70) -75]
Test Case: 793 | Input/Output: [(-44 9 -33 -82) -82]
Test Case: 794 | Input/Output: [(4 -17 -90 -94) -94]
Test Case: 795 | Input/Output: [(-38 -94 -93 10) -94]
Test Case: 796 | Input/Output: [(-55 30 -24 97) -55]
Test Case: 797 | Input/Output: [(59 -98 -37 -78) -98]
Test Case: 798 | Input/Output: [(98 -30 32 48) -30]
Test Case: 799 | Input/Output: [(-37 -23 42 90) -37]
Test Case: 800 | Input/Output: [(62 56 -7 23) -7]
Test Case: 801 | Input/Output: [(98 91 -89 97) -89]
Test Case: 802 | Input/Output: [(98 -31 -58 -21) -58]
Test Case: 803 | Input/Output: [(19 11 -91 33) -91]
Test Case: 804 | Input/Output: [(96 51 43 -5) -5]
Test Case: 805 | Input/Output: [(19 13 36 16) 13]
Test Case: 806 | Input/Output: [(48 48 -14 -94) -94]
Test Case: 807 | Input/Output: [(16 67 -57 24) -57]
Test Case: 808 | Input/Output: [(-79 96 -19 31) -79]
Test Case: 809 | Input/Output: [(9 67 -35 -55) -55]
Test Case: 810 | Input/Output: [(84 -75 86 -59) -75]
Test Case: 811 | Input/Output: [(-100 -76 67 6) -100]
Test Case: 812 | Input/Output: [(90 -19 -83 11) -83]
Test Case: 813 | Input/Output: [(18 -62 -58 18) -62]
Test Case: 814 | Input/Output: [(-34 56 -21 9) -34]
Test Case: 815 | Input/Output: [(-51 64 98 73) -51]
Test Case: 816 | Input/Output: [(-12 -5 -5 -99) -99]
Test Case: 817 | Input/Output: [(56 21 -73 -45) -73]
Test Case: 818 | Input/Output: [(-35 -92 -8 11) -92]
Test Case: 819 | Input/Output: [(-53 -88 -68 0) -88]
Test Case: 820 | Input/Output: [(53 22 -94 -21) -94]
Test Case: 821 | Input/Output: [(90 -88 77 27) -88]
Test Case: 822 | Input/Output: [(-69 -47 57 -81) -81]
Test Case: 823 | Input/Output: [(44 56 -85 72) -85]
Test Case: 824 | Input/Output: [(25 -46 40 54) -46]
Test Case: 825 | Input/Output: [(-61 -94 94 -25) -94]
Test Case: 826 | Input/Output: [(22 -29 78 -18) -29]
Test Case: 827 | Input/Output: [(10 -26 95 8) -26]
Test Case: 828 | Input/Output: [(99 -81 71 66) -81]
Test Case: 829 | Input/Output: [(-52 -36 14 -67) -67]
Test Case: 830 | Input/Output: [(-98 35 -33 21) -98]
Test Case: 831 | Input/Output: [(7 73 15 -27) -27]
Test Case: 832 | Input/Output: [(-11 82 40 -26) -26]
Test Case: 833 | Input/Output: [(-87 -51 97 -14) -87]
Test Case: 834 | Input/Output: [(11 68 87 48) 11]
Test Case: 835 | Input/Output: [(31 -92 -61 69) -92]
Test Case: 836 | Input/Output: [(14 57 13 57) 13]
Test Case: 837 | Input/Output: [(60 41 -59 -15) -59]
Test Case: 838 | Input/Output: [(-17 -65 -94 -77) -94]
Test Case: 839 | Input/Output: [(23 38 -63 -92) -92]
Test Case: 840 | Input/Output: [(35 -7 4 44) -7]
Test Case: 841 | Input/Output: [(-24 -19 76 -20) -24]
Test Case: 842 | Input/Output: [(-96 -65 9 30) -96]
Test Case: 843 | Input/Output: [(55 22 -46 64) -46]
Test Case: 844 | Input/Output: [(-99 -3 10 42) -99]
Test Case: 845 | Input/Output: [(-62 19 -34 -4) -62]
Test Case: 846 | Input/Output: [(22 83 23 48) 22]
Test Case: 847 | Input/Output: [(42 40 -61 83) -61]
Test Case: 848 | Input/Output: [(-99 46 -8 74) -99]
Test Case: 849 | Input/Output: [(-39 -96 65 -27) -96]
Test Case: 850 | Input/Output: [(74 61 81 -45) -45]
Test Case: 851 | Input/Output: [(-84 77 -92 -52) -92]
Test Case: 852 | Input/Output: [(39 -44 34 67) -44]
Test Case: 853 | Input/Output: [(71 90 -49 -30) -49]
Test Case: 854 | Input/Output: [(-71 -78 93 77) -78]
Test Case: 855 | Input/Output: [(18 -58 5 -18) -58]
Test Case: 856 | Input/Output: [(-96 -42 34 30) -96]
Test Case: 857 | Input/Output: [(-56 29 60 96) -56]
Test Case: 858 | Input/Output: [(-24 30 58 35) -24]
Test Case: 859 | Input/Output: [(7 -63 -87 13) -87]
Test Case: 860 | Input/Output: [(59 -92 24 73) -92]
Test Case: 861 | Input/Output: [(45 92 64 -19) -19]
Test Case: 862 | Input/Output: [(86 29 83 7) 7]
Test Case: 863 | Input/Output: [(33 2 91 37) 2]
Test Case: 864 | Input/Output: [(13 44 24 62) 13]
Test Case: 865 | Input/Output: [(17 48 -15 -28) -28]
Test Case: 866 | Input/Output: [(73 -79 -88 -99) -99]
Test Case: 867 | Input/Output: [(29 -34 -31 -56) -56]
Test Case: 868 | Input/Output: [(3 18 -12 83) -12]
Test Case: 869 | Input/Output: [(-70 84 -50 66) -70]
Test Case: 870 | Input/Output: [(-80 -85 28 -22) -85]
Test Case: 871 | Input/Output: [(-89 -99 61 -3) -99]
Test Case: 872 | Input/Output: [(97 -22 78 -73) -73]
Test Case: 873 | Input/Output: [(81 -13 -50 76) -50]
Test Case: 874 | Input/Output: [(95 -66 12 93) -66]
Test Case: 875 | Input/Output: [(-10 22 -53 79) -53]
Test Case: 876 | Input/Output: [(70 48 21 65) 21]
Test Case: 877 | Input/Output: [(85 57 -74 -30) -74]
Test Case: 878 | Input/Output: [(38 -31 -90 9) -90]
Test Case: 879 | Input/Output: [(-90 47 -62 55) -90]
Test Case: 880 | Input/Output: [(-32 54 -88 87) -88]
Test Case: 881 | Input/Output: [(-87 8 31 53) -87]
Test Case: 882 | Input/Output: [(-22 -35 31 98) -35]
Test Case: 883 | Input/Output: [(-99 73 100 -57) -99]
Test Case: 884 | Input/Output: [(-57 -75 -17 97) -75]
Test Case: 885 | Input/Output: [(-49 -56 -95 8) -95]
Test Case: 886 | Input/Output: [(52 -55 -82 44) -82]
Test Case: 887 | Input/Output: [(66 -50 -78 -47) -78]
Test Case: 888 | Input/Output: [(82 35 14 7) 7]
Test Case: 889 | Input/Output: [(-19 -61 -83 -85) -85]
Test Case: 890 | Input/Output: [(-25 70 11 -69) -69]
Test Case: 891 | Input/Output: [(9 -34 -16 40) -34]
Test Case: 892 | Input/Output: [(-51 86 -54 70) -54]
Test Case: 893 | Input/Output: [(5 92 -8 76) -8]
Test Case: 894 | Input/Output: [(18 -27 83 -83) -83]
Test Case: 895 | Input/Output: [(-38 -79 -68 62) -79]
Test Case: 896 | Input/Output: [(57 52 -81 54) -81]
Test Case: 897 | Input/Output: [(71 -67 28 63) -67]
Test Case: 898 | Input/Output: [(84 30 60 95) 30]
Test Case: 899 | Input/Output: [(-8 76 67 -47) -47]
Test Case: 900 | Input/Output: [(36 -82 69 11) -82]
Test Case: 901 | Input/Output: [(85 -99 88 99) -99]
Test Case: 902 | Input/Output: [(-36 -49 -72 92) -72]
Test Case: 903 | Input/Output: [(49 -3 74 -40) -40]
Test Case: 904 | Input/Output: [(-28 95 -9 -80) -80]
Test Case: 905 | Input/Output: [(-33 82 -31 -73) -73]
Test Case: 906 | Input/Output: [(-13 23 39 -29) -29]
Test Case: 907 | Input/Output: [(84 23 44 -53) -53]
Test Case: 908 | Input/Output: [(-30 5 -87 -87) -87]
Test Case: 909 | Input/Output: [(-38 52 8 55) -38]
Test Case: 910 | Input/Output: [(-34 -17 59 83) -34]
Test Case: 911 | Input/Output: [(59 39 -20 -100) -100]
Test Case: 912 | Input/Output: [(-59 -100 -62 90) -100]
Test Case: 913 | Input/Output: [(-44 21 -15 -16) -44]
Test Case: 914 | Input/Output: [(-1 -27 84 -50) -50]
Test Case: 915 | Input/Output: [(-57 98 54 -14) -57]
Test Case: 916 | Input/Output: [(45 81 -87 -62) -87]
Test Case: 917 | Input/Output: [(-86 -76 -95 28) -95]
Test Case: 918 | Input/Output: [(7 -1 -30 27) -30]
Test Case: 919 | Input/Output: [(-11 -76 34 12) -76]
Test Case: 920 | Input/Output: [(-59 -82 -30 -37) -82]
Test Case: 921 | Input/Output: [(-33 38 20 -87) -87]
Test Case: 922 | Input/Output: [(-51 81 27 -51) -51]
Test Case: 923 | Input/Output: [(-74 -65 -6 -48) -74]
Test Case: 924 | Input/Output: [(81 24 88 -80) -80]
Test Case: 925 | Input/Output: [(61 -20 95 -40) -40]
Test Case: 926 | Input/Output: [(-26 -75 -99 39) -99]
Test Case: 927 | Input/Output: [(-28 22 -27 58) -28]
Test Case: 928 | Input/Output: [(-97 -99 -51 -25) -99]
Test Case: 929 | Input/Output: [(-67 38 -11 -56) -67]
Test Case: 930 | Input/Output: [(-53 47 95 8) -53]
Test Case: 931 | Input/Output: [(84 80 -98 -11) -98]
Test Case: 932 | Input/Output: [(-20 5 -50 -61) -61]
Test Case: 933 | Input/Output: [(-16 65 50 -91) -91]
Test Case: 934 | Input/Output: [(-18 92 -21 5) -21]
Test Case: 935 | Input/Output: [(-17 17 88 89) -17]
Test Case: 936 | Input/Output: [(-89 -7 -65 15) -89]
Test Case: 937 | Input/Output: [(40 -82 79 -17) -82]
Test Case: 938 | Input/Output: [(-35 -60 31 59) -60]
Test Case: 939 | Input/Output: [(25 6 78 -92) -92]
Test Case: 940 | Input/Output: [(31 38 2 30) 2]
Test Case: 941 | Input/Output: [(-23 -40 -63 -28) -63]
Test Case: 942 | Input/Output: [(94 -7 -98 -91) -98]
Test Case: 943 | Input/Output: [(47 9 -82 1) -82]
Test Case: 944 | Input/Output: [(2 75 79 56) 2]
Test Case: 945 | Input/Output: [(63 -2 -97 68) -97]
Test Case: 946 | Input/Output: [(-12 49 6 -96) -96]
Test Case: 947 | Input/Output: [(-94 -42 54 -31) -94]
Test Case: 948 | Input/Output: [(11 8 -21 -66) -66]
Test Case: 949 | Input/Output: [(-86 72 96 84) -86]
Test Case: 950 | Input/Output: [(-90 26 37 -97) -97]
Test Case: 951 | Input/Output: [(-42 -34 -44 -77) -77]
Test Case: 952 | Input/Output: [(83 54 -44 31) -44]
Test Case: 953 | Input/Output: [(11 -88 -86 -67) -88]
Test Case: 954 | Input/Output: [(-6 -53 50 -24) -53]
Test Case: 955 | Input/Output: [(-84 -18 9 85) -84]
Test Case: 956 | Input/Output: [(-86 -70 -54 40) -86]
Test Case: 957 | Input/Output: [(61 -37 76 -98) -98]
Test Case: 958 | Input/Output: [(73 -14 -56 98) -56]
Test Case: 959 | Input/Output: [(0 -69 12 -5) -69]
Test Case: 960 | Input/Output: [(-48 -30 -88 -47) -88]
Test Case: 961 | Input/Output: [(9 -24 45 3) -24]
Test Case: 962 | Input/Output: [(-3 9 10 -57) -57]
Test Case: 963 | Input/Output: [(99 -29 -100 -50) -100]
Test Case: 964 | Input/Output: [(-63 -40 72 47) -63]
Test Case: 965 | Input/Output: [(-28 63 86 -75) -75]
Test Case: 966 | Input/Output: [(73 -73 11 -90) -90]
Test Case: 967 | Input/Output: [(-31 -63 26 91) -63]
Test Case: 968 | Input/Output: [(-95 74 -95 27) -95]
Test Case: 969 | Input/Output: [(73 21 -49 15) -49]
Test Case: 970 | Input/Output: [(75 0 -44 -41) -44]
Test Case: 971 | Input/Output: [(27 -87 -32 1) -87]
Test Case: 972 | Input/Output: [(-75 -16 -42 -83) -83]
Test Case: 973 | Input/Output: [(32 50 39 -26) -26]
Test Case: 974 | Input/Output: [(-100 -66 -40 5) -100]
Test Case: 975 | Input/Output: [(-47 79 -8 63) -47]
Test Case: 976 | Input/Output: [(97 -96 -24 -82) -96]
Test Case: 977 | Input/Output: [(82 97 -23 -34) -34]
Test Case: 978 | Input/Output: [(9 88 -100 -71) -100]
Test Case: 979 | Input/Output: [(-4 -59 -99 -51) -99]
Test Case: 980 | Input/Output: [(63 -24 -85 -40) -85]
Test Case: 981 | Input/Output: [(-9 -76 -10 -93) -93]
Test Case: 982 | Input/Output: [(76 -51 75 -2) -51]
Test Case: 983 | Input/Output: [(5 79 9 5) 5]
Test Case: 984 | Input/Output: [(61 -51 41 41) -51]
Test Case: 985 | Input/Output: [(26 11 -99 -73) -99]
Test Case: 986 | Input/Output: [(-52 19 49 74) -52]
Test Case: 987 | Input/Output: [(72 40 -44 22) -44]
Test Case: 988 | Input/Output: [(-46 -46 -40 -38) -46]
Test Case: 989 | Input/Output: [(41 54 2 -23) -23]
Test Case: 990 | Input/Output: [(78 -22 77 -78) -78]
Test Case: 991 | Input/Output: [(-42 -19 -16 32) -42]
Test Case: 992 | Input/Output: [(-58 99 44 -52) -58]
Test Case: 993 | Input/Output: [(6 87 -49 20) -49]
Test Case: 994 | Input/Output: [(33 36 13 -47) -47]
Test Case: 995 | Input/Output: [(81 54 -58 -4) -58]
Test Case: 996 | Input/Output: [(-88 16 -59 -13) -88]
Test Case: 997 | Input/Output: [(-48 -43 42 73) -48]
Test Case: 998 | Input/Output: [(-88 -30 -20 -54) -88]
Test Case: 999 | Input/Output: [(-57 36 -17 66) -57]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 2 -127 10 28 -97 -15 -125 -110 82 21 -72 -77 4 106 28 43
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[62 62 82 62] 62] [[-61 -61 -69 -61] -69] [[31 -66 31 31] -66] [[94 94 -91 94] -91] [[-28 -28 98 -28] -28] [[75 61 75 75] 61] [[76 76 -65 76] -65] [[-38 -38 -32 -38] -38] [[-12 79 79 79] -12] [[-55 -55 -55 88] -55] [(4 4 4 4) 4] [(-64 -64 -64 -64) -64] [(-49 -49 -49 -49) -49] [(8 8 8 8) 8] [(36 36 36 36) 36] [(91 32 9 85) 9] [(24 41 70 87) 24] [(70 5 45 41) 5] [(99 33 12 81) 12] [(28 85 88 67) 28] [(39 98 32 0) 0] [(62 99 3 82) 3] [(74 9 52 56) 9] [(24 34 85 88) 24] [(95 69 61 84) 61] [(64 2 96 22) 2] [(3 96 95 61) 3] [(94 62 11 49) 11] [(88 97 6 18) 6] [(44 18 39 17) 17] [(77 42 21 4) 4] [(44 79 42 32) 32] [(84 49 21 37) 21] [(92 50 68 77) 50] [(60 73 40 44) 40] [(-27 -14 77 -85) -85] [(28 92 -3 51) -3] [(-57 35 88 95) -57] [(-29 -9 -67 62) -67] [(-95 -2 -87 -62) -95] [(-72 -84 10 27) -84] [(74 43 55 87) 43] [(-29 20 20 47) -29] [(-62 64 -33 15) -62] [(38 -4 -55 7) -55] [(7 -98 -40 -18) -98] [(12 18 -85 -45) -85] [(96 -33 11 -7) -33] [(57 43 27 -97) -97] [(66 91 7 -25) -25] [(84 -1 84 25) -1] [(-20 17 -52 23) -52] [(27 19 63 -59) -59] [(89 18 55 95) 18] [(39 27 8 -17) -17] [(18 78 46 -63) -63] [(25 69 -58 -1) -58] [(-16 71 -35 30) -35] [(-95 -55 -96 -49) -96] [(12 -87 -59 -91) -91] [(-57 6 -22 -87) -87] [(-23 4 -79 61) -79] [(-17 -80 -88 63) -88] [(64 72 -70 -9) -70] [(-28 72 -64 47) -64] [(-45 -49 -23 27) -49] [(-63 97 58 -34) -63] [(57 63 -3 49) -3] [(-68 57 30 69) -68] [(-98 37 -53 62) -98] [(58 30 -95 -41) -95] [(-33 53 -79 -47) -79] [(2 -92 11 -6) -92] [(20 80 56 -34) -34] [(-77 62 28 75) -77] [(-17 -9 -49 -29) -49] [(-9 100 -11 -51) -51] [(-60 -87 -2 -37) -87] [(-25 33 -69 -96) -96] [(-88 -90 44 -4) -90] [(-16 61 -76 -71) -76] [(51 -82 15 -65) -82] [(52 32 -66 -13) -66] [(54 -34 46 -67) -67] [(-82 -85 -6 100) -85] [(73 -76 73 65) -76] [(72 26 -93 14) -93] [(-88 2 40 -32) -88] [(72 -50 62 -78) -78] [(30 -42 12 5) -42] [(-62 76 75 30) -62] [(77 1 100 32) 1] [(15 94 -26 -5) -26] [(22 -39 80 61) -39] [(79 -15 -20 96) -20])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count})
Lexicase best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (exec_empty boolean_pop boolean_empty) boolean_and boolean_and integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () exec_do*count (integer_max integer_mult integer_mult)) exec_k (integer_stackdepth exec_do*count ()) ())
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 33
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count})
Zero cases best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (exec_empty boolean_pop boolean_empty) boolean_and boolean_and integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () exec_do*count (integer_max integer_mult integer_mult)) exec_k (integer_stackdepth exec_do*count ()) ())
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 33
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 4 3 3 12 9 3 3 3 4)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (12 4 3 3 12 9 3 3 3 4)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction -27} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction -66} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_min} {:close 0, :instruction 33} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y})
Best program: (integer_dup_items -27 boolean_dup boolean_yank integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop exec_empty in3 print_integer exec_yank exec_flush print_newline exec_if () (exec_s_when_autoconstructing (integer_div exec_stackdepth boolean_flush integer_lte integer_swap integer_empty) (exec_yankdup) (in1 exec_s (integer_max boolean_eq integer_fromboolean) (print_boolean) (exec_dup_items integer_mod boolean_shove integer_min) integer_lt exec_dup_items integer_pop -66 integer_gt integer_rot boolean_pop) integer_sub integer_eq integer_shove exec_when (exec_noop integer_min) 33 integer_lte) in1 integer_dec integer_yank exec_dup_items exec_k (boolean_yankdup boolean_dup_items boolean_dup_items boolean_stackdepth integer_min exec_yank exec_y ()) ())
Errors: [0 1 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 63
Size: 77
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 9.944
Median total errors in population: 10
Error averages by case: (0.988 0.996 0.997 0.997 0.988 0.991 0.997 0.997 0.997 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.073
Average program size in population (points): 70.589
Average percent parens in population: 0.284
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 487305
--- Timings ---
Current time: 1559583798160 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.8 seconds, 27.6%
Fitness Testing:      1.9 seconds, 68.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -61                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: 94                 
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 61                 
Correct output: -65                 | Program output: 76                 
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: 24                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 33                 
Correct output: 28                  | Program output: 85                 
Correct output: 0                   | Program output: 98                 
Correct output: 3                   | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 34                 
Correct output: 61                  | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 96                 
Correct output: 11                  | Program output: 62                 
Correct output: 6                   | Program output: 97                 
Correct output: 17                  | Program output: 18                 
Correct output: 4                   | Program output: 42                 
Correct output: 32                  | Program output: 79                 
Correct output: 21                  | Program output: 49                 
Correct output: 50                  | Program output: 50                 
Correct output: 40                  | Program output: 73                 
Correct output: -85                 | Program output: -14                
Correct output: -3                  | Program output: 92                 
Correct output: -57                 | Program output: 35                 
Correct output: -67                 | Program output: -9                 
Correct output: -95                 | Program output: -2                 
Correct output: -84                 | Program output: -84                
Correct output: 43                  | Program output: 43                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: 64                 
Correct output: -55                 | Program output: -4                 
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 18                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: 43                 
Correct output: -25                 | Program output: 91                 
Correct output: -1                  | Program output: -1                 
Correct output: -52                 | Program output: 17                 
Correct output: -59                 | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: -17                 | Program output: 27                 
Correct output: -63                 | Program output: 78                 
Correct output: -58                 | Program output: 69                 
Correct output: -35                 | Program output: 71                 
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -87                
Correct output: -87                 | Program output: 6                  
Correct output: -79                 | Program output: 4                  
Correct output: -88                 | Program output: -80                
Correct output: -70                 | Program output: 72                 
Correct output: -64                 | Program output: 72                 
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: 97                 
Correct output: -3                  | Program output: 63                 
Correct output: -68                 | Program output: 57                 
Correct output: -98                 | Program output: 37                 
Correct output: -95                 | Program output: 30                 
Correct output: -79                 | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: 80                 
Correct output: -77                 | Program output: 62                 
Correct output: -49                 | Program output: -9                 
Correct output: -51                 | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 33                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: 32                 
Correct output: -67                 | Program output: -34                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: 26                 
Correct output: -88                 | Program output: 2                  
Correct output: -78                 | Program output: -50                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: 76                 
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: 94                 
Correct output: -39                 | Program output: -39                
Correct output: -20                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction 67} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 3, :instruction boolean_shove} {:close 0, :instruction tag_integer_128} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_xor boolean_or in1 integer_lte boolean_flush in2 print_integer boolean_swap exec_pop (boolean_dup_items integer_mod exec_flush boolean_pop) print_boolean exec_y () boolean_invert_first_then_and exec_shove (exec_flush exec_s (boolean_xor boolean_dup_times integer_lt integer_inc integer_lt exec_do*times (exec_y_when_autoconstructing (integer_gt in1 67 in1 in1 exec_y (integer_gte boolean_flush) print_integer exec_eq) exec_k () (boolean_yank) boolean_swap integer_dup_items) exec_yank integer_dup_items integer_eq exec_do*while (exec_flush integer_empty in4) print_integer boolean_xor integer_yank integer_min exec_k (boolean_invert_first_then_and) (exec_empty) print_exec (exec_do*times (integer_gte) print_boolean exec_swap () (boolean_flush boolean_shove))) (tag_integer_128 integer_eq) () exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_do*times (integer_swap integer_gte integer_eq boolean_not exec_shove () boolean_not) exec_pop (integer_min exec_dup_items boolean_stackdepth integer_add boolean_xor exec_dup_times () integer_gte) integer_swap boolean_not) (exec_yankdup exec_do*times (integer_pop exec_while ())) ()))
Lexicase best errors: [0 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 115
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction 67} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 3, :instruction boolean_shove} {:close 0, :instruction tag_integer_128} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_xor boolean_or in1 integer_lte boolean_flush in2 print_integer boolean_swap exec_pop (boolean_dup_items integer_mod exec_flush boolean_pop) print_boolean exec_y () boolean_invert_first_then_and exec_shove (exec_flush exec_s (boolean_xor boolean_dup_times integer_lt integer_inc integer_lt exec_do*times (exec_y_when_autoconstructing (integer_gt in1 67 in1 in1 exec_y (integer_gte boolean_flush) print_integer exec_eq) exec_k () (boolean_yank) boolean_swap integer_dup_items) exec_yank integer_dup_items integer_eq exec_do*while (exec_flush integer_empty in4) print_integer boolean_xor integer_yank integer_min exec_k (boolean_invert_first_then_and) (exec_empty) print_exec (exec_do*times (integer_gte) print_boolean exec_swap () (boolean_flush boolean_shove))) (tag_integer_128 integer_eq) () exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_do*times (integer_swap integer_gte integer_eq boolean_not exec_shove () boolean_not) exec_pop (integer_min exec_dup_items boolean_stackdepth integer_add boolean_xor exec_dup_times () integer_gte) integer_swap boolean_not) (exec_yankdup exec_do*times (integer_pop exec_while ())) ()))
Zero cases best errors: [0 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 115
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (895 1 894 1 332 562 1 1 332 1)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (895 1 894 1 332 562 1 1 332 1)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction 67} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 3, :instruction boolean_shove} {:close 0, :instruction tag_integer_128} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while})
Best program: (boolean_xor boolean_or in1 integer_lte boolean_flush in2 print_integer boolean_swap exec_pop (boolean_dup_items integer_mod exec_flush boolean_pop) print_boolean exec_y () boolean_invert_first_then_and exec_shove (exec_flush exec_s (boolean_xor boolean_dup_times integer_lt integer_inc integer_lt exec_do*times (exec_y_when_autoconstructing (integer_gt in1 67 in1 in1 exec_y (integer_gte boolean_flush) print_integer exec_eq) exec_k () (boolean_yank) boolean_swap integer_dup_items) exec_yank integer_dup_items integer_eq exec_do*while (exec_flush integer_empty in4) print_integer boolean_xor integer_yank integer_min exec_k (boolean_invert_first_then_and) (exec_empty) print_exec (exec_do*times (integer_gte) print_boolean exec_swap () (boolean_flush boolean_shove))) (tag_integer_128 integer_eq) () exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_do*times (integer_swap integer_gte integer_eq boolean_not exec_shove () boolean_not) exec_pop (integer_min exec_dup_items boolean_stackdepth integer_add boolean_xor exec_dup_times () integer_gte) integer_swap boolean_not) (exec_yankdup exec_do*times (integer_pop exec_while ())) ()))
Errors: [0 0 0 0 1 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 86
Size: 115
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 6.98
Median total errors in population: 7
Error averages by case: (0.105 0.999 0.106 0.999 0.668 0.438 0.999 0.999 0.668 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.502
Average program size in population (points): 79.24
Average percent parens in population: 0.261
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.533
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 899084
--- Timings ---
Current time: 1559583800926 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 44.8%
Fitness Testing:      2.5 seconds, 47.2%
Report:               0.3 seconds,  6.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction tagged_754} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_yankdup integer_flush integer_max boolean_pop in1 print_integer exec_y () boolean_stackdepth exec_rot (exec_y (exec_y () exec_flush exec_do*while (exec_swap (exec_do*count () tagged_754 exec_empty integer_swap) (integer_pop exec_empty) exec_if () (exec_stackdepth) exec_dup_times (print_boolean boolean_invert_second_then_and exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_fromboolean integer_mult exec_do*count () exec_empty exec_dup_items exec_yankdup boolean_not) (exec_stackdepth exec_do*while (integer_div integer_dup_items integer_lte boolean_eq exec_pop () exec_flush boolean_rot integer_dup_times) integer_shove integer_dup_items exec_yankdup print_boolean) exec_pop () integer_lte print_exec (integer_mult) integer_dup_times print_boolean in2 in2) exec_yankdup print_newline integer_shove) exec_do*while (exec_empty integer_min boolean_frominteger exec_while (exec_yankdup boolean_rot exec_yankdup in1 integer_inc boolean_stackdepth integer_rot boolean_dup boolean_shove exec_swap (integer_shove exec_do*range () integer_dec boolean_stackdepth boolean_or) ()))))) () ())
Lexicase best errors: [1 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 114
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction tagged_754} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction print_exec} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_yankdup integer_flush integer_max boolean_pop in1 print_integer exec_y () boolean_stackdepth exec_rot (exec_y (exec_y () exec_flush exec_do*while (exec_swap (exec_do*count () tagged_754 exec_empty integer_swap) (integer_pop exec_empty) exec_if () (exec_stackdepth) exec_dup_times (print_boolean boolean_invert_second_then_and exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_fromboolean integer_mult exec_do*count () exec_empty exec_dup_items exec_yankdup boolean_not) (exec_stackdepth exec_do*while (integer_div integer_dup_items integer_lte boolean_eq exec_pop () exec_flush boolean_rot integer_dup_times) integer_shove integer_dup_items exec_yankdup print_boolean) exec_pop () integer_lte print_exec (integer_mult) integer_dup_times print_boolean in2 in2) exec_yankdup print_newline integer_shove) exec_do*while (exec_empty integer_min boolean_frominteger exec_while (exec_yankdup boolean_rot exec_yankdup in1 integer_inc boolean_stackdepth integer_rot boolean_dup boolean_shove exec_swap (integer_shove exec_do*range () integer_dec boolean_stackdepth boolean_or) ()))))) () ())
Zero cases best errors: [1 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 114
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 1000 230 957 103 1000 854 1000 230 103)
Population mean number of elite cases: 5.58
Count of perfect (error zero) individuals by case: (103 0 230 957 103 0 854 0 230 103)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count})
Best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (exec_empty boolean_pop boolean_empty) boolean_and boolean_and integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () exec_do*count (integer_max integer_mult integer_mult)) exec_k (integer_stackdepth exec_do*count ()) ())
Errors: [0 1 1 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 23
Size: 33
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.42
Median total errors in population: 8
Error averages by case: (0.897 1.0 0.77 0.043 0.897 1.0 0.146 1.0 0.77 0.897)
Error minima by case: (0 1 0 0 0 1 0 1 0 0)
Average genome size in population (length): 77.725
Average program size in population (points): 103.765
Average percent parens in population: 0.250
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.307
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1554419
--- Timings ---
Current time: 1559583803939 milliseconds
Total Time:           8.6 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.2 seconds, 49.1%
Fitness Testing:      3.4 seconds, 39.8%
Report:               0.9 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -61                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: 94                 
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: 76                 
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: -12                
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 91                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 70                 
Correct output: 12                  | Program output: 99                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 39                 
Correct output: 3                   | Program output: 62                 
Correct output: 9                   | Program output: 74                 
Correct output: 24                  | Program output: 24                 
Correct output: 61                  | Program output: 95                 
Correct output: 2                   | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 94                 
Correct output: 6                   | Program output: 88                 
Correct output: 17                  | Program output: 44                 
Correct output: 4                   | Program output: 77                 
Correct output: 32                  | Program output: 44                 
Correct output: 21                  | Program output: 84                 
Correct output: 50                  | Program output: 92                 
Correct output: 40                  | Program output: 60                 
Correct output: -85                 | Program output: -27                
Correct output: -3                  | Program output: 28                 
Correct output: -57                 | Program output: -57                
Correct output: -67                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -72                
Correct output: 43                  | Program output: 74                 
Correct output: -29                 | Program output: -29                
Correct output: -62                 | Program output: -62                
Correct output: -55                 | Program output: 38                 
Correct output: -98                 | Program output: 7                  
Correct output: -85                 | Program output: 12                 
Correct output: -33                 | Program output: 96                 
Correct output: -97                 | Program output: 57                 
Correct output: -25                 | Program output: 66                 
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -20                
Correct output: -59                 | Program output: 27                 
Correct output: 18                  | Program output: 89                 
Correct output: -17                 | Program output: 39                 
Correct output: -63                 | Program output: 18                 
Correct output: -58                 | Program output: 25                 
Correct output: -35                 | Program output: -16                
Correct output: -96                 | Program output: -95                
Correct output: -91                 | Program output: 12                 
Correct output: -87                 | Program output: -57                
Correct output: -79                 | Program output: -23                
Correct output: -88                 | Program output: -17                
Correct output: -70                 | Program output: 64                 
Correct output: -64                 | Program output: -28                
Correct output: -49                 | Program output: -45                
Correct output: -63                 | Program output: -63                
Correct output: -3                  | Program output: 57                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: 58                 
Correct output: -79                 | Program output: -33                
Correct output: -92                 | Program output: 2                  
Correct output: -34                 | Program output: 20                 
Correct output: -77                 | Program output: -77                
Correct output: -49                 | Program output: -17                
Correct output: -51                 | Program output: -9                 
Correct output: -87                 | Program output: -60                
Correct output: -96                 | Program output: -25                
Correct output: -90                 | Program output: -88                
Correct output: -76                 | Program output: -16                
Correct output: -82                 | Program output: 51                 
Correct output: -66                 | Program output: 52                 
Correct output: -67                 | Program output: 54                 
Correct output: -85                 | Program output: -82                
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: 72                 
Correct output: -42                 | Program output: 30                 
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 77                 
Correct output: -26                 | Program output: 15                 
Correct output: -39                 | Program output: 22                 
Correct output: -20                 | Program output: 79                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction 67} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction 33} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y})
Lexicase best program: (boolean_xor boolean_or in1 integer_lte boolean_flush integer_div print_integer boolean_swap exec_pop (boolean_dup_items integer_mod exec_flush boolean_pop) print_boolean exec_y () boolean_invert_first_then_and exec_shove (exec_flush exec_s (boolean_xor boolean_dup_times integer_lt integer_inc integer_lt exec_do*times (exec_y_when_autoconstructing (integer_gt in1 67 in1 in1 boolean_flush integer_gte boolean_flush) print_integer exec_eq) exec_k () (boolean_yank) boolean_swap integer_dup_items) (exec_yank integer_dup_items integer_eq exec_do*while (exec_flush integer_empty in4) integer_min) (33 integer_lte) in1 integer_dec integer_yank) exec_dup_items exec_k (boolean_yankdup boolean_dup_items boolean_dup_items boolean_stackdepth integer_min exec_yank exec_y ()) ())
Lexicase best errors: [0 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 77
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction 67} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction 33} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y})
Zero cases best program: (boolean_xor boolean_or in1 integer_lte boolean_flush integer_div print_integer boolean_swap exec_pop (boolean_dup_items integer_mod exec_flush boolean_pop) print_boolean exec_y () boolean_invert_first_then_and exec_shove (exec_flush exec_s (boolean_xor boolean_dup_times integer_lt integer_inc integer_lt exec_do*times (exec_y_when_autoconstructing (integer_gt in1 67 in1 in1 boolean_flush integer_gte boolean_flush) print_integer exec_eq) exec_k () (boolean_yank) boolean_swap integer_dup_items) (exec_yank integer_dup_items integer_eq exec_do*while (exec_flush integer_empty in4) integer_min) (33 integer_lte) in1 integer_dec integer_yank) exec_dup_items exec_k (boolean_yankdup boolean_dup_items boolean_dup_items boolean_stackdepth integer_min exec_yank exec_y ()) ())
Zero cases best errors: [0 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 77
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (480 481 917 436 474 436 480 480 436 481)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (480 481 917 436 474 436 480 480 436 481)
Population mean number of perfect (error zero) cases: 5.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction 67} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 3, :instruction boolean_shove} {:close 0, :instruction tag_integer_128} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add})
Best program: (boolean_xor boolean_or in1 integer_lte boolean_flush integer_div print_integer boolean_swap exec_pop (boolean_dup_items integer_mod exec_flush boolean_pop) print_boolean exec_y () boolean_invert_first_then_and exec_shove (exec_flush exec_s (boolean_xor boolean_dup_times integer_lt integer_inc integer_lt exec_do*times (exec_y_when_autoconstructing (integer_gt in1 67 in1 in1 exec_y (integer_gte boolean_flush) print_integer exec_eq) exec_k () (boolean_yank boolean_swap) integer_dup_items) exec_yank integer_dup_items integer_eq exec_do*while (exec_flush integer_empty in4) print_integer boolean_xor integer_yank integer_min exec_k (boolean_invert_first_then_and) (exec_empty) print_exec (exec_do*times (integer_gte) print_boolean exec_swap () (boolean_flush boolean_shove))) (tag_integer_128 integer_eq) () exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_do*times (integer_swap integer_gte integer_eq boolean_not exec_shove () boolean_not)) (exec_pop (integer_min exec_dup_items boolean_stackdepth integer_add)) ()))
Errors: [0 0 0 1 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 77
Size: 103
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 4.899
Median total errors in population: 6
Error averages by case: (0.52 0.519 0.083 0.564 0.526 0.564 0.52 0.52 0.564 0.519)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.516
Average program size in population (points): 86.75
Average percent parens in population: 0.254
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.568
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2039668
--- Timings ---
Current time: 1559583807051 milliseconds
Total Time:          11.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.2 seconds, 53.7%
Fitness Testing:      4.0 seconds, 35.2%
Report:               1.2 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction -27} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction 67} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_min} {:close 0, :instruction 33} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y})
Lexicase best program: (integer_dup_items -27 boolean_dup boolean_yank integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop exec_empty in3 print_integer exec_yank exec_flush print_newline exec_if () (exec_s (boolean_xor boolean_dup_times integer_lt integer_inc integer_lt exec_do*times (exec_y_when_autoconstructing (integer_gt in1 67 in1 in1 exec_y (integer_gte boolean_flush) print_integer exec_eq) exec_k () (boolean_yank) boolean_swap integer_dup_items) exec_yank integer_dup_items integer_eq exec_do*while (exec_flush integer_empty in4) print_integer boolean_xor integer_yank integer_min exec_k (boolean_invert_first_then_and) (boolean_dup_items) print_exec (boolean_pop) integer_sub integer_eq integer_shove exec_when (exec_noop integer_min) 33 integer_lte) (in1 integer_dec integer_yank) (exec_dup_items exec_k (boolean_yankdup boolean_dup_items boolean_dup_items boolean_stackdepth boolean_not exec_yank exec_y ()) ())))
Lexicase best errors: [1 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 96
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction -27} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction 67} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_min} {:close 0, :instruction 33} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y})
Zero cases best program: (integer_dup_items -27 boolean_dup boolean_yank integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop exec_empty in3 print_integer exec_yank exec_flush print_newline exec_if () (exec_s (boolean_xor boolean_dup_times integer_lt integer_inc integer_lt exec_do*times (exec_y_when_autoconstructing (integer_gt in1 67 in1 in1 exec_y (integer_gte boolean_flush) print_integer exec_eq) exec_k () (boolean_yank) boolean_swap integer_dup_items) exec_yank integer_dup_items integer_eq exec_do*while (exec_flush integer_empty in4) print_integer boolean_xor integer_yank integer_min exec_k (boolean_invert_first_then_and) (boolean_dup_items) print_exec (boolean_pop) integer_sub integer_eq integer_shove exec_when (exec_noop integer_min) 33 integer_lte) (in1 integer_dec integer_yank) (exec_dup_items exec_k (boolean_yankdup boolean_dup_items boolean_dup_items boolean_stackdepth boolean_not exec_yank exec_y ()) ())))
Zero cases best errors: [1 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 96
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 299 1000 299 628 299 299 299 1000)
Population mean number of elite cases: 6.12
Count of perfect (error zero) individuals by case: (0 0 299 0 299 628 299 299 299 0)
Population mean number of perfect (error zero) cases: 2.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction 67} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_integer_128} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while})
Best program: (boolean_xor boolean_or in1 integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop exec_empty in3 print_integer exec_yank exec_flush print_newline integer_empty integer_lt integer_inc integer_lt exec_do*times (exec_y_when_autoconstructing (integer_gt in1 67 in1 in1 exec_y (integer_gte boolean_flush) print_integer exec_eq) exec_k () (boolean_yank) boolean_swap integer_dup_items) exec_yank integer_dup_items integer_eq exec_do*while (exec_flush integer_empty in4) print_integer boolean_xor integer_yank integer_min exec_k (boolean_invert_first_then_and) (exec_empty) print_exec (exec_do*times (exec_k () (print_boolean exec_swap () (boolean_flush boolean_invert_second_then_and))) tag_integer_128 integer_eq) exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_do*times (integer_swap integer_gte integer_eq boolean_not exec_shove () boolean_not) exec_pop (integer_min exec_dup_items exec_dup_times (integer_add boolean_xor exec_dup_times () integer_gte) integer_swap boolean_not) exec_yankdup exec_do*times (integer_pop exec_while ())) () ())
Errors: [1 1 0 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 82
Size: 109
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 7.877
Median total errors in population: 9
Error averages by case: (1.0 1.0 0.701 1.0 0.701 0.372 0.701 0.701 0.701 1.0)
Error minima by case: (1 1 0 1 0 0 0 0 0 1)
Average genome size in population (length): 64.975
Average program size in population (points): 87.303
Average percent parens in population: 0.253
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.038125
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2566573
--- Timings ---
Current time: 1559583809764 milliseconds
Total Time:          14.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.0 seconds, 55.2%
Fitness Testing:      4.7 seconds, 32.4%
Report:               1.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -61                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: 94                 
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: 76                 
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: -12                
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 91                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 70                 
Correct output: 12                  | Program output: 99                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 39                 
Correct output: 3                   | Program output: 62                 
Correct output: 9                   | Program output: 74                 
Correct output: 24                  | Program output: 24                 
Correct output: 61                  | Program output: 95                 
Correct output: 2                   | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 94                 
Correct output: 6                   | Program output: 88                 
Correct output: 17                  | Program output: 44                 
Correct output: 4                   | Program output: 77                 
Correct output: 32                  | Program output: 44                 
Correct output: 21                  | Program output: 84                 
Correct output: 50                  | Program output: 92                 
Correct output: 40                  | Program output: 60                 
Correct output: -85                 | Program output: -27                
Correct output: -3                  | Program output: 28                 
Correct output: -57                 | Program output: -57                
Correct output: -67                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -72                
Correct output: 43                  | Program output: 74                 
Correct output: -29                 | Program output: -29                
Correct output: -62                 | Program output: -62                
Correct output: -55                 | Program output: 38                 
Correct output: -98                 | Program output: 7                  
Correct output: -85                 | Program output: 12                 
Correct output: -33                 | Program output: 96                 
Correct output: -97                 | Program output: 57                 
Correct output: -25                 | Program output: 66                 
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -20                
Correct output: -59                 | Program output: 27                 
Correct output: 18                  | Program output: 89                 
Correct output: -17                 | Program output: 39                 
Correct output: -63                 | Program output: 18                 
Correct output: -58                 | Program output: 25                 
Correct output: -35                 | Program output: -16                
Correct output: -96                 | Program output: -95                
Correct output: -91                 | Program output: 12                 
Correct output: -87                 | Program output: -57                
Correct output: -79                 | Program output: -23                
Correct output: -88                 | Program output: -17                
Correct output: -70                 | Program output: 64                 
Correct output: -64                 | Program output: -28                
Correct output: -49                 | Program output: -45                
Correct output: -63                 | Program output: -63                
Correct output: -3                  | Program output: 57                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: 58                 
Correct output: -79                 | Program output: -33                
Correct output: -92                 | Program output: 2                  
Correct output: -34                 | Program output: 20                 
Correct output: -77                 | Program output: -77                
Correct output: -49                 | Program output: -17                
Correct output: -51                 | Program output: -9                 
Correct output: -87                 | Program output: -60                
Correct output: -96                 | Program output: -25                
Correct output: -90                 | Program output: -88                
Correct output: -76                 | Program output: -16                
Correct output: -82                 | Program output: 51                 
Correct output: -66                 | Program output: 52                 
Correct output: -67                 | Program output: 54                 
Correct output: -85                 | Program output: -82                
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: 72                 
Correct output: -42                 | Program output: 30                 
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 77                 
Correct output: -26                 | Program output: 15                 
Correct output: -39                 | Program output: 22                 
Correct output: -20                 | Program output: 79                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 3, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_xor boolean_or in1 integer_lte boolean_flush integer_div print_integer boolean_swap exec_pop (boolean_dup_items integer_mod exec_flush boolean_pop) print_boolean exec_y () boolean_invert_first_then_and exec_shove (exec_flush exec_s (exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_fromboolean integer_mult exec_do*count () exec_empty exec_dup_items exec_yankdup boolean_not) (exec_stackdepth exec_do*while (integer_div integer_dup_items integer_lte exec_empty) print_exec (exec_y_when_autoconstructing (integer_gte) print_boolean exec_swap () (boolean_flush boolean_shove))) exec_do*count (exec_dup_times ()) exec_k_when_autoconstructing (exec_yank exec_k_when_autoconstructing (print_boolean integer_rot boolean_yankdup exec_k_when_autoconstructing () (exec_y_when_autoconstructing () print_boolean boolean_yank exec_s () () ())) ()) ()) () ()))
Lexicase best errors: [1 0 1 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 87
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 3, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_xor boolean_or in1 integer_lte boolean_flush integer_div print_integer boolean_swap exec_pop (boolean_dup_items integer_mod exec_flush boolean_pop) print_boolean exec_y () boolean_invert_first_then_and exec_shove (exec_flush exec_s (exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_fromboolean integer_mult exec_do*count () exec_empty exec_dup_items exec_yankdup boolean_not) (exec_stackdepth exec_do*while (integer_div integer_dup_items integer_lte exec_empty) print_exec (exec_y_when_autoconstructing (integer_gte) print_boolean exec_swap () (boolean_flush boolean_shove))) exec_do*count (exec_dup_times ()) exec_k_when_autoconstructing (exec_yank exec_k_when_autoconstructing (print_boolean integer_rot boolean_yankdup exec_k_when_autoconstructing () (exec_y_when_autoconstructing () print_boolean boolean_yank exec_s () () ())) ()) ()) () ()))
Zero cases best errors: [1 0 1 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 87
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 146 1000 146 1000 1000 1000 754 752 146)
Population mean number of elite cases: 6.94
Count of perfect (error zero) individuals by case: (0 146 0 146 0 0 0 754 752 146)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 2, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_dup} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor})
Best program: (integer_gte boolean_pop boolean_xor integer_empty in1 integer_lte boolean_flush integer_div print_integer boolean_swap exec_pop (boolean_dup_items integer_mod exec_flush boolean_pop) print_boolean integer_inc exec_y (integer_sub) in2 boolean_yank exec_noop integer_inc exec_dup_times (boolean_dup) exec_if () () boolean_or boolean_stackdepth boolean_pop integer_dup_times integer_stackdepth exec_dup_times (exec_empty boolean_rot exec_pop (exec_do*range (boolean_dup exec_dup (integer_lte boolean_or integer_yank integer_gte print_integer exec_eq) exec_k () (exec_yankdup) print_integer integer_max exec_empty) boolean_and boolean_dup_times boolean_not exec_eq) exec_k () (boolean_not boolean_dup_items exec_do*times (boolean_pop exec_s_when_autoconstructing (integer_dup_items integer_eq exec_do*while (exec_flush integer_empty integer_inc) print_integer boolean_xor) () ()))))
Errors: [1 0 1 0 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 67
Size: 86
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 8.056
Median total errors in population: 8
Error averages by case: (1.0 0.854 1.0 0.854 1.0 1.0 1.0 0.246 0.248 0.854)
Error minima by case: (1 0 1 0 1 1 1 0 0 0)
Average genome size in population (length): 57.203
Average program size in population (points): 78.074
Average percent parens in population: 0.266
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.497875
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2983399
--- Timings ---
Current time: 1559583812689 milliseconds
Total Time:          17.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.8 seconds, 57.8%
Fitness Testing:      5.1 seconds, 30.2%
Report:               2.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction -27} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt})
Lexicase best program: (integer_dup_items -27 boolean_dup boolean_yank integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop exec_empty in3 print_integer exec_yank exec_flush print_newline exec_if () (exec_s_when_autoconstructing (integer_div exec_stackdepth boolean_flush integer_lte integer_swap integer_empty) (exec_yankdup) (in1 exec_s (integer_max boolean_eq integer_fromboolean print_boolean) (exec_dup_items integer_mod boolean_shove integer_min) (integer_lt))))
Lexicase best errors: [0 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction -27} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt})
Zero cases best program: (integer_dup_items -27 boolean_dup boolean_yank integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop exec_empty in3 print_integer exec_yank exec_flush print_newline exec_if () (exec_s_when_autoconstructing (integer_div exec_stackdepth boolean_flush integer_lte integer_swap integer_empty) (exec_yankdup) (in1 exec_s (integer_max boolean_eq integer_fromboolean print_boolean) (exec_dup_items integer_mod boolean_shove integer_min) (integer_lt))))
Zero cases best errors: [0 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 1 1 555 372 372 373 373 372 372)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (372 1 1 555 372 372 373 373 372 372)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction -66} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when})
Best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (exec_empty) boolean_pop boolean_empty integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop exec_empty in3 print_integer exec_yank exec_flush print_newline exec_if () (exec_s_when_autoconstructing (integer_div exec_stackdepth boolean_flush integer_lte integer_swap integer_empty) (exec_yankdup) (in1 exec_s (integer_max boolean_eq integer_fromboolean) (print_boolean) (exec_dup_items integer_mod boolean_shove integer_min) integer_lt exec_dup_items integer_pop -66 integer_gt integer_rot boolean_pop) integer_sub integer_eq integer_shove exec_when ()))
Errors: [0 1 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 51
Size: 65
Percent parens: 0.215
--- Population Statistics ---
Average total errors in population: 6.837
Median total errors in population: 9
Error averages by case: (0.628 0.999 0.999 0.445 0.628 0.628 0.627 0.627 0.628 0.628)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.647
Average program size in population (points): 82.318
Average percent parens in population: 0.250
Minimum age in population: 6.0
Maximum age in population: 10.875
Average age in population: 8.94309375
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3463682
--- Timings ---
Current time: 1559583815175 milliseconds
Total Time:          19.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.5 seconds, 57.8%
Fitness Testing:      5.7 seconds, 28.7%
Report:               2.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -61                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: 94                 
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 61                 
Correct output: -65                 | Program output: 76                 
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: 24                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 33                 
Correct output: 28                  | Program output: 85                 
Correct output: 0                   | Program output: 98                 
Correct output: 3                   | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 34                 
Correct output: 61                  | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 96                 
Correct output: 11                  | Program output: 62                 
Correct output: 6                   | Program output: 97                 
Correct output: 17                  | Program output: 18                 
Correct output: 4                   | Program output: 42                 
Correct output: 32                  | Program output: 79                 
Correct output: 21                  | Program output: 49                 
Correct output: 50                  | Program output: 50                 
Correct output: 40                  | Program output: 73                 
Correct output: -85                 | Program output: -14                
Correct output: -3                  | Program output: 92                 
Correct output: -57                 | Program output: 35                 
Correct output: -67                 | Program output: -9                 
Correct output: -95                 | Program output: -2                 
Correct output: -84                 | Program output: -84                
Correct output: 43                  | Program output: 43                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: 64                 
Correct output: -55                 | Program output: -4                 
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 18                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: 43                 
Correct output: -25                 | Program output: 91                 
Correct output: -1                  | Program output: -1                 
Correct output: -52                 | Program output: 17                 
Correct output: -59                 | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: -17                 | Program output: 27                 
Correct output: -63                 | Program output: 78                 
Correct output: -58                 | Program output: 69                 
Correct output: -35                 | Program output: 71                 
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -87                
Correct output: -87                 | Program output: 6                  
Correct output: -79                 | Program output: 4                  
Correct output: -88                 | Program output: -80                
Correct output: -70                 | Program output: 72                 
Correct output: -64                 | Program output: 72                 
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: 97                 
Correct output: -3                  | Program output: 63                 
Correct output: -68                 | Program output: 57                 
Correct output: -98                 | Program output: 37                 
Correct output: -95                 | Program output: 30                 
Correct output: -79                 | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: 80                 
Correct output: -77                 | Program output: 62                 
Correct output: -49                 | Program output: -9                 
Correct output: -51                 | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 33                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: 32                 
Correct output: -67                 | Program output: -34                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: 26                 
Correct output: -88                 | Program output: 2                  
Correct output: -78                 | Program output: -50                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: 76                 
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: 94                 
Correct output: -39                 | Program output: -39                
Correct output: -20                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_204} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_add exec_s () (integer_min exec_s (integer_max) () (print_integer in2) exec_yankdup boolean_eq tagged_204) (integer_yankdup) boolean_empty integer_inc exec_y (integer_sub in2) boolean_yank exec_noop boolean_dup_items exec_dup_times (exec_flush exec_flush exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove) boolean_yank)))
Lexicase best errors: [1 0 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_204} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_add exec_s () (integer_min exec_s (integer_max) () (print_integer in2) exec_yankdup boolean_eq tagged_204) (integer_yankdup) boolean_empty integer_inc exec_y (integer_sub in2) boolean_yank exec_noop boolean_dup_items exec_dup_times (exec_flush exec_flush exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove) boolean_yank)))
Zero cases best errors: [1 0 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (610 186 1000 186 1000 609 186 608 289 186)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (610 186 0 186 0 609 186 608 289 186)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_204} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yank})
Best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_add exec_s () (integer_min exec_s (integer_max) () (print_integer in2) exec_yankdup boolean_eq tagged_204) (integer_yankdup) boolean_empty integer_inc exec_y (integer_sub in2) boolean_yank exec_noop boolean_dup_items exec_dup_times (exec_flush exec_flush exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove) boolean_yank)))
Errors: [1 0 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 56
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.14
Median total errors in population: 7
Error averages by case: (0.39 0.814 1.0 0.814 1.0 0.391 0.814 0.392 0.711 0.814)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 52.816
Average program size in population (points): 71.603
Average percent parens in population: 0.263
Minimum age in population: 7.59375
Maximum age in population: 12.625
Average age in population: 10.66625
Median age in population: 10.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3882847
--- Timings ---
Current time: 1559583817946 milliseconds
Total Time:          22.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.3 seconds, 59.1%
Fitness Testing:      6.2 seconds, 27.5%
Report:               2.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -61                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: 94                 
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 61                 
Correct output: -65                 | Program output: 76                 
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: 24                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 33                 
Correct output: 28                  | Program output: 85                 
Correct output: 0                   | Program output: 98                 
Correct output: 3                   | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 34                 
Correct output: 61                  | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 96                 
Correct output: 11                  | Program output: 62                 
Correct output: 6                   | Program output: 97                 
Correct output: 17                  | Program output: 18                 
Correct output: 4                   | Program output: 42                 
Correct output: 32                  | Program output: 79                 
Correct output: 21                  | Program output: 49                 
Correct output: 50                  | Program output: 50                 
Correct output: 40                  | Program output: 73                 
Correct output: -85                 | Program output: -14                
Correct output: -3                  | Program output: 92                 
Correct output: -57                 | Program output: 35                 
Correct output: -67                 | Program output: -9                 
Correct output: -95                 | Program output: -2                 
Correct output: -84                 | Program output: -84                
Correct output: 43                  | Program output: 43                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: 64                 
Correct output: -55                 | Program output: -4                 
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 18                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: 43                 
Correct output: -25                 | Program output: 91                 
Correct output: -1                  | Program output: -1                 
Correct output: -52                 | Program output: 17                 
Correct output: -59                 | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: -17                 | Program output: 27                 
Correct output: -63                 | Program output: 78                 
Correct output: -58                 | Program output: 69                 
Correct output: -35                 | Program output: 71                 
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -87                
Correct output: -87                 | Program output: 6                  
Correct output: -79                 | Program output: 4                  
Correct output: -88                 | Program output: -80                
Correct output: -70                 | Program output: 72                 
Correct output: -64                 | Program output: 72                 
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: 97                 
Correct output: -3                  | Program output: 63                 
Correct output: -68                 | Program output: 57                 
Correct output: -98                 | Program output: 37                 
Correct output: -95                 | Program output: 30                 
Correct output: -79                 | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: 80                 
Correct output: -77                 | Program output: 62                 
Correct output: -49                 | Program output: -9                 
Correct output: -51                 | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 33                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: 32                 
Correct output: -67                 | Program output: -34                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: 26                 
Correct output: -88                 | Program output: 2                  
Correct output: -78                 | Program output: -50                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: 76                 
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: 94                 
Correct output: -39                 | Program output: -39                
Correct output: -20                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_204} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_add exec_s () (integer_min exec_s (integer_max) () (print_integer in2) exec_yankdup boolean_eq tagged_204) (integer_yankdup) boolean_empty integer_inc exec_y (integer_sub in2) boolean_yank exec_noop boolean_dup_items exec_dup_times (exec_flush exec_flush exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove) boolean_yank)))
Lexicase best errors: [1 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_204} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_add exec_s () (integer_min exec_s (integer_max) () (print_integer in2) exec_yankdup boolean_eq tagged_204) (integer_yankdup) boolean_empty integer_inc exec_y (integer_sub in2) boolean_yank exec_noop boolean_dup_items exec_dup_times (exec_flush exec_flush exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove) boolean_yank)))
Zero cases best errors: [1 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 575 1000 570 334 570 898 569 332)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (1 1 575 0 570 334 570 898 569 332)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_204} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yank})
Best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_add exec_s () (integer_min exec_s (integer_max) () (print_integer in2) exec_yankdup boolean_eq tagged_204) (integer_yankdup) boolean_empty integer_inc exec_y (integer_sub in2) boolean_yank exec_noop boolean_dup_items exec_dup_times (exec_flush exec_flush exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove) boolean_yank)))
Errors: [1 1 0 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 41
Size: 56
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 6.15
Median total errors in population: 5
Error averages by case: (0.999 0.999 0.425 1.0 0.43 0.666 0.43 0.102 0.431 0.668)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 45.681
Average program size in population (points): 62.558
Average percent parens in population: 0.269
Minimum age in population: 9.25
Maximum age in population: 14.03125
Average age in population: 12.3438359375
Median age in population: 12.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 196
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4471850
--- Timings ---
Current time: 1559583820938 milliseconds
Total Time:          25.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.1 seconds, 59.5%
Fitness Testing:      6.8 seconds, 26.9%
Report:               3.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction tag_integer_740} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction -66} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 0, :instruction 33} {:close 1, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y})
Lexicase best program: (exec_k (boolean_dup_times integer_eq print_integer exec_k_when_autoconstructing (integer_min integer_shove) (integer_gte) exec_k (boolean_swap exec_yank boolean_empty exec_k_when_autoconstructing (integer_min boolean_dup_times exec_do*count (in3 exec_if (print_integer in4 boolean_xor boolean_and boolean_yank boolean_xor exec_do*while (tag_integer_740) exec_s (exec_y_when_autoconstructing (exec_flush exec_flush integer_inc integer_flush exec_dup (exec_k (exec_swap (boolean_swap print_boolean print_boolean) (exec_dup_items exec_dup_items integer_pop -66 integer_gt integer_rot boolean_pop) integer_sub integer_eq integer_shove exec_when (boolean_dup integer_min) 33 integer_lte) (in2 integer_dec integer_yank) exec_dup_items boolean_dup boolean_yankdup boolean_dup_items boolean_dup_items boolean_stackdepth integer_min exec_yank exec_y ()))) () ()) ())) ()) ()) ())
Lexicase best errors: [0 0 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 89
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction tag_integer_740} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction -66} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 0, :instruction 33} {:close 1, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y})
Zero cases best program: (exec_k (boolean_dup_times integer_eq print_integer exec_k_when_autoconstructing (integer_min integer_shove) (integer_gte) exec_k (boolean_swap exec_yank boolean_empty exec_k_when_autoconstructing (integer_min boolean_dup_times exec_do*count (in3 exec_if (print_integer in4 boolean_xor boolean_and boolean_yank boolean_xor exec_do*while (tag_integer_740) exec_s (exec_y_when_autoconstructing (exec_flush exec_flush integer_inc integer_flush exec_dup (exec_k (exec_swap (boolean_swap print_boolean print_boolean) (exec_dup_items exec_dup_items integer_pop -66 integer_gt integer_rot boolean_pop) integer_sub integer_eq integer_shove exec_when (boolean_dup integer_min) 33 integer_lte) (in2 integer_dec integer_yank) exec_dup_items boolean_dup boolean_yankdup boolean_dup_items boolean_dup_items boolean_stackdepth integer_min exec_yank exec_y ()))) () ()) ())) ()) ()) ())
Zero cases best errors: [0 0 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 89
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 921 219 219 472 474 472 1 228 219)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (219 921 219 219 472 474 472 1 228 219)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction tag_integer_740} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction 67} {:close 0, :instruction in1})
Best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_add exec_s () (integer_min in3 exec_if (print_integer in4 boolean_xor boolean_and boolean_yank boolean_xor exec_do*while (tag_integer_740) integer_gt in1 67 in1) ()) ())
Errors: [0 0 0 0 1 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.556
Median total errors in population: 6
Error averages by case: (0.781 0.079 0.781 0.781 0.528 0.526 0.528 0.999 0.772 0.781)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.468
Average program size in population (points): 58.857
Average percent parens in population: 0.260
Minimum age in population: 10.25
Maximum age in population: 15.52734375
Average age in population: 13.75498046875
Median age in population: 13.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5114202
--- Timings ---
Current time: 1559583823689 milliseconds
Total Time:          28.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.9 seconds, 59.6%
Fitness Testing:      7.5 seconds, 26.5%
Report:               3.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 2, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction -66} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_min} {:close 0, :instruction 32} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_swap exec_s () (integer_min in4 integer_max) () exec_empty in3 print_integer exec_yank exec_flush print_newline exec_if () (exec_s_when_autoconstructing (integer_div in2 boolean_yankdup integer_lte integer_add integer_empty) (exec_yankdup) (in1 exec_s (integer_max boolean_eq integer_fromboolean) (print_boolean) (exec_dup_items integer_mod boolean_shove integer_min) integer_lt exec_dup_items integer_pop -66 integer_gt integer_rot boolean_pop) integer_sub integer_eq integer_shove exec_when (exec_noop integer_min) 32 integer_lte) in1 integer_dec integer_yank exec_dup_items exec_k (boolean_yankdup boolean_dup_items) ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 73
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 2, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction -66} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_min} {:close 0, :instruction 32} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_swap exec_s () (integer_min in4 integer_max) () exec_empty in3 print_integer exec_yank exec_flush print_newline exec_if () (exec_s_when_autoconstructing (integer_div in2 boolean_yankdup integer_lte integer_add integer_empty) (exec_yankdup) (in1 exec_s (integer_max boolean_eq integer_fromboolean) (print_boolean) (exec_dup_items integer_mod boolean_shove integer_min) integer_lt exec_dup_items integer_pop -66 integer_gt integer_rot boolean_pop) integer_sub integer_eq integer_shove exec_when (exec_noop integer_min) 32 integer_lte) in1 integer_dec integer_yank exec_dup_items exec_k (boolean_yankdup boolean_dup_items) ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 73
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 405 405 892 405 405 90 405 405 96)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (91 405 405 892 405 405 90 405 405 96)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction tag_integer_740} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_exec_993} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 3, :instruction boolean_shove} {:close 0, :instruction tag_integer_128} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq})
Best program: (exec_k (boolean_dup_times integer_eq print_integer exec_k_when_autoconstructing (integer_min integer_shove) (integer_gte) exec_k (boolean_swap exec_yank boolean_empty boolean_dup_times boolean_shove in3 exec_if (print_integer in4 boolean_xor boolean_and boolean_yank boolean_xor exec_do*while (tag_integer_740) exec_s (exec_y_when_autoconstructing () exec_flush exec_flush) (integer_inc integer_flush exec_dup (exec_k (exec_swap (boolean_swap print_boolean integer_inc integer_lt exec_flush exec_do*while (exec_flush integer_sub exec_do*times (tag_exec_993 (integer_rot exec_shove (exec_k (integer_eq exec_do*while (exec_flush integer_empty in4) print_integer boolean_xor integer_yank integer_gte exec_do*times (integer_gte) print_boolean exec_swap () (boolean_flush boolean_shove)) () tag_integer_128 integer_eq) exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_do*times (integer_swap integer_gte integer_eq)) () ())))) ()) ())) ()) ()) ()) ())
Errors: [1 0 0 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 69
Size: 103
Percent parens: 0.330
--- Population Statistics ---
Average total errors in population: 6.401
Median total errors in population: 8
Error averages by case: (0.909 0.595 0.595 0.108 0.595 0.595 0.91 0.595 0.595 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.372
Average program size in population (points): 58.331
Average percent parens in population: 0.275
Minimum age in population: 11.25
Maximum age in population: 17.0078125
Average age in population: 15.0867265625
Median age in population: 15.2001953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5519561
--- Timings ---
Current time: 1559583826402 milliseconds
Total Time:          31.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.9 seconds, 60.8%
Fitness Testing:      8.0 seconds, 25.7%
Report:               4.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 738
Test mean error for best: 0.73800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 62                  | Program output:                    
Correct output: -69                 | Program output: -61                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output:                    
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output:                    
Correct output: -65                 | Program output:                    
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output:                    
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output:                    
Correct output: 9                   | Program output:                    
Correct output: 24                  | Program output:                    
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output:                    
Correct output: 28                  | Program output:                    
Correct output: 0                   | Program output:                    
Correct output: 3                   | Program output:                    
Correct output: 9                   | Program output:                    
Correct output: 24                  | Program output:                    
Correct output: 61                  | Program output:                    
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output:                    
Correct output: 11                  | Program output:                    
Correct output: 6                   | Program output:                    
Correct output: 17                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: 32                  | Program output:                    
Correct output: 21                  | Program output:                    
Correct output: 50                  | Program output:                    
Correct output: 40                  | Program output:                    
Correct output: -85                 | Program output: -14                
Correct output: -3                  | Program output:                    
Correct output: -57                 | Program output:                    
Correct output: -67                 | Program output: -9                 
Correct output: -95                 | Program output: -2                 
Correct output: -84                 | Program output: -84                
Correct output: 43                  | Program output:                    
Correct output: -29                 | Program output:                    
Correct output: -62                 | Program output:                    
Correct output: -55                 | Program output: -4                 
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output:                    
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output:                    
Correct output: -25                 | Program output:                    
Correct output: -1                  | Program output: -1                 
Correct output: -52                 | Program output:                    
Correct output: -59                 | Program output:                    
Correct output: 18                  | Program output:                    
Correct output: -17                 | Program output:                    
Correct output: -63                 | Program output:                    
Correct output: -58                 | Program output:                    
Correct output: -35                 | Program output:                    
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -87                
Correct output: -87                 | Program output: 6                  
Correct output: -79                 | Program output: 4                  
Correct output: -88                 | Program output: -80                
Correct output: -70                 | Program output:                    
Correct output: -64                 | Program output:                    
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output:                    
Correct output: -3                  | Program output:                    
Correct output: -68                 | Program output:                    
Correct output: -98                 | Program output:                    
Correct output: -95                 | Program output:                    
Correct output: -79                 | Program output:                    
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output:                    
Correct output: -77                 | Program output:                    
Correct output: -49                 | Program output: -9                 
Correct output: -51                 | Program output:                    
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output:                    
Correct output: -67                 | Program output: -34                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output:                    
Correct output: -88                 | Program output: 2                  
Correct output: -78                 | Program output: -50                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output:                    
Correct output: -39                 | Program output: -39                
Correct output: -20                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_add exec_s () (integer_min exec_s (integer_max) () (print_integer in2 exec_yankdup boolean_eq integer_sub in2)) () boolean_yank exec_noop boolean_dup_items exec_dup_times (exec_flush exec_flush exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove))))
Lexicase best errors: [1 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_add exec_s () (integer_min exec_s (integer_max) () (print_integer in2 exec_yankdup boolean_eq integer_sub in2)) () boolean_yank exec_noop boolean_dup_items exec_dup_times (exec_flush exec_flush exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove))))
Zero cases best errors: [1 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 611 1 1 1 284 1 1 611 1)
Population mean number of elite cases: 1.70
Count of perfect (error zero) individuals by case: (187 611 1 1 1 284 1 1 611 1)
Population mean number of perfect (error zero) cases: 1.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove})
Best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_add exec_s () (integer_min exec_s (integer_max) () (print_integer in2 exec_yankdup boolean_eq integer_sub in2)) () boolean_yank exec_noop boolean_dup_items exec_dup_times (exec_flush exec_flush exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove))))
Errors: [1 1 0 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 35
Size: 49
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 8.301
Median total errors in population: 8
Error averages by case: (0.813 0.389 0.999 0.999 0.999 0.716 0.999 0.999 0.389 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.411
Average program size in population (points): 56.049
Average percent parens in population: 0.284
Minimum age in population: 13.375
Maximum age in population: 18.7548828125
Average age in population: 16.4493896484375
Median age in population: 16.56640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5949144
--- Timings ---
Current time: 1559583829503 milliseconds
Total Time:          34.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.3 seconds, 62.2%
Fitness Testing:      8.5 seconds, 24.7%
Report:               4.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -61                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: 94                 
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 61                 
Correct output: -65                 | Program output: 76                 
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: 24                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 33                 
Correct output: 28                  | Program output: 85                 
Correct output: 0                   | Program output: 98                 
Correct output: 3                   | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 34                 
Correct output: 61                  | Program output: 69                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 96                 
Correct output: 11                  | Program output: 62                 
Correct output: 6                   | Program output: 97                 
Correct output: 17                  | Program output: 18                 
Correct output: 4                   | Program output: 42                 
Correct output: 32                  | Program output: 79                 
Correct output: 21                  | Program output: 49                 
Correct output: 50                  | Program output: 50                 
Correct output: 40                  | Program output: 73                 
Correct output: -85                 | Program output: -14                
Correct output: -3                  | Program output: 92                 
Correct output: -57                 | Program output: 35                 
Correct output: -67                 | Program output: -9                 
Correct output: -95                 | Program output: -2                 
Correct output: -84                 | Program output: -84                
Correct output: 43                  | Program output: 43                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: 64                 
Correct output: -55                 | Program output: -4                 
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: 18                 
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: 43                 
Correct output: -25                 | Program output: 91                 
Correct output: -1                  | Program output: -1                 
Correct output: -52                 | Program output: 17                 
Correct output: -59                 | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: -17                 | Program output: 27                 
Correct output: -63                 | Program output: 78                 
Correct output: -58                 | Program output: 69                 
Correct output: -35                 | Program output: 71                 
Correct output: -96                 | Program output: -55                
Correct output: -91                 | Program output: -87                
Correct output: -87                 | Program output: 6                  
Correct output: -79                 | Program output: 4                  
Correct output: -88                 | Program output: -80                
Correct output: -70                 | Program output: 72                 
Correct output: -64                 | Program output: 72                 
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: 97                 
Correct output: -3                  | Program output: 63                 
Correct output: -68                 | Program output: 57                 
Correct output: -98                 | Program output: 37                 
Correct output: -95                 | Program output: 30                 
Correct output: -79                 | Program output: 53                 
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: 80                 
Correct output: -77                 | Program output: 62                 
Correct output: -49                 | Program output: -9                 
Correct output: -51                 | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 33                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: 32                 
Correct output: -67                 | Program output: -34                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: 26                 
Correct output: -88                 | Program output: 2                  
Correct output: -78                 | Program output: -50                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: 76                 
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: 94                 
Correct output: -39                 | Program output: -39                
Correct output: -20                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_add exec_s () (integer_min exec_s (integer_max) () (print_integer in2 exec_yankdup boolean_eq exec_s_when_autoconstructing (integer_div integer_sub in2) () () boolean_yank) exec_noop boolean_dup_items exec_dup_times (exec_flush exec_flush exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove)))) ())
Lexicase best errors: [1 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_empty boolean_pop integer_dup_items exec_dup_times () integer_inc integer_add exec_s () (integer_min exec_s (integer_max) () (print_integer in2 exec_yankdup boolean_eq exec_s_when_autoconstructing (integer_div integer_sub in2) () () boolean_yank) exec_noop boolean_dup_items exec_dup_times (exec_flush exec_flush exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove)))) ())
Zero cases best errors: [1 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 589 588 585 196 196 197 99 883 37)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (0 589 588 585 196 196 197 99 883 37)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove})
Best program: (exec_empty boolean_pop integer_dup_items exec_dup_times (integer_inc integer_add) exec_s () (integer_min exec_s (integer_max) () (print_integer in2 exec_yankdup boolean_eq integer_sub in2)) () boolean_yank exec_noop boolean_dup_items exec_dup_times () exec_flush exec_flush exec_while (exec_dup_items exec_do*while (integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove)))
Errors: [1 0 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 49
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.63
Median total errors in population: 6
Error averages by case: (1.0 0.411 0.412 0.415 0.804 0.804 0.803 0.901 0.117 0.963)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.764
Average program size in population (points): 50.223
Average percent parens in population: 0.290
Minimum age in population: 15.5
Maximum age in population: 19.4638671875
Average age in population: 17.28355322265625
Median age in population: 17.521484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 355
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 365
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6227116
--- Timings ---
Current time: 1559583832212 milliseconds
Total Time:          36.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.4 seconds, 63.5%
Fitness Testing:      8.8 seconds, 23.9%
Report:               4.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction -27} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tag_exec_719} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove})
Lexicase best program: (integer_dup_items -27 exec_shove (boolean_yank integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth) boolean_pop exec_empty in3 print_integer exec_yank exec_flush boolean_dup_times exec_do*count (in3 exec_if (print_integer in4 boolean_xor boolean_and boolean_yank exec_yankdup) (tag_exec_719 (exec_s (integer_max boolean_eq integer_fromboolean) (integer_add integer_lte integer_dup_times) (boolean_shove)))))
Lexicase best errors: [1 0 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction -27} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tag_exec_719} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove})
Zero cases best program: (integer_dup_items -27 exec_shove (boolean_yank integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth) boolean_pop exec_empty in3 print_integer exec_yank exec_flush boolean_dup_times exec_do*count (in3 exec_if (print_integer in4 boolean_xor boolean_and boolean_yank exec_yankdup) (tag_exec_719 (exec_s (integer_max boolean_eq integer_fromboolean) (integer_add integer_lte integer_dup_times) (boolean_shove)))))
Zero cases best errors: [1 0 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (454 341 1000 340 454 106 341 1000 341 106)
Population mean number of elite cases: 4.48
Count of perfect (error zero) individuals by case: (454 341 0 340 454 106 341 0 341 106)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_shove})
Best program: (in3 exec_dup (exec_pop (integer_yank) tag_exec_20 (exec_empty boolean_pop boolean_empty) boolean_and boolean_and) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when (exec_y (integer_yankdup in2))) boolean_yank exec_noop boolean_dup_items exec_dup_times (exec_flush integer_yankdup exec_rot () (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times boolean_shove)))
Errors: [1 0 1 0 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 34
Size: 45
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 7.517
Median total errors in population: 8
Error averages by case: (0.546 0.659 1.0 0.66 0.546 0.894 0.659 1.0 0.659 0.894)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 36.458
Average program size in population (points): 51.072
Average percent parens in population: 0.289
Minimum age in population: 16.5
Maximum age in population: 21.243408203125
Average age in population: 19.00740747070312
Median age in population: 19.021484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6581383
--- Timings ---
Current time: 1559583835496 milliseconds
Total Time:          39.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.5 seconds, 64.3%
Fitness Testing:      9.2 seconds, 23.1%
Report:               4.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count})
Lexicase best program: (in3 exec_dup (exec_pop () integer_yank) integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop exec_empty in3 print_integer exec_yank exec_flush boolean_empty boolean_dup_times exec_do*count (in3 exec_do*count (integer_max exec_do*times (integer_mult)) exec_when (integer_stackdepth exec_do*count ())))
Lexicase best errors: [0 1 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count})
Zero cases best program: (in3 exec_dup (exec_pop () integer_yank) integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop exec_empty in3 print_integer exec_yank exec_flush boolean_empty boolean_dup_times exec_do*count (in3 exec_do*count (integer_max exec_do*times (integer_mult)) exec_when (integer_stackdepth exec_do*count ())))
Zero cases best errors: [0 1 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (485 205 225 225 483 189 189 485 146 483)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (485 205 225 225 483 189 189 485 146 483)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction tag_integer_740} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 2, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 1, :instruction exec_k} {:close 0, :instruction tag_exec_993} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 2, :instruction exec_shove} {:close 0, :instruction tag_boolean_298} {:close 1, :instruction print_integer})
Best program: (exec_empty boolean_pop boolean_pop exec_dup_times () in3 exec_if (print_integer in4 boolean_xor boolean_and boolean_yank boolean_xor exec_do*while (tag_integer_740) exec_s (exec_y_when_autoconstructing (exec_flush exec_flush integer_inc integer_flush exec_dup (exec_k (exec_swap (integer_dup_items exec_yank integer_dup_items integer_eq exec_do*while (exec_flush integer_empty in4)) (print_integer boolean_xor exec_s_when_autoconstructing (print_newline exec_k () (tag_exec_993 (integer_rot exec_shove (exec_k (boolean_shove) (exec_rot (exec_k (in1 exec_shove ()) (tag_boolean_298 print_integer)) () ()))))) () ())) ()))) () ()) ())
Errors: [0 1 1 1 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 47
Size: 77
Percent parens: 0.390
--- Population Statistics ---
Average total errors in population: 6.885
Median total errors in population: 6
Error averages by case: (0.515 0.795 0.775 0.775 0.517 0.811 0.811 0.515 0.854 0.517)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.061
Average program size in population (points): 51.146
Average percent parens in population: 0.298
Minimum age in population: 17.5
Maximum age in population: 22.45703125
Average age in population: 20.51805310058594
Median age in population: 20.58233642578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6933309
--- Timings ---
Current time: 1559583837968 milliseconds
Total Time:          42.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.4 seconds, 64.2%
Fitness Testing:      9.6 seconds, 22.4%
Report:               5.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count})
Lexicase best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (exec_empty boolean_pop boolean_empty) boolean_and boolean_and integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () exec_do*count (integer_max integer_mult integer_mult) exec_k (integer_stackdepth exec_do*count ()) ()))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 33
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count})
Zero cases best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (exec_empty boolean_pop boolean_empty) boolean_and boolean_and integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () exec_do*count (integer_max integer_mult integer_mult) exec_k (integer_stackdepth exec_do*count ()) ()))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 33
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (316 323 371 878 369 369 372 372 371 874)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (316 323 371 878 369 369 372 372 371 874)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 3, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_dup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction -66} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_min} {:close 0, :instruction 33} {:close 0, :instruction integer_min} {:close 0, :instruction 33} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items})
Best program: (in3 integer_yankdup exec_pop () integer_yank tag_exec_20 (exec_empty boolean_pop boolean_empty) boolean_flush boolean_and integer_add print_integer exec_do*range (boolean_dup boolean_or integer_yankdup) integer_rot integer_inc exec_y (integer_sub in2) boolean_yank exec_noop integer_inc boolean_empty boolean_dup integer_fromboolean integer_dup_items exec_dup_items exec_dup_items exec_rot (-66 integer_gt integer_rot) (boolean_pop integer_sub integer_eq integer_shove boolean_eq exec_noop integer_min) (33 integer_min 33 integer_lte) in1 integer_dec integer_yank exec_dup_items)
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 49
Size: 57
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 5.385
Median total errors in population: 6
Error averages by case: (0.684 0.677 0.629 0.122 0.631 0.631 0.628 0.628 0.629 0.126)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.269
Average program size in population (points): 48.77
Average percent parens in population: 0.300
Minimum age in population: 18.5
Maximum age in population: 24.0467529296875
Average age in population: 21.94060205078125
Median age in population: 21.99276733398438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7304000
--- Timings ---
Current time: 1559583841035 milliseconds
Total Time:          45.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.4 seconds, 64.9%
Fitness Testing:     10.0 seconds, 22.0%
Report:               5.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count})
Lexicase best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (boolean_eq boolean_pop boolean_empty) boolean_and boolean_and integer_add print_integer exec_do*range (boolean_dup integer_sub) integer_sub exec_when () in2 integer_max integer_lt integer_mult exec_k (integer_mult) () exec_k (integer_stackdepth exec_do*count ()) ())
Lexicase best errors: [0 0 1 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 2, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count})
Zero cases best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (boolean_eq boolean_pop boolean_empty) boolean_and boolean_and integer_add print_integer exec_do*range (boolean_dup integer_sub) integer_sub exec_when () in2 integer_max integer_lt integer_mult exec_k (integer_mult) () exec_k (integer_stackdepth exec_do*count ()) ())
Zero cases best errors: [0 0 1 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (679 681 1000 214 1000 1000 214 681 1000 895)
Population mean number of elite cases: 7.36
Count of perfect (error zero) individuals by case: (679 681 0 214 0 0 214 681 0 895)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count})
Best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (exec_empty boolean_dup boolean_empty) boolean_and boolean_and integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () exec_do*count (integer_max integer_mult integer_mult) exec_k (integer_stackdepth exec_do*count ()) ()))
Errors: [0 0 1 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 23
Size: 33
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 6.636
Median total errors in population: 6
Error averages by case: (0.321 0.319 1.0 0.786 1.0 1.0 0.786 0.319 1.0 0.105)
Error minima by case: (0 0 1 0 1 1 0 0 1 0)
Average genome size in population (length): 37.019
Average program size in population (points): 51.056
Average percent parens in population: 0.273
Minimum age in population: 20.7744140625
Maximum age in population: 25.72161865234375
Average age in population: 23.49187814331055
Median age in population: 23.53439331054688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7655558
--- Timings ---
Current time: 1559583843699 milliseconds
Total Time:          48.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.4 seconds, 64.9%
Fitness Testing:     10.4 seconds, 21.4%
Report:               6.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction -27} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gte} {:close 0, :instruction 67} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_dup_items -27 boolean_dup boolean_yank integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop boolean_shove in3 print_integer integer_dup_times exec_flush print_newline boolean_xor boolean_dup_times integer_lt integer_inc integer_lt exec_do*times (exec_y_when_autoconstructing (integer_gt integer_gte 67 in1 in1 exec_y (integer_gte boolean_flush) integer_sub exec_eq) exec_k () (boolean_yank) boolean_swap))
Lexicase best errors: [1 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.159
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction -27} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gte} {:close 0, :instruction 67} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_dup_items -27 boolean_dup boolean_yank integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop boolean_shove in3 print_integer integer_dup_times exec_flush print_newline boolean_xor boolean_dup_times integer_lt integer_inc integer_lt exec_do*times (exec_y_when_autoconstructing (integer_gt integer_gte 67 in1 in1 exec_y (integer_gte boolean_flush) integer_sub exec_eq) exec_k () (boolean_yank) boolean_swap))
Zero cases best errors: [1 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 542 896 862 355 3 541 355 541 541)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (1 542 896 862 355 3 541 355 541 541)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min})
Best program: (exec_swap (boolean_pop) (integer_dup_items exec_dup_times () integer_inc exec_do*range (integer_yank exec_shove () exec_stackdepth) integer_dup exec_empty in3 print_integer) exec_yank exec_flush exec_s_when_autoconstructing (exec_if () (exec_s_when_autoconstructing (boolean_swap boolean_invert_second_then_and boolean_empty boolean_dup_times exec_stackdepth in3 exec_if (print_integer in4 exec_s (boolean_and boolean_yank boolean_flush integer_lte integer_swap integer_empty) (exec_yankdup) (in1 exec_s (integer_stackdepth exec_shove (exec_flush exec_s () (boolean_xor boolean_eq boolean_stackdepth) (print_boolean) exec_dup_items integer_mod boolean_shove integer_min)) () ())) ()) () ())) () ())
Errors: [1 0 0 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 49
Size: 75
Percent parens: 0.347
--- Population Statistics ---
Average total errors in population: 5.363
Median total errors in population: 4
Error averages by case: (0.999 0.458 0.104 0.138 0.645 0.997 0.459 0.645 0.459 0.459)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.957
Average program size in population (points): 51.026
Average percent parens in population: 0.275
Minimum age in population: 22.166259765625
Maximum age in population: 27.0364990234375
Average age in population: 24.97853675842285
Median age in population: 25.02383422851562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8008133
--- Timings ---
Current time: 1559583846224 milliseconds
Total Time:          51.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.4 seconds, 65.5%
Fitness Testing:     10.7 seconds, 21.0%
Report:               6.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 3, :instruction boolean_shove} {:close 0, :instruction tag_integer_128} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove})
Lexicase best program: (exec_empty exec_empty boolean_pop integer_dup_items exec_dup_times () exec_k_when_autoconstructing (integer_min integer_shove) (integer_gte) exec_k (boolean_swap boolean_invert_second_then_and boolean_empty boolean_dup_times exec_do*count (integer_shove exec_empty) in3 print_integer) (exec_yank exec_flush print_newline exec_if (exec_s (boolean_xor boolean_dup_times integer_lt integer_inc integer_lt exec_do*times (integer_gte boolean_flush) exec_s (exec_eq) (exec_k () (boolean_yank boolean_swap integer_dup_items) exec_yank integer_dup_items integer_eq exec_do*while (exec_flush integer_empty in4 print_integer boolean_xor integer_yank integer_min exec_k (boolean_invert_first_then_and) (exec_empty exec_k (exec_do*times (integer_gte print_boolean exec_swap () (boolean_flush boolean_shove))) (tag_integer_128 integer_eq)) exec_s_when_autoconstructing (boolean_not) (exec_do*times (integer_swap integer_gte integer_eq boolean_not exec_shove ())) ())) ()) () ()) ()))
Lexicase best errors: [1 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 100
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 3, :instruction boolean_shove} {:close 0, :instruction tag_integer_128} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove})
Zero cases best program: (exec_empty exec_empty boolean_pop integer_dup_items exec_dup_times () exec_k_when_autoconstructing (integer_min integer_shove) (integer_gte) exec_k (boolean_swap boolean_invert_second_then_and boolean_empty boolean_dup_times exec_do*count (integer_shove exec_empty) in3 print_integer) (exec_yank exec_flush print_newline exec_if (exec_s (boolean_xor boolean_dup_times integer_lt integer_inc integer_lt exec_do*times (integer_gte boolean_flush) exec_s (exec_eq) (exec_k () (boolean_yank boolean_swap integer_dup_items) exec_yank integer_dup_items integer_eq exec_do*while (exec_flush integer_empty in4 print_integer boolean_xor integer_yank integer_min exec_k (boolean_invert_first_then_and) (exec_empty exec_k (exec_do*times (integer_gte print_boolean exec_swap () (boolean_flush boolean_shove))) (tag_integer_128 integer_eq)) exec_s_when_autoconstructing (boolean_not) (exec_do*times (integer_swap integer_gte integer_eq boolean_not exec_shove ())) ())) ()) () ()) ()))
Zero cases best errors: [1 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 100
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 894 504 504 169 503 503 222 222 503)
Population mean number of elite cases: 4.19
Count of perfect (error zero) individuals by case: (169 894 504 504 169 503 503 222 222 503)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_do*count} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_pop})
Best program: (in3 exec_dup (exec_pop () integer_yank exec_dup (exec_empty boolean_pop boolean_empty) boolean_and boolean_and) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () exec_pop (in2) integer_mult integer_mult) exec_k (integer_stackdepth integer_lt integer_inc exec_noop exec_yankdup exec_dup_times () exec_do*count ()) (exec_if () () boolean_or boolean_stackdepth exec_while () exec_k (integer_stackdepth) (exec_dup_times (exec_empty boolean_rot exec_pop ()))))
Errors: [1 0 0 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 56
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 5.807
Median total errors in population: 4
Error averages by case: (0.831 0.106 0.496 0.496 0.831 0.497 0.497 0.778 0.778 0.497)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.058
Average program size in population (points): 47.148
Average percent parens in population: 0.278
Minimum age in population: 23.876953125
Maximum age in population: 28.53655242919922
Average age in population: 26.81936097717285
Median age in population: 26.89408493041992
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8340399
--- Timings ---
Current time: 1559583848617 milliseconds
Total Time:          53.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.2 seconds, 66.0%
Fitness Testing:     11.1 seconds, 20.8%
Report:               7.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 82                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: 98                 
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -32                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 70                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 88                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 85                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: 77                 
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: 10                 
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 63                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -23                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 11                 
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -2                 
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: 44                 
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -6                 
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 40                 
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 80                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction -27} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_dup_items -27 boolean_dup boolean_yank integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop exec_empty in3 print_integer exec_yank exec_flush print_newline exec_empty in3 print_integer exec_yank exec_flush print_newline exec_if () (exec_s_when_autoconstructing (in3 exec_stackdepth) () ()))
Lexicase best errors: [0 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction -27} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_dup_items -27 boolean_dup boolean_yank integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth boolean_pop exec_empty in3 print_integer exec_yank exec_flush print_newline exec_empty in3 print_integer exec_yank exec_flush print_newline exec_if () (exec_s_when_autoconstructing (in3 exec_stackdepth) () ()))
Zero cases best errors: [0 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (494 496 2 496 497 494 2 495 495 205)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (494 496 2 496 497 494 2 495 495 205)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction -27} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction tag_integer_740} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush})
Best program: (integer_dup_items -27 boolean_dup boolean_yank integer_fromboolean integer_div integer_eq integer_yank exec_shove () exec_stackdepth integer_pop exec_empty in3 print_integer boolean_stackdepth integer_gte exec_k (boolean_dup_items boolean_invert_second_then_and boolean_empty boolean_dup_times exec_do*count (in3 exec_if (print_integer boolean_pop exec_s_when_autoconstructing (boolean_and boolean_yank boolean_xor exec_do*while (tag_integer_740) exec_s (exec_y_when_autoconstructing (exec_flush exec_flush integer_inc integer_flush)) () ()) () ()) ())) ())
Errors: [0 0 1 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 6.324
Median total errors in population: 9
Error averages by case: (0.506 0.504 0.998 0.504 0.503 0.506 0.998 0.505 0.505 0.795)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.924
Average program size in population (points): 45.639
Average percent parens in population: 0.280
Minimum age in population: 24.901611328125
Maximum age in population: 30.20767974853516
Average age in population: 28.31133587646484
Median age in population: 28.37972831726074
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8669971
--- Timings ---
Current time: 1559583851508 milliseconds
Total Time:          56.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.5 seconds, 66.7%
Fitness Testing:     11.4 seconds, 20.3%
Report:               7.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -61                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: 94                 
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: 76                 
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: -12                
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 91                 
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 70                 
Correct output: 12                  | Program output: 99                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 39                 
Correct output: 3                   | Program output: 62                 
Correct output: 9                   | Program output: 74                 
Correct output: 24                  | Program output: 24                 
Correct output: 61                  | Program output: 95                 
Correct output: 2                   | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 94                 
Correct output: 6                   | Program output: 88                 
Correct output: 17                  | Program output: 44                 
Correct output: 4                   | Program output: 77                 
Correct output: 32                  | Program output: 44                 
Correct output: 21                  | Program output: 84                 
Correct output: 50                  | Program output: 92                 
Correct output: 40                  | Program output: 60                 
Correct output: -85                 | Program output: -27                
Correct output: -3                  | Program output: 28                 
Correct output: -57                 | Program output: -57                
Correct output: -67                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -72                
Correct output: 43                  | Program output: 74                 
Correct output: -29                 | Program output: -29                
Correct output: -62                 | Program output: -62                
Correct output: -55                 | Program output: 38                 
Correct output: -98                 | Program output: 7                  
Correct output: -85                 | Program output: 12                 
Correct output: -33                 | Program output: 96                 
Correct output: -97                 | Program output: 57                 
Correct output: -25                 | Program output: 66                 
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -20                
Correct output: -59                 | Program output: 27                 
Correct output: 18                  | Program output: 89                 
Correct output: -17                 | Program output: 39                 
Correct output: -63                 | Program output: 18                 
Correct output: -58                 | Program output: 25                 
Correct output: -35                 | Program output: -16                
Correct output: -96                 | Program output: -95                
Correct output: -91                 | Program output: 12                 
Correct output: -87                 | Program output: -57                
Correct output: -79                 | Program output: -23                
Correct output: -88                 | Program output: -17                
Correct output: -70                 | Program output: 64                 
Correct output: -64                 | Program output: -28                
Correct output: -49                 | Program output: -45                
Correct output: -63                 | Program output: -63                
Correct output: -3                  | Program output: 57                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: 58                 
Correct output: -79                 | Program output: -33                
Correct output: -92                 | Program output: 2                  
Correct output: -34                 | Program output: 20                 
Correct output: -77                 | Program output: -77                
Correct output: -49                 | Program output: -17                
Correct output: -51                 | Program output: -9                 
Correct output: -87                 | Program output: -60                
Correct output: -96                 | Program output: -25                
Correct output: -90                 | Program output: -88                
Correct output: -76                 | Program output: -16                
Correct output: -82                 | Program output: 51                 
Correct output: -66                 | Program output: 52                 
Correct output: -67                 | Program output: 54                 
Correct output: -85                 | Program output: -82                
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: 72                 
Correct output: -42                 | Program output: 30                 
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 77                 
Correct output: -26                 | Program output: 15                 
Correct output: -39                 | Program output: 22                 
Correct output: -20                 | Program output: 79                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_empty boolean_pop integer_dup_items exec_dup_times (integer_swap exec_dup (exec_pop () integer_yank) tag_exec_20 (exec_empty boolean_pop boolean_empty) boolean_and in1) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () exec_do*count (integer_max integer_mult integer_max)) exec_k (integer_stackdepth exec_do*count ()) ())
Lexicase best errors: [1 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_empty boolean_pop integer_dup_items exec_dup_times (integer_swap exec_dup (exec_pop () integer_yank) tag_exec_20 (exec_empty boolean_pop boolean_empty) boolean_and in1) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () exec_do*count (integer_max integer_mult integer_max)) exec_k (integer_stackdepth exec_do*count ()) ())
Zero cases best errors: [1 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 905 645 92 264 170 1000 170 171 646)
Population mean number of elite cases: 5.06
Count of perfect (error zero) individuals by case: (0 905 645 92 264 170 0 170 171 646)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_or} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 2, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 3, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove})
Best program: (boolean_xor boolean_or in1 integer_lte integer_div integer_min exec_s (integer_max) () (print_integer in2 exec_yankdup boolean_eq exec_s_when_autoconstructing (in2) () () boolean_dup_items exec_dup_times (exec_flush exec_flush exec_while (exec_dup_items print_integer integer_yankdup) exec_rot (integer_dup_times integer_add) (integer_lte integer_gte integer_add integer_lte integer_dup_times) (boolean_shove))))
Errors: [1 0 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 6.937
Median total errors in population: 7
Error averages by case: (1.0 0.095 0.355 0.908 0.736 0.83 1.0 0.83 0.829 0.354)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 34.641
Average program size in population (points): 47.54
Average percent parens in population: 0.270
Minimum age in population: 25.901611328125
Maximum age in population: 31.67637634277344
Average age in population: 29.58241830825806
Median age in population: 29.6769323348999
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9004605
--- Timings ---
Current time: 1559583854027 milliseconds
Total Time:          58.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.4 seconds, 67.1%
Fitness Testing:     11.8 seconds, 20.1%
Report:               7.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 399
Test mean error for best: 0.39900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 61                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 85                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 34                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 18                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 50                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -14                
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 35                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 43                  | Program output: 43                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 46                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -87                
Correct output: -87                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: 58                 
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: 56                 
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -34                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: 2                  
Correct output: -78                 | Program output: -50                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: 75                 
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Lexicase best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Zero cases best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (437 441 437 437 862 427 437 1 441 442)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (437 441 437 437 862 427 437 1 441 442)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Best program: (in3 exec_dup (exec_pop () exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 29
Size: 43
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 5.638
Median total errors in population: 8
Error averages by case: (0.563 0.559 0.563 0.563 0.138 0.573 0.563 0.999 0.559 0.558)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.841
Average program size in population (points): 41.45
Average percent parens in population: 0.304
Minimum age in population: 28.6646842956543
Maximum age in population: 32.36745071411133
Average age in population: 30.66836228752136
Median age in population: 30.85991287231445
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 323
Genome diversity (% unique genomes):	 0.4
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 325
Syntactic diversity (% unique Push programs):	 0.389
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9274927
--- Timings ---
Current time: 1559583856405 milliseconds
Total Time:          61.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.3 seconds, 67.5%
Fitness Testing:     12.1 seconds, 19.8%
Report:               7.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: 31                 
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: -12                
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 64                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -27                
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -72                
Correct output: 43                  | Program output: 55                 
Correct output: -29                 | Program output: -29                
Correct output: -62                 | Program output: -62                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -40                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: 11                 
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: 84                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 27                 
Correct output: 18                  | Program output: 55                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 18                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -59                
Correct output: -87                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -45                
Correct output: -63                 | Program output: -63                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 2                  
Correct output: -34                 | Program output: 20                 
Correct output: -77                 | Program output: -77                
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -60                
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: -88                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: 15                 
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: 46                 
Correct output: -85                 | Program output: -82                
Correct output: -76                 | Program output: 73                 
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: 62                 
Correct output: -42                 | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 77                 
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: 22                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Lexicase best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Zero cases best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (166 711 903 705 899 713 165 165 706 705)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (166 711 903 705 899 713 165 165 706 705)
Population mean number of perfect (error zero) cases: 5.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_do*while () in1 exec_s () () ()) ())
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 42
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.162
Median total errors in population: 3
Error averages by case: (0.834 0.289 0.097 0.295 0.101 0.287 0.835 0.835 0.294 0.295)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.744
Average program size in population (points): 41.343
Average percent parens in population: 0.306
Minimum age in population: 30.3534107208252
Maximum age in population: 33.58797454833984
Average age in population: 31.97825419378281
Median age in population: 32.04213714599609
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 310
Genome diversity (% unique genomes):	 0.413
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 311
Syntactic diversity (% unique Push programs):	 0.403
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9531237
--- Timings ---
Current time: 1559583858819 milliseconds
Total Time:          63.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.2 seconds, 68.0%
Fitness Testing:     12.3 seconds, 19.4%
Report:               7.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 189
Test mean error for best: 0.18900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 61                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 34                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 50                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 35                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 43                  | Program output: 43                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -25                 | Program output: -25                
Correct output: -1                  | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 18                  | Program output: 18                 
Correct output: -17                 | Program output: -17                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -34                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: -34                
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: 30                 
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Lexicase best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in4 exec_k_when_autoconstructing (integer_min exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ())) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 51
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Zero cases best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in4 exec_k_when_autoconstructing (integer_min exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ())) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 51
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (880 609 1 480 481 482 1 635 609 1)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (880 609 1 480 481 482 1 635 609 1)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in4 exec_k_when_autoconstructing (integer_min exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ())) ()) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 34
Size: 51
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.821
Median total errors in population: 6
Error averages by case: (0.12 0.391 0.999 0.52 0.519 0.518 0.999 0.365 0.391 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.714
Average program size in population (points): 41.277
Average percent parens in population: 0.305
Minimum age in population: 31.73747825622559
Maximum age in population: 35.35009813308716
Average age in population: 33.76885135030746
Median age in population: 33.88205718994141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9797267
--- Timings ---
Current time: 1559583861203 milliseconds
Total Time:          65.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.1 seconds, 68.4%
Fitness Testing:     12.6 seconds, 19.1%
Report:               8.1 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 189
Test mean error for best: 0.18900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 61                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 34                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 50                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 35                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 43                  | Program output: 43                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -25                 | Program output: -25                
Correct output: -1                  | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 18                  | Program output: 18                 
Correct output: -17                 | Program output: -17                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -34                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: -34                
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: 30                 
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Lexicase best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in4 exec_k_when_autoconstructing (integer_min exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ())) ()) ())
Lexicase best errors: [0 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 51
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Zero cases best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in4 exec_k_when_autoconstructing (integer_min exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ())) ()) ())
Zero cases best errors: [0 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 51
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (613 691 194 862 195 774 774 195 691 774)
Population mean number of elite cases: 5.76
Count of perfect (error zero) individuals by case: (613 691 194 862 195 774 774 195 691 774)
Population mean number of perfect (error zero) cases: 5.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in4 exec_k_when_autoconstructing (integer_min exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when (integer_lte integer_swap integer_empty) exec_yankdup)) (in1 exec_s () () ())) ()) ())
Errors: [0 0 1 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 51
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.237
Median total errors in population: 3
Error averages by case: (0.387 0.309 0.806 0.138 0.805 0.226 0.226 0.805 0.309 0.226)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.122
Average program size in population (points): 48.965
Average percent parens in population: 0.322
Minimum age in population: 33.3097677230835
Maximum age in population: 36.82137107849121
Average age in population: 34.70030150401592
Median age in population: 35.00405478477478
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 444
Genome diversity (% unique genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 445
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 10099007
--- Timings ---
Current time: 1559583863663 milliseconds
Total Time:          68.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.0 seconds, 68.7%
Fitness Testing:     12.9 seconds, 18.9%
Report:               8.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 189
Test mean error for best: 0.18900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 61                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 34                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 50                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 35                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 43                  | Program output: 43                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -25                 | Program output: -25                
Correct output: -1                  | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 18                  | Program output: 18                 
Correct output: -17                 | Program output: -17                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -34                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: -34                
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: 30                 
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Lexicase best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in4 exec_k_when_autoconstructing (integer_min exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ())) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 51
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Zero cases best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in4 exec_k_when_autoconstructing (integer_min exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ())) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 51
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (527 616 405 404 618 527 415 869 616 518)
Population mean number of elite cases: 5.51
Count of perfect (error zero) individuals by case: (527 616 405 404 618 527 415 869 616 518)
Population mean number of perfect (error zero) cases: 5.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in4 exec_k_when_autoconstructing (integer_min exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ())) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 34
Size: 51
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.485
Median total errors in population: 5
Error averages by case: (0.473 0.384 0.595 0.596 0.382 0.473 0.585 0.131 0.384 0.482)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.079
Average program size in population (points): 46.203
Average percent parens in population: 0.304
Minimum age in population: 34.3097677230835
Maximum age in population: 38.24187850952148
Average age in population: 36.23289803677797
Median age in population: 36.27309596538544
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.01
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10397703
--- Timings ---
Current time: 1559583866101 milliseconds
Total Time:          70.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.9 seconds, 69.0%
Fitness Testing:     13.2 seconds, 18.7%
Report:               8.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 189
Test mean error for best: 0.18900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 61                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 41                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 34                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 50                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -85                
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: 35                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: 43                  | Program output: 43                 
Correct output: -29                 | Program output: 20                 
Correct output: -62                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -25                 | Program output: -25                
Correct output: -1                  | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: -59                
Correct output: 18                  | Program output: 18                 
Correct output: -17                 | Program output: -17                
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -34                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: 30                 
Correct output: -98                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: -34                
Correct output: -77                 | Program output: 28                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -32                
Correct output: -78                 | Program output: -78                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: 30                 
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Lexicase best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in4 exec_k_when_autoconstructing (integer_min exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ())) ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 51
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Zero cases best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in4 exec_k_when_autoconstructing (integer_min exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ())) ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 51
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (752 628 288 628 860 720 623 628 711 748)
Population mean number of elite cases: 6.59
Count of perfect (error zero) individuals by case: (752 628 288 628 860 720 623 628 711 748)
Population mean number of perfect (error zero) cases: 6.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in4 exec_k_when_autoconstructing (integer_min exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ())) ()) ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 34
Size: 51
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 3.414
Median total errors in population: 2
Error averages by case: (0.248 0.372 0.712 0.372 0.14 0.28 0.377 0.372 0.289 0.252)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.854
Average program size in population (points): 52.753
Average percent parens in population: 0.320
Minimum age in population: 36.04213714599609
Maximum age in population: 39.33103102445602
Average age in population: 37.65505212980509
Median age in population: 37.6617271900177
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.01
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 10726546
--- Timings ---
Current time: 1559583868569 milliseconds
Total Time:          73.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.8 seconds, 69.3%
Fitness Testing:     13.5 seconds, 18.5%
Report:               8.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 207
Test mean error for best: 0.20700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 61                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: -12                
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 24                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 18                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 50                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -27                
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: 43                  | Program output: 43                 
Correct output: -29                 | Program output: -29                
Correct output: -62                 | Program output: -62                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 18                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -87                
Correct output: -87                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -63                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: 20                 
Correct output: -77                 | Program output: -77                
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -34                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -50                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Lexicase best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 57
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Zero cases best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 57
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (766 765 764 874 706 375 372 766 872 876)
Population mean number of elite cases: 7.14
Count of perfect (error zero) individuals by case: (766 765 764 874 706 375 372 766 872 876)
Population mean number of perfect (error zero) cases: 7.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s})
Best program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 2.864
Median total errors in population: 2
Error averages by case: (0.234 0.235 0.236 0.126 0.294 0.625 0.628 0.234 0.128 0.124)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.628
Average program size in population (points): 53.897
Average percent parens in population: 0.321
Minimum age in population: 37.04213714599609
Maximum age in population: 40.75309926271439
Average age in population: 39.2475676741153
Median age in population: 39.29213714599609
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.009
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 11055284
--- Timings ---
Current time: 1559583871044 milliseconds
Total Time:          75.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.6 seconds, 69.5%
Fitness Testing:     13.9 seconds, 18.3%
Report:               9.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 27
Successful program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 57


Auto-simplifying with starting size: 57
step: 0
program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 500
program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 1000
program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 1500
program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 2000
program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 2500
program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 3000
program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 3500
program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 4000
program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 4500
program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 5000
program: (in3 exec_dup (exec_pop () integer_yank) tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in1 exec_k_when_autoconstructing (integer_min integer_yank) (tag_exec_20 (integer_sub boolean_pop boolean_empty) exec_k (boolean_dup_times integer_eq in2 exec_k_when_autoconstructing (integer_min integer_mult) (integer_gte) integer_add print_integer exec_do*range (boolean_dup integer_sub exec_when () integer_lte integer_swap integer_empty) exec_yankdup) (in1 exec_s () () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 207
Test mean error for best: 0.20700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 62                  | Program output: 62                 
Correct output: -69                 | Program output: -69                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -28                 | Program output: -28                
Correct output: 61                  | Program output: 61                 
Correct output: -65                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -12                 | Program output: -12                
Correct output: -55                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 32                 
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 24                  | Program output: 24                 
Correct output: 61                  | Program output: 61                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 17                  | Program output: 18                 
Correct output: 4                   | Program output: 21                 
Correct output: 32                  | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 50                  | Program output: 50                 
Correct output: 40                  | Program output: 40                 
Correct output: -85                 | Program output: -27                
Correct output: -3                  | Program output: -3                 
Correct output: -57                 | Program output: -57                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: 43                  | Program output: 43                 
Correct output: -29                 | Program output: -29                
Correct output: -62                 | Program output: -62                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -97                 | Program output: 27                 
Correct output: -25                 | Program output: 7                  
Correct output: -1                  | Program output: -1                 
Correct output: -52                 | Program output: -52                
Correct output: -59                 | Program output: 19                 
Correct output: 18                  | Program output: 18                 
Correct output: -17                 | Program output: 8                  
Correct output: -63                 | Program output: 18                 
Correct output: -58                 | Program output: -58                
Correct output: -35                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -87                
Correct output: -87                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -63                
Correct output: -3                  | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: -92                
Correct output: -34                 | Program output: 20                 
Correct output: -77                 | Program output: -77                
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -11                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -69                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -34                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -78                 | Program output: -50                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 1                  
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -20                 | Program output: -20                
;;******************************
